
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f678  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800f828  0800f828  0001f828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb00  0800fb00  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb00  0800fb00  0001fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb08  0800fb08  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb08  0800fb08  0001fb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb0c  0800fb0c  0001fb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800fb10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00007148  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007258  20007258  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a8a8  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053b5  00000000  00000000  0004a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021e8  00000000  00000000  0004fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fe8  00000000  00000000  00051f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6ba  00000000  00000000  00053f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029b20  00000000  00000000  0007e62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f22ee  00000000  00000000  000a814a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a438  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000957c  00000000  00000000  0019a488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f810 	.word	0x0800f810

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	0800f810 	.word	0x0800f810

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Ds18b20_Init>:
#endif

//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void	Ds18b20_Init(osPriority Priority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <Ds18b20_Init+0x40>)
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <Ds18b20_Init+0x44>)
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	82bb      	strh	r3, [r7, #20]
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00b ff69 	bl	800c4a8 <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <Ds18b20_Init+0x48>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	0800f828 	.word	0x0800f828
 80005e8:	080005f1 	.word	0x080005f1
 80005ec:	20000158 	.word	0x20000158

080005f0 <Task_Ds18b20>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const * argument)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80005f8:	2305      	movs	r3, #5
 80005fa:	73fb      	strb	r3, [r7, #15]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80005fc:	2208      	movs	r2, #8
 80005fe:	4968      	ldr	r1, [pc, #416]	; (80007a0 <Task_Ds18b20+0x1b0>)
 8000600:	4868      	ldr	r0, [pc, #416]	; (80007a4 <Task_Ds18b20+0x1b4>)
 8000602:	f000 fb5d 	bl	8000cc0 <OneWire_Init>
		TempSensorCount = 0;
 8000606:	4b68      	ldr	r3, [pc, #416]	; (80007a8 <Task_Ds18b20+0x1b8>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 800060c:	e002      	b.n	8000614 <Task_Ds18b20+0x24>
			Ds18b20Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f00b ff96 	bl	800c540 <osDelay>
		while(HAL_GetTick() < 3000)
 8000614:	f002 fefe 	bl	8003414 <HAL_GetTick>
 8000618:	4603      	mov	r3, r0
 800061a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800061e:	4293      	cmp	r3, r2
 8000620:	d9f5      	bls.n	800060e <Task_Ds18b20+0x1e>
		OneWireDevices = OneWire_First(&OneWire);
 8000622:	4860      	ldr	r0, [pc, #384]	; (80007a4 <Task_Ds18b20+0x1b4>)
 8000624:	f000 fc3f 	bl	8000ea6 <OneWire_First>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <Task_Ds18b20+0x1bc>)
 800062e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8000630:	e019      	b.n	8000666 <Task_Ds18b20+0x76>
		{
			Ds18b20Delay(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f00b ff84 	bl	800c540 <osDelay>
			TempSensorCount++;
 8000638:	4b5b      	ldr	r3, [pc, #364]	; (80007a8 <Task_Ds18b20+0x1b8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b59      	ldr	r3, [pc, #356]	; (80007a8 <Task_Ds18b20+0x1b8>)
 8000642:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8000644:	4b58      	ldr	r3, [pc, #352]	; (80007a8 <Task_Ds18b20+0x1b8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4a58      	ldr	r2, [pc, #352]	; (80007b0 <Task_Ds18b20+0x1c0>)
 800064e:	4413      	add	r3, r2
 8000650:	4619      	mov	r1, r3
 8000652:	4854      	ldr	r0, [pc, #336]	; (80007a4 <Task_Ds18b20+0x1b4>)
 8000654:	f000 fd3c 	bl	80010d0 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8000658:	4852      	ldr	r0, [pc, #328]	; (80007a4 <Task_Ds18b20+0x1b4>)
 800065a:	f000 fc34 	bl	8000ec6 <OneWire_Next>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b52      	ldr	r3, [pc, #328]	; (80007ac <Task_Ds18b20+0x1bc>)
 8000664:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8000666:	4b51      	ldr	r3, [pc, #324]	; (80007ac <Task_Ds18b20+0x1bc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1e1      	bne.n	8000632 <Task_Ds18b20+0x42>
		}
		if(TempSensorCount>0)
 800066e:	4b4e      	ldr	r3, [pc, #312]	; (80007a8 <Task_Ds18b20+0x1b8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d106      	bne.n	8000684 <Task_Ds18b20+0x94>
			break;
		Ds18b20TryToFind--;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3b01      	subs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1bc      	bne.n	80005fc <Task_Ds18b20+0xc>
 8000682:	e000      	b.n	8000686 <Task_Ds18b20+0x96>
			break;
 8000684:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <Task_Ds18b20+0xa6>
		vTaskDelete(Ds18b20Handle);
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <Task_Ds18b20+0x1c4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f00d f881 	bl	800d798 <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	73bb      	strb	r3, [r7, #14]
 800069a:	e019      	b.n	80006d0 <Task_Ds18b20+0xe0>
	{
		Ds18b20Delay(50);
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f00b ff4f 	bl	800c540 <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4a42      	ldr	r2, [pc, #264]	; (80007b0 <Task_Ds18b20+0x1c0>)
 80006a8:	4413      	add	r3, r2
 80006aa:	220c      	movs	r2, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	483d      	ldr	r0, [pc, #244]	; (80007a4 <Task_Ds18b20+0x1b4>)
 80006b0:	f000 f99a 	bl	80009e8 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 80006b4:	2032      	movs	r0, #50	; 0x32
 80006b6:	f00b ff43 	bl	800c540 <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	4a3c      	ldr	r2, [pc, #240]	; (80007b0 <Task_Ds18b20+0x1c0>)
 80006c0:	4413      	add	r3, r2
 80006c2:	4619      	mov	r1, r3
 80006c4:	4837      	ldr	r0, [pc, #220]	; (80007a4 <Task_Ds18b20+0x1b4>)
 80006c6:	f000 fa28 	bl	8000b1a <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	3301      	adds	r3, #1
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <Task_Ds18b20+0x1b8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	7bba      	ldrb	r2, [r7, #14]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3e0      	bcc.n	800069c <Task_Ds18b20+0xac>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 80006da:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <Task_Ds18b20+0x1c8>)
 80006de:	2232      	movs	r2, #50	; 0x32
 80006e0:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 80006e2:	4830      	ldr	r0, [pc, #192]	; (80007a4 <Task_Ds18b20+0x1b4>)
 80006e4:	f000 f86c 	bl	80007c0 <DS18B20_StartAll>
		osDelay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f00b ff29 	bl	800c540 <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 80006ee:	e00c      	b.n	800070a <Task_Ds18b20+0x11a>
		{
			osDelay(10);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f00b ff25 	bl	800c540 <osDelay>
			Ds18b20Timeout-=1;
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <Task_Ds18b20+0x1c8>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <Task_Ds18b20+0x1c8>)
 8000700:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <Task_Ds18b20+0x1c8>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <Task_Ds18b20+0x128>
    while (!DS18B20_AllDone(&OneWire))
 800070a:	4826      	ldr	r0, [pc, #152]	; (80007a4 <Task_Ds18b20+0x1b4>)
 800070c:	f000 fa60 	bl	8000bd0 <DS18B20_AllDone>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0ec      	beq.n	80006f0 <Task_Ds18b20+0x100>
 8000716:	e000      	b.n	800071a <Task_Ds18b20+0x12a>
				break;
 8000718:	bf00      	nop
		}
		if(Ds18b20Timeout>0)
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <Task_Ds18b20+0x1c8>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d025      	beq.n	800076e <Task_Ds18b20+0x17e>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	737b      	strb	r3, [r7, #13]
 8000726:	e01c      	b.n	8000762 <Task_Ds18b20+0x172>
			{
				Ds18b20Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f00b ff08 	bl	800c540 <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000730:	7b7b      	ldrb	r3, [r7, #13]
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <Task_Ds18b20+0x1c0>)
 8000736:	1899      	adds	r1, r3, r2
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	3308      	adds	r3, #8
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <Task_Ds18b20+0x1c0>)
 8000740:	4413      	add	r3, r2
 8000742:	7b7c      	ldrb	r4, [r7, #13]
 8000744:	461a      	mov	r2, r3
 8000746:	4817      	ldr	r0, [pc, #92]	; (80007a4 <Task_Ds18b20+0x1b4>)
 8000748:	f000 f84e 	bl	80007e8 <DS18B20_Read>
 800074c:	4603      	mov	r3, r0
 800074e:	4619      	mov	r1, r3
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <Task_Ds18b20+0x1c0>)
 8000752:	0123      	lsls	r3, r4, #4
 8000754:	4413      	add	r3, r2
 8000756:	330c      	adds	r3, #12
 8000758:	460a      	mov	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800075c:	7b7b      	ldrb	r3, [r7, #13]
 800075e:	3301      	adds	r3, #1
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <Task_Ds18b20+0x1b8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	7b7a      	ldrb	r2, [r7, #13]
 8000768:	429a      	cmp	r2, r3
 800076a:	d3dd      	bcc.n	8000728 <Task_Ds18b20+0x138>
 800076c:	e011      	b.n	8000792 <Task_Ds18b20+0x1a2>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	733b      	strb	r3, [r7, #12]
 8000772:	e009      	b.n	8000788 <Task_Ds18b20+0x198>
				ds18b20[i].DataIsValid = false;
 8000774:	7b3b      	ldrb	r3, [r7, #12]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <Task_Ds18b20+0x1c0>)
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	4413      	add	r3, r2
 800077c:	330c      	adds	r3, #12
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8000782:	7b3b      	ldrb	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	733b      	strb	r3, [r7, #12]
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <Task_Ds18b20+0x1b8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	7b3a      	ldrb	r2, [r7, #12]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3f0      	bcc.n	8000774 <Task_Ds18b20+0x184>
		}
		Ds18b20StartConvert=0;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <Task_Ds18b20+0x1cc>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f00b fed1 	bl	800c540 <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 800079e:	e79c      	b.n	80006da <Task_Ds18b20+0xea>
 80007a0:	40020000 	.word	0x40020000
 80007a4:	2000013c 	.word	0x2000013c
 80007a8:	20000151 	.word	0x20000151
 80007ac:	20000150 	.word	0x20000150
 80007b0:	2000012c 	.word	0x2000012c
 80007b4:	20000158 	.word	0x20000158
 80007b8:	20000154 	.word	0x20000154
 80007bc:	20000152 	.word	0x20000152

080007c0 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 faa7 	bl	8000d1c <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 80007ce:	21cc      	movs	r1, #204	; 0xcc
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 fb29 	bl	8000e28 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80007d6:	2144      	movs	r1, #68	; 0x44
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fb25 	bl	8000e28 <OneWire_WriteByte>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	f000 f97a 	bl	8000af8 <DS18B20_Is>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <DS18B20_Read+0x26>
		return false;
 800080a:	2300      	movs	r3, #0
 800080c:	e0e1      	b.n	80009d2 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 fae0 	bl	8000dd4 <OneWire_ReadBit>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 800081a:	2300      	movs	r3, #0
 800081c:	e0d9      	b.n	80009d2 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 fa7c 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f000 fc33 	bl	8001092 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800082c:	21be      	movs	r1, #190	; 0xbe
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f000 fafa 	bl	8000e28 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	77fb      	strb	r3, [r7, #31]
 8000838:	e00d      	b.n	8000856 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 800083a:	7ffc      	ldrb	r4, [r7, #31]
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f000 fb11 	bl	8000e64 <OneWire_ReadByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800084a:	443b      	add	r3, r7
 800084c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8000850:	7ffb      	ldrb	r3, [r7, #31]
 8000852:	3301      	adds	r3, #1
 8000854:	77fb      	strb	r3, [r7, #31]
 8000856:	7ffb      	ldrb	r3, [r7, #31]
 8000858:	2b08      	cmp	r3, #8
 800085a:	d9ee      	bls.n	800083a <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2108      	movs	r1, #8
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fc51 	bl	800110a <OneWire_CRC8>
 8000868:	4603      	mov	r3, r0
 800086a:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 800086c:	7f3b      	ldrb	r3, [r7, #28]
 800086e:	7fba      	ldrb	r2, [r7, #30]
 8000870:	429a      	cmp	r2, r3
 8000872:	d001      	beq.n	8000878 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8000874:	2300      	movs	r3, #0
 8000876:	e0ac      	b.n	80009d2 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8000878:	7d3b      	ldrb	r3, [r7, #20]
 800087a:	b21a      	sxth	r2, r3
 800087c:	7d7b      	ldrb	r3, [r7, #21]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 fa47 	bl	8000d1c <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800088e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000892:	2b00      	cmp	r3, #0
 8000894:	da05      	bge.n	80008a2 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8000896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000898:	425b      	negs	r3, r3
 800089a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80008a2:	7e3b      	ldrb	r3, [r7, #24]
 80008a4:	115b      	asrs	r3, r3, #5
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3309      	adds	r3, #9
 80008b0:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80008b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80008bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008d0:	4313      	orrs	r3, r2
 80008d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 80008d6:	7f7b      	ldrb	r3, [r7, #29]
 80008d8:	3b09      	subs	r3, #9
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d858      	bhi.n	8000990 <DS18B20_Read+0x1a8>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <DS18B20_Read+0xfc>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	080008f5 	.word	0x080008f5
 80008e8:	0800091d 	.word	0x0800091d
 80008ec:	08000945 	.word	0x08000945
 80008f0:	0800096d 	.word	0x0800096d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80008f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000906:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 800090a:	edd7 7a08 	vldr	s15, [r7, #32]
 800090e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000916:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 800091a:	e03e      	b.n	800099a <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 800091c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	b29b      	uxth	r3, r3
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000932:	edd7 7a08 	vldr	s15, [r7, #32]
 8000936:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800093a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800093e:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8000942:	e02a      	b.n	800099a <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8000944:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000946:	085b      	lsrs	r3, r3, #1
 8000948:	b29b      	uxth	r3, r3
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	ee07 3a90 	vmov	s15, r3
 8000952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000956:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800095a:	edd7 7a08 	vldr	s15, [r7, #32]
 800095e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000966:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 800096a:	e016      	b.n	800099a <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 800096c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800097e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000982:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80009dc <DS18B20_Read+0x1f4>
 8000986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098a:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 800098e:	e004      	b.n	800099a <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <DS18B20_Read+0x1f8>)
 8000992:	623b      	str	r3, [r7, #32]
			digit = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 800099a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80009aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ae:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 80009b2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 80009ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80009e4 <DS18B20_Read+0x1fc>
 80009be:	edd7 7a08 	vldr	s15, [r7, #32]
 80009c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c6:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a3a      	ldr	r2, [r7, #32]
 80009ce:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	372c      	adds	r7, #44	; 0x2c
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	bf00      	nop
 80009dc:	3d800000 	.word	0x3d800000
 80009e0:	437f0000 	.word	0x437f0000
 80009e4:	00000000 	.word	0x00000000

080009e8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	4613      	mov	r3, r2
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 80009f6:	68b8      	ldr	r0, [r7, #8]
 80009f8:	f000 f87e 	bl	8000af8 <DS18B20_Is>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <DS18B20_SetResolution+0x1e>
		return 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e074      	b.n	8000af0 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f000 f988 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 fb3f 	bl	8001092 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a14:	21be      	movs	r1, #190	; 0xbe
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 fa06 	bl	8000e28 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 fa21 	bl	8000e64 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 fa1e 	bl	8000e64 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 fa1b 	bl	8000e64 <OneWire_ReadByte>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f000 fa16 	bl	8000e64 <OneWire_ReadByte>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 fa11 	bl	8000e64 <OneWire_ReadByte>
 8000a42:	4603      	mov	r3, r0
 8000a44:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d108      	bne.n	8000a5e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a52:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	f023 0320 	bic.w	r3, r3, #32
 8000a5a:	75fb      	strb	r3, [r7, #23]
 8000a5c:	e022      	b.n	8000aa4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b0a      	cmp	r3, #10
 8000a62:	d108      	bne.n	8000a76 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a6a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	f043 0320 	orr.w	r3, r3, #32
 8000a72:	75fb      	strb	r3, [r7, #23]
 8000a74:	e016      	b.n	8000aa4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b0b      	cmp	r3, #11
 8000a7a:	d108      	bne.n	8000a8e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	f023 0320 	bic.w	r3, r3, #32
 8000a8a:	75fb      	strb	r3, [r7, #23]
 8000a8c:	e00a      	b.n	8000aa4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b0c      	cmp	r3, #12
 8000a92:	d107      	bne.n	8000aa4 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	f043 0320 	orr.w	r3, r3, #32
 8000aa2:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f000 f939 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 faf0 	bl	8001092 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000ab2:	214e      	movs	r1, #78	; 0x4e
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f000 f9b7 	bl	8000e28 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000aba:	7dbb      	ldrb	r3, [r7, #22]
 8000abc:	4619      	mov	r1, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f9b2 	bl	8000e28 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000ac4:	7d7b      	ldrb	r3, [r7, #21]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f000 f9ad 	bl	8000e28 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 f9a8 	bl	8000e28 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 f91f 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 fad6 	bl	8001092 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000ae6:	2148      	movs	r1, #72	; 0x48
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f99d 	bl	8000e28 <OneWire_WriteByte>

	return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b28      	cmp	r3, #40	; 0x28
 8000b06:	d101      	bne.n	8000b0c <DS18B20_Is+0x14>
		return 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <DS18B20_Is+0x16>

	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f7ff ffe7 	bl	8000af8 <DS18B20_Is>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e049      	b.n	8000bc8 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f8f1 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b3a:	6839      	ldr	r1, [r7, #0]
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 faa8 	bl	8001092 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000b42:	21be      	movs	r1, #190	; 0xbe
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f96f 	bl	8000e28 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f98a 	bl	8000e64 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f987 	bl	8000e64 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f984 	bl	8000e64 <OneWire_ReadByte>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f97f 	bl	8000e64 <OneWire_ReadByte>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f97a 	bl	8000e64 <OneWire_ReadByte>
 8000b70:	4603      	mov	r3, r0
 8000b72:	737b      	strb	r3, [r7, #13]

	th = 125;
 8000b74:	237d      	movs	r3, #125	; 0x7d
 8000b76:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000b78:	23c9      	movs	r3, #201	; 0xc9
 8000b7a:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f8cd 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 fa84 	bl	8001092 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000b8a:	214e      	movs	r1, #78	; 0x4e
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f94b 	bl	8000e28 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f946 	bl	8000e28 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f941 	bl	8000e28 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000ba6:	7b7b      	ldrb	r3, [r7, #13]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f93c 	bl	8000e28 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f8b3 	bl	8000d1c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa6a 	bl	8001092 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000bbe:	2148      	movs	r1, #72	; 0x48
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f931 	bl	8000e28 <OneWire_WriteByte>

	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f8fb 	bl	8000dd4 <OneWire_ReadBit>
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <ONEWIRE_DELAY+0x30>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000bfa:	bf00      	nop
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <ONEWIRE_DELAY+0x30>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d9f9      	bls.n	8000bfc <ONEWIRE_DELAY+0x14>
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200008b0 	.word	0x200008b0

08000c1c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	619a      	str	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	889a      	ldrh	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	619a      	str	r2, [r3, #24]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	889b      	ldrh	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f107 020c 	add.w	r2, r7, #12
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fc10 	bl	80044a4 <HAL_GPIO_Init>
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	889b      	ldrh	r3, [r3, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f107 020c 	add.w	r2, r7, #12
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fbf7 	bl	80044a4 <HAL_GPIO_Init>

}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <OneWire_Init+0x58>)
 8000cd0:	f005 ff1c 	bl	8006b0c <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	88fa      	ldrh	r2, [r7, #6]
 8000cde:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f7ff ffd3 	bl	8000c8c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff ffa8 	bl	8000c3c <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f002 fb9c 	bl	800342c <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff ff91 	bl	8000c1c <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfe:	f002 fb95 	bl	800342c <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff ff9a 	bl	8000c3c <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000d08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d0c:	f002 fb8e 	bl	800342c <HAL_Delay>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200008b0 	.word	0x200008b0

08000d1c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff79 	bl	8000c1c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffae 	bl	8000c8c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8000d30:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000d34:	f7ff ff58 	bl	8000be8 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000d38:	2014      	movs	r0, #20
 8000d3a:	f7ff ff55 	bl	8000be8 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff8b 	bl	8000c5a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000d44:	2046      	movs	r0, #70	; 0x46
 8000d46:	f7ff ff4f 	bl	8000be8 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	889b      	ldrh	r3, [r3, #4]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f003 fd51 	bl	80047fc <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000d5e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000d62:	f7ff ff41 	bl	8000be8 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d012      	beq.n	8000da8 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ff4a 	bl	8000c1c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff7f 	bl	8000c8c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f7ff ff2a 	bl	8000be8 <ONEWIRE_DELAY>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff60 	bl	8000c5a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8000d9a:	2037      	movs	r0, #55	; 0x37
 8000d9c:	f7ff ff24 	bl	8000be8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff5a 	bl	8000c5a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8000da6:	e011      	b.n	8000dcc <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff37 	bl	8000c1c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff6c 	bl	8000c8c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8000db4:	2041      	movs	r0, #65	; 0x41
 8000db6:	f7ff ff17 	bl	8000be8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff4d 	bl	8000c5a <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8000dc0:	2005      	movs	r0, #5
 8000dc2:	f7ff ff11 	bl	8000be8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff47 	bl	8000c5a <ONEWIRE_INPUT>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff1b 	bl	8000c1c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff50 	bl	8000c8c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f7ff fefb 	bl	8000be8 <ONEWIRE_DELAY>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff31 	bl	8000c5a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f7ff fef5 	bl	8000be8 <ONEWIRE_DELAY>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	889b      	ldrh	r3, [r3, #4]
 8000e06:	4619      	mov	r1, r3
 8000e08:	4610      	mov	r0, r2
 8000e0a:	f003 fcf7 	bl	80047fc <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8000e18:	2032      	movs	r0, #50	; 0x32
 8000e1a:	f7ff fee5 	bl	8000be8 <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8000e34:	2308      	movs	r3, #8
 8000e36:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8000e38:	e00a      	b.n	8000e50 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff93 	bl	8000d70 <OneWire_WriteBit>
		byte >>= 1;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	73fa      	strb	r2, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1ef      	bne.n	8000e3a <OneWire_WriteByte+0x12>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	2300      	movs	r3, #0
 8000e72:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000e74:	e00d      	b.n	8000e92 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffa9 	bl	8000dd4 <OneWire_ReadBit>
 8000e82:	4603      	mov	r3, r0
 8000e84:	01db      	lsls	r3, r3, #7
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	73fa      	strb	r2, [r7, #15]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1ec      	bne.n	8000e76 <OneWire_ReadByte+0x12>
	}

	return byte;
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f816 	bl	8000ee0 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000eb4:	21f0      	movs	r1, #240	; 0xf0
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f825 	bl	8000f06 <OneWire_Search>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000ece:	21f0      	movs	r1, #240	; 0xf0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f818 	bl	8000f06 <OneWire_Search>
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	71da      	strb	r2, [r3, #7]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1b      	ldrb	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f040 809a 	bne.w	8001064 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fef3 	bl	8000d1c <OneWire_Reset>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00a      	beq.n	8000f52 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	71da      	strb	r2, [r3, #7]
			return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e09b      	b.n	800108a <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff66 	bl	8000e28 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff39 	bl	8000dd4 <OneWire_ReadBit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff34 	bl	8000dd4 <OneWire_ReadBit>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000f70:	7a7b      	ldrb	r3, [r7, #9]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <OneWire_Search+0x76>
 8000f76:	7a3b      	ldrb	r3, [r7, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d064      	beq.n	8001046 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000f7c:	7a7a      	ldrb	r2, [r7, #9]
 8000f7e:	7a3b      	ldrb	r3, [r7, #8]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d002      	beq.n	8000f8a <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8000f84:	7a7b      	ldrb	r3, [r7, #9]
 8000f86:	72bb      	strb	r3, [r7, #10]
 8000f88:	e026      	b.n	8000fd8 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d20d      	bcs.n	8000fb0 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	7a5a      	ldrb	r2, [r3, #9]
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
 8000fae:	e008      	b.n	8000fc2 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	799b      	ldrb	r3, [r3, #6]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8000fc2:	7abb      	ldrb	r3, [r7, #10]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d802      	bhi.n	8000fd8 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7bba      	ldrb	r2, [r7, #14]
 8000fd6:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8000fd8:	7abb      	ldrb	r3, [r7, #10]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10c      	bne.n	8000ff8 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	7a59      	ldrb	r1, [r3, #9]
 8000fe6:	7b7b      	ldrb	r3, [r7, #13]
 8000fe8:	7afa      	ldrb	r2, [r7, #11]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	725a      	strb	r2, [r3, #9]
 8000ff6:	e010      	b.n	800101a <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	7a5b      	ldrb	r3, [r3, #9]
 8001000:	b25a      	sxtb	r2, r3
 8001002:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001006:	43db      	mvns	r3, r3
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4013      	ands	r3, r2
 800100c:	b25a      	sxtb	r2, r3
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	b2d1      	uxtb	r1, r2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	460a      	mov	r2, r1
 8001018:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fea6 	bl	8000d70 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d104      	bne.n	8001040 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	3301      	adds	r3, #1
 800103a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	2b07      	cmp	r3, #7
 8001044:	d98a      	bls.n	8000f5c <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b40      	cmp	r3, #64	; 0x40
 800104a:	d90b      	bls.n	8001064 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7bba      	ldrb	r2, [r7, #14]
 8001050:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	799b      	ldrb	r3, [r3, #6]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <OneWire_Search+0x16c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7a5b      	ldrb	r3, [r3, #9]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10a      	bne.n	8001088 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001088:	7b3b      	ldrb	r3, [r7, #12]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800109c:	2155      	movs	r1, #85	; 0x55
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fec2 	bl	8000e28 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e00a      	b.n	80010c0 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff feb7 	bl	8000e28 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d9f1      	bls.n	80010aa <OneWire_SelectWithPointer+0x18>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e00a      	b.n	80010f6 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	440b      	add	r3, r1
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	440a      	add	r2, r1
 80010ec:	7a52      	ldrb	r2, [r2, #9]
 80010ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	3301      	adds	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d9f1      	bls.n	80010e0 <OneWire_GetFullROM+0x10>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 800111a:	e022      	b.n	8001162 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001126:	2308      	movs	r3, #8
 8001128:	737b      	strb	r3, [r7, #13]
 800112a:	e017      	b.n	800115c <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	4053      	eors	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800114c:	43db      	mvns	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	085b      	lsrs	r3, r3, #1
 8001154:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001156:	7b7b      	ldrb	r3, [r7, #13]
 8001158:	3b01      	subs	r3, #1
 800115a:	737b      	strb	r3, [r7, #13]
 800115c:	7b7b      	ldrb	r3, [r7, #13]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e4      	bne.n	800112c <OneWire_CRC8+0x22>
	while (len--) {
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	70fa      	strb	r2, [r7, #3]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1d7      	bne.n	800111c <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <SELECT+0x14>)
 8001186:	f003 fb51 	bl	800482c <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DESELECT+0x14>)
 800119e:	f003 fb45 	bl	800482c <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020000 	.word	0x40020000

080011ac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011b6:	bf00      	nop
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <SPI_TxByte+0x30>)
 80011ba:	f005 fb7e 	bl	80068ba <HAL_SPI_GetState>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1f9      	bne.n	80011b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1,1000);
 80011c4:	1df9      	adds	r1, r7, #7
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	2201      	movs	r2, #1
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <SPI_TxByte+0x30>)
 80011ce:	f005 f896 	bl	80062fe <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000750 	.word	0x20000750

080011e0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80011e6:	23ff      	movs	r3, #255	; 0xff
 80011e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80011ee:	bf00      	nop
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <SPI_RxByte+0x38>)
 80011f2:	f005 fb62 	bl	80068ba <HAL_SPI_GetState>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1f9      	bne.n	80011f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1,1000);
 80011fc:	1dba      	adds	r2, r7, #6
 80011fe:	1df9      	adds	r1, r7, #7
 8001200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <SPI_RxByte+0x38>)
 800120a:	f005 f9b4 	bl	8006576 <HAL_SPI_TransmitReceive>
//  HAL_SPI_TransmitReceive_DMA(&hspi1, &dummy, &data, 1);
  return data;
 800120e:	79bb      	ldrb	r3, [r7, #6]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000750 	.word	0x20000750

0800121c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001224:	f7ff ffdc 	bl	80011e0 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <SD_ReadyWait+0x34>)
 8001240:	2232      	movs	r2, #50	; 0x32
 8001242:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001244:	f7ff ffcc 	bl	80011e0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001248:	f7ff ffca 	bl	80011e0 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d004      	beq.n	8001260 <SD_ReadyWait+0x28>
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <SD_ReadyWait+0x34>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f3      	bne.n	8001248 <SD_ReadyWait+0x10>

  return res;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000346d 	.word	0x2000346d

08001270 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001276:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800127a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800127c:	f7ff ff8a 	bl	8001194 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	e005      	b.n	8001292 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001286:	20ff      	movs	r0, #255	; 0xff
 8001288:	f7ff ff90 	bl	80011ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3301      	adds	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b09      	cmp	r3, #9
 8001296:	ddf6      	ble.n	8001286 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001298:	f7ff ff70 	bl	800117c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800129c:	2340      	movs	r3, #64	; 0x40
 800129e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80012b0:	2395      	movs	r3, #149	; 0x95
 80012b2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e009      	b.n	80012ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80012ba:	1d3a      	adds	r2, r7, #4
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff72 	bl	80011ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	ddf2      	ble.n	80012ba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80012d4:	e002      	b.n	80012dc <SD_PowerOn+0x6c>
  {
    Count--;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3b01      	subs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80012dc:	f7ff ff80 	bl	80011e0 <SPI_RxByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d002      	beq.n	80012ec <SD_PowerOn+0x7c>
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f4      	bne.n	80012d6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80012ec:	f7ff ff52 	bl	8001194 <DESELECT>
  SPI_TxByte(0XFF);
 80012f0:	20ff      	movs	r0, #255	; 0xff
 80012f2:	f7ff ff5b 	bl	80011ac <SPI_TxByte>

  PowerFlag = 1;
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <SD_PowerOn+0x94>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000015d 	.word	0x2000015d

08001308 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <SD_PowerOff+0x14>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	2000015d 	.word	0x2000015d

08001320 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <SD_CheckPower+0x14>)
 8001326:	781b      	ldrb	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000015d 	.word	0x2000015d

08001338 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <SD_RxDataBlock+0x68>)
 8001344:	220a      	movs	r2, #10
 8001346:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001348:	f7ff ff4a 	bl	80011e0 <SPI_RxByte>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d104      	bne.n	8001360 <SD_RxDataBlock+0x28>
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <SD_RxDataBlock+0x68>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f3      	bne.n	8001348 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2bfe      	cmp	r3, #254	; 0xfe
 8001364:	d001      	beq.n	800136a <SD_RxDataBlock+0x32>
    return FALSE;
 8001366:	2300      	movs	r3, #0
 8001368:	e016      	b.n	8001398 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff53 	bl	800121c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff4d 	bl	800121c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3b02      	subs	r3, #2
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ed      	bne.n	800136a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800138e:	f7ff ff27 	bl	80011e0 <SPI_RxByte>
  SPI_RxByte();
 8001392:	f7ff ff25 	bl	80011e0 <SPI_RxByte>

  return TRUE;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000346c 	.word	0x2000346c

080013a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80013b4:	f7ff ff40 	bl	8001238 <SD_ReadyWait>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d001      	beq.n	80013c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80013be:	2300      	movs	r3, #0
 80013c0:	e040      	b.n	8001444 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fef1 	bl	80011ac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2bfd      	cmp	r3, #253	; 0xfd
 80013ce:	d031      	beq.n	8001434 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fee5 	bl	80011ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fede 	bl	80011ac <SPI_TxByte>
    } while (--wc);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1eb      	bne.n	80013d4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80013fc:	f7ff fef0 	bl	80011e0 <SPI_RxByte>
    SPI_RxByte();
 8001400:	f7ff feee 	bl	80011e0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001404:	e00b      	b.n	800141e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001406:	f7ff feeb 	bl	80011e0 <SPI_RxByte>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2b05      	cmp	r3, #5
 8001416:	d006      	beq.n	8001426 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	3301      	adds	r3, #1
 800141c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	d9f0      	bls.n	8001406 <SD_TxDataBlock+0x62>
 8001424:	e000      	b.n	8001428 <SD_TxDataBlock+0x84>
        break;
 8001426:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001428:	bf00      	nop
 800142a:	f7ff fed9 	bl	80011e0 <SPI_RxByte>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0fa      	beq.n	800142a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2b05      	cmp	r3, #5
 800143c:	d101      	bne.n	8001442 <SD_TxDataBlock+0x9e>
    return TRUE;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001458:	f7ff feee 	bl	8001238 <SD_ReadyWait>
 800145c:	4603      	mov	r3, r0
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d001      	beq.n	8001466 <SD_SendCmd+0x1a>
    return 0xFF;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	e040      	b.n	80014e8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe9f 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	0e1b      	lsrs	r3, r3, #24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe99 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe93 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe8d 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe88 	bl	80011ac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b40      	cmp	r3, #64	; 0x40
 80014a4:	d101      	bne.n	80014aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80014a6:	2395      	movs	r3, #149	; 0x95
 80014a8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b48      	cmp	r3, #72	; 0x48
 80014ae:	d101      	bne.n	80014b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80014b0:	2387      	movs	r3, #135	; 0x87
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe78 	bl	80011ac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b4c      	cmp	r3, #76	; 0x4c
 80014c0:	d101      	bne.n	80014c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80014c2:	f7ff fe8d 	bl	80011e0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80014c6:	230a      	movs	r3, #10
 80014c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80014ca:	f7ff fe89 	bl	80011e0 <SPI_RxByte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80014d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da05      	bge.n	80014e6 <SD_SendCmd+0x9a>
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	3b01      	subs	r3, #1
 80014de:	73bb      	strb	r3, [r7, #14]
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f1      	bne.n	80014ca <SD_SendCmd+0x7e>

  return res;
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001500:	2301      	movs	r3, #1
 8001502:	e0d5      	b.n	80016b0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001504:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <SD_disk_initialize+0x1c8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <SD_disk_initialize+0x2a>
    return Stat;
 8001512:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <SD_disk_initialize+0x1c8>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	e0ca      	b.n	80016b0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800151a:	f7ff fea9 	bl	8001270 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800151e:	f7ff fe2d 	bl	800117c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001526:	2100      	movs	r1, #0
 8001528:	2040      	movs	r0, #64	; 0x40
 800152a:	f7ff ff8f 	bl	800144c <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 80a5 	bne.w	8001680 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001536:	4b61      	ldr	r3, [pc, #388]	; (80016bc <SD_disk_initialize+0x1cc>)
 8001538:	2264      	movs	r2, #100	; 0x64
 800153a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800153c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001540:	2048      	movs	r0, #72	; 0x48
 8001542:	f7ff ff83 	bl	800144c <SD_SendCmd>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d158      	bne.n	80015fe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e00c      	b.n	800156c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001552:	7bfc      	ldrb	r4, [r7, #15]
 8001554:	f7ff fe44 	bl	80011e0 <SPI_RxByte>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	f104 0310 	add.w	r3, r4, #16
 8001560:	443b      	add	r3, r7
 8001562:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	3301      	adds	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d9ef      	bls.n	8001552 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001572:	7abb      	ldrb	r3, [r7, #10]
 8001574:	2b01      	cmp	r3, #1
 8001576:	f040 8083 	bne.w	8001680 <SD_disk_initialize+0x190>
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	2baa      	cmp	r3, #170	; 0xaa
 800157e:	d17f      	bne.n	8001680 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001580:	2100      	movs	r1, #0
 8001582:	2077      	movs	r0, #119	; 0x77
 8001584:	f7ff ff62 	bl	800144c <SD_SendCmd>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d807      	bhi.n	800159e <SD_disk_initialize+0xae>
 800158e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001592:	2069      	movs	r0, #105	; 0x69
 8001594:	f7ff ff5a 	bl	800144c <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <SD_disk_initialize+0x1cc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1eb      	bne.n	8001580 <SD_disk_initialize+0x90>
 80015a8:	e000      	b.n	80015ac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80015aa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <SD_disk_initialize+0x1cc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d064      	beq.n	8001680 <SD_disk_initialize+0x190>
 80015b6:	2100      	movs	r1, #0
 80015b8:	207a      	movs	r0, #122	; 0x7a
 80015ba:	f7ff ff47 	bl	800144c <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d15d      	bne.n	8001680 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e00c      	b.n	80015e4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80015ca:	7bfc      	ldrb	r4, [r7, #15]
 80015cc:	f7ff fe08 	bl	80011e0 <SPI_RxByte>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	f104 0310 	add.w	r3, r4, #16
 80015d8:	443b      	add	r3, r7
 80015da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d9ef      	bls.n	80015ca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SD_disk_initialize+0x108>
 80015f4:	2306      	movs	r3, #6
 80015f6:	e000      	b.n	80015fa <SD_disk_initialize+0x10a>
 80015f8:	2302      	movs	r3, #2
 80015fa:	73bb      	strb	r3, [r7, #14]
 80015fc:	e040      	b.n	8001680 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80015fe:	2100      	movs	r1, #0
 8001600:	2077      	movs	r0, #119	; 0x77
 8001602:	f7ff ff23 	bl	800144c <SD_SendCmd>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d808      	bhi.n	800161e <SD_disk_initialize+0x12e>
 800160c:	2100      	movs	r1, #0
 800160e:	2069      	movs	r0, #105	; 0x69
 8001610:	f7ff ff1c 	bl	800144c <SD_SendCmd>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d801      	bhi.n	800161e <SD_disk_initialize+0x12e>
 800161a:	2302      	movs	r3, #2
 800161c:	e000      	b.n	8001620 <SD_disk_initialize+0x130>
 800161e:	2301      	movs	r3, #1
 8001620:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d10e      	bne.n	8001646 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001628:	2100      	movs	r1, #0
 800162a:	2077      	movs	r0, #119	; 0x77
 800162c:	f7ff ff0e 	bl	800144c <SD_SendCmd>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d80e      	bhi.n	8001654 <SD_disk_initialize+0x164>
 8001636:	2100      	movs	r1, #0
 8001638:	2069      	movs	r0, #105	; 0x69
 800163a:	f7ff ff07 	bl	800144c <SD_SendCmd>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001644:	e00d      	b.n	8001662 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001646:	2100      	movs	r1, #0
 8001648:	2041      	movs	r0, #65	; 0x41
 800164a:	f7ff feff 	bl	800144c <SD_SendCmd>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <SD_disk_initialize+0x1cc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e1      	bne.n	8001622 <SD_disk_initialize+0x132>
 800165e:	e000      	b.n	8001662 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001660:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <SD_disk_initialize+0x1cc>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <SD_disk_initialize+0x18c>
 800166c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001670:	2050      	movs	r0, #80	; 0x50
 8001672:	f7ff feeb 	bl	800144c <SD_SendCmd>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <SD_disk_initialize+0x1d0>)
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001686:	f7ff fd85 	bl	8001194 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800168a:	f7ff fda9 	bl	80011e0 <SPI_RxByte>

  if (type)
 800168e:	7bbb      	ldrb	r3, [r7, #14]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SD_disk_initialize+0x1c8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SD_disk_initialize+0x1c8>)
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e001      	b.n	80016aa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016a6:	f7ff fe2f 	bl	8001308 <SD_PowerOff>
  }

  return Stat;
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <SD_disk_initialize+0x1c8>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000346c 	.word	0x2000346c
 80016c0:	2000015c 	.word	0x2000015c

080016c4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e002      	b.n	80016de <SD_disk_status+0x1a>

  return Stat;
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SD_disk_status+0x28>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000

080016f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <SD_disk_read+0x1c>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <SD_disk_read+0x20>
    return RES_PARERR;
 800170c:	2304      	movs	r3, #4
 800170e:	e051      	b.n	80017b4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <SD_disk_read+0xcc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800171e:	2303      	movs	r3, #3
 8001720:	e048      	b.n	80017b4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <SD_disk_read+0xd0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	025b      	lsls	r3, r3, #9
 8001732:	607b      	str	r3, [r7, #4]

  SELECT();
 8001734:	f7ff fd22 	bl	800117c <SELECT>

  if (count == 1)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d111      	bne.n	8001762 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2051      	movs	r0, #81	; 0x51
 8001742:	f7ff fe83 	bl	800144c <SD_SendCmd>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d129      	bne.n	80017a0 <SD_disk_read+0xb0>
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	68b8      	ldr	r0, [r7, #8]
 8001752:	f7ff fdf1 	bl	8001338 <SD_RxDataBlock>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <SD_disk_read+0xb0>
      count = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	e01e      	b.n	80017a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2052      	movs	r0, #82	; 0x52
 8001766:	f7ff fe71 	bl	800144c <SD_SendCmd>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d117      	bne.n	80017a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f7ff fddf 	bl	8001338 <SD_RxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001786:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ed      	bne.n	8001770 <SD_disk_read+0x80>
 8001794:	e000      	b.n	8001798 <SD_disk_read+0xa8>
          break;
 8001796:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001798:	2100      	movs	r1, #0
 800179a:	204c      	movs	r0, #76	; 0x4c
 800179c:	f7ff fe56 	bl	800144c <SD_SendCmd>
    }
  }

  DESELECT();
 80017a0:	f7ff fcf8 	bl	8001194 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80017a4:	f7ff fd1c 	bl	80011e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	2000015c 	.word	0x2000015c

080017c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <SD_disk_write+0x1c>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80017e0:	2304      	movs	r3, #4
 80017e2:	e06b      	b.n	80018bc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80017e4:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <SD_disk_write+0x100>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e062      	b.n	80018bc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <SD_disk_write+0x100>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001804:	2302      	movs	r3, #2
 8001806:	e059      	b.n	80018bc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <SD_disk_write+0x104>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	607b      	str	r3, [r7, #4]

  SELECT();
 800181a:	f7ff fcaf 	bl	800117c <SELECT>

  if (count == 1)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d110      	bne.n	8001846 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	2058      	movs	r0, #88	; 0x58
 8001828:	f7ff fe10 	bl	800144c <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d13a      	bne.n	80018a8 <SD_disk_write+0xe4>
 8001832:	21fe      	movs	r1, #254	; 0xfe
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff fdb5 	bl	80013a4 <SD_TxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d033      	beq.n	80018a8 <SD_disk_write+0xe4>
      count = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	e030      	b.n	80018a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <SD_disk_write+0x104>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001852:	2100      	movs	r1, #0
 8001854:	2077      	movs	r0, #119	; 0x77
 8001856:	f7ff fdf9 	bl	800144c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	2057      	movs	r0, #87	; 0x57
 800185e:	f7ff fdf5 	bl	800144c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	2059      	movs	r0, #89	; 0x59
 8001866:	f7ff fdf1 	bl	800144c <SD_SendCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11b      	bne.n	80018a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001870:	21fc      	movs	r1, #252	; 0xfc
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f7ff fd96 	bl	80013a4 <SD_TxDataBlock>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001884:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ee      	bne.n	8001870 <SD_disk_write+0xac>
 8001892:	e000      	b.n	8001896 <SD_disk_write+0xd2>
          break;
 8001894:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001896:	21fd      	movs	r1, #253	; 0xfd
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fd83 	bl	80013a4 <SD_TxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80018a8:	f7ff fc74 	bl	8001194 <DESELECT>
  SPI_RxByte();
 80018ac:	f7ff fc98 	bl	80011e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	2000015c 	.word	0x2000015c

080018cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	603a      	str	r2, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	460b      	mov	r3, r1
 80018da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80018e6:	2304      	movs	r3, #4
 80018e8:	e11b      	b.n	8001b22 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d129      	bne.n	800194a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d017      	beq.n	800192e <SD_disk_ioctl+0x62>
 80018fe:	2b02      	cmp	r3, #2
 8001900:	dc1f      	bgt.n	8001942 <SD_disk_ioctl+0x76>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <SD_disk_ioctl+0x40>
 8001906:	2b01      	cmp	r3, #1
 8001908:	d00b      	beq.n	8001922 <SD_disk_ioctl+0x56>
 800190a:	e01a      	b.n	8001942 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800190c:	f7ff fd08 	bl	8001320 <SD_CheckPower>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001916:	f7ff fcf7 	bl	8001308 <SD_PowerOff>
      res = RES_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001920:	e0fd      	b.n	8001b1e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001922:	f7ff fca5 	bl	8001270 <SD_PowerOn>
      res = RES_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800192c:	e0f7      	b.n	8001b1e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	1c5c      	adds	r4, r3, #1
 8001932:	f7ff fcf5 	bl	8001320 <SD_CheckPower>
 8001936:	4603      	mov	r3, r0
 8001938:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001940:	e0ed      	b.n	8001b1e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001942:	2304      	movs	r3, #4
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001948:	e0e9      	b.n	8001b1e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800194a:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <SD_disk_ioctl+0x260>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001958:	2303      	movs	r3, #3
 800195a:	e0e2      	b.n	8001b22 <SD_disk_ioctl+0x256>

    SELECT();
 800195c:	f7ff fc0e 	bl	800117c <SELECT>

    switch (ctrl)
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	2b0d      	cmp	r3, #13
 8001964:	f200 80cc 	bhi.w	8001b00 <SD_disk_ioctl+0x234>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <SD_disk_ioctl+0xa4>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001a6b 	.word	0x08001a6b
 8001974:	080019a9 	.word	0x080019a9
 8001978:	08001a5b 	.word	0x08001a5b
 800197c:	08001b01 	.word	0x08001b01
 8001980:	08001b01 	.word	0x08001b01
 8001984:	08001b01 	.word	0x08001b01
 8001988:	08001b01 	.word	0x08001b01
 800198c:	08001b01 	.word	0x08001b01
 8001990:	08001b01 	.word	0x08001b01
 8001994:	08001b01 	.word	0x08001b01
 8001998:	08001b01 	.word	0x08001b01
 800199c:	08001a7d 	.word	0x08001a7d
 80019a0:	08001aa1 	.word	0x08001aa1
 80019a4:	08001ac5 	.word	0x08001ac5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019a8:	2100      	movs	r1, #0
 80019aa:	2049      	movs	r0, #73	; 0x49
 80019ac:	f7ff fd4e 	bl	800144c <SD_SendCmd>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 80a8 	bne.w	8001b08 <SD_disk_ioctl+0x23c>
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2110      	movs	r1, #16
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fcba 	bl	8001338 <SD_RxDataBlock>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 809e 	beq.w	8001b08 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10e      	bne.n	80019f4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019d6:	7d7b      	ldrb	r3, [r7, #21]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	7d3b      	ldrb	r3, [r7, #20]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80019ea:	8bfb      	ldrh	r3, [r7, #30]
 80019ec:	029a      	lsls	r2, r3, #10
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e02e      	b.n	8001a52 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80019f4:	7c7b      	ldrb	r3, [r7, #17]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	09db      	lsrs	r3, r3, #7
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	7d7b      	ldrb	r3, [r7, #21]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 0306 	and.w	r3, r3, #6
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3302      	adds	r3, #2
 8001a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a1c:	7d3b      	ldrb	r3, [r7, #20]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	7cbb      	ldrb	r3, [r7, #18]
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a44:	8bfa      	ldrh	r2, [r7, #30]
 8001a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a4a:	3b09      	subs	r3, #9
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001a58:	e056      	b.n	8001b08 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a68:	e055      	b.n	8001b16 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001a6a:	f7ff fbe5 	bl	8001238 <SD_ReadyWait>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d14b      	bne.n	8001b0c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a7a:	e047      	b.n	8001b0c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2049      	movs	r0, #73	; 0x49
 8001a80:	f7ff fce4 	bl	800144c <SD_SendCmd>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d142      	bne.n	8001b10 <SD_disk_ioctl+0x244>
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	6a38      	ldr	r0, [r7, #32]
 8001a8e:	f7ff fc53 	bl	8001338 <SD_RxDataBlock>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d03b      	beq.n	8001b10 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a9e:	e037      	b.n	8001b10 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	204a      	movs	r0, #74	; 0x4a
 8001aa4:	f7ff fcd2 	bl	800144c <SD_SendCmd>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d132      	bne.n	8001b14 <SD_disk_ioctl+0x248>
 8001aae:	2110      	movs	r1, #16
 8001ab0:	6a38      	ldr	r0, [r7, #32]
 8001ab2:	f7ff fc41 	bl	8001338 <SD_RxDataBlock>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02b      	beq.n	8001b14 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ac2:	e027      	b.n	8001b14 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	207a      	movs	r0, #122	; 0x7a
 8001ac8:	f7ff fcc0 	bl	800144c <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ad8:	e00b      	b.n	8001af2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001ada:	6a3c      	ldr	r4, [r7, #32]
 8001adc:	1c63      	adds	r3, r4, #1
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	f7ff fb7e 	bl	80011e0 <SPI_RxByte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aec:	3301      	adds	r3, #1
 8001aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001af2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d9ef      	bls.n	8001ada <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001b00:	2304      	movs	r3, #4
 8001b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b06:	e006      	b.n	8001b16 <SD_disk_ioctl+0x24a>
      break;
 8001b08:	bf00      	nop
 8001b0a:	e004      	b.n	8001b16 <SD_disk_ioctl+0x24a>
      break;
 8001b0c:	bf00      	nop
 8001b0e:	e002      	b.n	8001b16 <SD_disk_ioctl+0x24a>
      break;
 8001b10:	bf00      	nop
 8001b12:	e000      	b.n	8001b16 <SD_disk_ioctl+0x24a>
      break;
 8001b14:	bf00      	nop
    }

    DESELECT();
 8001b16:	f7ff fb3d 	bl	8001194 <DESELECT>
    SPI_RxByte();
 8001b1a:	f7ff fb61 	bl	80011e0 <SPI_RxByte>
  }

  return res;
 8001b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <vApplicationGetIdleTaskMemory+0x30>)
 8001b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000160 	.word	0x20000160
 8001b60:	20000214 	.word	0x20000214

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b0a8      	sub	sp, #160	; 0xa0
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6a:	f001 fc1d 	bl	80033a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6e:	f000 f8a1 	bl	8001cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b72:	f000 fb71 	bl	8002258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b76:	f000 fb11 	bl	800219c <MX_DMA_Init>
  MX_ETH_Init();
 8001b7a:	f000 f905 	bl	8001d88 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b7e:	f000 fab5 	bl	80020ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b82:	f000 fadd 	bl	8002140 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001b86:	f000 f9c3 	bl	8001f10 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001b8a:	f000 f94b 	bl	8001e24 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001b8e:	f000 f989 	bl	8001ea4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001b92:	f007 fd3f 	bl	8009614 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001b96:	f000 fa5b 	bl	8002050 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001b9a:	4839      	ldr	r0, [pc, #228]	; (8001c80 <main+0x11c>)
 8001b9c:	f004 ffb6 	bl	8006b0c <HAL_TIM_Base_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <main+0x120>)
 8001ba2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001bac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00a fda1 	bl	800c6fa <osMessageCreate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <main+0x124>)
 8001bbc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityAboveNormal, 0, 256);
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <main+0x128>)
 8001bc0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 8001bd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00a fc65 	bl	800c4a8 <osThreadCreate>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <main+0x12c>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <main+0x130>)
 8001be6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001bea:	461d      	mov	r5, r3
 8001bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 8001bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00a fc52 	bl	800c4a8 <osThreadCreate>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <main+0x134>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <main+0x138>)
 8001c0c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c10:	461d      	mov	r5, r3
 8001c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 8001c1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00a fc3f 	bl	800c4a8 <osThreadCreate>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <main+0x13c>)
 8001c2e:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <main+0x140>)
 8001c32:	f107 0420 	add.w	r4, r7, #32
 8001c36:	461d      	mov	r5, r3
 8001c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00a fc2c 	bl	800c4a8 <osThreadCreate>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <main+0x144>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityAboveNormal, 0, 128);
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <main+0x148>)
 8001c58:	1d3c      	adds	r4, r7, #4
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00a fc1b 	bl	800c4a8 <osThreadCreate>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <main+0x14c>)
 8001c76:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c78:	f00a fc0f 	bl	800c49a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <main+0x118>
 8001c7e:	bf00      	nop
 8001c80:	20000868 	.word	0x20000868
 8001c84:	0800f884 	.word	0x0800f884
 8001c88:	20000f7c 	.word	0x20000f7c
 8001c8c:	0800f894 	.word	0x0800f894
 8001c90:	20000f68 	.word	0x20000f68
 8001c94:	0800f8b0 	.word	0x0800f8b0
 8001c98:	20000f6c 	.word	0x20000f6c
 8001c9c:	0800f8cc 	.word	0x0800f8cc
 8001ca0:	20000f70 	.word	0x20000f70
 8001ca4:	0800f8e8 	.word	0x0800f8e8
 8001ca8:	20000f74 	.word	0x20000f74
 8001cac:	0800f904 	.word	0x0800f904
 8001cb0:	20000f78 	.word	0x20000f78

08001cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b094      	sub	sp, #80	; 0x50
 8001cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00d f8d4 	bl	800ee70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <SystemClock_Config+0xcc>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d24:	2304      	movs	r3, #4
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d28:	23a8      	movs	r3, #168	; 0xa8
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d30:	2307      	movs	r3, #7
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fd8d 	bl	8005858 <HAL_RCC_OscConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d44:	f000 fdaa 	bl	800289c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	230f      	movs	r3, #15
 8001d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2105      	movs	r1, #5
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ffee 	bl	8005d48 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d72:	f000 fd93 	bl	800289c <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_ETH_Init+0x84>)
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <MX_ETH_Init+0x88>)
 8001d90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001da0:	22e1      	movs	r2, #225	; 0xe1
 8001da2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_ETH_Init+0x84>)
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <MX_ETH_Init+0x8c>)
 8001dba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_ETH_Init+0x84>)
 8001dbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dc2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_ETH_Init+0x84>)
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <MX_ETH_Init+0x90>)
 8001dc8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_ETH_Init+0x84>)
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <MX_ETH_Init+0x94>)
 8001dce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_ETH_Init+0x84>)
 8001dd2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dd6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <MX_ETH_Init+0x84>)
 8001dda:	f002 f83b 	bl	8003e54 <HAL_ETH_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001de4:	f000 fd5a 	bl	800289c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	2100      	movs	r1, #0
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_ETH_Init+0x98>)
 8001dee:	f00d f83f 	bl	800ee70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_ETH_Init+0x98>)
 8001df4:	2221      	movs	r2, #33	; 0x21
 8001df6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_ETH_Init+0x98>)
 8001dfa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001dfe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_ETH_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000058c 	.word	0x2000058c
 8001e10:	40028000 	.word	0x40028000
 8001e14:	2000341c 	.word	0x2000341c
 8001e18:	200004ec 	.word	0x200004ec
 8001e1c:	2000044c 	.word	0x2000044c
 8001e20:	20000414 	.word	0x20000414

08001e24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <MX_I2C2_Init+0x78>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <MX_I2C2_Init+0x7c>)
 8001e32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e62:	f002 fd17 	bl	8004894 <HAL_I2C_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e6c:	f000 fd16 	bl	800289c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	4809      	ldr	r0, [pc, #36]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e74:	f003 fb58 	bl	8005528 <HAL_I2CEx_ConfigAnalogFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e7e:	f000 fd0d 	bl	800289c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_I2C2_Init+0x74>)
 8001e86:	f003 fb8b 	bl	80055a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001e90:	f000 fd04 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000063c 	.word	0x2000063c
 8001e9c:	40005800 	.word	0x40005800
 8001ea0:	000186a0 	.word	0x000186a0

08001ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <MX_SPI1_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ed0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ed8:	2220      	movs	r2, #32
 8001eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ef6:	f004 f979 	bl	80061ec <HAL_SPI_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f00:	f000 fccc 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000750 	.word	0x20000750
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b096      	sub	sp, #88	; 0x58
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2220      	movs	r2, #32
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c ff91 	bl	800ee70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f50:	4a3e      	ldr	r2, [pc, #248]	; (800204c <MX_TIM1_Init+0x13c>)
 8001f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f56:	22a7      	movs	r2, #167	; 0xa7
 8001f58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f62:	2263      	movs	r2, #99	; 0x63
 8001f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f78:	4833      	ldr	r0, [pc, #204]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f7a:	f004 fd77 	bl	8006a6c <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f84:	f000 fc8a 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f92:	4619      	mov	r1, r3
 8001f94:	482c      	ldr	r0, [pc, #176]	; (8002048 <MX_TIM1_Init+0x138>)
 8001f96:	f005 f97d 	bl	8007294 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fa0:	f000 fc7c 	bl	800289c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fa4:	4828      	ldr	r0, [pc, #160]	; (8002048 <MX_TIM1_Init+0x138>)
 8001fa6:	f004 fe89 	bl	8006cbc <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001fb0:	f000 fc74 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4821      	ldr	r0, [pc, #132]	; (8002048 <MX_TIM1_Init+0x138>)
 8001fc4:	f005 fd66 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001fce:	f000 fc65 	bl	800289c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4814      	ldr	r0, [pc, #80]	; (8002048 <MX_TIM1_Init+0x138>)
 8001ff8:	f005 f88a 	bl	8007110 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002002:	f000 fc4b 	bl	800289c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4807      	ldr	r0, [pc, #28]	; (8002048 <MX_TIM1_Init+0x138>)
 800202a:	f005 fdaf 	bl	8007b8c <HAL_TIMEx_ConfigBreakDeadTime>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002034:	f000 fc32 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <MX_TIM1_Init+0x138>)
 800203a:	f000 ff0b 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 800203e:	bf00      	nop
 8002040:	3758      	adds	r7, #88	; 0x58
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000868 	.word	0x20000868
 800204c:	40010000 	.word	0x40010000

08002050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_TIM3_Init+0x94>)
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <MX_TIM3_Init+0x98>)
 8002070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002074:	2247      	movs	r2, #71	; 0x47
 8002076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_TIM3_Init+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002084:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_TIM3_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002094:	f004 fcea 	bl	8006a6c <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800209e:	f000 fbfd 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_TIM3_Init+0x94>)
 80020b0:	f005 f8f0 	bl	8007294 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020ba:	f000 fbef 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c6:	463b      	mov	r3, r7
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_TIM3_Init+0x94>)
 80020cc:	f005 fce2 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020d6:	f000 fbe1 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200008b0 	.word	0x200008b0
 80020e8:	40000400 	.word	0x40000400

080020ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <MX_USART3_UART_Init+0x50>)
 80020f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_USART3_UART_Init+0x4c>)
 8002124:	f005 fd98 	bl	8007c58 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800212e:	f000 fbb5 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000958 	.word	0x20000958
 800213c:	40004800 	.word	0x40004800

08002140 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800214a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800214e:	2204      	movs	r2, #4
 8002150:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002154:	2202      	movs	r2, #2
 8002156:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002160:	2202      	movs	r2, #2
 8002162:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002166:	2201      	movs	r2, #1
 8002168:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002178:	2201      	movs	r2, #1
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002184:	f003 fa4b 	bl	800561e <HAL_PCD_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800218e:	f000 fb85 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000a5c 	.word	0x20000a5c

0800219c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <MX_DMA_Init+0xb8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <MX_DMA_Init+0xb8>)
 80021ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <MX_DMA_Init+0xb8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <MX_DMA_Init+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <MX_DMA_Init+0xb8>)
 80021c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <MX_DMA_Init+0xb8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2105      	movs	r1, #5
 80021de:	200c      	movs	r0, #12
 80021e0:	f001 fa00 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021e4:	200c      	movs	r0, #12
 80021e6:	f001 fa19 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2105      	movs	r1, #5
 80021ee:	200e      	movs	r0, #14
 80021f0:	f001 f9f8 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80021f4:	200e      	movs	r0, #14
 80021f6:	f001 fa11 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	200f      	movs	r0, #15
 8002200:	f001 f9f0 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002204:	200f      	movs	r0, #15
 8002206:	f001 fa09 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2105      	movs	r1, #5
 800220e:	202f      	movs	r0, #47	; 0x2f
 8002210:	f001 f9e8 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002214:	202f      	movs	r0, #47	; 0x2f
 8002216:	f001 fa01 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2105      	movs	r1, #5
 800221e:	2039      	movs	r0, #57	; 0x39
 8002220:	f001 f9e0 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002224:	2039      	movs	r0, #57	; 0x39
 8002226:	f001 f9f9 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	203a      	movs	r0, #58	; 0x3a
 8002230:	f001 f9d8 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002234:	203a      	movs	r0, #58	; 0x3a
 8002236:	f001 f9f1 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2044      	movs	r0, #68	; 0x44
 8002240:	f001 f9d0 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002244:	2044      	movs	r0, #68	; 0x44
 8002246:	f001 f9e9 	bl	800361c <HAL_NVIC_EnableIRQ>

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	; 0x38
 800225c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	4b69      	ldr	r3, [pc, #420]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a68      	ldr	r2, [pc, #416]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b66      	ldr	r3, [pc, #408]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	4b62      	ldr	r3, [pc, #392]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a61      	ldr	r2, [pc, #388]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <MX_GPIO_Init+0x1c0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a5a      	ldr	r2, [pc, #360]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b58      	ldr	r3, [pc, #352]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a53      	ldr	r2, [pc, #332]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b4d      	ldr	r3, [pc, #308]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a4c      	ldr	r2, [pc, #304]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <MX_GPIO_Init+0x1c0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a45      	ldr	r2, [pc, #276]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b43      	ldr	r3, [pc, #268]	; (8002418 <MX_GPIO_Init+0x1c0>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <MX_GPIO_Init+0x1c0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a37      	ldr	r2, [pc, #220]	; (8002418 <MX_GPIO_Init+0x1c0>)
 800233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_GPIO_Init+0x1c0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f244 0181 	movw	r1, #16513	; 0x4081
 8002354:	4831      	ldr	r0, [pc, #196]	; (800241c <MX_GPIO_Init+0x1c4>)
 8002356:	f002 fa69 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	2140      	movs	r1, #64	; 0x40
 800235e:	4830      	ldr	r0, [pc, #192]	; (8002420 <MX_GPIO_Init+0x1c8>)
 8002360:	f002 fa64 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Temp_SensorD5_GPIO_Port, Temp_SensorD5_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	482e      	ldr	r0, [pc, #184]	; (8002424 <MX_GPIO_Init+0x1cc>)
 800236a:	f002 fa5f 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800236e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002374:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	4828      	ldr	r0, [pc, #160]	; (8002428 <MX_GPIO_Init+0x1d0>)
 8002386:	f002 f88d 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 800238a:	2308      	movs	r3, #8
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	4619      	mov	r1, r3
 800239c:	4823      	ldr	r0, [pc, #140]	; (800242c <MX_GPIO_Init+0x1d4>)
 800239e:	f002 f881 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80023a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_GPIO_Init+0x1c4>)
 80023bc:	f002 f872 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4812      	ldr	r0, [pc, #72]	; (8002420 <MX_GPIO_Init+0x1c8>)
 80023d8:	f002 f864 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	480c      	ldr	r0, [pc, #48]	; (8002420 <MX_GPIO_Init+0x1c8>)
 80023f0:	f002 f858 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_SensorD5_Pin */
  GPIO_InitStruct.Pin = Temp_SensorD5_Pin;
 80023f4:	2320      	movs	r3, #32
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Temp_SensorD5_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	4619      	mov	r1, r3
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <MX_GPIO_Init+0x1cc>)
 800240c:	f002 f84a 	bl	80044a4 <HAL_GPIO_Init>

}
 8002410:	bf00      	nop
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40020400 	.word	0x40020400
 8002420:	40021800 	.word	0x40021800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40020800 	.word	0x40020800
 800242c:	40020000 	.word	0x40020000

08002430 <bcdToDec>:
   return (uint8_t)( (val/10*16) + (val%10) );
 }

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	461a      	mov	r2, r3
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4413      	add	r3, r2
 }
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <Get_Time>:
 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }

 void Get_Time (void)
 {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 	uint8_t get_time[7];
// 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 8002466:	23d0      	movs	r3, #208	; 0xd0
 8002468:	b299      	uxth	r1, r3
 800246a:	2307      	movs	r3, #7
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	463b      	mov	r3, r7
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	2200      	movs	r2, #0
 8002476:	481f      	ldr	r0, [pc, #124]	; (80024f4 <Get_Time+0x94>)
 8002478:	f002 fb50 	bl	8004b1c <HAL_I2C_Mem_Read_DMA>
 	time.seconds = bcdToDec(get_time[0]);
 800247c:	783b      	ldrb	r3, [r7, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ffd6 	bl	8002430 <bcdToDec>
 8002484:	4603      	mov	r3, r0
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <Get_Time+0x98>)
 800248a:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ffce 	bl	8002430 <bcdToDec>
 8002494:	4603      	mov	r3, r0
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <Get_Time+0x98>)
 800249a:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ffc6 	bl	8002430 <bcdToDec>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <Get_Time+0x98>)
 80024aa:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ffbe 	bl	8002430 <bcdToDec>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <Get_Time+0x98>)
 80024ba:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 80024bc:	793b      	ldrb	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ffb6 	bl	8002430 <bcdToDec>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <Get_Time+0x98>)
 80024ca:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 80024cc:	797b      	ldrb	r3, [r7, #5]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffae 	bl	8002430 <bcdToDec>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <Get_Time+0x98>)
 80024da:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ffa6 	bl	8002430 <bcdToDec>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <Get_Time+0x98>)
 80024ea:	719a      	strb	r2, [r3, #6]
 }
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000063c 	.word	0x2000063c
 80024f8:	20000f84 	.word	0x20000f84

080024fc <Start_RTC>:

char time_buffer[10];
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	Set_Time(00, 03, 14, 4, 15, 2, 24);
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8002504:	f7ff ffac 	bl	8002460 <Get_Time>
	  sprintf(time_buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <Start_RTC+0x44>)
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	461a      	mov	r2, r3
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <Start_RTC+0x44>)
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	4619      	mov	r1, r3
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <Start_RTC+0x44>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	460b      	mov	r3, r1
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <Start_RTC+0x48>)
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <Start_RTC+0x4c>)
 8002520:	f00c fdbc 	bl	800f09c <siprintf>
//	  sprintf ((char*)uart_buffer,"LED Status %d\r",led_status);
	  send_uart_dma(time_buffer, strlen((char*)time_buffer));
 8002524:	4808      	ldr	r0, [pc, #32]	; (8002548 <Start_RTC+0x4c>)
 8002526:	f7fd fe63 	bl	80001f0 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <Start_RTC+0x4c>)
 8002530:	f000 f80c 	bl	800254c <send_uart_dma>
	  osDelay(1000);
 8002534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002538:	f00a f802 	bl	800c540 <osDelay>
  {
 800253c:	e7e2      	b.n	8002504 <Start_RTC+0x8>
 800253e:	bf00      	nop
 8002540:	20000f84 	.word	0x20000f84
 8002544:	0800f920 	.word	0x0800f920
 8002548:	20000f8c 	.word	0x20000f8c

0800254c <send_uart_dma>:
/**
* @brief Function implementing the UART_LEDTask thread.
* @param argument: Not used
* @retval None
*/
void send_uart_dma(uint8_t* ptr, uint16_t len){
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 8002558:	bf00      	nop
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <send_uart_dma+0x30>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0fb      	beq.n	800255a <send_uart_dma+0xe>

	UART_SendFlag=0;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <send_uart_dma+0x30>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	461a      	mov	r2, r3
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4804      	ldr	r0, [pc, #16]	; (8002580 <send_uart_dma+0x34>)
 8002570:	f005 fbc0 	bl	8007cf4 <HAL_UART_Transmit_DMA>

}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000001 	.word	0x20000001
 8002580:	20000958 	.word	0x20000958

08002584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_UART_RxCpltCallback+0x40>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b0d      	cmp	r3, #13
 8002592:	d007      	beq.n	80025a4 <HAL_UART_RxCpltCallback+0x20>
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_UART_RxCpltCallback+0x40>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d003      	beq.n	80025a4 <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_UART_RxCpltCallback+0x40>)
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_UART_RxCpltCallback+0x44>)
 80025a2:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_UART_RxCpltCallback+0x40>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b0d      	cmp	r3, #13
 80025aa:	d102      	bne.n	80025b2 <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_UART_RxCpltCallback+0x48>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 80025b2:	2201      	movs	r2, #1
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_UART_RxCpltCallback+0x40>)
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <HAL_UART_RxCpltCallback+0x4c>)
 80025b8:	f005 fc1a 	bl	8007df0 <HAL_UART_Receive_DMA>

}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000f80 	.word	0x20000f80
 80025c8:	20000f81 	.word	0x20000f81
 80025cc:	20000f82 	.word	0x20000f82
 80025d0:	20000958 	.word	0x20000958

080025d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <HAL_UART_TxCpltCallback+0x1c>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000001 	.word	0x20000001

080025f4 <Start_UART_LED>:
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 80025fc:	481e      	ldr	r0, [pc, #120]	; (8002678 <Start_UART_LED+0x84>)
 80025fe:	f7fd fdf7 	bl	80001f0 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	b29b      	uxth	r3, r3
 8002606:	4619      	mov	r1, r3
 8002608:	481b      	ldr	r0, [pc, #108]	; (8002678 <Start_UART_LED+0x84>)
 800260a:	f7ff ff9f 	bl	800254c <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 800260e:	2201      	movs	r2, #1
 8002610:	491a      	ldr	r1, [pc, #104]	; (800267c <Start_UART_LED+0x88>)
 8002612:	481b      	ldr	r0, [pc, #108]	; (8002680 <Start_UART_LED+0x8c>)
 8002614:	f005 fbec 	bl	8007df0 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <Start_UART_LED+0x90>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <Start_UART_LED+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]

	      	//process command
	      	switch (cmd){
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <Start_UART_LED+0x94>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b33      	cmp	r3, #51	; 0x33
 800262c:	d010      	beq.n	8002650 <Start_UART_LED+0x5c>
 800262e:	2b33      	cmp	r3, #51	; 0x33
 8002630:	dc14      	bgt.n	800265c <Start_UART_LED+0x68>
 8002632:	2b31      	cmp	r3, #49	; 0x31
 8002634:	d002      	beq.n	800263c <Start_UART_LED+0x48>
 8002636:	2b32      	cmp	r3, #50	; 0x32
 8002638:	d005      	beq.n	8002646 <Start_UART_LED+0x52>
 800263a:	e00f      	b.n	800265c <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 800263c:	2101      	movs	r1, #1
 800263e:	4813      	ldr	r0, [pc, #76]	; (800268c <Start_UART_LED+0x98>)
 8002640:	f002 f90d 	bl	800485e <HAL_GPIO_TogglePin>
	      		break;
 8002644:	e00a      	b.n	800265c <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	4810      	ldr	r0, [pc, #64]	; (800268c <Start_UART_LED+0x98>)
 800264a:	f002 f908 	bl	800485e <HAL_GPIO_TogglePin>
	      		break;
 800264e:	e005      	b.n	800265c <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8002650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002654:	480d      	ldr	r0, [pc, #52]	; (800268c <Start_UART_LED+0x98>)
 8002656:	f002 f902 	bl	800485e <HAL_GPIO_TogglePin>
	      		break;
 800265a:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 800265c:	4806      	ldr	r0, [pc, #24]	; (8002678 <Start_UART_LED+0x84>)
 800265e:	f7fd fdc7 	bl	80001f0 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	b29b      	uxth	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <Start_UART_LED+0x84>)
 800266a:	f7ff ff6f 	bl	800254c <send_uart_dma>

	      	}

    osDelay(1);
 800266e:	2001      	movs	r0, #1
 8002670:	f009 ff66 	bl	800c540 <osDelay>
	  if(cmdstate){
 8002674:	e7d0      	b.n	8002618 <Start_UART_LED+0x24>
 8002676:	bf00      	nop
 8002678:	20000004 	.word	0x20000004
 800267c:	20000f80 	.word	0x20000f80
 8002680:	20000958 	.word	0x20000958
 8002684:	20000f82 	.word	0x20000f82
 8002688:	20000f81 	.word	0x20000f81
 800268c:	40020400 	.word	0x40020400

08002690 <bufsize>:
void send_uart (char *string){
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart3,(uint8_t *)string,len,2000);
}

int bufsize(char *buf){
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	int i=0;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 800269c:	e002      	b.n	80026a4 <bufsize+0x14>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f6      	bne.n	800269e <bufsize+0xe>
	return i;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <bufclear>:

void bufclear(void){
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	e007      	b.n	80026dc <bufclear+0x1c>
		SD_buffer[i]= '\0';
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <bufclear+0x34>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3301      	adds	r3, #1
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	dbf3      	blt.n	80026cc <bufclear+0xc>
	}
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20003004 	.word	0x20003004

080026f8 <Start_DataLogging>:
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
	fresult = f_mount(&fs,"",0);
 8002700:	2200      	movs	r2, #0
 8002702:	4937      	ldr	r1, [pc, #220]	; (80027e0 <Start_DataLogging+0xe8>)
 8002704:	4837      	ldr	r0, [pc, #220]	; (80027e4 <Start_DataLogging+0xec>)
 8002706:	f008 fe3b 	bl	800b380 <f_mount>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <Start_DataLogging+0xf0>)
 8002710:	701a      	strb	r2, [r3, #0]
//	if(fresult != FR_OK) send_uart("error in mounting SD CARD...\n");
//	else send_uart("SD Card mounted successfully...\n");
	fresult = f_open(&fil,"file1.txt",FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8002712:	2213      	movs	r2, #19
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <Start_DataLogging+0xf4>)
 8002716:	4836      	ldr	r0, [pc, #216]	; (80027f0 <Start_DataLogging+0xf8>)
 8002718:	f008 fe96 	bl	800b448 <f_open>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <Start_DataLogging+0xf0>)
 8002722:	701a      	strb	r2, [r3, #0]
	strcpy(SD_buffer,"This data is from file\n\n");
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <Start_DataLogging+0xfc>)
 8002726:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <Start_DataLogging+0x100>)
 8002728:	4614      	mov	r4, r2
 800272a:	461d      	mov	r5, r3
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002734:	c403      	stmia	r4!, {r0, r1}
 8002736:	7022      	strb	r2, [r4, #0]
	fresult = f_write(&fil,SD_buffer,bufsize(SD_buffer),&bw);
 8002738:	482e      	ldr	r0, [pc, #184]	; (80027f4 <Start_DataLogging+0xfc>)
 800273a:	f7ff ffa9 	bl	8002690 <bufsize>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <Start_DataLogging+0x104>)
 8002744:	492b      	ldr	r1, [pc, #172]	; (80027f4 <Start_DataLogging+0xfc>)
 8002746:	482a      	ldr	r0, [pc, #168]	; (80027f0 <Start_DataLogging+0xf8>)
 8002748:	f009 f851 	bl	800b7ee <f_write>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <Start_DataLogging+0xf0>)
 8002752:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8002754:	4826      	ldr	r0, [pc, #152]	; (80027f0 <Start_DataLogging+0xf8>)
 8002756:	f009 fa96 	bl	800bc86 <f_close>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <Start_DataLogging+0xf0>)
 8002760:	701a      	strb	r2, [r3, #0]
	bufclear();
 8002762:	f7ff ffad 	bl	80026c0 <bufclear>
	unsigned long ptr = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	fresult = f_open(&fil,"file2.txt",FA_OPEN_ALWAYS|FA_WRITE);
 800276a:	2212      	movs	r2, #18
 800276c:	4924      	ldr	r1, [pc, #144]	; (8002800 <Start_DataLogging+0x108>)
 800276e:	4820      	ldr	r0, [pc, #128]	; (80027f0 <Start_DataLogging+0xf8>)
 8002770:	f008 fe6a 	bl	800b448 <f_open>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <Start_DataLogging+0xf0>)
 800277a:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil, ptr);
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	481c      	ldr	r0, [pc, #112]	; (80027f0 <Start_DataLogging+0xf8>)
 8002780:	f009 fab0 	bl	800bce4 <f_lseek>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <Start_DataLogging+0xf0>)
 800278a:	701a      	strb	r2, [r3, #0]
	fresult = f_puts(time_buffer,&fil);
 800278c:	4918      	ldr	r1, [pc, #96]	; (80027f0 <Start_DataLogging+0xf8>)
 800278e:	481d      	ldr	r0, [pc, #116]	; (8002804 <Start_DataLogging+0x10c>)
 8002790:	f009 fd8d 	bl	800c2ae <f_puts>
 8002794:	4603      	mov	r3, r0
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <Start_DataLogging+0xf0>)
 800279a:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(time_buffer);
 800279c:	4819      	ldr	r0, [pc, #100]	; (8002804 <Start_DataLogging+0x10c>)
 800279e:	f7ff ff77 	bl	8002690 <bufsize>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(",\n",&fil);
 80027ac:	4910      	ldr	r1, [pc, #64]	; (80027f0 <Start_DataLogging+0xf8>)
 80027ae:	4816      	ldr	r0, [pc, #88]	; (8002808 <Start_DataLogging+0x110>)
 80027b0:	f009 fd7d 	bl	800c2ae <f_puts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <Start_DataLogging+0xf0>)
 80027ba:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3302      	adds	r3, #2
 80027c0:	60fb      	str	r3, [r7, #12]
//	fresult = f_write(&fil,time_buffer,bufsize(time_buffer),&bw);
	fresult = f_close(&fil);
 80027c2:	480b      	ldr	r0, [pc, #44]	; (80027f0 <Start_DataLogging+0xf8>)
 80027c4:	f009 fa5f 	bl	800bc86 <f_close>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <Start_DataLogging+0xf0>)
 80027ce:	701a      	strb	r2, [r3, #0]
	bufclear();
 80027d0:	f7ff ff76 	bl	80026c0 <bufclear>
//	fresult = f_puts(time_buffer,&fil);
//	fresult = f_puts(",",&fil);
//	//fresult = f_puts(fan_speed,&fil);
//	fresult = f_puts("\n\n",&fil);
////	fresult = f_close(&fil);
    osDelay(1000);
 80027d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027d8:	f009 feb2 	bl	800c540 <osDelay>
	fresult = f_open(&fil,"file2.txt",FA_OPEN_ALWAYS|FA_WRITE);
 80027dc:	e7c5      	b.n	800276a <Start_DataLogging+0x72>
 80027de:	bf00      	nop
 80027e0:	0800f930 	.word	0x0800f930
 80027e4:	20000f98 	.word	0x20000f98
 80027e8:	20003000 	.word	0x20003000
 80027ec:	0800f934 	.word	0x0800f934
 80027f0:	20001fd0 	.word	0x20001fd0
 80027f4:	20003004 	.word	0x20003004
 80027f8:	0800f940 	.word	0x0800f940
 80027fc:	20003404 	.word	0x20003404
 8002800:	0800f95c 	.word	0x0800f95c
 8002804:	20000f8c 	.word	0x20000f8c
 8002808:	0800f968 	.word	0x0800f968

0800280c <Start_FanControl>:
*/

char fan_speed[20];
/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
	uint8_t sp = 45;
 8002814:	232d      	movs	r3, #45	; 0x2d
 8002816:	73bb      	strb	r3, [r7, #14]
	TIM1->CCR1 = 50;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <Start_FanControl+0x4c>)
 800281a:	2232      	movs	r2, #50	; 0x32
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800281e:	2100      	movs	r1, #0
 8002820:	480e      	ldr	r0, [pc, #56]	; (800285c <Start_FanControl+0x50>)
 8002822:	f004 faa5 	bl	8006d70 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	for(uint8_t i =0;i<100;i++){
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e00e      	b.n	800284a <Start_FanControl+0x3e>
		TIM1->CCR1 = i;
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <Start_FanControl+0x4c>)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	6353      	str	r3, [r2, #52]	; 0x34
		sprintf(fan_speed,"Fan Speed : %02d",sp);
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	461a      	mov	r2, r3
 8002836:	490a      	ldr	r1, [pc, #40]	; (8002860 <Start_FanControl+0x54>)
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <Start_FanControl+0x58>)
 800283a:	f00c fc2f 	bl	800f09c <siprintf>
		osDelay(10);
 800283e:	200a      	movs	r0, #10
 8002840:	f009 fe7e 	bl	800c540 <osDelay>
	for(uint8_t i =0;i<100;i++){
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	3301      	adds	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b63      	cmp	r3, #99	; 0x63
 800284e:	d9ed      	bls.n	800282c <Start_FanControl+0x20>
	}
    osDelay(1);
 8002850:	2001      	movs	r0, #1
 8002852:	f009 fe75 	bl	800c540 <osDelay>
	for(uint8_t i =0;i<100;i++){
 8002856:	e7e6      	b.n	8002826 <Start_FanControl+0x1a>
 8002858:	40010000 	.word	0x40010000
 800285c:	20000868 	.word	0x20000868
 8002860:	0800f96c 	.word	0x0800f96c
 8002864:	20003408 	.word	0x20003408

08002868 <Start_Temp>:
* @retval None
*/

/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
	Ds18b20_Init(osPriorityNormal);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fd fe97 	bl	80005a4 <Ds18b20_Init>
  for(;;)
  {

    osDelay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f009 fe62 	bl	800c540 <osDelay>
 800287c:	e7fb      	b.n	8002876 <Start_Temp+0xe>

0800287e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002890:	f000 fdac 	bl	80033ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <Error_Handler+0x8>
	...

080028a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_MspInit+0x54>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_MspInit+0x54>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_MspInit+0x54>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_MspInit+0x54>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_MspInit+0x54>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_MspInit+0x54>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	210f      	movs	r1, #15
 80028ea:	f06f 0001 	mvn.w	r0, #1
 80028ee:	f000 fe79 	bl	80035e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_ETH_MspInit+0x174>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f040 80a4 	bne.w	8002a6c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800292e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800294a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a44      	ldr	r2, [pc, #272]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_ETH_MspInit+0x178>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029e8:	2332      	movs	r3, #50	; 0x32
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029f8:	230b      	movs	r3, #11
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a00:	4619      	mov	r1, r3
 8002a02:	481e      	ldr	r0, [pc, #120]	; (8002a7c <HAL_ETH_MspInit+0x17c>)
 8002a04:	f001 fd4e 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a08:	2386      	movs	r3, #134	; 0x86
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a18:	230b      	movs	r3, #11
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4817      	ldr	r0, [pc, #92]	; (8002a80 <HAL_ETH_MspInit+0x180>)
 8002a24:	f001 fd3e 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a3a:	230b      	movs	r3, #11
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a42:	4619      	mov	r1, r3
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <HAL_ETH_MspInit+0x184>)
 8002a46:	f001 fd2d 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	4619      	mov	r1, r3
 8002a66:	4808      	ldr	r0, [pc, #32]	; (8002a88 <HAL_ETH_MspInit+0x188>)
 8002a68:	f001 fd1c 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3738      	adds	r7, #56	; 0x38
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40028000 	.word	0x40028000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40021800 	.word	0x40021800

08002a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_I2C_MspInit+0x13c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f040 8088 	bne.w	8002bc0 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a44      	ldr	r2, [pc, #272]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002aba:	f043 0320 	orr.w	r3, r3, #32
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002acc:	2303      	movs	r3, #3
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad0:	2312      	movs	r3, #18
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002adc:	2304      	movs	r3, #4
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	483a      	ldr	r0, [pc, #232]	; (8002bd0 <HAL_I2C_MspInit+0x144>)
 8002ae8:	f001 fcdc 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_I2C_MspInit+0x140>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <HAL_I2C_MspInit+0x14c>)
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b10:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002b48:	4822      	ldr	r0, [pc, #136]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b4a:	f000 fd75 	bl	8003638 <HAL_DMA_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002b54:	f7ff fea2 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_I2C_MspInit+0x148>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_I2C_MspInit+0x154>)
 8002b68:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b6c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002ba6:	f000 fd47 	bl	8003638 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8002bb0:	f7ff fe74 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_I2C_MspInit+0x150>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	3728      	adds	r7, #40	; 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40005800 	.word	0x40005800
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40021400 	.word	0x40021400
 8002bd4:	20000690 	.word	0x20000690
 8002bd8:	40026058 	.word	0x40026058
 8002bdc:	200006f0 	.word	0x200006f0
 8002be0:	400260b8 	.word	0x400260b8

08002be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_SPI_MspInit+0x17c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f040 80a8 	bne.w	8002d58 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	4a54      	ldr	r2, [pc, #336]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c16:	6453      	str	r3, [r2, #68]	; 0x44
 8002c18:	4b52      	ldr	r3, [pc, #328]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4a4d      	ldr	r2, [pc, #308]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6313      	str	r3, [r2, #48]	; 0x30
 8002c34:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_SPI_MspInit+0x180>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c5c:	2370      	movs	r3, #112	; 0x70
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c6c:	2305      	movs	r3, #5
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4619      	mov	r1, r3
 8002c76:	483c      	ldr	r0, [pc, #240]	; (8002d68 <HAL_SPI_MspInit+0x184>)
 8002c78:	f001 fc14 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c8c:	2305      	movs	r3, #5
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4835      	ldr	r0, [pc, #212]	; (8002d6c <HAL_SPI_MspInit+0x188>)
 8002c98:	f001 fc04 	bl	80044a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002c9c:	4b34      	ldr	r3, [pc, #208]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002c9e:	4a35      	ldr	r2, [pc, #212]	; (8002d74 <HAL_SPI_MspInit+0x190>)
 8002ca0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002ca2:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002ca4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ca8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002cde:	4824      	ldr	r0, [pc, #144]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002ce0:	f000 fcaa 	bl	8003638 <HAL_DMA_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002cea:	f7ff fdd7 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_SPI_MspInit+0x18c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <HAL_SPI_MspInit+0x198>)
 8002cfe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d02:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d06:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d34:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d3c:	480e      	ldr	r0, [pc, #56]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d3e:	f000 fc7b 	bl	8003638 <HAL_DMA_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002d48:	f7ff fda8 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d50:	649a      	str	r2, [r3, #72]	; 0x48
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_SPI_MspInit+0x194>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40013000 	.word	0x40013000
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	200007a8 	.word	0x200007a8
 8002d74:	40026440 	.word	0x40026440
 8002d78:	20000808 	.word	0x20000808
 8002d7c:	40026488 	.word	0x40026488

08002d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_TIM_Base_MspInit+0xc0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d13e      	bne.n	8002e10 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_TIM_Base_MspInit+0xcc>)
 8002db2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002db6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002dba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dbc:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dde:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002df2:	4815      	ldr	r0, [pc, #84]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002df4:	f000 fc20 	bl	8003638 <HAL_DMA_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002dfe:	f7ff fd4d 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_TIM_Base_MspInit+0xc8>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e0e:	e012      	b.n	8002e36 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_TIM_Base_MspInit+0xd0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10d      	bne.n	8002e36 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_TIM_Base_MspInit+0xc4>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	200008f8 	.word	0x200008f8
 8002e4c:	40026428 	.word	0x40026428
 8002e50:	40000400 	.word	0x40000400

08002e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 030c 	add.w	r3, r7, #12
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_TIM_MspPostInit+0x68>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d11e      	bne.n	8002eb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	4619      	mov	r1, r3
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_TIM_MspPostInit+0x70>)
 8002eb0:	f001 faf8 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_UART_MspInit+0x154>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f040 8093 	bne.w	8003012 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efa:	6413      	str	r3, [r2, #64]	; 0x40
 8002efc:	4b48      	ldr	r3, [pc, #288]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4a43      	ldr	r2, [pc, #268]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	6313      	str	r3, [r2, #48]	; 0x30
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_UART_MspInit+0x158>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f36:	2307      	movs	r3, #7
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4838      	ldr	r0, [pc, #224]	; (8003024 <HAL_UART_MspInit+0x15c>)
 8002f42:	f001 faaf 	bl	80044a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f48:	4a38      	ldr	r2, [pc, #224]	; (800302c <HAL_UART_MspInit+0x164>)
 8002f4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f54:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f60:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f8a:	f000 fb55 	bl	8003638 <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002f94:	f7ff fc82 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a23      	ldr	r2, [pc, #140]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f9e:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_UART_MspInit+0x160>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002fa4:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fa6:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_UART_MspInit+0x16c>)
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fac:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002fb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fde:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002fe6:	4812      	ldr	r0, [pc, #72]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002fe8:	f000 fb26 	bl	8003638 <HAL_DMA_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002ff2:	f7ff fc53 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_UART_MspInit+0x168>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2105      	movs	r1, #5
 8003006:	2027      	movs	r0, #39	; 0x27
 8003008:	f000 faec 	bl	80035e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800300c:	2027      	movs	r0, #39	; 0x27
 800300e:	f000 fb05 	bl	800361c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	; 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40004800 	.word	0x40004800
 8003020:	40023800 	.word	0x40023800
 8003024:	40020c00 	.word	0x40020c00
 8003028:	2000099c 	.word	0x2000099c
 800302c:	40026028 	.word	0x40026028
 8003030:	200009fc 	.word	0x200009fc
 8003034:	40026070 	.word	0x40026070

08003038 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d13f      	bne.n	80030da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003076:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800307a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003088:	230a      	movs	r3, #10
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4619      	mov	r1, r3
 8003092:	4815      	ldr	r0, [pc, #84]	; (80030e8 <HAL_PCD_MspInit+0xb0>)
 8003094:	f001 fa06 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	480e      	ldr	r0, [pc, #56]	; (80030e8 <HAL_PCD_MspInit+0xb0>)
 80030ae:	f001 f9f9 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	6353      	str	r3, [r2, #52]	; 0x34
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_PCD_MspInit+0xac>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000

080030ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_InitTick+0xe8>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_InitTick+0xe8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6413      	str	r3, [r2, #64]	; 0x40
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_InitTick+0xe8>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003118:	f107 0210 	add.w	r2, r7, #16
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 f830 	bl	8006188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003132:	f003 f801 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8003136:	6378      	str	r0, [r7, #52]	; 0x34
 8003138:	e004      	b.n	8003144 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800313a:	f002 fffd 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 800313e:	4603      	mov	r3, r0
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <HAL_InitTick+0xec>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	3b01      	subs	r3, #1
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_InitTick+0xf0>)
 8003154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003158:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_InitTick+0xf0>)
 800315c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003160:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_InitTick+0xf0>)
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_InitTick+0xf0>)
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_InitTick+0xf0>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_InitTick+0xf0>)
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800317a:	4818      	ldr	r0, [pc, #96]	; (80031dc <HAL_InitTick+0xf0>)
 800317c:	f003 fc76 	bl	8006a6c <HAL_TIM_Base_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11b      	bne.n	80031c6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800318e:	4813      	ldr	r0, [pc, #76]	; (80031dc <HAL_InitTick+0xf0>)
 8003190:	f003 fd24 	bl	8006bdc <HAL_TIM_Base_Start_IT>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800319a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d111      	bne.n	80031c6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031a2:	201c      	movs	r0, #28
 80031a4:	f000 fa3a 	bl	800361c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d808      	bhi.n	80031c0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80031ae:	2200      	movs	r2, #0
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	201c      	movs	r0, #28
 80031b4:	f000 fa16 	bl	80035e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b8:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_InitTick+0xf4>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e002      	b.n	80031c6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3738      	adds	r7, #56	; 0x38
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	20003424 	.word	0x20003424
 80031e0:	2000008c 	.word	0x2000008c

080031e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <NMI_Handler+0x4>

080031ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <HardFault_Handler+0x4>

080031f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <MemManage_Handler+0x4>

080031f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <BusFault_Handler+0x4>

080031fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <UsageFault_Handler+0x4>

08003202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA1_Stream1_IRQHandler+0x10>)
 8003216:	f000 fba7 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000099c 	.word	0x2000099c

08003224 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <DMA1_Stream3_IRQHandler+0x10>)
 800322a:	f000 fb9d 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000690 	.word	0x20000690

08003238 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <DMA1_Stream4_IRQHandler+0x10>)
 800323e:	f000 fb93 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200009fc 	.word	0x200009fc

0800324c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003250:	4802      	ldr	r0, [pc, #8]	; (800325c <TIM2_IRQHandler+0x10>)
 8003252:	f003 fe55 	bl	8006f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20003424 	.word	0x20003424

08003260 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <USART3_IRQHandler+0x10>)
 8003266:	f004 fdf3 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000958 	.word	0x20000958

08003274 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <DMA1_Stream7_IRQHandler+0x10>)
 800327a:	f000 fb75 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200006f0 	.word	0x200006f0

08003288 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <DMA2_Stream1_IRQHandler+0x10>)
 800328e:	f000 fb6b 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200008f8 	.word	0x200008f8

0800329c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <DMA2_Stream2_IRQHandler+0x10>)
 80032a2:	f000 fb61 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200007a8 	.word	0x200007a8

080032b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <DMA2_Stream5_IRQHandler+0x10>)
 80032b6:	f000 fb57 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000808 	.word	0x20000808

080032c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <_sbrk+0x5c>)
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_sbrk+0x60>)
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_sbrk+0x64>)
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <_sbrk+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f4:	f00b fd82 	bl	800edfc <__errno>
 80032f8:	4603      	mov	r3, r0
 80032fa:	220c      	movs	r2, #12
 80032fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e009      	b.n	8003318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <_sbrk+0x64>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <_sbrk+0x64>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <_sbrk+0x64>)
 8003314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20030000 	.word	0x20030000
 8003324:	00000400 	.word	0x00000400
 8003328:	20003470 	.word	0x20003470
 800332c:	20007258 	.word	0x20007258

08003330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <SystemInit+0x20>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <SystemInit+0x20>)
 800333c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800338c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003360:	e002      	b.n	8003368 <LoopCopyDataInit>

08003362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003366:	3304      	adds	r3, #4

08003368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800336c:	d3f9      	bcc.n	8003362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003370:	4c0b      	ldr	r4, [pc, #44]	; (80033a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003374:	e001      	b.n	800337a <LoopFillZerobss>

08003376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003378:	3204      	adds	r2, #4

0800337a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800337c:	d3fb      	bcc.n	8003376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800337e:	f7ff ffd7 	bl	8003330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003382:	f00b fd41 	bl	800ee08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003386:	f7fe fbed 	bl	8001b64 <main>
  bx  lr    
 800338a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800338c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003394:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003398:	0800fb10 	.word	0x0800fb10
  ldr r2, =_sbss
 800339c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80033a0:	20007258 	.word	0x20007258

080033a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a4:	e7fe      	b.n	80033a4 <ADC_IRQHandler>
	...

080033a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_Init+0x40>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <HAL_Init+0x40>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_Init+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_Init+0x40>)
 80033be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_Init+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_Init+0x40>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d0:	2003      	movs	r0, #3
 80033d2:	f000 f8fc 	bl	80035ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033d6:	200f      	movs	r0, #15
 80033d8:	f7ff fe88 	bl	80030ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033dc:	f7ff fa64 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000090 	.word	0x20000090
 8003410:	20003474 	.word	0x20003474

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20003474 	.word	0x20003474

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000090 	.word	0x20000090

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff4c 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f6:	f7ff ff61 	bl	80034bc <__NVIC_GetPriorityGrouping>
 80035fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	6978      	ldr	r0, [r7, #20]
 8003602:	f7ff ffb1 	bl	8003568 <NVIC_EncodePriority>
 8003606:	4602      	mov	r2, r0
 8003608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff80 	bl	8003514 <__NVIC_SetPriority>
}
 8003614:	bf00      	nop
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ff54 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003644:	f7ff fee6 	bl	8003414 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e099      	b.n	8003788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003674:	e00f      	b.n	8003696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003676:	f7ff fecd 	bl	8003414 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b05      	cmp	r3, #5
 8003682:	d908      	bls.n	8003696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2203      	movs	r2, #3
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e078      	b.n	8003788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e8      	bne.n	8003676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_DMA_Init+0x158>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4313      	orrs	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0307 	bic.w	r3, r3, #7
 8003716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b04      	cmp	r3, #4
 8003728:	d117      	bne.n	800375a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb0d 	bl	8003d5c <DMA_CheckFifoParam>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003756:	2301      	movs	r3, #1
 8003758:	e016      	b.n	8003788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fac4 	bl	8003cf0 <DMA_CalcBaseAndBitshift>
 8003768:	4603      	mov	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	223f      	movs	r2, #63	; 0x3f
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	f010803f 	.word	0xf010803f

08003794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Start_IT+0x26>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e040      	b.n	800383c <HAL_DMA_Start_IT+0xa8>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d12f      	bne.n	800382e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa56 	bl	8003c94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	223f      	movs	r2, #63	; 0x3f
 80037ee:	409a      	lsls	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0216 	orr.w	r2, r2, #22
 8003802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0208 	orr.w	r2, r2, #8
 800381a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e005      	b.n	800383a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003852:	f7ff fddf 	bl	8003414 <HAL_GetTick>
 8003856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e052      	b.n	800391c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0216 	bic.w	r2, r2, #22
 8003884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_DMA_Abort+0x62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c6:	e013      	b.n	80038f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c8:	f7ff fda4 	bl	8003414 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d90c      	bls.n	80038f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2203      	movs	r2, #3
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e015      	b.n	800391c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e4      	bne.n	80038c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	223f      	movs	r2, #63	; 0x3f
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e00c      	b.n	800395c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2205      	movs	r2, #5
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003974:	4b8e      	ldr	r3, [pc, #568]	; (8003bb0 <HAL_DMA_IRQHandler+0x248>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8e      	ldr	r2, [pc, #568]	; (8003bb4 <HAL_DMA_IRQHandler+0x24c>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2208      	movs	r2, #8
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2201      	movs	r2, #1
 80039f8:	409a      	lsls	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2204      	movs	r2, #4
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	2210      	movs	r2, #16
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d043      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03c      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	2210      	movs	r2, #16
 8003a64:	409a      	lsls	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d024      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
 8003a96:	e01f      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	e016      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0208 	bic.w	r2, r2, #8
 8003ac6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2220      	movs	r2, #32
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 808f 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8087 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	2220      	movs	r2, #32
 8003b00:	409a      	lsls	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d136      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x1da>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	223f      	movs	r2, #63	; 0x3f
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d07e      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
        }
        return;
 8003b7e:	e079      	b.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d031      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e02c      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
 8003bae:	bf00      	nop
 8003bb0:	20000088 	.word	0x20000088
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e01e      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0210 	bic.w	r2, r2, #16
 8003be6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d032      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2205      	movs	r2, #5
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d307      	bcc.n	8003c50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f2      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x2cc>
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c74:	bf00      	nop
    }
  }
}
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d108      	bne.n	8003cd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cd2:	e007      	b.n	8003ce4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	3b10      	subs	r3, #16
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <DMA_CalcBaseAndBitshift+0x64>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d0a:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <DMA_CalcBaseAndBitshift+0x68>)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d909      	bls.n	8003d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	1d1a      	adds	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d30:	e007      	b.n	8003d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	aaaaaaab 	.word	0xaaaaaaab
 8003d58:	0800f9e4 	.word	0x0800f9e4

08003d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11f      	bne.n	8003db6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d856      	bhi.n	8003e2a <DMA_CheckFifoParam+0xce>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <DMA_CheckFifoParam+0x28>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003d95 	.word	0x08003d95
 8003d88:	08003da7 	.word	0x08003da7
 8003d8c:	08003d95 	.word	0x08003d95
 8003d90:	08003e2b 	.word	0x08003e2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d046      	beq.n	8003e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e043      	b.n	8003e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dae:	d140      	bne.n	8003e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e03d      	b.n	8003e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbe:	d121      	bne.n	8003e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d837      	bhi.n	8003e36 <DMA_CheckFifoParam+0xda>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <DMA_CheckFifoParam+0x70>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de3 	.word	0x08003de3
 8003dd4:	08003ddd 	.word	0x08003ddd
 8003dd8:	08003df5 	.word	0x08003df5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e030      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d025      	beq.n	8003e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df2:	e022      	b.n	8003e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dfc:	d11f      	bne.n	8003e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e02:	e01c      	b.n	8003e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d903      	bls.n	8003e12 <DMA_CheckFifoParam+0xb6>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d003      	beq.n	8003e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e10:	e018      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      break;
 8003e16:	e015      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e00b      	b.n	8003e42 <DMA_CheckFifoParam+0xe6>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e00a      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e008      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e006      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
    }
  } 
  
  return status; 
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop

08003e54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06c      	b.n	8003f40 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2223      	movs	r2, #35	; 0x23
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fe fd41 	bl	8002900 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_ETH_Init+0xf4>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_ETH_Init+0xf4>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_ETH_Init+0xf4>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <HAL_ETH_Init+0xf8>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <HAL_ETH_Init+0xf8>)
 8003ea0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ea4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <HAL_ETH_Init+0xf8>)
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4927      	ldr	r1, [pc, #156]	; (8003f4c <HAL_ETH_Init+0xf8>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_ETH_Init+0xf8>)
 8003eb6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ece:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed0:	f7ff faa0 	bl	8003414 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ed6:	e011      	b.n	8003efc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ed8:	f7ff fa9c 	bl	8003414 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ee6:	d909      	bls.n	8003efc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	22e0      	movs	r2, #224	; 0xe0
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e021      	b.n	8003f40 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e4      	bne.n	8003ed8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f958 	bl	80041c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9ff 	bl	8004318 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa55 	bl	80043ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	461a      	mov	r2, r3
 8003f26:	2100      	movs	r1, #0
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9bd 	bl	80042a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800

08003f50 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4b51      	ldr	r3, [pc, #324]	; (80040ac <ETH_SetMACConfig+0x15c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	7c1b      	ldrb	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <ETH_SetMACConfig+0x28>
 8003f72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f76:	e000      	b.n	8003f7a <ETH_SetMACConfig+0x2a>
 8003f78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	7c5b      	ldrb	r3, [r3, #17]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <ETH_SetMACConfig+0x38>
 8003f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f86:	e000      	b.n	8003f8a <ETH_SetMACConfig+0x3a>
 8003f88:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f8a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	7fdb      	ldrb	r3, [r3, #31]
 8003f96:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f98:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	7f92      	ldrb	r2, [r2, #30]
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	d102      	bne.n	8003fae <ETH_SetMACConfig+0x5e>
 8003fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fac:	e000      	b.n	8003fb0 <ETH_SetMACConfig+0x60>
 8003fae:	2200      	movs	r2, #0
                        macconf->Speed |
 8003fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	7f1b      	ldrb	r3, [r3, #28]
 8003fb6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003fb8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003fbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	791b      	ldrb	r3, [r3, #4]
 8003fc4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fce:	2a00      	cmp	r2, #0
 8003fd0:	d102      	bne.n	8003fd8 <ETH_SetMACConfig+0x88>
 8003fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd6:	e000      	b.n	8003fda <ETH_SetMACConfig+0x8a>
 8003fd8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7bdb      	ldrb	r3, [r3, #15]
 8003fe0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fe2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800400a:	2001      	movs	r0, #1
 800400c:	f7ff fa0e 	bl	800342c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004026:	4013      	ands	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004036:	2a00      	cmp	r2, #0
 8004038:	d101      	bne.n	800403e <ETH_SetMACConfig+0xee>
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	e000      	b.n	8004040 <ETH_SetMACConfig+0xf0>
 800403e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004040:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800404e:	2a01      	cmp	r2, #1
 8004050:	d101      	bne.n	8004056 <ETH_SetMACConfig+0x106>
 8004052:	2208      	movs	r2, #8
 8004054:	e000      	b.n	8004058 <ETH_SetMACConfig+0x108>
 8004056:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004058:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004060:	2a01      	cmp	r2, #1
 8004062:	d101      	bne.n	8004068 <ETH_SetMACConfig+0x118>
 8004064:	2204      	movs	r2, #4
 8004066:	e000      	b.n	800406a <ETH_SetMACConfig+0x11a>
 8004068:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800406a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004072:	2a01      	cmp	r2, #1
 8004074:	d101      	bne.n	800407a <ETH_SetMACConfig+0x12a>
 8004076:	2202      	movs	r2, #2
 8004078:	e000      	b.n	800407c <ETH_SetMACConfig+0x12c>
 800407a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800407c:	4313      	orrs	r3, r2
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004094:	2001      	movs	r0, #1
 8004096:	f7ff f9c9 	bl	800342c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	619a      	str	r2, [r3, #24]
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	ff20810f 	.word	0xff20810f

080040b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <ETH_SetDMAConfig+0x110>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7b1b      	ldrb	r3, [r3, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <ETH_SetDMAConfig+0x2c>
 80040d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040da:	e000      	b.n	80040de <ETH_SetDMAConfig+0x2e>
 80040dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	7b5b      	ldrb	r3, [r3, #13]
 80040e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	7f52      	ldrb	r2, [r2, #29]
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d102      	bne.n	80040f4 <ETH_SetDMAConfig+0x44>
 80040ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040f2:	e000      	b.n	80040f6 <ETH_SetDMAConfig+0x46>
 80040f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	7b9b      	ldrb	r3, [r3, #14]
 80040fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004104:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	7f1b      	ldrb	r3, [r3, #28]
 800410a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800410c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	7f9b      	ldrb	r3, [r3, #30]
 8004112:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004114:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800411a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004122:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004124:	4313      	orrs	r3, r2
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	461a      	mov	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004146:	2001      	movs	r0, #1
 8004148:	f7ff f970 	bl	800342c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	461a      	mov	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	791b      	ldrb	r3, [r3, #4]
 800415e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004164:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800416a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004170:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004178:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800417a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004182:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004188:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004192:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004196:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7ff f941 	bl	800342c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	f8de3f23 	.word	0xf8de3f23

080041c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0a6      	sub	sp, #152	; 0x98
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80041d8:	2300      	movs	r3, #0
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004200:	2300      	movs	r3, #0
 8004202:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800420a:	2300      	movs	r3, #0
 800420c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800422c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004230:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004238:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fe86 	bl	8003f50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004244:	2301      	movs	r3, #1
 8004246:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004248:	2301      	movs	r3, #1
 800424a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004252:	2301      	movs	r3, #1
 8004254:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004266:	2300      	movs	r3, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004270:	2301      	movs	r3, #1
 8004272:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004278:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800427a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800427e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004284:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800428c:	2300      	movs	r3, #0
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff08 	bl	80040b0 <ETH_SetDMAConfig>
}
 80042a0:	bf00      	nop
 80042a2:	3798      	adds	r7, #152	; 0x98
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3305      	adds	r3, #5
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	3204      	adds	r2, #4
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <ETH_MACAddressConfig+0x68>)
 80042ca:	4413      	add	r3, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3303      	adds	r3, #3
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	061a      	lsls	r2, r3, #24
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3302      	adds	r3, #2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	4313      	orrs	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <ETH_MACAddressConfig+0x6c>)
 80042fa:	4413      	add	r3, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6013      	str	r3, [r2, #0]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40028040 	.word	0x40028040
 8004314:	40028044 	.word	0x40028044

08004318 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e03e      	b.n	80043a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	440b      	add	r3, r1
 8004336:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	3206      	adds	r2, #6
 8004358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d80c      	bhi.n	8004388 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68d9      	ldr	r1, [r3, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	440b      	add	r3, r1
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	e004      	b.n	8004392 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d9bd      	bls.n	8004326 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	611a      	str	r2, [r3, #16]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e046      	b.n	8004466 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004414:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800441c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	3212      	adds	r2, #18
 8004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d80c      	bhi.n	8004456 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6919      	ldr	r1, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	e004      	b.n	8004460 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d9b5      	bls.n	80043d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	60da      	str	r2, [r3, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e177      	b.n	80047b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8166 	bne.w	80047aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80c0 	beq.w	80047aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <HAL_GPIO_Init+0x324>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <HAL_GPIO_Init+0x324>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6453      	str	r3, [r2, #68]	; 0x44
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_GPIO_Init+0x324>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a61      	ldr	r2, [pc, #388]	; (80047cc <HAL_GPIO_Init+0x328>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_GPIO_Init+0x32c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d037      	beq.n	80046e2 <HAL_GPIO_Init+0x23e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a57      	ldr	r2, [pc, #348]	; (80047d4 <HAL_GPIO_Init+0x330>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_GPIO_Init+0x23a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_GPIO_Init+0x334>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02b      	beq.n	80046da <HAL_GPIO_Init+0x236>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a55      	ldr	r2, [pc, #340]	; (80047dc <HAL_GPIO_Init+0x338>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d025      	beq.n	80046d6 <HAL_GPIO_Init+0x232>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a54      	ldr	r2, [pc, #336]	; (80047e0 <HAL_GPIO_Init+0x33c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01f      	beq.n	80046d2 <HAL_GPIO_Init+0x22e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a53      	ldr	r2, [pc, #332]	; (80047e4 <HAL_GPIO_Init+0x340>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d019      	beq.n	80046ce <HAL_GPIO_Init+0x22a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_GPIO_Init+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_GPIO_Init+0x226>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a51      	ldr	r2, [pc, #324]	; (80047ec <HAL_GPIO_Init+0x348>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00d      	beq.n	80046c6 <HAL_GPIO_Init+0x222>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a50      	ldr	r2, [pc, #320]	; (80047f0 <HAL_GPIO_Init+0x34c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <HAL_GPIO_Init+0x21e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4f      	ldr	r2, [pc, #316]	; (80047f4 <HAL_GPIO_Init+0x350>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <HAL_GPIO_Init+0x21a>
 80046ba:	2309      	movs	r3, #9
 80046bc:	e012      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046be:	230a      	movs	r3, #10
 80046c0:	e010      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046c2:	2308      	movs	r3, #8
 80046c4:	e00e      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e00c      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046ca:	2306      	movs	r3, #6
 80046cc:	e00a      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046ce:	2305      	movs	r3, #5
 80046d0:	e008      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e006      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e004      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046da:	2302      	movs	r3, #2
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046e2:	2300      	movs	r3, #0
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f002 0203 	and.w	r2, r2, #3
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	4093      	lsls	r3, r2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f4:	4935      	ldr	r1, [pc, #212]	; (80047cc <HAL_GPIO_Init+0x328>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004726:	4a34      	ldr	r2, [pc, #208]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <HAL_GPIO_Init+0x354>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_GPIO_Init+0x354>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <HAL_GPIO_Init+0x354>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f ae84 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40020400 	.word	0x40020400
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40021400 	.word	0x40021400
 80047e8:	40021800 	.word	0x40021800
 80047ec:	40021c00 	.word	0x40021c00
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022400 	.word	0x40022400
 80047f8:	40013c00 	.word	0x40013c00

080047fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e001      	b.n	800481e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]
 8004838:	4613      	mov	r3, r2
 800483a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800483c:	787b      	ldrb	r3, [r7, #1]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004848:	e003      	b.n	8004852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	041a      	lsls	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	619a      	str	r2, [r3, #24]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004870:	887a      	ldrh	r2, [r7, #2]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4013      	ands	r3, r2
 8004876:	041a      	lsls	r2, r3, #16
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43d9      	mvns	r1, r3
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	400b      	ands	r3, r1
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e12b      	b.n	8004afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fe f8e6 	bl	8002a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	; 0x24
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f8:	f001 fc1e 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a81      	ldr	r2, [pc, #516]	; (8004b08 <HAL_I2C_Init+0x274>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d807      	bhi.n	8004918 <HAL_I2C_Init+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a80      	ldr	r2, [pc, #512]	; (8004b0c <HAL_I2C_Init+0x278>)
 800490c:	4293      	cmp	r3, r2
 800490e:	bf94      	ite	ls
 8004910:	2301      	movls	r3, #1
 8004912:	2300      	movhi	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e006      	b.n	8004926 <HAL_I2C_Init+0x92>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a7d      	ldr	r2, [pc, #500]	; (8004b10 <HAL_I2C_Init+0x27c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	bf94      	ite	ls
 8004920:	2301      	movls	r3, #1
 8004922:	2300      	movhi	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0e7      	b.n	8004afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a78      	ldr	r2, [pc, #480]	; (8004b14 <HAL_I2C_Init+0x280>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9b      	lsrs	r3, r3, #18
 8004938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a6a      	ldr	r2, [pc, #424]	; (8004b08 <HAL_I2C_Init+0x274>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d802      	bhi.n	8004968 <HAL_I2C_Init+0xd4>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3301      	adds	r3, #1
 8004966:	e009      	b.n	800497c <HAL_I2C_Init+0xe8>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <HAL_I2C_Init+0x284>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	3301      	adds	r3, #1
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	430b      	orrs	r3, r1
 8004982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800498e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	495c      	ldr	r1, [pc, #368]	; (8004b08 <HAL_I2C_Init+0x274>)
 8004998:	428b      	cmp	r3, r1
 800499a:	d819      	bhi.n	80049d0 <HAL_I2C_Init+0x13c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e59      	subs	r1, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049b0:	400b      	ands	r3, r1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_I2C_Init+0x138>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1e59      	subs	r1, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c4:	3301      	adds	r3, #1
 80049c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ca:	e051      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049cc:	2304      	movs	r3, #4
 80049ce:	e04f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d111      	bne.n	80049fc <HAL_I2C_Init+0x168>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	440b      	add	r3, r1
 80049e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e012      	b.n	8004a22 <HAL_I2C_Init+0x18e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Init+0x196>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e022      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10e      	bne.n	8004a50 <HAL_I2C_Init+0x1bc>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e58      	subs	r0, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	440b      	add	r3, r1
 8004a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4e:	e00f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	6809      	ldr	r1, [r1, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6911      	ldr	r1, [r2, #16]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	000186a0 	.word	0x000186a0
 8004b0c:	001e847f 	.word	0x001e847f
 8004b10:	003d08ff 	.word	0x003d08ff
 8004b14:	431bde83 	.word	0x431bde83
 8004b18:	10624dd3 	.word	0x10624dd3

08004b1c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	817b      	strh	r3, [r7, #10]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	813b      	strh	r3, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b36:	f7fe fc6d 	bl	8003414 <HAL_GetTick>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	f040 8176 	bne.w	8004e3a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b4e:	4b95      	ldr	r3, [pc, #596]	; (8004da4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	4a94      	ldr	r2, [pc, #592]	; (8004da8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0a1a      	lsrs	r2, r3, #8
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d116      	bne.n	8004ba2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e14c      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d0db      	beq.n	8004b68 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Mem_Read_DMA+0xa2>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e13e      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d007      	beq.n	8004be4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2222      	movs	r2, #34	; 0x22
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a62      	ldr	r2, [pc, #392]	; (8004dac <HAL_I2C_Mem_Read_DMA+0x290>)
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c26:	897a      	ldrh	r2, [r7, #10]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004c2c:	893a      	ldrh	r2, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80cc 	beq.w	8004de0 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	4a56      	ldr	r2, [pc, #344]	; (8004db0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	4a55      	ldr	r2, [pc, #340]	; (8004db4 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	2200      	movs	r2, #0
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	2200      	movs	r2, #0
 8004c76:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3310      	adds	r3, #16
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	461a      	mov	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	f7fe fd7d 	bl	8003794 <HAL_DMA_Start_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 8087 	bne.w	8004db8 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004caa:	e013      	b.n	8004cd4 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b3      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004cd4:	88f8      	ldrh	r0, [r7, #6]
 8004cd6:	893a      	ldrh	r2, [r7, #8]
 8004cd8:	8979      	ldrh	r1, [r7, #10]
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	2323      	movs	r3, #35	; 0x23
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8df 	bl	8004ea8 <I2C_RequestMemoryRead>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d023      	beq.n	8004d38 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe fe15 	bl	8003924 <HAL_DMA_Abort_IT>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	2200      	movs	r2, #0
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e081      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d108      	bne.n	8004d52 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e007      	b.n	8004d62 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e049      	b.n	8004e36 <HAL_I2C_Mem_Read_DMA+0x31a>
 8004da2:	bf00      	nop
 8004da4:	20000088 	.word	0x20000088
 8004da8:	14f8b589 	.word	0x14f8b589
 8004dac:	ffff0000 	.word	0xffff0000
 8004db0:	08005079 	.word	0x08005079
 8004db4:	08005223 	.word	0x08005223
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f043 0210 	orr.w	r2, r3, #16
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e02d      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004de0:	88f8      	ldrh	r0, [r7, #6]
 8004de2:	893a      	ldrh	r2, [r7, #8]
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2323      	movs	r3, #35	; 0x23
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4603      	mov	r3, r0
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f859 	bl	8004ea8 <I2C_RequestMemoryRead>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01d      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3728      	adds	r7, #40	; 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	813b      	strh	r3, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f9d4 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f08:	d103      	bne.n	8004f12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0aa      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	6a3a      	ldr	r2, [r7, #32]
 8004f2a:	4952      	ldr	r1, [pc, #328]	; (8005074 <I2C_RequestMemoryRead+0x1cc>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa0c 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e097      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa76 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d107      	bne.n	8004f7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e076      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f84:	893b      	ldrh	r3, [r7, #8]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]
 8004f8e:	e021      	b.n	8004fd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	6a39      	ldr	r1, [r7, #32]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa50 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d107      	bne.n	8004fc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e050      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fca:	893b      	ldrh	r3, [r7, #8]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd6:	6a39      	ldr	r1, [r7, #32]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fa35 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d107      	bne.n	8004ffc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e035      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800500e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2200      	movs	r2, #0
 8005018:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f93d 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005036:	d103      	bne.n	8005040 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e013      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	6a3a      	ldr	r2, [r7, #32]
 8005058:	4906      	ldr	r1, [pc, #24]	; (8005074 <I2C_RequestMemoryRead+0x1cc>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f975 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00010002 	.word	0x00010002

08005078 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005094:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050aa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	2200      	movs	r2, #0
 80050ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2200      	movs	r2, #0
 80050ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80050d2:	2b21      	cmp	r3, #33	; 0x21
 80050d4:	d007      	beq.n	80050e6 <I2C_DMAXferCplt+0x6e>
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80050dc:	2b22      	cmp	r3, #34	; 0x22
 80050de:	d131      	bne.n	8005144 <I2C_DMAXferCplt+0xcc>
 80050e0:	7cbb      	ldrb	r3, [r7, #18]
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d12e      	bne.n	8005144 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	2b29      	cmp	r3, #41	; 0x29
 8005100:	d10a      	bne.n	8005118 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2228      	movs	r2, #40	; 0x28
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f7ff fea1 	bl	8004e58 <HAL_I2C_SlaveTxCpltCallback>
 8005116:	e00c      	b.n	8005132 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	2b2a      	cmp	r3, #42	; 0x2a
 800511c:	d109      	bne.n	8005132 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2222      	movs	r2, #34	; 0x22
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2228      	movs	r2, #40	; 0x28
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f7ff fe9d 	bl	8004e6c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005140:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005142:	e06a      	b.n	800521a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d064      	beq.n	800521a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005178:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005180:	d009      	beq.n	8005196 <I2C_DMAXferCplt+0x11e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d006      	beq.n	8005196 <I2C_DMAXferCplt+0x11e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800518e:	d002      	beq.n	8005196 <I2C_DMAXferCplt+0x11e>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b20      	cmp	r3, #32
 8005194:	d107      	bne.n	80051a6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80051d4:	6978      	ldr	r0, [r7, #20]
 80051d6:	f7ff fe5d 	bl	8004e94 <HAL_I2C_ErrorCallback>
}
 80051da:	e01e      	b.n	800521a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d10a      	bne.n	8005206 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7ff fe3e 	bl	8004e80 <HAL_I2C_MemRxCpltCallback>
}
 8005204:	e009      	b.n	800521a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2212      	movs	r2, #18
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	f7ff fe15 	bl	8004e44 <HAL_I2C_MasterRxCpltCallback>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	2200      	movs	r2, #0
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	2200      	movs	r2, #0
 800524e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fe fd13 	bl	8003c7c <HAL_DMA_GetError>
 8005256:	4603      	mov	r3, r0
 8005258:	2b02      	cmp	r3, #2
 800525a:	d01b      	beq.n	8005294 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fe00 	bl	8004e94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ac:	e025      	b.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d021      	beq.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fe f8ad 	bl	8003414 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d116      	bne.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e023      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10d      	bne.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	e00c      	b.n	800533a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	429a      	cmp	r2, r3
 800533e:	d0b6      	beq.n	80052ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005358:	e051      	b.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d123      	bne.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005382:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e046      	b.n	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d021      	beq.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fe f82b 	bl	8003414 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d116      	bne.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e020      	b.n	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10c      	bne.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	43da      	mvns	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e00b      	b.n	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	43da      	mvns	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d18d      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005454:	e02d      	b.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f837 	bl	80054ca <I2C_IsAcknowledgeFailed>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e02d      	b.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d021      	beq.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fd ffd1 	bl	8003414 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e007      	b.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d1ca      	bne.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d11b      	bne.n	800551a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0204 	orr.w	r2, r3, #4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b20      	cmp	r3, #32
 800553c:	d129      	bne.n	8005592 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2224      	movs	r2, #36	; 0x24
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0210 	bic.w	r2, r2, #16
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d12a      	bne.n	8005610 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	; 0x24
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	f023 030f 	bic.w	r3, r3, #15
 80055e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	89fb      	ldrh	r3, [r7, #14]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	89fa      	ldrh	r2, [r7, #14]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800561e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005620:	b08f      	sub	sp, #60	; 0x3c
 8005622:	af0a      	add	r7, sp, #40	; 0x28
 8005624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e10f      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fd fcf4 	bl	8003038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2203      	movs	r2, #3
 8005654:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f003 fd2f 	bl	80090d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	687e      	ldr	r6, [r7, #4]
 800567c:	466d      	mov	r5, sp
 800567e:	f106 0410 	add.w	r4, r6, #16
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005692:	1d33      	adds	r3, r6, #4
 8005694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f003 fcba 	bl	8009010 <USB_CoreInit>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0d0      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 fd1d 	bl	80090f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e04a      	b.n	8005756 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	333d      	adds	r3, #61	; 0x3d
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	333c      	adds	r3, #60	; 0x3c
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	b298      	uxth	r0, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	3344      	adds	r3, #68	; 0x44
 80056fc:	4602      	mov	r2, r0
 80056fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005700:	7bfa      	ldrb	r2, [r7, #15]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	3340      	adds	r3, #64	; 0x40
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3348      	adds	r3, #72	; 0x48
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	334c      	adds	r3, #76	; 0x4c
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3354      	adds	r3, #84	; 0x54
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	3301      	adds	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3af      	bcc.n	80056c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e044      	b.n	80057f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	3301      	adds	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3b5      	bcc.n	8005766 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	687e      	ldr	r6, [r7, #4]
 8005802:	466d      	mov	r5, sp
 8005804:	f106 0410 	add.w	r4, r6, #16
 8005808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005814:	e885 0003 	stmia.w	r5, {r0, r1}
 8005818:	1d33      	adds	r3, r6, #4
 800581a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800581c:	6838      	ldr	r0, [r7, #0]
 800581e:	f003 fcb5 	bl	800918c <USB_DevInit>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e00d      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f003 fe80 	bl	800954e <USB_DevDisconnect>

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e267      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d075      	beq.n	8005962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005876:	4b88      	ldr	r3, [pc, #544]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b04      	cmp	r3, #4
 8005880:	d00c      	beq.n	800589c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588a:	2b08      	cmp	r3, #8
 800588c:	d112      	bne.n	80058b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800588e:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800589a:	d10b      	bne.n	80058b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	4b7e      	ldr	r3, [pc, #504]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05b      	beq.n	8005960 <HAL_RCC_OscConfig+0x108>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d157      	bne.n	8005960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e242      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d106      	bne.n	80058cc <HAL_RCC_OscConfig+0x74>
 80058be:	4b76      	ldr	r3, [pc, #472]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a75      	ldr	r2, [pc, #468]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e01d      	b.n	8005908 <HAL_RCC_OscConfig+0xb0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x98>
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6f      	ldr	r2, [pc, #444]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6c      	ldr	r2, [pc, #432]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0xb0>
 80058f0:	4b69      	ldr	r3, [pc, #420]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a68      	ldr	r2, [pc, #416]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	4b66      	ldr	r3, [pc, #408]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a65      	ldr	r2, [pc, #404]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fd fd80 	bl	8003414 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005918:	f7fd fd7c 	bl	8003414 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e207      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0xc0>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fd fd6c 	bl	8003414 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005940:	f7fd fd68 	bl	8003414 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	; 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e1f3      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0xe8>
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597a:	4b47      	ldr	r3, [pc, #284]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005982:	2b08      	cmp	r3, #8
 8005984:	d11c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005986:	4b44      	ldr	r3, [pc, #272]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_RCC_OscConfig+0x152>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e1c7      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4937      	ldr	r1, [pc, #220]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059be:	e03a      	b.n	8005a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c8:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <HAL_RCC_OscConfig+0x244>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fd fd21 	bl	8003414 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fd fd1d 	bl	8003414 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e1a8      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4925      	ldr	r1, [pc, #148]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]
 8005a08:	e015      	b.n	8005a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCC_OscConfig+0x244>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fd fd00 	bl	8003414 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a18:	f7fd fcfc 	bl	8003414 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e187      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d036      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCC_OscConfig+0x248>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7fd fce0 	bl	8003414 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a58:	f7fd fcdc 	bl	8003414 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e167      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x200>
 8005a76:	e01b      	b.n	8005ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_OscConfig+0x248>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fd fcc9 	bl	8003414 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a84:	e00e      	b.n	8005aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a86:	f7fd fcc5 	bl	8003414 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d907      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e150      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	42470000 	.word	0x42470000
 8005aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa4:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ea      	bne.n	8005a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8097 	beq.w	8005bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac2:	4b81      	ldr	r3, [pc, #516]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	4b7d      	ldr	r3, [pc, #500]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	4a7c      	ldr	r2, [pc, #496]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005adc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ade:	4b7a      	ldr	r3, [pc, #488]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aee:	4b77      	ldr	r3, [pc, #476]	; (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d118      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afa:	4b74      	ldr	r3, [pc, #464]	; (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a73      	ldr	r2, [pc, #460]	; (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b06:	f7fd fc85 	bl	8003414 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0e:	f7fd fc81 	bl	8003414 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e10c      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	4b6a      	ldr	r3, [pc, #424]	; (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d106      	bne.n	8005b42 <HAL_RCC_OscConfig+0x2ea>
 8005b34:	4b64      	ldr	r3, [pc, #400]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a63      	ldr	r2, [pc, #396]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	e01c      	b.n	8005b7c <HAL_RCC_OscConfig+0x324>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x30c>
 8005b4a:	4b5f      	ldr	r3, [pc, #380]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a5e      	ldr	r2, [pc, #376]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	4b5c      	ldr	r3, [pc, #368]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a5b      	ldr	r2, [pc, #364]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0x324>
 8005b64:	4b58      	ldr	r3, [pc, #352]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	4a57      	ldr	r2, [pc, #348]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b70:	4b55      	ldr	r3, [pc, #340]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4a54      	ldr	r2, [pc, #336]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b76:	f023 0304 	bic.w	r3, r3, #4
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fd fc46 	bl	8003414 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8c:	f7fd fc42 	bl	8003414 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0cb      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba2:	4b49      	ldr	r3, [pc, #292]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ee      	beq.n	8005b8c <HAL_RCC_OscConfig+0x334>
 8005bae:	e014      	b.n	8005bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb0:	f7fd fc30 	bl	8003414 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb8:	f7fd fc2c 	bl	8003414 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e0b5      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bce:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be0:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	4a38      	ldr	r2, [pc, #224]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a1 	beq.w	8005d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bf6:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d05c      	beq.n	8005cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d141      	bne.n	8005c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fd fc00 	bl	8003414 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fd fbfc 	bl	8003414 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e087      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	019b      	lsls	r3, r3, #6
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	491b      	ldr	r1, [pc, #108]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c66:	f7fd fbd5 	bl	8003414 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6e:	f7fd fbd1 	bl	8003414 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e05c      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x416>
 8005c8c:	e054      	b.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fd fbbe 	bl	8003414 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fd fbba 	bl	8003414 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e045      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x444>
 8005cba:	e03d      	b.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e038      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <HAL_RCC_OscConfig+0x4ec>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d121      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d11a      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d111      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023800 	.word	0x40023800

08005d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0cc      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d5c:	4b68      	ldr	r3, [pc, #416]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d90c      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d044      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d119      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e06:	4b3f      	ldr	r3, [pc, #252]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e06f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e16:	4b3b      	ldr	r3, [pc, #236]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e067      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4934      	ldr	r1, [pc, #208]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e38:	f7fd faec 	bl	8003414 <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e40:	f7fd fae8 	bl	8003414 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e04f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e56:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 020c 	and.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1eb      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d20c      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e76:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee0:	5ccb      	ldrb	r3, [r1, r3]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1c8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd f8fc 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023c00 	.word	0x40023c00
 8005f04:	40023800 	.word	0x40023800
 8005f08:	0800f9cc 	.word	0x0800f9cc
 8005f0c:	20000088 	.word	0x20000088
 8005f10:	2000008c 	.word	0x2000008c

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f18:	b094      	sub	sp, #80	; 0x50
 8005f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	2300      	movs	r3, #0
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	2300      	movs	r3, #0
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f2c:	4b79      	ldr	r3, [pc, #484]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d00d      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x40>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	f200 80e1 	bhi.w	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x34>
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f46:	e0db      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f48:	4b73      	ldr	r3, [pc, #460]	; (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f4c:	e0db      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4e:	4b73      	ldr	r3, [pc, #460]	; (800611c <HAL_RCC_GetSysClockFreq+0x208>)
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f52:	e0d8      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f5e:	4b6d      	ldr	r3, [pc, #436]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d063      	beq.n	8006032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	099b      	lsrs	r3, r3, #6
 8005f70:	2200      	movs	r2, #0
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f98:	0150      	lsls	r0, r2, #5
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	1a51      	subs	r1, r2, r1
 8005fa2:	6139      	str	r1, [r7, #16]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fb8:	4659      	mov	r1, fp
 8005fba:	018b      	lsls	r3, r1, #6
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fc2:	4651      	mov	r1, sl
 8005fc4:	018a      	lsls	r2, r1, #6
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fcc:	4659      	mov	r1, fp
 8005fce:	eb63 0901 	sbc.w	r9, r3, r1
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fe6:	4690      	mov	r8, r2
 8005fe8:	4699      	mov	r9, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	eb18 0303 	adds.w	r3, r8, r3
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	eb49 0303 	adc.w	r3, r9, r3
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006006:	4629      	mov	r1, r5
 8006008:	024b      	lsls	r3, r1, #9
 800600a:	4621      	mov	r1, r4
 800600c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006010:	4621      	mov	r1, r4
 8006012:	024a      	lsls	r2, r1, #9
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	2200      	movs	r2, #0
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006024:	f7fa f93c 	bl	80002a0 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4613      	mov	r3, r2
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006030:	e058      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	4611      	mov	r1, r2
 800603e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	2300      	movs	r3, #0
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	0159      	lsls	r1, r3, #5
 800605a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800605e:	0150      	lsls	r0, r2, #5
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4641      	mov	r1, r8
 8006066:	ebb2 0a01 	subs.w	sl, r2, r1
 800606a:	4649      	mov	r1, r9
 800606c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800607c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006084:	ebb2 040a 	subs.w	r4, r2, sl
 8006088:	eb63 050b 	sbc.w	r5, r3, fp
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	00eb      	lsls	r3, r5, #3
 8006096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609a:	00e2      	lsls	r2, r4, #3
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	18e3      	adds	r3, r4, r3
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	464b      	mov	r3, r9
 80060a8:	eb45 0303 	adc.w	r3, r5, r3
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ba:	4629      	mov	r1, r5
 80060bc:	028b      	lsls	r3, r1, #10
 80060be:	4621      	mov	r1, r4
 80060c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c4:	4621      	mov	r1, r4
 80060c6:	028a      	lsls	r2, r1, #10
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ce:	2200      	movs	r2, #0
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	61fa      	str	r2, [r7, #28]
 80060d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d8:	f7fa f8e2 	bl	80002a0 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060fe:	e002      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006108:	4618      	mov	r0, r3
 800610a:	3750      	adds	r7, #80	; 0x50
 800610c:	46bd      	mov	sp, r7
 800610e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800
 8006118:	00f42400 	.word	0x00f42400
 800611c:	007a1200 	.word	0x007a1200

08006120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <HAL_RCC_GetHCLKFreq+0x14>)
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000088 	.word	0x20000088

08006138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800613c:	f7ff fff0 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	0a9b      	lsrs	r3, r3, #10
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	4903      	ldr	r1, [pc, #12]	; (800615c <HAL_RCC_GetPCLK1Freq+0x24>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	0800f9dc 	.word	0x0800f9dc

08006160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006164:	f7ff ffdc 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0b5b      	lsrs	r3, r3, #13
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40023800 	.word	0x40023800
 8006184:	0800f9dc 	.word	0x0800f9dc

08006188 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	220f      	movs	r2, #15
 8006196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0203 	and.w	r2, r3, #3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <HAL_RCC_GetClockConfig+0x60>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40023c00 	.word	0x40023c00

080061ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07b      	b.n	80062f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620e:	d009      	beq.n	8006224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	61da      	str	r2, [r3, #28]
 8006216:	e005      	b.n	8006224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc fcd0 	bl	8002be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	ea42 0103 	orr.w	r1, r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	f003 0104 	and.w	r1, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	f003 0210 	and.w	r2, r3, #16
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b088      	sub	sp, #32
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_SPI_Transmit+0x22>
 800631c:	2302      	movs	r3, #2
 800631e:	e126      	b.n	800656e <HAL_SPI_Transmit+0x270>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006328:	f7fd f874 	bl	8003414 <HAL_GetTick>
 800632c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	d002      	beq.n	8006344 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006342:	e10b      	b.n	800655c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_Transmit+0x52>
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006354:	e102      	b.n	800655c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2203      	movs	r2, #3
 800635a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	88fa      	ldrh	r2, [r7, #6]
 800636e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639c:	d10f      	bne.n	80063be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d007      	beq.n	80063dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e4:	d14b      	bne.n	800647e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0xf6>
 80063ee:	8afb      	ldrh	r3, [r7, #22]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d13e      	bne.n	8006472 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	1c9a      	adds	r2, r3, #2
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006418:	e02b      	b.n	8006472 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d112      	bne.n	800644e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	881a      	ldrh	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	1c9a      	adds	r2, r3, #2
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	86da      	strh	r2, [r3, #54]	; 0x36
 800644c:	e011      	b.n	8006472 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644e:	f7fc ffe1 	bl	8003414 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d803      	bhi.n	8006466 <HAL_SPI_Transmit+0x168>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d102      	bne.n	800646c <HAL_SPI_Transmit+0x16e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006470:	e074      	b.n	800655c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1ce      	bne.n	800641a <HAL_SPI_Transmit+0x11c>
 800647c:	e04c      	b.n	8006518 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0x18e>
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d140      	bne.n	800650e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064b2:	e02c      	b.n	800650e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d113      	bne.n	80064ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e8:	e011      	b.n	800650e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ea:	f7fc ff93 	bl	8003414 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d803      	bhi.n	8006502 <HAL_SPI_Transmit+0x204>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Transmit+0x20a>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800650c:	e026      	b.n	800655c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cd      	bne.n	80064b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fa63 	bl	80069e8 <SPI_EndRxTxTransaction>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e000      	b.n	800655c <HAL_SPI_Transmit+0x25e>
  }

error:
 800655a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800656c:	7ffb      	ldrb	r3, [r7, #31]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b08c      	sub	sp, #48	; 0x30
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006584:	2301      	movs	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_SPI_TransmitReceive+0x26>
 8006598:	2302      	movs	r3, #2
 800659a:	e18a      	b.n	80068b2 <HAL_SPI_TransmitReceive+0x33c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065a4:	f7fc ff36 	bl	8003414 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d00f      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x70>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065cc:	d107      	bne.n	80065de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <HAL_SPI_TransmitReceive+0x68>
 80065d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d003      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065de:	2302      	movs	r3, #2
 80065e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e4:	e15b      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x82>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x82>
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065fe:	e14e      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b04      	cmp	r3, #4
 800660a:	d003      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2205      	movs	r2, #5
 8006610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	887a      	ldrh	r2, [r7, #2]
 800662a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	887a      	ldrh	r2, [r7, #2]
 8006636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d007      	beq.n	8006668 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006670:	d178      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x10a>
 800667a:	8b7b      	ldrh	r3, [r7, #26]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d166      	bne.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	1c9a      	adds	r2, r3, #2
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a4:	e053      	b.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d11b      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x176>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x176>
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d113      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d119      	bne.n	800672e <HAL_SPI_TransmitReceive+0x1b8>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d014      	beq.n	800672e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	b292      	uxth	r2, r2
 8006710:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800672a:	2301      	movs	r3, #1
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800672e:	f7fc fe71 	bl	8003414 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673a:	429a      	cmp	r2, r3
 800673c:	d807      	bhi.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d003      	beq.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800674c:	e0a7      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1a6      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x130>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1a1      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x130>
 8006762:	e07c      	b.n	800685e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x1fc>
 800676c:	8b7b      	ldrh	r3, [r7, #26]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d16b      	bne.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006798:	e057      	b.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d11c      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d114      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d119      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x2ae>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006824:	f7fc fdf6 	bl	8003414 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	429a      	cmp	r2, r3
 8006832:	d803      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x2c6>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d102      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x2cc>
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006848:	e029      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1a2      	bne.n	800679a <HAL_SPI_TransmitReceive+0x224>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d19d      	bne.n	800679a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f8c0 	bl	80069e8 <SPI_EndRxTxTransaction>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d006      	beq.n	800687c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800687a:	e010      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	e000      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800689c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3730      	adds	r7, #48	; 0x30
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c8:	b2db      	uxtb	r3, r3
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e8:	f7fc fd94 	bl	8003414 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f8:	f7fc fd8c 	bl	8003414 <HAL_GetTick>
 80068fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068fe:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	015b      	lsls	r3, r3, #5
 8006904:	0d1b      	lsrs	r3, r3, #20
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800690e:	e054      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d050      	beq.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006918:	f7fc fd7c 	bl	8003414 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	429a      	cmp	r2, r3
 8006926:	d902      	bls.n	800692e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d13d      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800693c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006946:	d111      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006950:	d004      	beq.n	800695c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d107      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006974:	d10f      	bne.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e017      	b.n	80069da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d19b      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000088 	.word	0x20000088

080069e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069f4:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <SPI_EndRxTxTransaction+0x7c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <SPI_EndRxTxTransaction+0x80>)
 80069fa:	fba2 2303 	umull	r2, r3, r2, r3
 80069fe:	0d5b      	lsrs	r3, r3, #21
 8006a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a12:	d112      	bne.n	8006a3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff ff5a 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d016      	beq.n	8006a58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e00f      	b.n	8006a5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d0f2      	beq.n	8006a3a <SPI_EndRxTxTransaction+0x52>
 8006a54:	e000      	b.n	8006a58 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a56:	bf00      	nop
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000088 	.word	0x20000088
 8006a68:	165e9f81 	.word	0x165e9f81

08006a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e041      	b.n	8006b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f974 	bl	8002d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f000 fce2 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e046      	b.n	8006bb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a23      	ldr	r2, [pc, #140]	; (8006bc0 <HAL_TIM_Base_Start+0xb4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d01d      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_TIM_Base_Start+0xb8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <HAL_TIM_Base_Start+0xbc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_TIM_Base_Start+0xc0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_TIM_Base_Start+0xc4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_TIM_Base_Start+0xc8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_TIM_Base_Start+0x70>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_TIM_Base_Start+0xcc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d111      	bne.n	8006ba0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b06      	cmp	r3, #6
 8006b8c:	d010      	beq.n	8006bb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0201 	orr.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9e:	e007      	b.n	8006bb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40010400 	.word	0x40010400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40001800 	.word	0x40001800

08006bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d001      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e04e      	b.n	8006c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d022      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1e:	d01d      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d013      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_TIM_Base_Start_IT+0xd0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x80>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a18      	ldr	r2, [pc, #96]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d111      	bne.n	8006c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b06      	cmp	r3, #6
 8006c6c:	d010      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	e007      	b.n	8006c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40001800 	.word	0x40001800

08006cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e041      	b.n	8006d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f839 	bl	8006d5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f000 fbba 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_TIM_PWM_Start+0x24>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e022      	b.n	8006dda <HAL_TIM_PWM_Start+0x6a>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d109      	bne.n	8006dae <HAL_TIM_PWM_Start+0x3e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e015      	b.n	8006dda <HAL_TIM_PWM_Start+0x6a>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d109      	bne.n	8006dc8 <HAL_TIM_PWM_Start+0x58>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	e008      	b.n	8006dda <HAL_TIM_PWM_Start+0x6a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e07c      	b.n	8006edc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <HAL_TIM_PWM_Start+0x82>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df0:	e013      	b.n	8006e1a <HAL_TIM_PWM_Start+0xaa>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d104      	bne.n	8006e02 <HAL_TIM_PWM_Start+0x92>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e00:	e00b      	b.n	8006e1a <HAL_TIM_PWM_Start+0xaa>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d104      	bne.n	8006e12 <HAL_TIM_PWM_Start+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e10:	e003      	b.n	8006e1a <HAL_TIM_PWM_Start+0xaa>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fe10 	bl	8007a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <HAL_TIM_PWM_Start+0x174>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_PWM_Start+0xcc>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2c      	ldr	r2, [pc, #176]	; (8006ee8 <HAL_TIM_PWM_Start+0x178>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIM_PWM_Start+0xd0>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <HAL_TIM_PWM_Start+0xd2>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <HAL_TIM_PWM_Start+0x174>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d022      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d01d      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	; (8006eec <HAL_TIM_PWM_Start+0x17c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1d      	ldr	r2, [pc, #116]	; (8006ef0 <HAL_TIM_PWM_Start+0x180>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1c      	ldr	r2, [pc, #112]	; (8006ef4 <HAL_TIM_PWM_Start+0x184>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <HAL_TIM_PWM_Start+0x178>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <HAL_TIM_PWM_Start+0x188>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a16      	ldr	r2, [pc, #88]	; (8006efc <HAL_TIM_PWM_Start+0x18c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d111      	bne.n	8006eca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b06      	cmp	r3, #6
 8006eb6:	d010      	beq.n	8006eda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec8:	e007      	b.n	8006eda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	40000800 	.word	0x40000800
 8006ef4:	40000c00 	.word	0x40000c00
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40001800 	.word	0x40001800

08006f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0202 	mvn.w	r2, #2
 8006f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa77 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa69 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa7a 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0204 	mvn.w	r2, #4
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa4d 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa3f 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa50 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0208 	mvn.w	r2, #8
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa23 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa15 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fa26 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0210 	mvn.w	r2, #16
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2208      	movs	r2, #8
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9f9 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9eb 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f9fc 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b01      	cmp	r3, #1
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0201 	mvn.w	r2, #1
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fb fbfd 	bl	800287e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fdca 	bl	8007c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	d10e      	bne.n	80070dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	d107      	bne.n	80070dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9c1 	bl	800745e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d10e      	bne.n	8007108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d107      	bne.n	8007108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0220 	mvn.w	r2, #32
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fd94 	bl	8007c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800712a:	2302      	movs	r3, #2
 800712c:	e0ae      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b0c      	cmp	r3, #12
 800713a:	f200 809f 	bhi.w	800727c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007179 	.word	0x08007179
 8007148:	0800727d 	.word	0x0800727d
 800714c:	0800727d 	.word	0x0800727d
 8007150:	0800727d 	.word	0x0800727d
 8007154:	080071b9 	.word	0x080071b9
 8007158:	0800727d 	.word	0x0800727d
 800715c:	0800727d 	.word	0x0800727d
 8007160:	0800727d 	.word	0x0800727d
 8007164:	080071fb 	.word	0x080071fb
 8007168:	0800727d 	.word	0x0800727d
 800716c:	0800727d 	.word	0x0800727d
 8007170:	0800727d 	.word	0x0800727d
 8007174:	0800723b 	.word	0x0800723b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fa18 	bl	80075b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0208 	orr.w	r2, r2, #8
 8007192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0204 	bic.w	r2, r2, #4
 80071a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6999      	ldr	r1, [r3, #24]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	619a      	str	r2, [r3, #24]
      break;
 80071b6:	e064      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fa68 	bl	8007694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6999      	ldr	r1, [r3, #24]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	619a      	str	r2, [r3, #24]
      break;
 80071f8:	e043      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fabd 	bl	8007780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0208 	orr.w	r2, r2, #8
 8007214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0204 	bic.w	r2, r2, #4
 8007224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	61da      	str	r2, [r3, #28]
      break;
 8007238:	e023      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fb11 	bl	8007868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69d9      	ldr	r1, [r3, #28]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	021a      	lsls	r2, r3, #8
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	61da      	str	r2, [r3, #28]
      break;
 800727a:	e002      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIM_ConfigClockSource+0x1c>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e0b4      	b.n	800741a <HAL_TIM_ConfigClockSource+0x186>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e8:	d03e      	beq.n	8007368 <HAL_TIM_ConfigClockSource+0xd4>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	f200 8087 	bhi.w	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	f000 8086 	beq.w	8007406 <HAL_TIM_ConfigClockSource+0x172>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d87f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b70      	cmp	r3, #112	; 0x70
 8007302:	d01a      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xa6>
 8007304:	2b70      	cmp	r3, #112	; 0x70
 8007306:	d87b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b60      	cmp	r3, #96	; 0x60
 800730a:	d050      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x11a>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d877      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b50      	cmp	r3, #80	; 0x50
 8007312:	d03c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0xfa>
 8007314:	2b50      	cmp	r3, #80	; 0x50
 8007316:	d873      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d058      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x13a>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d86f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b30      	cmp	r3, #48	; 0x30
 8007322:	d064      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d86b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d060      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d867      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05c      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	2b10      	cmp	r3, #16
 8007336:	d05a      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007338:	e062      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f000 fb5d 	bl	8007a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800735c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	609a      	str	r2, [r3, #8]
      break;
 8007366:	e04f      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	6899      	ldr	r1, [r3, #8]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f000 fb46 	bl	8007a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800738a:	609a      	str	r2, [r3, #8]
      break;
 800738c:	e03c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	461a      	mov	r2, r3
 800739c:	f000 faba 	bl	8007914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2150      	movs	r1, #80	; 0x50
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb13 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 80073ac:	e02c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 fad9 	bl	8007972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2160      	movs	r1, #96	; 0x60
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fb03 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 80073cc:	e01c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	461a      	mov	r2, r3
 80073dc:	f000 fa9a 	bl	8007914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2140      	movs	r1, #64	; 0x40
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 faf3 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 80073ec:	e00c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 faea 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 80073fe:	e003      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a40      	ldr	r2, [pc, #256]	; (8007588 <TIM_Base_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d00f      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3d      	ldr	r2, [pc, #244]	; (800758c <TIM_Base_SetConfig+0x118>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a3c      	ldr	r2, [pc, #240]	; (8007590 <TIM_Base_SetConfig+0x11c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a3b      	ldr	r2, [pc, #236]	; (8007594 <TIM_Base_SetConfig+0x120>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3a      	ldr	r2, [pc, #232]	; (8007598 <TIM_Base_SetConfig+0x124>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d108      	bne.n	80074c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2f      	ldr	r2, [pc, #188]	; (8007588 <TIM_Base_SetConfig+0x114>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d02b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d027      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2c      	ldr	r2, [pc, #176]	; (800758c <TIM_Base_SetConfig+0x118>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d023      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2b      	ldr	r2, [pc, #172]	; (8007590 <TIM_Base_SetConfig+0x11c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d01f      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <TIM_Base_SetConfig+0x120>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a29      	ldr	r2, [pc, #164]	; (8007598 <TIM_Base_SetConfig+0x124>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d017      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a28      	ldr	r2, [pc, #160]	; (800759c <TIM_Base_SetConfig+0x128>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <TIM_Base_SetConfig+0x12c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a26      	ldr	r2, [pc, #152]	; (80075a4 <TIM_Base_SetConfig+0x130>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a25      	ldr	r2, [pc, #148]	; (80075a8 <TIM_Base_SetConfig+0x134>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d007      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a24      	ldr	r2, [pc, #144]	; (80075ac <TIM_Base_SetConfig+0x138>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a23      	ldr	r2, [pc, #140]	; (80075b0 <TIM_Base_SetConfig+0x13c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <TIM_Base_SetConfig+0x114>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0xf8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a0c      	ldr	r2, [pc, #48]	; (8007598 <TIM_Base_SetConfig+0x124>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d103      	bne.n	8007574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	615a      	str	r2, [r3, #20]
}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800
 80075a8:	40001800 	.word	0x40001800
 80075ac:	40001c00 	.word	0x40001c00
 80075b0:	40002000 	.word	0x40002000

080075b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 0302 	bic.w	r3, r3, #2
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a20      	ldr	r2, [pc, #128]	; (800768c <TIM_OC1_SetConfig+0xd8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_OC1_SetConfig+0x64>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <TIM_OC1_SetConfig+0xdc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d10c      	bne.n	8007632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0308 	bic.w	r3, r3, #8
 800761e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <TIM_OC1_SetConfig+0xd8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_OC1_SetConfig+0x8e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a14      	ldr	r2, [pc, #80]	; (8007690 <TIM_OC1_SetConfig+0xdc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d111      	bne.n	8007666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	621a      	str	r2, [r3, #32]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	40010000 	.word	0x40010000
 8007690:	40010400 	.word	0x40010400

08007694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0210 	bic.w	r2, r3, #16
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f023 0320 	bic.w	r3, r3, #32
 80076de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a22      	ldr	r2, [pc, #136]	; (8007778 <TIM_OC2_SetConfig+0xe4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_OC2_SetConfig+0x68>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a21      	ldr	r2, [pc, #132]	; (800777c <TIM_OC2_SetConfig+0xe8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d10d      	bne.n	8007718 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <TIM_OC2_SetConfig+0xe4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_OC2_SetConfig+0x94>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a16      	ldr	r2, [pc, #88]	; (800777c <TIM_OC2_SetConfig+0xe8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d113      	bne.n	8007750 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800772e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	621a      	str	r2, [r3, #32]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400

08007780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a21      	ldr	r2, [pc, #132]	; (8007860 <TIM_OC3_SetConfig+0xe0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_OC3_SetConfig+0x66>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a20      	ldr	r2, [pc, #128]	; (8007864 <TIM_OC3_SetConfig+0xe4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10d      	bne.n	8007802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a16      	ldr	r2, [pc, #88]	; (8007860 <TIM_OC3_SetConfig+0xe0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_OC3_SetConfig+0x92>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a15      	ldr	r2, [pc, #84]	; (8007864 <TIM_OC3_SetConfig+0xe4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d113      	bne.n	800783a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	011b      	lsls	r3, r3, #4
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	621a      	str	r2, [r3, #32]
}
 8007854:	bf00      	nop
 8007856:	371c      	adds	r7, #28
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	40010000 	.word	0x40010000
 8007864:	40010400 	.word	0x40010400

08007868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	031b      	lsls	r3, r3, #12
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a12      	ldr	r2, [pc, #72]	; (800790c <TIM_OC4_SetConfig+0xa4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_OC4_SetConfig+0x68>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a11      	ldr	r2, [pc, #68]	; (8007910 <TIM_OC4_SetConfig+0xa8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d109      	bne.n	80078e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	019b      	lsls	r3, r3, #6
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	621a      	str	r2, [r3, #32]
}
 80078fe:	bf00      	nop
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400

08007914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f023 0201 	bic.w	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800793e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f023 030a 	bic.w	r3, r3, #10
 8007950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007972:	b480      	push	{r7}
 8007974:	b087      	sub	sp, #28
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0210 	bic.w	r2, r3, #16
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800799c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f043 0307 	orr.w	r3, r3, #7
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	021a      	lsls	r2, r3, #8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a1a      	ldr	r2, [r3, #32]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a80:	431a      	orrs	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	621a      	str	r2, [r3, #32]
}
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e05a      	b.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a21      	ldr	r2, [pc, #132]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d022      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d01d      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d018      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1a      	ldr	r2, [pc, #104]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00e      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a18      	ldr	r2, [pc, #96]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d009      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a17      	ldr	r2, [pc, #92]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d10c      	bne.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	40000c00 	.word	0x40000c00
 8007b80:	40010400 	.word	0x40010400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40001800 	.word	0x40001800

08007b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e03d      	b.n	8007c24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e03f      	b.n	8007cea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fb f922 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2224      	movs	r2, #36	; 0x24
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ff43 	bl	8008b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08c      	sub	sp, #48	; 0x30
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d165      	bne.n	8007dda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_UART_Transmit_DMA+0x26>
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e05e      	b.n	8007ddc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_UART_Transmit_DMA+0x38>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e057      	b.n	8007ddc <HAL_UART_Transmit_DMA+0xe8>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2221      	movs	r2, #33	; 0x21
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d58:	4a22      	ldr	r2, [pc, #136]	; (8007de4 <HAL_UART_Transmit_DMA+0xf0>)
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	4a21      	ldr	r2, [pc, #132]	; (8007de8 <HAL_UART_Transmit_DMA+0xf4>)
 8007d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	4a20      	ldr	r2, [pc, #128]	; (8007dec <HAL_UART_Transmit_DMA+0xf8>)
 8007d6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	2200      	movs	r2, #0
 8007d72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	6819      	ldr	r1, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	461a      	mov	r2, r3
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	f7fb fd02 	bl	8003794 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3314      	adds	r3, #20
 8007da8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	617b      	str	r3, [r7, #20]
   return(result);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc2:	627a      	str	r2, [r7, #36]	; 0x24
 8007dc4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6a39      	ldr	r1, [r7, #32]
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e5      	bne.n	8007da2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e000      	b.n	8007ddc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007dda:	2302      	movs	r3, #2
  }
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3730      	adds	r7, #48	; 0x30
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	080083c1 	.word	0x080083c1
 8007de8:	0800845b 	.word	0x0800845b
 8007dec:	080085d3 	.word	0x080085d3

08007df0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d11d      	bne.n	8007e46 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <HAL_UART_Receive_DMA+0x26>
 8007e10:	88fb      	ldrh	r3, [r7, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e016      	b.n	8007e48 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_UART_Receive_DMA+0x38>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e00f      	b.n	8007e48 <HAL_UART_Receive_DMA+0x58>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fc13 	bl	8008668 <UART_Start_Receive_DMA>
 8007e42:	4603      	mov	r3, r0
 8007e44:	e000      	b.n	8007e48 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e46:	2302      	movs	r3, #2
  }
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b0ba      	sub	sp, #232	; 0xe8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10f      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x66>
 8007ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fd7f 	bl	80089b2 <UART_Receive_IT>
      return;
 8007eb4:	e256      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80de 	beq.w	800807c <HAL_UART_IRQHandler+0x22c>
 8007ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80d1 	beq.w	800807c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <HAL_UART_IRQHandler+0xae>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f043 0201 	orr.w	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <HAL_UART_IRQHandler+0xd2>
 8007f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f043 0202 	orr.w	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <HAL_UART_IRQHandler+0xf6>
 8007f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f043 0204 	orr.w	r2, r3, #4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d011      	beq.n	8007f76 <HAL_UART_IRQHandler+0x126>
 8007f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f043 0208 	orr.w	r2, r3, #8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 81ed 	beq.w	800835a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <HAL_UART_IRQHandler+0x14e>
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fd0a 	bl	80089b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <HAL_UART_IRQHandler+0x17a>
 8007fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d04f      	beq.n	800806a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc12 	bl	80087f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d141      	bne.n	8008062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3314      	adds	r3, #20
 8007fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800800a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800800e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1d9      	bne.n	8007fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d013      	beq.n	800805a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	4a7d      	ldr	r2, [pc, #500]	; (800822c <HAL_UART_IRQHandler+0x3dc>)
 8008038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	4618      	mov	r0, r3
 8008040:	f7fb fc70 	bl	8003924 <HAL_DMA_Abort_IT>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d016      	beq.n	8008078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	e00e      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f99a 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008060:	e00a      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f996 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	e006      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f992 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008076:	e170      	b.n	800835a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	bf00      	nop
    return;
 800807a:	e16e      	b.n	800835a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	2b01      	cmp	r3, #1
 8008082:	f040 814a 	bne.w	800831a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8143 	beq.w	800831a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 813c 	beq.w	800831a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b40      	cmp	r3, #64	; 0x40
 80080c4:	f040 80b4 	bne.w	8008230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8140 	beq.w	800835e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080e6:	429a      	cmp	r2, r3
 80080e8:	f080 8139 	bcs.w	800835e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fe:	f000 8088 	beq.w	8008212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800812e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800813a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1d9      	bne.n	8008102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800815e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800817a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e1      	bne.n	800814e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e3      	bne.n	800818a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e2:	f023 0310 	bic.w	r3, r3, #16
 80081e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80081f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e3      	bne.n	80081d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	4618      	mov	r0, r3
 800820e:	f7fb fb19 	bl	8003844 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800821a:	b29b      	uxth	r3, r3
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f8c0 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008228:	e099      	b.n	800835e <HAL_UART_IRQHandler+0x50e>
 800822a:	bf00      	nop
 800822c:	080088bb 	.word	0x080088bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008238:	b29b      	uxth	r3, r3
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 808b 	beq.w	8008362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800824c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8086 	beq.w	8008362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800826c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800827a:	647a      	str	r2, [r7, #68]	; 0x44
 800827c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e3      	bne.n	8008256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3314      	adds	r3, #20
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	623b      	str	r3, [r7, #32]
   return(result);
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3314      	adds	r3, #20
 80082ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082b2:	633a      	str	r2, [r7, #48]	; 0x30
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e3      	bne.n	800828e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082f8:	61fa      	str	r2, [r7, #28]
 80082fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	69b9      	ldr	r1, [r7, #24]
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	e841 2300 	strex	r3, r2, [r1]
 8008304:	617b      	str	r3, [r7, #20]
   return(result);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e3      	bne.n	80082d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f848 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008318:	e023      	b.n	8008362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_UART_IRQHandler+0x4ea>
 8008326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fad5 	bl	80088e2 <UART_Transmit_IT>
    return;
 8008338:	e014      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <HAL_UART_IRQHandler+0x514>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb15 	bl	8008982 <UART_EndTransmit_IT>
    return;
 8008358:	e004      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
    return;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
      return;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
      return;
 8008362:	bf00      	nop
  }
}
 8008364:	37e8      	adds	r7, #232	; 0xe8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b090      	sub	sp, #64	; 0x40
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d137      	bne.n	800844c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80083dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083de:	2200      	movs	r2, #0
 80083e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3314      	adds	r3, #20
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	623b      	str	r3, [r7, #32]
   return(result);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3314      	adds	r3, #20
 8008400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008402:	633a      	str	r2, [r7, #48]	; 0x30
 8008404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e5      	bne.n	80083e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	330c      	adds	r3, #12
 800841c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	60fb      	str	r3, [r7, #12]
   return(result);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	637b      	str	r3, [r7, #52]	; 0x34
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008436:	61fa      	str	r2, [r7, #28]
 8008438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	69b9      	ldr	r1, [r7, #24]
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	617b      	str	r3, [r7, #20]
   return(result);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e5      	bne.n	8008416 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800844a:	e002      	b.n	8008452 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800844c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800844e:	f7fa f8c1 	bl	80025d4 <HAL_UART_TxCpltCallback>
}
 8008452:	bf00      	nop
 8008454:	3740      	adds	r7, #64	; 0x40
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff ff7f 	bl	800836c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b09c      	sub	sp, #112	; 0x70
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848e:	2b00      	cmp	r3, #0
 8008490:	d172      	bne.n	8008578 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008494:	2200      	movs	r2, #0
 8008496:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80084ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	667b      	str	r3, [r7, #100]	; 0x64
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084ec:	647a      	str	r2, [r7, #68]	; 0x44
 80084ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e5      	bne.n	80084cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3314      	adds	r3, #20
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	623b      	str	r3, [r7, #32]
   return(result);
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008516:	663b      	str	r3, [r7, #96]	; 0x60
 8008518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3314      	adds	r3, #20
 800851e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008520:	633a      	str	r2, [r7, #48]	; 0x30
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	2b01      	cmp	r3, #1
 8008542:	d119      	bne.n	8008578 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	330c      	adds	r3, #12
 800854a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60fb      	str	r3, [r7, #12]
   return(result);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0310 	bic.w	r3, r3, #16
 800855a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800855c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008564:	61fa      	str	r2, [r7, #28]
 8008566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	617b      	str	r3, [r7, #20]
   return(result);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008584:	4619      	mov	r1, r3
 8008586:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008588:	f7ff ff0e 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800858c:	e002      	b.n	8008594 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800858e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008590:	f7f9 fff8 	bl	8002584 <HAL_UART_RxCpltCallback>
}
 8008594:	bf00      	nop
 8008596:	3770      	adds	r7, #112	; 0x70
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d108      	bne.n	80085c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff fef3 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085c2:	e002      	b.n	80085ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff fedb 	bl	8008380 <HAL_UART_RxHalfCpltCallback>
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ee:	2b80      	cmp	r3, #128	; 0x80
 80085f0:	bf0c      	ite	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	2300      	movne	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b21      	cmp	r3, #33	; 0x21
 8008604:	d108      	bne.n	8008618 <UART_DMAError+0x46>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f000 f8c6 	bl	80087a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	bf0c      	ite	eq
 8008626:	2301      	moveq	r3, #1
 8008628:	2300      	movne	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b22      	cmp	r3, #34	; 0x22
 8008638:	d108      	bne.n	800864c <UART_DMAError+0x7a>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008646:	68b8      	ldr	r0, [r7, #8]
 8008648:	f000 f8d4 	bl	80087f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	f043 0210 	orr.w	r2, r3, #16
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f7ff fe9b 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b098      	sub	sp, #96	; 0x60
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2222      	movs	r2, #34	; 0x22
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	4a40      	ldr	r2, [pc, #256]	; (8008798 <UART_Start_Receive_DMA+0x130>)
 8008696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	4a3f      	ldr	r2, [pc, #252]	; (800879c <UART_Start_Receive_DMA+0x134>)
 800869e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	4a3e      	ldr	r2, [pc, #248]	; (80087a0 <UART_Start_Receive_DMA+0x138>)
 80086a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	2200      	movs	r2, #0
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	f7fb f864 	bl	8003794 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d019      	beq.n	8008726 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	330c      	adds	r3, #12
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008708:	65bb      	str	r3, [r7, #88]	; 0x58
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	330c      	adds	r3, #12
 8008710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008712:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	657b      	str	r3, [r7, #84]	; 0x54
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3314      	adds	r3, #20
 8008744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008746:	63ba      	str	r2, [r7, #56]	; 0x38
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800874c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3314      	adds	r3, #20
 8008760:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	617b      	str	r3, [r7, #20]
   return(result);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008770:	653b      	str	r3, [r7, #80]	; 0x50
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3314      	adds	r3, #20
 8008778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800877a:	627a      	str	r2, [r7, #36]	; 0x24
 800877c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6a39      	ldr	r1, [r7, #32]
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	61fb      	str	r3, [r7, #28]
   return(result);
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3760      	adds	r7, #96	; 0x60
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	08008477 	.word	0x08008477
 800879c:	0800859d 	.word	0x0800859d
 80087a0:	080085d3 	.word	0x080085d3

080087a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b089      	sub	sp, #36	; 0x24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	330c      	adds	r3, #12
 80087b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	61ba      	str	r2, [r7, #24]
 80087ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	613b      	str	r3, [r7, #16]
   return(result);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087e8:	bf00      	nop
 80087ea:	3724      	adds	r7, #36	; 0x24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b095      	sub	sp, #84	; 0x54
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881c:	643a      	str	r2, [r7, #64]	; 0x40
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e5      	bne.n	80087fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3314      	adds	r3, #20
 8008836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	64bb      	str	r3, [r7, #72]	; 0x48
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3314      	adds	r3, #20
 800884e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	2b01      	cmp	r3, #1
 800886a:	d119      	bne.n	80088a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60bb      	str	r3, [r7, #8]
   return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	61ba      	str	r2, [r7, #24]
 800888e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e5      	bne.n	800886c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088ae:	bf00      	nop
 80088b0:	3754      	adds	r7, #84	; 0x54
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff fd5d 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b21      	cmp	r3, #33	; 0x21
 80088f4:	d13e      	bne.n	8008974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d114      	bne.n	800892a <UART_Transmit_IT+0x48>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d110      	bne.n	800892a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	1c9a      	adds	r2, r3, #2
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	621a      	str	r2, [r3, #32]
 8008928:	e008      	b.n	800893c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6211      	str	r1, [r2, #32]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29b      	uxth	r3, r3
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	4619      	mov	r1, r3
 800894a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10f      	bne.n	8008970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7f9 fe16 	bl	80025d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b08c      	sub	sp, #48	; 0x30
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b22      	cmp	r3, #34	; 0x22
 80089c4:	f040 80ab 	bne.w	8008b1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d117      	bne.n	8008a02 <UART_Receive_IT+0x50>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d113      	bne.n	8008a02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	1c9a      	adds	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008a00:	e026      	b.n	8008a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d007      	beq.n	8008a26 <UART_Receive_IT+0x74>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <UART_Receive_IT+0x82>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e008      	b.n	8008a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d15a      	bne.n	8008b1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0220 	bic.w	r2, r2, #32
 8008a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d135      	bne.n	8008b10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	623a      	str	r2, [r7, #32]
 8008acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	69f9      	ldr	r1, [r7, #28]
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d10a      	bne.n	8008b02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fc4d 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
 8008b0e:	e002      	b.n	8008b16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7f9 fd37 	bl	8002584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e002      	b.n	8008b20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3730      	adds	r7, #48	; 0x30
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b2c:	b0c0      	sub	sp, #256	; 0x100
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	68d9      	ldr	r1, [r3, #12]
 8008b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	ea40 0301 	orr.w	r3, r0, r1
 8008b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b80:	f021 010c 	bic.w	r1, r1, #12
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	6999      	ldr	r1, [r3, #24]
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	ea40 0301 	orr.w	r3, r0, r1
 8008bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <UART_SetConfig+0x2cc>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d005      	beq.n	8008bc8 <UART_SetConfig+0xa0>
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	; (8008df8 <UART_SetConfig+0x2d0>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d104      	bne.n	8008bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc8:	f7fd faca 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8008bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bd0:	e003      	b.n	8008bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bd2:	f7fd fab1 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8008bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be4:	f040 810c 	bne.w	8008e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	1891      	adds	r1, r2, r2
 8008c00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c02:	415b      	adcs	r3, r3
 8008c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	eb12 0801 	adds.w	r8, r2, r1
 8008c10:	4629      	mov	r1, r5
 8008c12:	eb43 0901 	adc.w	r9, r3, r1
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2a:	4690      	mov	r8, r2
 8008c2c:	4699      	mov	r9, r3
 8008c2e:	4623      	mov	r3, r4
 8008c30:	eb18 0303 	adds.w	r3, r8, r3
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c38:	462b      	mov	r3, r5
 8008c3a:	eb49 0303 	adc.w	r3, r9, r3
 8008c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c56:	460b      	mov	r3, r1
 8008c58:	18db      	adds	r3, r3, r3
 8008c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	eb42 0303 	adc.w	r3, r2, r3
 8008c62:	657b      	str	r3, [r7, #84]	; 0x54
 8008c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c6c:	f7f7 fb18 	bl	80002a0 <__aeabi_uldivmod>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008c76:	fba3 2302 	umull	r2, r3, r3, r2
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	011c      	lsls	r4, r3, #4
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	1891      	adds	r1, r2, r2
 8008c96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c98:	415b      	adcs	r3, r3
 8008c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cc0:	4692      	mov	sl, r2
 8008cc2:	469b      	mov	fp, r3
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cec:	460b      	mov	r3, r1
 8008cee:	18db      	adds	r3, r3, r3
 8008cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d02:	f7f7 facd 	bl	80002a0 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2264      	movs	r2, #100	; 0x64
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	1acb      	subs	r3, r1, r3
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d22:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d24:	fba3 2302 	umull	r2, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d30:	441c      	add	r4, r3
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d54:	4641      	mov	r1, r8
 8008d56:	1851      	adds	r1, r2, r1
 8008d58:	6339      	str	r1, [r7, #48]	; 0x30
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	414b      	adcs	r3, r1
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	00cb      	lsls	r3, r1, #3
 8008d70:	4651      	mov	r1, sl
 8008d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d76:	4651      	mov	r1, sl
 8008d78:	00ca      	lsls	r2, r1, #3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4642      	mov	r2, r8
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d88:	464b      	mov	r3, r9
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	eb42 0303 	adc.w	r3, r2, r3
 8008d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008da0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008da8:	460b      	mov	r3, r1
 8008daa:	18db      	adds	r3, r3, r3
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dae:	4613      	mov	r3, r2
 8008db0:	eb42 0303 	adc.w	r3, r2, r3
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dbe:	f7f7 fa6f 	bl	80002a0 <__aeabi_uldivmod>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	2164      	movs	r1, #100	; 0x64
 8008dd0:	fb01 f303 	mul.w	r3, r1, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	3332      	adds	r3, #50	; 0x32
 8008dda:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	f003 0207 	and.w	r2, r3, #7
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4422      	add	r2, r4
 8008dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008df0:	e105      	b.n	8008ffe <UART_SetConfig+0x4d6>
 8008df2:	bf00      	nop
 8008df4:	40011000 	.word	0x40011000
 8008df8:	40011400 	.word	0x40011400
 8008dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e12:	4642      	mov	r2, r8
 8008e14:	464b      	mov	r3, r9
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	6239      	str	r1, [r7, #32]
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e22:	4641      	mov	r1, r8
 8008e24:	1854      	adds	r4, r2, r1
 8008e26:	4649      	mov	r1, r9
 8008e28:	eb43 0501 	adc.w	r5, r3, r1
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	f04f 0300 	mov.w	r3, #0
 8008e34:	00eb      	lsls	r3, r5, #3
 8008e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e3a:	00e2      	lsls	r2, r4, #3
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	461d      	mov	r5, r3
 8008e40:	4643      	mov	r3, r8
 8008e42:	18e3      	adds	r3, r4, r3
 8008e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e48:	464b      	mov	r3, r9
 8008e4a:	eb45 0303 	adc.w	r3, r5, r3
 8008e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e6e:	4629      	mov	r1, r5
 8008e70:	008b      	lsls	r3, r1, #2
 8008e72:	4621      	mov	r1, r4
 8008e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e78:	4621      	mov	r1, r4
 8008e7a:	008a      	lsls	r2, r1, #2
 8008e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e80:	f7f7 fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4b60      	ldr	r3, [pc, #384]	; (800900c <UART_SetConfig+0x4e4>)
 8008e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	011c      	lsls	r4, r3, #4
 8008e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	1891      	adds	r1, r2, r2
 8008eaa:	61b9      	str	r1, [r7, #24]
 8008eac:	415b      	adcs	r3, r3
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	1851      	adds	r1, r2, r1
 8008eb8:	6139      	str	r1, [r7, #16]
 8008eba:	4649      	mov	r1, r9
 8008ebc:	414b      	adcs	r3, r1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ecc:	4659      	mov	r1, fp
 8008ece:	00cb      	lsls	r3, r1, #3
 8008ed0:	4651      	mov	r1, sl
 8008ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	00ca      	lsls	r2, r1, #3
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee8:	464b      	mov	r3, r9
 8008eea:	460a      	mov	r2, r1
 8008eec:	eb42 0303 	adc.w	r3, r2, r3
 8008ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008efe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	008b      	lsls	r3, r1, #2
 8008f10:	4641      	mov	r1, r8
 8008f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f16:	4641      	mov	r1, r8
 8008f18:	008a      	lsls	r2, r1, #2
 8008f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f1e:	f7f7 f9bf 	bl	80002a0 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4b39      	ldr	r3, [pc, #228]	; (800900c <UART_SetConfig+0x4e4>)
 8008f28:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	2164      	movs	r1, #100	; 0x64
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	3332      	adds	r3, #50	; 0x32
 8008f3a:	4a34      	ldr	r2, [pc, #208]	; (800900c <UART_SetConfig+0x4e4>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f46:	441c      	add	r4, r3
 8008f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f50:	677a      	str	r2, [r7, #116]	; 0x74
 8008f52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	1891      	adds	r1, r2, r2
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	415b      	adcs	r3, r3
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f66:	4641      	mov	r1, r8
 8008f68:	1851      	adds	r1, r2, r1
 8008f6a:	6039      	str	r1, [r7, #0]
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	414b      	adcs	r3, r1
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f7e:	4659      	mov	r1, fp
 8008f80:	00cb      	lsls	r3, r1, #3
 8008f82:	4651      	mov	r1, sl
 8008f84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f88:	4651      	mov	r1, sl
 8008f8a:	00ca      	lsls	r2, r1, #3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	4642      	mov	r2, r8
 8008f94:	189b      	adds	r3, r3, r2
 8008f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f98:	464b      	mov	r3, r9
 8008f9a:	460a      	mov	r2, r1
 8008f9c:	eb42 0303 	adc.w	r3, r2, r3
 8008fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	663b      	str	r3, [r7, #96]	; 0x60
 8008fac:	667a      	str	r2, [r7, #100]	; 0x64
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fba:	4649      	mov	r1, r9
 8008fbc:	008b      	lsls	r3, r1, #2
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	008a      	lsls	r2, r1, #2
 8008fc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fcc:	f7f7 f968 	bl	80002a0 <__aeabi_uldivmod>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <UART_SetConfig+0x4e4>)
 8008fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	2164      	movs	r1, #100	; 0x64
 8008fde:	fb01 f303 	mul.w	r3, r1, r3
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	3332      	adds	r3, #50	; 0x32
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <UART_SetConfig+0x4e4>)
 8008fea:	fba2 2303 	umull	r2, r3, r2, r3
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4422      	add	r2, r4
 8008ffc:	609a      	str	r2, [r3, #8]
}
 8008ffe:	bf00      	nop
 8009000:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009004:	46bd      	mov	sp, r7
 8009006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900a:	bf00      	nop
 800900c:	51eb851f 	.word	0x51eb851f

08009010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009010:	b084      	sub	sp, #16
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	f107 001c 	add.w	r0, r7, #28
 800901e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2b01      	cmp	r3, #1
 8009026:	d122      	bne.n	800906e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800903c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d105      	bne.n	8009062 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 faa2 	bl	80095ac <USB_CoreReset>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e01a      	b.n	80090a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa96 	bl	80095ac <USB_CoreReset>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
 8009096:	e005      	b.n	80090a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10b      	bne.n	80090c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f043 0206 	orr.w	r2, r3, #6
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f043 0220 	orr.w	r2, r3, #32
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ce:	b004      	add	sp, #16
 80090d0:	4770      	bx	lr

080090d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d115      	bne.n	8009142 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009122:	2001      	movs	r0, #1
 8009124:	f7fa f982 	bl	800342c <HAL_Delay>
      ms++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3301      	adds	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa2e 	bl	8009590 <USB_GetMode>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d01e      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b31      	cmp	r3, #49	; 0x31
 800913e:	d9f0      	bls.n	8009122 <USB_SetCurrentMode+0x2e>
 8009140:	e01a      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d115      	bne.n	8009174 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009154:	2001      	movs	r0, #1
 8009156:	f7fa f969 	bl	800342c <HAL_Delay>
      ms++;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa15 	bl	8009590 <USB_GetMode>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b31      	cmp	r3, #49	; 0x31
 8009170:	d9f0      	bls.n	8009154 <USB_SetCurrentMode+0x60>
 8009172:	e001      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e005      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b32      	cmp	r3, #50	; 0x32
 800917c:	d101      	bne.n	8009182 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800918c:	b084      	sub	sp, #16
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800919a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	e009      	b.n	80091c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3340      	adds	r3, #64	; 0x40
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b0e      	cmp	r3, #14
 80091c4:	d9f2      	bls.n	80091ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11c      	bne.n	8009206 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091da:	f043 0302 	orr.w	r3, r3, #2
 80091de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	639a      	str	r2, [r3, #56]	; 0x38
 8009204:	e00b      	b.n	800921e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009224:	461a      	mov	r2, r3
 8009226:	2300      	movs	r3, #0
 8009228:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009230:	4619      	mov	r1, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009238:	461a      	mov	r2, r3
 800923a:	680b      	ldr	r3, [r1, #0]
 800923c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	2b01      	cmp	r3, #1
 8009242:	d10c      	bne.n	800925e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f965 	bl	800951c <USB_SetDevSpeed>
 8009252:	e008      	b.n	8009266 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009254:	2101      	movs	r1, #1
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f960 	bl	800951c <USB_SetDevSpeed>
 800925c:	e003      	b.n	8009266 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800925e:	2103      	movs	r1, #3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f95b 	bl	800951c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009266:	2110      	movs	r1, #16
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8f3 	bl	8009454 <USB_FlushTxFifo>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f91f 	bl	80094bc <USB_FlushRxFifo>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928e:	461a      	mov	r2, r3
 8009290:	2300      	movs	r3, #0
 8009292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	461a      	mov	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	461a      	mov	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	e043      	b.n	800933a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092c8:	d118      	bne.n	80092fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092dc:	461a      	mov	r2, r3
 80092de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	e013      	b.n	800930e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	461a      	mov	r2, r3
 80092f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	e008      	b.n	800930e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	461a      	mov	r2, r3
 800930a:	2300      	movs	r3, #0
 800930c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	461a      	mov	r2, r3
 800931c:	2300      	movs	r3, #0
 800931e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932c:	461a      	mov	r2, r3
 800932e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3301      	adds	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	429a      	cmp	r2, r3
 8009340:	d3b7      	bcc.n	80092b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e043      	b.n	80093d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800935a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800935e:	d118      	bne.n	8009392 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e013      	b.n	80093a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	461a      	mov	r2, r3
 800938a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e008      	b.n	80093a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	461a      	mov	r2, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c2:	461a      	mov	r2, r3
 80093c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d3b7      	bcc.n	8009348 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f043 0210 	orr.w	r2, r3, #16
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699a      	ldr	r2, [r3, #24]
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <USB_DevInit+0x2c4>)
 8009412:	4313      	orrs	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f043 0208 	orr.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009438:	f043 0304 	orr.w	r3, r3, #4
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800944c:	b004      	add	sp, #16
 800944e:	4770      	bx	lr
 8009450:	803c3800 	.word	0x803c3800

08009454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <USB_FlushTxFifo+0x64>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e01b      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	daf2      	bge.n	8009462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	019b      	lsls	r3, r3, #6
 8009484:	f043 0220 	orr.w	r2, r3, #32
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a08      	ldr	r2, [pc, #32]	; (80094b8 <USB_FlushTxFifo+0x64>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d901      	bls.n	800949e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e006      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d0f0      	beq.n	800948c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	00030d40 	.word	0x00030d40

080094bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a11      	ldr	r2, [pc, #68]	; (8009518 <USB_FlushRxFifo+0x5c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e018      	b.n	800950c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	daf2      	bge.n	80094c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2210      	movs	r2, #16
 80094ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a08      	ldr	r2, [pc, #32]	; (8009518 <USB_FlushRxFifo+0x5c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e006      	b.n	800950c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b10      	cmp	r3, #16
 8009508:	d0f0      	beq.n	80094ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	00030d40 	.word	0x00030d40

0800951c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800953c:	4313      	orrs	r3, r2
 800953e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f003 0301 	and.w	r3, r3, #1
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4a13      	ldr	r2, [pc, #76]	; (8009610 <USB_CoreReset+0x64>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d901      	bls.n	80095ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e01b      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	daf2      	bge.n	80095b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f043 0201 	orr.w	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a09      	ldr	r2, [pc, #36]	; (8009610 <USB_CoreReset+0x64>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d901      	bls.n	80095f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e006      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d0f0      	beq.n	80095e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	00030d40 	.word	0x00030d40

08009614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009618:	4904      	ldr	r1, [pc, #16]	; (800962c <MX_FATFS_Init+0x18>)
 800961a:	4805      	ldr	r0, [pc, #20]	; (8009630 <MX_FATFS_Init+0x1c>)
 800961c:	f002 feb8 	bl	800c390 <FATFS_LinkDriver>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	4b03      	ldr	r3, [pc, #12]	; (8009634 <MX_FATFS_Init+0x20>)
 8009626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009628:	bf00      	nop
 800962a:	bd80      	pop	{r7, pc}
 800962c:	2000347c 	.word	0x2000347c
 8009630:	20000094 	.word	0x20000094
 8009634:	20003478 	.word	0x20003478

08009638 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800963c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800963e:	4618      	mov	r0, r3
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	4618      	mov	r0, r3
 8009656:	f7f7 ff4b 	bl	80014f0 <SD_disk_initialize>
 800965a:	4603      	mov	r3, r0
 800965c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	4603      	mov	r3, r0
 800966e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	4618      	mov	r0, r3
 8009674:	f7f8 f826 	bl	80016c4 <SD_disk_status>
 8009678:	4603      	mov	r3, r0
 800967a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 8009694:	7bf8      	ldrb	r0, [r7, #15]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	f7f8 f828 	bl	80016f0 <SD_disk_read>
 80096a0:	4603      	mov	r3, r0
 80096a2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 80096bc:	7bf8      	ldrb	r0, [r7, #15]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	f7f8 f87e 	bl	80017c4 <SD_disk_write>
 80096c8:	4603      	mov	r3, r0
 80096ca:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	603a      	str	r2, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
 80096e0:	460b      	mov	r3, r1
 80096e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv,cmd,buff);
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	79b9      	ldrb	r1, [r7, #6]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f8 f8ee 	bl	80018cc <SD_disk_ioctl>
 80096f0:	4603      	mov	r3, r0
 80096f2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	4a08      	ldr	r2, [pc, #32]	; (800972c <disk_status+0x30>)
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	79fa      	ldrb	r2, [r7, #7]
 8009714:	4905      	ldr	r1, [pc, #20]	; (800972c <disk_status+0x30>)
 8009716:	440a      	add	r2, r1
 8009718:	7a12      	ldrb	r2, [r2, #8]
 800971a:	4610      	mov	r0, r2
 800971c:	4798      	blx	r3
 800971e:	4603      	mov	r3, r0
 8009720:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009722:	7bfb      	ldrb	r3, [r7, #15]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200034a8 	.word	0x200034a8

08009730 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	4a0d      	ldr	r2, [pc, #52]	; (8009778 <disk_initialize+0x48>)
 8009742:	5cd3      	ldrb	r3, [r2, r3]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d111      	bne.n	800976c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	4a0b      	ldr	r2, [pc, #44]	; (8009778 <disk_initialize+0x48>)
 800974c:	2101      	movs	r1, #1
 800974e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	4a09      	ldr	r2, [pc, #36]	; (8009778 <disk_initialize+0x48>)
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	79fa      	ldrb	r2, [r7, #7]
 800975e:	4906      	ldr	r1, [pc, #24]	; (8009778 <disk_initialize+0x48>)
 8009760:	440a      	add	r2, r1
 8009762:	7a12      	ldrb	r2, [r2, #8]
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	200034a8 	.word	0x200034a8

0800977c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <disk_read+0x3c>)
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	689c      	ldr	r4, [r3, #8]
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4a07      	ldr	r2, [pc, #28]	; (80097b8 <disk_read+0x3c>)
 800979c:	4413      	add	r3, r2
 800979e:	7a18      	ldrb	r0, [r3, #8]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	47a0      	blx	r4
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd90      	pop	{r4, r7, pc}
 80097b6:	bf00      	nop
 80097b8:	200034a8 	.word	0x200034a8

080097bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <disk_write+0x3c>)
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	68dc      	ldr	r4, [r3, #12]
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <disk_write+0x3c>)
 80097dc:	4413      	add	r3, r2
 80097de:	7a18      	ldrb	r0, [r3, #8]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	47a0      	blx	r4
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd90      	pop	{r4, r7, pc}
 80097f6:	bf00      	nop
 80097f8:	200034a8 	.word	0x200034a8

080097fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	603a      	str	r2, [r7, #0]
 8009806:	71fb      	strb	r3, [r7, #7]
 8009808:	460b      	mov	r3, r1
 800980a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	4a09      	ldr	r2, [pc, #36]	; (8009834 <disk_ioctl+0x38>)
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	79fa      	ldrb	r2, [r7, #7]
 800981a:	4906      	ldr	r1, [pc, #24]	; (8009834 <disk_ioctl+0x38>)
 800981c:	440a      	add	r2, r1
 800981e:	7a10      	ldrb	r0, [r2, #8]
 8009820:	79b9      	ldrb	r1, [r7, #6]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	4798      	blx	r3
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]
  return res;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	200034a8 	.word	0x200034a8

08009838 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3301      	adds	r3, #1
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009848:	89fb      	ldrh	r3, [r7, #14]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	b21a      	sxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	b21b      	sxth	r3, r3
 8009854:	4313      	orrs	r3, r2
 8009856:	b21b      	sxth	r3, r3
 8009858:	81fb      	strh	r3, [r7, #14]
	return rv;
 800985a:	89fb      	ldrh	r3, [r7, #14]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3303      	adds	r3, #3
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	021b      	lsls	r3, r3, #8
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	3202      	adds	r2, #2
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	3201      	adds	r2, #1
 800988e:	7812      	ldrb	r2, [r2, #0]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
	return rv;
 80098a0:	68fb      	ldr	r3, [r7, #12]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	887a      	ldrh	r2, [r7, #2]
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	887b      	ldrh	r3, [r7, #2]
 80098c8:	0a1b      	lsrs	r3, r3, #8
 80098ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	887a      	ldrh	r2, [r7, #2]
 80098d4:	b2d2      	uxtb	r2, r2
 80098d6:	701a      	strb	r2, [r3, #0]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	0a1b      	lsrs	r3, r3, #8
 80098fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	607a      	str	r2, [r7, #4]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	701a      	strb	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00d      	beq.n	8009972 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	1c53      	adds	r3, r2, #1
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	1c59      	adds	r1, r3, #1
 8009960:	6179      	str	r1, [r7, #20]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3b01      	subs	r3, #1
 800996a:	607b      	str	r3, [r7, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <mem_cpy+0x1a>
	}
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	617a      	str	r2, [r7, #20]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3b01      	subs	r3, #1
 800999e:	607b      	str	r3, [r7, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f3      	bne.n	800998e <mem_set+0x10>
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	; 0x24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	61fb      	str	r3, [r7, #28]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	61fa      	str	r2, [r7, #28]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	4619      	mov	r1, r3
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	61ba      	str	r2, [r7, #24]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	1acb      	subs	r3, r1, r3
 80099e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <mem_cmp+0x40>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0eb      	beq.n	80099cc <mem_cmp+0x18>

	return r;
 80099f4:	697b      	ldr	r3, [r7, #20]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3724      	adds	r7, #36	; 0x24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009a0c:	e002      	b.n	8009a14 <chk_chr+0x12>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3301      	adds	r3, #1
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <chk_chr+0x26>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d1f2      	bne.n	8009a0e <chk_chr+0xc>
	return *str;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <lock_fs+0x22>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 fcdb 	bl	800c406 <ff_req_grant>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <lock_fs+0x22>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <lock_fs+0x24>
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00d      	beq.n	8009a92 <unlock_fs+0x2e>
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	2b0c      	cmp	r3, #12
 8009a7a:	d00a      	beq.n	8009a92 <unlock_fs+0x2e>
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	2b0b      	cmp	r3, #11
 8009a80:	d007      	beq.n	8009a92 <unlock_fs+0x2e>
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	2b0f      	cmp	r3, #15
 8009a86:	d004      	beq.n	8009a92 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 fccf 	bl	800c430 <ff_rel_grant>
	}
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	e029      	b.n	8009b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <chk_lock+0xb4>)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	4413      	add	r3, r2
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01d      	beq.n	8009afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009abe:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <chk_lock+0xb4>)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	011b      	lsls	r3, r3, #4
 8009ac4:	4413      	add	r3, r2
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d116      	bne.n	8009afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <chk_lock+0xb4>)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d10c      	bne.n	8009afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <chk_lock+0xb4>)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	4413      	add	r3, r2
 8009aec:	3308      	adds	r3, #8
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d102      	bne.n	8009afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009af8:	e007      	b.n	8009b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d9d2      	bls.n	8009ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d109      	bne.n	8009b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <chk_lock+0x80>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d101      	bne.n	8009b20 <chk_lock+0x84>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e010      	b.n	8009b42 <chk_lock+0xa6>
 8009b20:	2312      	movs	r3, #18
 8009b22:	e00e      	b.n	8009b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d108      	bne.n	8009b3c <chk_lock+0xa0>
 8009b2a:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <chk_lock+0xb4>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	4413      	add	r3, r2
 8009b32:	330c      	adds	r3, #12
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b3a:	d101      	bne.n	8009b40 <chk_lock+0xa4>
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	e000      	b.n	8009b42 <chk_lock+0xa6>
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20003488 	.word	0x20003488

08009b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
 8009b5e:	e002      	b.n	8009b66 <enq_lock+0x12>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3301      	adds	r3, #1
 8009b64:	607b      	str	r3, [r7, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d806      	bhi.n	8009b7a <enq_lock+0x26>
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <enq_lock+0x40>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	4413      	add	r3, r2
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f2      	bne.n	8009b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20003488 	.word	0x20003488

08009b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	e01f      	b.n	8009be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ba8:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <inc_lock+0x118>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	4413      	add	r3, r2
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d113      	bne.n	8009be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009bba:	4a3d      	ldr	r2, [pc, #244]	; (8009cb0 <inc_lock+0x118>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d109      	bne.n	8009be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009bce:	4a38      	ldr	r2, [pc, #224]	; (8009cb0 <inc_lock+0x118>)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d006      	beq.n	8009bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d9dc      	bls.n	8009ba8 <inc_lock+0x10>
 8009bee:	e000      	b.n	8009bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d132      	bne.n	8009c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e002      	b.n	8009c04 <inc_lock+0x6c>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d806      	bhi.n	8009c18 <inc_lock+0x80>
 8009c0a:	4a29      	ldr	r2, [pc, #164]	; (8009cb0 <inc_lock+0x118>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	4413      	add	r3, r2
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f2      	bne.n	8009bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d101      	bne.n	8009c22 <inc_lock+0x8a>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e040      	b.n	8009ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4922      	ldr	r1, [pc, #136]	; (8009cb0 <inc_lock+0x118>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	440b      	add	r3, r1
 8009c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	491e      	ldr	r1, [pc, #120]	; (8009cb0 <inc_lock+0x118>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	695a      	ldr	r2, [r3, #20]
 8009c44:	491a      	ldr	r1, [pc, #104]	; (8009cb0 <inc_lock+0x118>)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009c50:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <inc_lock+0x118>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	4413      	add	r3, r2
 8009c58:	330c      	adds	r3, #12
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <inc_lock+0xe0>
 8009c64:	4a12      	ldr	r2, [pc, #72]	; (8009cb0 <inc_lock+0x118>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	4413      	add	r3, r2
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <inc_lock+0xe0>
 8009c74:	2300      	movs	r3, #0
 8009c76:	e015      	b.n	8009ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d108      	bne.n	8009c90 <inc_lock+0xf8>
 8009c7e:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <inc_lock+0x118>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	4413      	add	r3, r2
 8009c86:	330c      	adds	r3, #12
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	e001      	b.n	8009c94 <inc_lock+0xfc>
 8009c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c94:	4906      	ldr	r1, [pc, #24]	; (8009cb0 <inc_lock+0x118>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	440b      	add	r3, r1
 8009c9c:	330c      	adds	r3, #12
 8009c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20003488 	.word	0x20003488

08009cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	607b      	str	r3, [r7, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d825      	bhi.n	8009d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8009cc8:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <dec_lock+0x74>)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4413      	add	r3, r2
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009cd6:	89fb      	ldrh	r3, [r7, #14]
 8009cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cdc:	d101      	bne.n	8009ce2 <dec_lock+0x2e>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ce2:	89fb      	ldrh	r3, [r7, #14]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <dec_lock+0x3a>
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009cee:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <dec_lock+0x74>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	89fa      	ldrh	r2, [r7, #14]
 8009cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009cfc:	89fb      	ldrh	r3, [r7, #14]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <dec_lock+0x5a>
 8009d02:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <dec_lock+0x74>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	4413      	add	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	737b      	strb	r3, [r7, #13]
 8009d12:	e001      	b.n	8009d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009d14:	2302      	movs	r3, #2
 8009d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20003488 	.word	0x20003488

08009d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e010      	b.n	8009d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009d3a:	4a0d      	ldr	r2, [pc, #52]	; (8009d70 <clear_lock+0x44>)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	4413      	add	r3, r2
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d105      	bne.n	8009d56 <clear_lock+0x2a>
 8009d4a:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <clear_lock+0x44>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	4413      	add	r3, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d9eb      	bls.n	8009d3a <clear_lock+0xe>
	}
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20003488 	.word	0x20003488

08009d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d034      	beq.n	8009df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7858      	ldrb	r0, [r3, #1]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d98:	2301      	movs	r3, #1
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	f7ff fd0e 	bl	80097bc <disk_write>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	e022      	b.n	8009df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	1ad2      	subs	r2, r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d217      	bcs.n	8009df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	789b      	ldrb	r3, [r3, #2]
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	e010      	b.n	8009dec <sync_window+0x78>
					wsect += fs->fsize;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	7858      	ldrb	r0, [r3, #1]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009dde:	2301      	movs	r3, #1
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	f7ff fceb 	bl	80097bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d8eb      	bhi.n	8009dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d01b      	beq.n	8009e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff ffad 	bl	8009d74 <sync_window>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d113      	bne.n	8009e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7858      	ldrb	r0, [r3, #1]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e2e:	2301      	movs	r3, #1
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	f7ff fca3 	bl	800977c <disk_read>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d004      	beq.n	8009e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ff87 	bl	8009d74 <sync_window>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d159      	bne.n	8009f24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d149      	bne.n	8009f0c <sync_fs+0xb4>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	791b      	ldrb	r3, [r3, #4]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d145      	bne.n	8009f0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	899b      	ldrh	r3, [r3, #12]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	f7ff fd76 	bl	800997e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3338      	adds	r3, #56	; 0x38
 8009e96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff fd05 	bl	80098ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3338      	adds	r3, #56	; 0x38
 8009ea8:	4921      	ldr	r1, [pc, #132]	; (8009f30 <sync_fs+0xd8>)
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fd1a 	bl	80098e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3338      	adds	r3, #56	; 0x38
 8009eb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009eb8:	491e      	ldr	r1, [pc, #120]	; (8009f34 <sync_fs+0xdc>)
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fd12 	bl	80098e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3338      	adds	r3, #56	; 0x38
 8009ec4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7ff fd08 	bl	80098e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3338      	adds	r3, #56	; 0x38
 8009ed8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7ff fcfe 	bl	80098e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7858      	ldrb	r0, [r3, #1]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f00:	2301      	movs	r3, #1
 8009f02:	f7ff fc5b 	bl	80097bc <disk_write>
			fs->fsi_flag = 0;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	2200      	movs	r2, #0
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fc71 	bl	80097fc <disk_ioctl>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <sync_fs+0xcc>
 8009f20:	2301      	movs	r3, #1
 8009f22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	41615252 	.word	0x41615252
 8009f34:	61417272 	.word	0x61417272

08009f38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	3b02      	subs	r3, #2
 8009f46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	3b02      	subs	r3, #2
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d301      	bcc.n	8009f58 <clust2sect+0x20>
 8009f54:	2300      	movs	r3, #0
 8009f56:	e008      	b.n	8009f6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	895b      	ldrh	r3, [r3, #10]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	fb03 f202 	mul.w	r2, r3, r2
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	4413      	add	r3, r2
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d904      	bls.n	8009f96 <get_fat+0x20>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d302      	bcc.n	8009f9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f96:	2301      	movs	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	e0bb      	b.n	800a114 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f000 8083 	beq.w	800a0b2 <get_fat+0x13c>
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	f300 80a7 	bgt.w	800a100 <get_fat+0x18a>
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d002      	beq.n	8009fbc <get_fat+0x46>
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d056      	beq.n	800a068 <get_fat+0xf2>
 8009fba:	e0a1      	b.n	800a100 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	085b      	lsrs	r3, r3, #1
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	899b      	ldrh	r3, [r3, #12]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fda:	4413      	add	r3, r2
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6938      	ldr	r0, [r7, #16]
 8009fe0:	f7ff ff0c 	bl	8009dfc <move_window>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f040 808d 	bne.w	800a106 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	60fa      	str	r2, [r7, #12]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	8992      	ldrh	r2, [r2, #12]
 8009ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ffa:	fb01 f202 	mul.w	r2, r1, r2
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4413      	add	r3, r2
 800a004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	899b      	ldrh	r3, [r3, #12]
 800a012:	4619      	mov	r1, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	fbb3 f3f1 	udiv	r3, r3, r1
 800a01a:	4413      	add	r3, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	6938      	ldr	r0, [r7, #16]
 800a020:	f7ff feec 	bl	8009dfc <move_window>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d16f      	bne.n	800a10a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	899b      	ldrh	r3, [r3, #12]
 800a02e:	461a      	mov	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	fbb3 f1f2 	udiv	r1, r3, r2
 800a036:	fb01 f202 	mul.w	r2, r1, r2
 800a03a:	1a9b      	subs	r3, r3, r2
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <get_fat+0xe8>
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	091b      	lsrs	r3, r3, #4
 800a05c:	e002      	b.n	800a064 <get_fat+0xee>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a064:	617b      	str	r3, [r7, #20]
			break;
 800a066:	e055      	b.n	800a114 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	899b      	ldrh	r3, [r3, #12]
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	b29b      	uxth	r3, r3
 800a074:	4619      	mov	r1, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	fbb3 f3f1 	udiv	r3, r3, r1
 800a07c:	4413      	add	r3, r2
 800a07e:	4619      	mov	r1, r3
 800a080:	6938      	ldr	r0, [r7, #16]
 800a082:	f7ff febb 	bl	8009dfc <move_window>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d140      	bne.n	800a10e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	8992      	ldrh	r2, [r2, #12]
 800a09a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a09e:	fb00 f202 	mul.w	r2, r0, r2
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fbc6 	bl	8009838 <ld_word>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	617b      	str	r3, [r7, #20]
			break;
 800a0b0:	e030      	b.n	800a114 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	089b      	lsrs	r3, r3, #2
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f7ff fe96 	bl	8009dfc <move_window>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d11d      	bne.n	800a112 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	8992      	ldrh	r2, [r2, #12]
 800a0e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0e8:	fb00 f202 	mul.w	r2, r0, r2
 800a0ec:	1a9b      	subs	r3, r3, r2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fbb9 	bl	8009868 <ld_dword>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0fc:	617b      	str	r3, [r7, #20]
			break;
 800a0fe:	e009      	b.n	800a114 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a100:	2301      	movs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e006      	b.n	800a114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a106:	bf00      	nop
 800a108:	e004      	b.n	800a114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a10a:	bf00      	nop
 800a10c:	e002      	b.n	800a114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a10e:	bf00      	nop
 800a110:	e000      	b.n	800a114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a112:	bf00      	nop
		}
	}

	return val;
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a11e:	b590      	push	{r4, r7, lr}
 800a120:	b089      	sub	sp, #36	; 0x24
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a12a:	2302      	movs	r3, #2
 800a12c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b01      	cmp	r3, #1
 800a132:	f240 8102 	bls.w	800a33a <put_fat+0x21c>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	f080 80fc 	bcs.w	800a33a <put_fat+0x21c>
		switch (fs->fs_type) {
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b03      	cmp	r3, #3
 800a148:	f000 80b6 	beq.w	800a2b8 <put_fat+0x19a>
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	f300 80fd 	bgt.w	800a34c <put_fat+0x22e>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d003      	beq.n	800a15e <put_fat+0x40>
 800a156:	2b02      	cmp	r3, #2
 800a158:	f000 8083 	beq.w	800a262 <put_fat+0x144>
 800a15c:	e0f6      	b.n	800a34c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	4413      	add	r3, r2
 800a16a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	899b      	ldrh	r3, [r3, #12]
 800a174:	4619      	mov	r1, r3
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	fbb3 f3f1 	udiv	r3, r3, r1
 800a17c:	4413      	add	r3, r2
 800a17e:	4619      	mov	r1, r3
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fe3b 	bl	8009dfc <move_window>
 800a186:	4603      	mov	r3, r0
 800a188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a18a:	7ffb      	ldrb	r3, [r7, #31]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f040 80d6 	bne.w	800a33e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	61ba      	str	r2, [r7, #24]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	8992      	ldrh	r2, [r2, #12]
 800a1a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1a6:	fb00 f202 	mul.w	r2, r0, r2
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00d      	beq.n	800a1d6 <put_fat+0xb8>
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	b25b      	sxtb	r3, r3
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	b25a      	sxtb	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	b25b      	sxtb	r3, r3
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	e001      	b.n	800a1da <put_fat+0xbc>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	899b      	ldrh	r3, [r3, #12]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff fdff 	bl	8009dfc <move_window>
 800a1fe:	4603      	mov	r3, r0
 800a200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a202:	7ffb      	ldrb	r3, [r7, #31]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f040 809c 	bne.w	800a342 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	899b      	ldrh	r3, [r3, #12]
 800a214:	461a      	mov	r2, r3
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	fbb3 f0f2 	udiv	r0, r3, r2
 800a21c:	fb00 f202 	mul.w	r2, r0, r2
 800a220:	1a9b      	subs	r3, r3, r2
 800a222:	440b      	add	r3, r1
 800a224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <put_fat+0x11a>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	091b      	lsrs	r3, r3, #4
 800a234:	b2db      	uxtb	r3, r3
 800a236:	e00e      	b.n	800a256 <put_fat+0x138>
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b25b      	sxtb	r3, r3
 800a23e:	f023 030f 	bic.w	r3, r3, #15
 800a242:	b25a      	sxtb	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	b25b      	sxtb	r3, r3
 800a24a:	f003 030f 	and.w	r3, r3, #15
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	4313      	orrs	r3, r2
 800a252:	b25b      	sxtb	r3, r3
 800a254:	b2db      	uxtb	r3, r3
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2201      	movs	r2, #1
 800a25e:	70da      	strb	r2, [r3, #3]
			break;
 800a260:	e074      	b.n	800a34c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	fbb3 f3f1 	udiv	r3, r3, r1
 800a276:	4413      	add	r3, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff fdbe 	bl	8009dfc <move_window>
 800a280:	4603      	mov	r3, r0
 800a282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a284:	7ffb      	ldrb	r3, [r7, #31]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d15d      	bne.n	800a346 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	8992      	ldrh	r2, [r2, #12]
 800a298:	fbb3 f0f2 	udiv	r0, r3, r2
 800a29c:	fb00 f202 	mul.w	r2, r0, r2
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff faff 	bl	80098ae <st_word>
			fs->wflag = 1;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	70da      	strb	r2, [r3, #3]
			break;
 800a2b6:	e049      	b.n	800a34c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	899b      	ldrh	r3, [r3, #12]
 800a2c0:	089b      	lsrs	r3, r3, #2
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff fd93 	bl	8009dfc <move_window>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d134      	bne.n	800a34a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	8992      	ldrh	r2, [r2, #12]
 800a2f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2f8:	fb00 f202 	mul.w	r2, r0, r2
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	440b      	add	r3, r1
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff fab1 	bl	8009868 <ld_dword>
 800a306:	4603      	mov	r3, r0
 800a308:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a30c:	4323      	orrs	r3, r4
 800a30e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	8992      	ldrh	r2, [r2, #12]
 800a31e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a322:	fb00 f202 	mul.w	r2, r0, r2
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	440b      	add	r3, r1
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fad9 	bl	80098e4 <st_dword>
			fs->wflag = 1;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	70da      	strb	r2, [r3, #3]
			break;
 800a338:	e008      	b.n	800a34c <put_fat+0x22e>
		}
	}
 800a33a:	bf00      	nop
 800a33c:	e006      	b.n	800a34c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a33e:	bf00      	nop
 800a340:	e004      	b.n	800a34c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a342:	bf00      	nop
 800a344:	e002      	b.n	800a34c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a346:	bf00      	nop
 800a348:	e000      	b.n	800a34c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a34a:	bf00      	nop
	return res;
 800a34c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3724      	adds	r7, #36	; 0x24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd90      	pop	{r4, r7, pc}

0800a356 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b088      	sub	sp, #32
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d904      	bls.n	800a37c <remove_chain+0x26>
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d301      	bcc.n	800a380 <remove_chain+0x2a>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e04b      	b.n	800a418 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00c      	beq.n	800a3a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	69b8      	ldr	r0, [r7, #24]
 800a38e:	f7ff fec6 	bl	800a11e <put_fat>
 800a392:	4603      	mov	r3, r0
 800a394:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a396:	7ffb      	ldrb	r3, [r7, #31]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <remove_chain+0x4a>
 800a39c:	7ffb      	ldrb	r3, [r7, #31]
 800a39e:	e03b      	b.n	800a418 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a3a0:	68b9      	ldr	r1, [r7, #8]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fde7 	bl	8009f76 <get_fat>
 800a3a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d031      	beq.n	800a414 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <remove_chain+0x64>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e02e      	b.n	800a418 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d101      	bne.n	800a3c6 <remove_chain+0x70>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e028      	b.n	800a418 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f7ff fea7 	bl	800a11e <put_fat>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <remove_chain+0x88>
 800a3da:	7ffb      	ldrb	r3, [r7, #31]
 800a3dc:	e01c      	b.n	800a418 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	3b02      	subs	r3, #2
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d20b      	bcs.n	800a404 <remove_chain+0xae>
			fs->free_clst++;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	791b      	ldrb	r3, [r3, #4]
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d3c6      	bcc.n	800a3a0 <remove_chain+0x4a>
 800a412:	e000      	b.n	800a416 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a414:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10d      	bne.n	800a452 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <create_chain+0x2c>
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d31b      	bcc.n	800a484 <create_chain+0x64>
 800a44c:	2301      	movs	r3, #1
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	e018      	b.n	800a484 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fd8e 	bl	8009f76 <get_fat>
 800a45a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d801      	bhi.n	800a466 <create_chain+0x46>
 800a462:	2301      	movs	r3, #1
 800a464:	e070      	b.n	800a548 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46c:	d101      	bne.n	800a472 <create_chain+0x52>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	e06a      	b.n	800a548 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d201      	bcs.n	800a480 <create_chain+0x60>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	e063      	b.n	800a548 <create_chain+0x128>
		scl = clst;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	3301      	adds	r3, #1
 800a48c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	429a      	cmp	r2, r3
 800a496:	d307      	bcc.n	800a4a8 <create_chain+0x88>
				ncl = 2;
 800a498:	2302      	movs	r3, #2
 800a49a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d901      	bls.n	800a4a8 <create_chain+0x88>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e04f      	b.n	800a548 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a4a8:	69f9      	ldr	r1, [r7, #28]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fd63 	bl	8009f76 <get_fat>
 800a4b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00e      	beq.n	800a4d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d003      	beq.n	800a4c6 <create_chain+0xa6>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d101      	bne.n	800a4ca <create_chain+0xaa>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	e03e      	b.n	800a548 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d1da      	bne.n	800a488 <create_chain+0x68>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e038      	b.n	800a548 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a4d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4dc:	69f9      	ldr	r1, [r7, #28]
 800a4de:	6938      	ldr	r0, [r7, #16]
 800a4e0:	f7ff fe1d 	bl	800a11e <put_fat>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <create_chain+0xe2>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d006      	beq.n	800a502 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6938      	ldr	r0, [r7, #16]
 800a4fa:	f7ff fe10 	bl	800a11e <put_fat>
 800a4fe:	4603      	mov	r3, r0
 800a500:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d116      	bne.n	800a536 <create_chain+0x116>
		fs->last_clst = ncl;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	3b02      	subs	r3, #2
 800a518:	429a      	cmp	r2, r3
 800a51a:	d804      	bhi.n	800a526 <create_chain+0x106>
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	791b      	ldrb	r3, [r3, #4]
 800a52a:	f043 0301 	orr.w	r3, r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	711a      	strb	r2, [r3, #4]
 800a534:	e007      	b.n	800a546 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d102      	bne.n	800a542 <create_chain+0x122>
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	e000      	b.n	800a544 <create_chain+0x124>
 800a542:	2301      	movs	r3, #1
 800a544:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	3304      	adds	r3, #4
 800a566:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	899b      	ldrh	r3, [r3, #12]
 800a56c:	461a      	mov	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	fbb3 f3f2 	udiv	r3, r3, r2
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	8952      	ldrh	r2, [r2, #10]
 800a578:	fbb3 f3f2 	udiv	r3, r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	1d1a      	adds	r2, r3, #4
 800a582:	613a      	str	r2, [r7, #16]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <clmt_clust+0x42>
 800a58e:	2300      	movs	r3, #0
 800a590:	e010      	b.n	800a5b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	429a      	cmp	r2, r3
 800a598:	d307      	bcc.n	800a5aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5a8:	e7e9      	b.n	800a57e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a5aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	4413      	add	r3, r2
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5d6:	d204      	bcs.n	800a5e2 <dir_sdi+0x22>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f003 031f 	and.w	r3, r3, #31
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e071      	b.n	800a6ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <dir_sdi+0x46>
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d902      	bls.n	800a606 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10c      	bne.n	800a626 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	095b      	lsrs	r3, r3, #5
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	8912      	ldrh	r2, [r2, #8]
 800a614:	4293      	cmp	r3, r2
 800a616:	d301      	bcc.n	800a61c <dir_sdi+0x5c>
 800a618:	2302      	movs	r3, #2
 800a61a:	e056      	b.n	800a6ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	61da      	str	r2, [r3, #28]
 800a624:	e02d      	b.n	800a682 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	895b      	ldrh	r3, [r3, #10]
 800a62a:	461a      	mov	r2, r3
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	899b      	ldrh	r3, [r3, #12]
 800a630:	fb02 f303 	mul.w	r3, r2, r3
 800a634:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a636:	e019      	b.n	800a66c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6979      	ldr	r1, [r7, #20]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fc9a 	bl	8009f76 <get_fat>
 800a642:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d101      	bne.n	800a650 <dir_sdi+0x90>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e03c      	b.n	800a6ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d904      	bls.n	800a660 <dir_sdi+0xa0>
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d301      	bcc.n	800a664 <dir_sdi+0xa4>
 800a660:	2302      	movs	r3, #2
 800a662:	e032      	b.n	800a6ca <dir_sdi+0x10a>
			ofs -= csz;
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	429a      	cmp	r2, r3
 800a672:	d2e1      	bcs.n	800a638 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a674:	6979      	ldr	r1, [r7, #20]
 800a676:	6938      	ldr	r0, [r7, #16]
 800a678:	f7ff fc5e 	bl	8009f38 <clust2sect>
 800a67c:	4602      	mov	r2, r0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <dir_sdi+0xd4>
 800a690:	2302      	movs	r3, #2
 800a692:	e01a      	b.n	800a6ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	899b      	ldrh	r3, [r3, #12]
 800a69c:	4619      	mov	r1, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6a4:	441a      	add	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	899b      	ldrh	r3, [r3, #12]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6bc:	fb00 f202 	mul.w	r2, r0, r2
 800a6c0:	1a9b      	subs	r3, r3, r2
 800a6c2:	18ca      	adds	r2, r1, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	3320      	adds	r3, #32
 800a6e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <dir_next+0x28>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6f8:	d301      	bcc.n	800a6fe <dir_next+0x2c>
 800a6fa:	2304      	movs	r3, #4
 800a6fc:	e0bb      	b.n	800a876 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	899b      	ldrh	r3, [r3, #12]
 800a702:	461a      	mov	r2, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	fbb3 f1f2 	udiv	r1, r3, r2
 800a70a:	fb01 f202 	mul.w	r2, r1, r2
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	2b00      	cmp	r3, #0
 800a712:	f040 809d 	bne.w	800a850 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	8912      	ldrh	r2, [r2, #8]
 800a730:	4293      	cmp	r3, r2
 800a732:	f0c0 808d 	bcc.w	800a850 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	61da      	str	r2, [r3, #28]
 800a73c:	2304      	movs	r3, #4
 800a73e:	e09a      	b.n	800a876 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	899b      	ldrh	r3, [r3, #12]
 800a744:	461a      	mov	r2, r3
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	8952      	ldrh	r2, [r2, #10]
 800a750:	3a01      	subs	r2, #1
 800a752:	4013      	ands	r3, r2
 800a754:	2b00      	cmp	r3, #0
 800a756:	d17b      	bne.n	800a850 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7ff fc08 	bl	8009f76 <get_fat>
 800a766:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d801      	bhi.n	800a772 <dir_next+0xa0>
 800a76e:	2302      	movs	r3, #2
 800a770:	e081      	b.n	800a876 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	d101      	bne.n	800a77e <dir_next+0xac>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e07b      	b.n	800a876 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	429a      	cmp	r2, r3
 800a786:	d359      	bcc.n	800a83c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d104      	bne.n	800a798 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	61da      	str	r2, [r3, #28]
 800a794:	2304      	movs	r3, #4
 800a796:	e06e      	b.n	800a876 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7ff fe3d 	bl	800a420 <create_chain>
 800a7a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <dir_next+0xe0>
 800a7ae:	2307      	movs	r3, #7
 800a7b0:	e061      	b.n	800a876 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d101      	bne.n	800a7bc <dir_next+0xea>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e05c      	b.n	800a876 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c2:	d101      	bne.n	800a7c8 <dir_next+0xf6>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e056      	b.n	800a876 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fad3 	bl	8009d74 <sync_window>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <dir_next+0x106>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e04e      	b.n	800a876 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	899b      	ldrh	r3, [r3, #12]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f7ff f8ca 	bl	800997e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	6979      	ldr	r1, [r7, #20]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7ff fba1 	bl	8009f38 <clust2sect>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	635a      	str	r2, [r3, #52]	; 0x34
 800a7fc:	e012      	b.n	800a824 <dir_next+0x152>
						fs->wflag = 1;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f7ff fab5 	bl	8009d74 <sync_window>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <dir_next+0x142>
 800a810:	2301      	movs	r3, #1
 800a812:	e030      	b.n	800a876 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	3301      	adds	r3, #1
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	635a      	str	r2, [r3, #52]	; 0x34
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	895b      	ldrh	r3, [r3, #10]
 800a828:	461a      	mov	r2, r3
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d3e6      	bcc.n	800a7fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a842:	6979      	ldr	r1, [r7, #20]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff fb77 	bl	8009f38 <clust2sect>
 800a84a:	4602      	mov	r2, r0
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	899b      	ldrh	r3, [r3, #12]
 800a860:	461a      	mov	r2, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	fbb3 f0f2 	udiv	r0, r3, r2
 800a868:	fb00 f202 	mul.w	r2, r0, r2
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	18ca      	adds	r2, r1, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fe95 	bl	800a5c0 <dir_sdi>
 800a896:	4603      	mov	r3, r0
 800a898:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d12b      	bne.n	800a8f8 <dir_alloc+0x7a>
		n = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff faa6 	bl	8009dfc <move_window>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d11d      	bne.n	800a8f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2be5      	cmp	r3, #229	; 0xe5
 800a8c2:	d004      	beq.n	800a8ce <dir_alloc+0x50>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d107      	bne.n	800a8de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d102      	bne.n	800a8e2 <dir_alloc+0x64>
 800a8dc:	e00c      	b.n	800a8f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8de:	2300      	movs	r3, #0
 800a8e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff fef4 	bl	800a6d2 <dir_next>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0d7      	beq.n	800a8a4 <dir_alloc+0x26>
 800a8f4:	e000      	b.n	800a8f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a8f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d101      	bne.n	800a902 <dir_alloc+0x84>
 800a8fe:	2307      	movs	r3, #7
 800a900:	75fb      	strb	r3, [r7, #23]
	return res;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	331a      	adds	r3, #26
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe ff8c 	bl	8009838 <ld_word>
 800a920:	4603      	mov	r3, r0
 800a922:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d109      	bne.n	800a940 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	3314      	adds	r3, #20
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe ff81 	bl	8009838 <ld_word>
 800a936:	4603      	mov	r3, r0
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a940:	68fb      	ldr	r3, [r7, #12]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	331a      	adds	r3, #26
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	b292      	uxth	r2, r2
 800a95e:	4611      	mov	r1, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7fe ffa4 	bl	80098ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d109      	bne.n	800a982 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f103 0214 	add.w	r2, r3, #20
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	0c1b      	lsrs	r3, r3, #16
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fe ff96 	bl	80098ae <st_word>
	}
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a998:	2100      	movs	r1, #0
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fe10 	bl	800a5c0 <dir_sdi>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <dir_find+0x24>
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	e03e      	b.n	800aa2c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6938      	ldr	r0, [r7, #16]
 800a9b6:	f7ff fa21 	bl	8009dfc <move_window>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d12f      	bne.n	800aa24 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <dir_find+0x4e>
 800a9d2:	2304      	movs	r3, #4
 800a9d4:	75fb      	strb	r3, [r7, #23]
 800a9d6:	e028      	b.n	800aa2a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	330b      	adds	r3, #11
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	330b      	adds	r3, #11
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10a      	bne.n	800aa10 <dir_find+0x86>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a18      	ldr	r0, [r3, #32]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3324      	adds	r3, #36	; 0x24
 800aa02:	220b      	movs	r2, #11
 800aa04:	4619      	mov	r1, r3
 800aa06:	f7fe ffd5 	bl	80099b4 <mem_cmp>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00b      	beq.n	800aa28 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa10:	2100      	movs	r1, #0
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fe5d 	bl	800a6d2 <dir_next>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0c5      	beq.n	800a9ae <dir_find+0x24>
 800aa22:	e002      	b.n	800aa2a <dir_find+0xa0>
		if (res != FR_OK) break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa28:	bf00      	nop

	return res;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa42:	2101      	movs	r1, #1
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ff1a 	bl	800a87e <dir_alloc>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11c      	bne.n	800aa8e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f7ff f9ce 	bl	8009dfc <move_window>
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d111      	bne.n	800aa8e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe ff83 	bl	800997e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a18      	ldr	r0, [r3, #32]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3324      	adds	r3, #36	; 0x24
 800aa80:	220b      	movs	r2, #11
 800aa82:	4619      	mov	r1, r3
 800aa84:	f7fe ff5a 	bl	800993c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aaae:	220b      	movs	r2, #11
 800aab0:	2120      	movs	r1, #32
 800aab2:	68b8      	ldr	r0, [r7, #8]
 800aab4:	f7fe ff63 	bl	800997e <mem_set>
	si = i = 0; ni = 8;
 800aab8:	2300      	movs	r3, #0
 800aaba:	613b      	str	r3, [r7, #16]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	2308      	movs	r3, #8
 800aac2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	61fa      	str	r2, [r7, #28]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aad2:	7efb      	ldrb	r3, [r7, #27]
 800aad4:	2b20      	cmp	r3, #32
 800aad6:	d94e      	bls.n	800ab76 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aad8:	7efb      	ldrb	r3, [r7, #27]
 800aada:	2b2f      	cmp	r3, #47	; 0x2f
 800aadc:	d006      	beq.n	800aaec <create_name+0x54>
 800aade:	7efb      	ldrb	r3, [r7, #27]
 800aae0:	2b5c      	cmp	r3, #92	; 0x5c
 800aae2:	d110      	bne.n	800ab06 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aae4:	e002      	b.n	800aaec <create_name+0x54>
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	3301      	adds	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b2f      	cmp	r3, #47	; 0x2f
 800aaf6:	d0f6      	beq.n	800aae6 <create_name+0x4e>
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b5c      	cmp	r3, #92	; 0x5c
 800ab02:	d0f0      	beq.n	800aae6 <create_name+0x4e>
			break;
 800ab04:	e038      	b.n	800ab78 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ab06:	7efb      	ldrb	r3, [r7, #27]
 800ab08:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0a:	d003      	beq.n	800ab14 <create_name+0x7c>
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d30c      	bcc.n	800ab2e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2b0b      	cmp	r3, #11
 800ab18:	d002      	beq.n	800ab20 <create_name+0x88>
 800ab1a:	7efb      	ldrb	r3, [r7, #27]
 800ab1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1e:	d001      	beq.n	800ab24 <create_name+0x8c>
 800ab20:	2306      	movs	r3, #6
 800ab22:	e044      	b.n	800abae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ab24:	2308      	movs	r3, #8
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	230b      	movs	r3, #11
 800ab2a:	617b      	str	r3, [r7, #20]
			continue;
 800ab2c:	e022      	b.n	800ab74 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da04      	bge.n	800ab40 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ab36:	7efb      	ldrb	r3, [r7, #27]
 800ab38:	3b80      	subs	r3, #128	; 0x80
 800ab3a:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <create_name+0x120>)
 800ab3c:	5cd3      	ldrb	r3, [r2, r3]
 800ab3e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ab40:	7efb      	ldrb	r3, [r7, #27]
 800ab42:	4619      	mov	r1, r3
 800ab44:	481d      	ldr	r0, [pc, #116]	; (800abbc <create_name+0x124>)
 800ab46:	f7fe ff5c 	bl	8009a02 <chk_chr>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <create_name+0xbc>
 800ab50:	2306      	movs	r3, #6
 800ab52:	e02c      	b.n	800abae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ab54:	7efb      	ldrb	r3, [r7, #27]
 800ab56:	2b60      	cmp	r3, #96	; 0x60
 800ab58:	d905      	bls.n	800ab66 <create_name+0xce>
 800ab5a:	7efb      	ldrb	r3, [r7, #27]
 800ab5c:	2b7a      	cmp	r3, #122	; 0x7a
 800ab5e:	d802      	bhi.n	800ab66 <create_name+0xce>
 800ab60:	7efb      	ldrb	r3, [r7, #27]
 800ab62:	3b20      	subs	r3, #32
 800ab64:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	613a      	str	r2, [r7, #16]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	4413      	add	r3, r2
 800ab70:	7efa      	ldrb	r2, [r7, #27]
 800ab72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ab74:	e7a6      	b.n	800aac4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab76:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	441a      	add	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <create_name+0xf4>
 800ab88:	2306      	movs	r3, #6
 800ab8a:	e010      	b.n	800abae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2be5      	cmp	r3, #229	; 0xe5
 800ab92:	d102      	bne.n	800ab9a <create_name+0x102>
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2205      	movs	r2, #5
 800ab98:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab9a:	7efb      	ldrb	r3, [r7, #27]
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d801      	bhi.n	800aba4 <create_name+0x10c>
 800aba0:	2204      	movs	r2, #4
 800aba2:	e000      	b.n	800aba6 <create_name+0x10e>
 800aba4:	2200      	movs	r2, #0
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	330b      	adds	r3, #11
 800abaa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800abac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3720      	adds	r7, #32
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	0800f9ec 	.word	0x0800f9ec
 800abbc:	0800f980 	.word	0x0800f980

0800abc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800abd4:	e002      	b.n	800abdc <follow_path+0x1c>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b2f      	cmp	r3, #47	; 0x2f
 800abe2:	d0f8      	beq.n	800abd6 <follow_path+0x16>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b5c      	cmp	r3, #92	; 0x5c
 800abea:	d0f4      	beq.n	800abd6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b1f      	cmp	r3, #31
 800abf8:	d80a      	bhi.n	800ac10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2280      	movs	r2, #128	; 0x80
 800abfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ac02:	2100      	movs	r1, #0
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff fcdb 	bl	800a5c0 <dir_sdi>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]
 800ac0e:	e048      	b.n	800aca2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac10:	463b      	mov	r3, r7
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff3f 	bl	800aa98 <create_name>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d139      	bne.n	800ac98 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff feb0 	bl	800a98a <dir_find>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d12c      	bne.n	800ac9c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d127      	bne.n	800ac9c <follow_path+0xdc>
 800ac4c:	2305      	movs	r3, #5
 800ac4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac50:	e024      	b.n	800ac9c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac52:	7afb      	ldrb	r3, [r7, #11]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d121      	bne.n	800aca0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	799b      	ldrb	r3, [r3, #6]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac68:	2305      	movs	r3, #5
 800ac6a:	75fb      	strb	r3, [r7, #23]
 800ac6c:	e019      	b.n	800aca2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	8992      	ldrh	r2, [r2, #12]
 800ac7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac80:	fb00 f202 	mul.w	r2, r0, r2
 800ac84:	1a9b      	subs	r3, r3, r2
 800ac86:	440b      	add	r3, r1
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff fe3e 	bl	800a90c <ld_clust>
 800ac90:	4602      	mov	r2, r0
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac96:	e7bb      	b.n	800ac10 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac98:	bf00      	nop
 800ac9a:	e002      	b.n	800aca2 <follow_path+0xe2>
				break;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aca0:	bf00      	nop
			}
		}
	}

	return res;
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800acb4:	f04f 33ff 	mov.w	r3, #4294967295
 800acb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d031      	beq.n	800ad26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e002      	b.n	800acd0 <get_ldnumber+0x24>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3301      	adds	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b20      	cmp	r3, #32
 800acd6:	d903      	bls.n	800ace0 <get_ldnumber+0x34>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b3a      	cmp	r3, #58	; 0x3a
 800acde:	d1f4      	bne.n	800acca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b3a      	cmp	r3, #58	; 0x3a
 800ace6:	d11c      	bne.n	800ad22 <get_ldnumber+0x76>
			tp = *path;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	60fa      	str	r2, [r7, #12]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	3b30      	subs	r3, #48	; 0x30
 800acf8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d80e      	bhi.n	800ad1e <get_ldnumber+0x72>
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d10a      	bne.n	800ad1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d107      	bne.n	800ad1e <get_ldnumber+0x72>
					vol = (int)i;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	3301      	adds	r3, #1
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	e002      	b.n	800ad28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad22:	2300      	movs	r3, #0
 800ad24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad26:	693b      	ldr	r3, [r7, #16]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	70da      	strb	r2, [r3, #3]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff f854 	bl	8009dfc <move_window>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <check_fs+0x2a>
 800ad5a:	2304      	movs	r3, #4
 800ad5c:	e038      	b.n	800add0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3338      	adds	r3, #56	; 0x38
 800ad62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fd66 	bl	8009838 <ld_word>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d001      	beq.n	800ad7c <check_fs+0x48>
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e029      	b.n	800add0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad82:	2be9      	cmp	r3, #233	; 0xe9
 800ad84:	d009      	beq.n	800ad9a <check_fs+0x66>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad8c:	2beb      	cmp	r3, #235	; 0xeb
 800ad8e:	d11e      	bne.n	800adce <check_fs+0x9a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad96:	2b90      	cmp	r3, #144	; 0x90
 800ad98:	d119      	bne.n	800adce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3338      	adds	r3, #56	; 0x38
 800ad9e:	3336      	adds	r3, #54	; 0x36
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe fd61 	bl	8009868 <ld_dword>
 800ada6:	4603      	mov	r3, r0
 800ada8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800adac:	4a0a      	ldr	r2, [pc, #40]	; (800add8 <check_fs+0xa4>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d101      	bne.n	800adb6 <check_fs+0x82>
 800adb2:	2300      	movs	r3, #0
 800adb4:	e00c      	b.n	800add0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3338      	adds	r3, #56	; 0x38
 800adba:	3352      	adds	r3, #82	; 0x52
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe fd53 	bl	8009868 <ld_dword>
 800adc2:	4603      	mov	r3, r0
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <check_fs+0xa8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d101      	bne.n	800adce <check_fs+0x9a>
 800adca:	2300      	movs	r3, #0
 800adcc:	e000      	b.n	800add0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800adce:	2302      	movs	r3, #2
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	00544146 	.word	0x00544146
 800addc:	33544146 	.word	0x33544146

0800ade0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b096      	sub	sp, #88	; 0x58
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4613      	mov	r3, r2
 800adec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff ff59 	bl	800acac <get_ldnumber>
 800adfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800adfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	da01      	bge.n	800ae06 <find_volume+0x26>
 800ae02:	230b      	movs	r3, #11
 800ae04:	e26a      	b.n	800b2dc <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae06:	4aa3      	ldr	r2, [pc, #652]	; (800b094 <find_volume+0x2b4>)
 800ae08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <find_volume+0x3a>
 800ae16:	230c      	movs	r3, #12
 800ae18:	e260      	b.n	800b2dc <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800ae1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae1c:	f7fe fe0c 	bl	8009a38 <lock_fs>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <find_volume+0x4a>
 800ae26:	230f      	movs	r3, #15
 800ae28:	e258      	b.n	800b2dc <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	f023 0301 	bic.w	r3, r3, #1
 800ae36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01a      	beq.n	800ae76 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe fc59 	bl	80096fc <disk_status>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10c      	bne.n	800ae76 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <find_volume+0x92>
 800ae62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae66:	f003 0304 	and.w	r3, r3, #4
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ae6e:	230a      	movs	r3, #10
 800ae70:	e234      	b.n	800b2dc <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800ae72:	2300      	movs	r3, #0
 800ae74:	e232      	b.n	800b2dc <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	785b      	ldrb	r3, [r3, #1]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe fc51 	bl	8009730 <disk_initialize>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aea0:	2303      	movs	r3, #3
 800aea2:	e21b      	b.n	800b2dc <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <find_volume+0xda>
 800aeaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800aeb6:	230a      	movs	r3, #10
 800aeb8:	e210      	b.n	800b2dc <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	7858      	ldrb	r0, [r3, #1]
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	330c      	adds	r3, #12
 800aec2:	461a      	mov	r2, r3
 800aec4:	2102      	movs	r1, #2
 800aec6:	f7fe fc99 	bl	80097fc <disk_ioctl>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <find_volume+0xf4>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e203      	b.n	800b2dc <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	899b      	ldrh	r3, [r3, #12]
 800aed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aedc:	d80d      	bhi.n	800aefa <find_volume+0x11a>
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	899b      	ldrh	r3, [r3, #12]
 800aee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aee6:	d308      	bcc.n	800aefa <find_volume+0x11a>
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	899b      	ldrh	r3, [r3, #12]
 800aeec:	461a      	mov	r2, r3
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	899b      	ldrh	r3, [r3, #12]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	4013      	ands	r3, r2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <find_volume+0x11e>
 800aefa:	2301      	movs	r3, #1
 800aefc:	e1ee      	b.n	800b2dc <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af06:	f7ff ff15 	bl	800ad34 <check_fs>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af14:	2b02      	cmp	r3, #2
 800af16:	d149      	bne.n	800afac <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af18:	2300      	movs	r3, #0
 800af1a:	643b      	str	r3, [r7, #64]	; 0x40
 800af1c:	e01e      	b.n	800af5c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800af24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af2c:	4413      	add	r3, r2
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	3304      	adds	r3, #4
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d006      	beq.n	800af48 <find_volume+0x168>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	3308      	adds	r3, #8
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fc92 	bl	8009868 <ld_dword>
 800af44:	4602      	mov	r2, r0
 800af46:	e000      	b.n	800af4a <find_volume+0x16a>
 800af48:	2200      	movs	r2, #0
 800af4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	3358      	adds	r3, #88	; 0x58
 800af50:	443b      	add	r3, r7
 800af52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af58:	3301      	adds	r3, #1
 800af5a:	643b      	str	r3, [r7, #64]	; 0x40
 800af5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d9dd      	bls.n	800af1e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af62:	2300      	movs	r3, #0
 800af64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <find_volume+0x192>
 800af6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6e:	3b01      	subs	r3, #1
 800af70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	3358      	adds	r3, #88	; 0x58
 800af78:	443b      	add	r3, r7
 800af7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <find_volume+0x1b2>
 800af86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af8a:	f7ff fed3 	bl	800ad34 <check_fs>
 800af8e:	4603      	mov	r3, r0
 800af90:	e000      	b.n	800af94 <find_volume+0x1b4>
 800af92:	2303      	movs	r3, #3
 800af94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d905      	bls.n	800afac <find_volume+0x1cc>
 800afa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa2:	3301      	adds	r3, #1
 800afa4:	643b      	str	r3, [r7, #64]	; 0x40
 800afa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d9e2      	bls.n	800af72 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d101      	bne.n	800afb8 <find_volume+0x1d8>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e191      	b.n	800b2dc <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800afb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d901      	bls.n	800afc4 <find_volume+0x1e4>
 800afc0:	230d      	movs	r3, #13
 800afc2:	e18b      	b.n	800b2dc <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	3338      	adds	r3, #56	; 0x38
 800afc8:	330b      	adds	r3, #11
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fc34 	bl	8009838 <ld_word>
 800afd0:	4603      	mov	r3, r0
 800afd2:	461a      	mov	r2, r3
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	899b      	ldrh	r3, [r3, #12]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d001      	beq.n	800afe0 <find_volume+0x200>
 800afdc:	230d      	movs	r3, #13
 800afde:	e17d      	b.n	800b2dc <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	3338      	adds	r3, #56	; 0x38
 800afe4:	3316      	adds	r3, #22
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe fc26 	bl	8009838 <ld_word>
 800afec:	4603      	mov	r3, r0
 800afee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800aff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <find_volume+0x224>
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	3338      	adds	r3, #56	; 0x38
 800affa:	3324      	adds	r3, #36	; 0x24
 800affc:	4618      	mov	r0, r3
 800affe:	f7fe fc33 	bl	8009868 <ld_dword>
 800b002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b008:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	789b      	ldrb	r3, [r3, #2]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d005      	beq.n	800b028 <find_volume+0x248>
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	789b      	ldrb	r3, [r3, #2]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d001      	beq.n	800b028 <find_volume+0x248>
 800b024:	230d      	movs	r3, #13
 800b026:	e159      	b.n	800b2dc <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	789b      	ldrb	r3, [r3, #2]
 800b02c:	461a      	mov	r2, r3
 800b02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b030:	fb02 f303 	mul.w	r3, r2, r3
 800b034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	895b      	ldrh	r3, [r3, #10]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <find_volume+0x27c>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	895b      	ldrh	r3, [r3, #10]
 800b04e:	461a      	mov	r2, r3
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	895b      	ldrh	r3, [r3, #10]
 800b054:	3b01      	subs	r3, #1
 800b056:	4013      	ands	r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <find_volume+0x280>
 800b05c:	230d      	movs	r3, #13
 800b05e:	e13d      	b.n	800b2dc <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	3338      	adds	r3, #56	; 0x38
 800b064:	3311      	adds	r3, #17
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fbe6 	bl	8009838 <ld_word>
 800b06c:	4603      	mov	r3, r0
 800b06e:	461a      	mov	r2, r3
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	891b      	ldrh	r3, [r3, #8]
 800b078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b07a:	8992      	ldrh	r2, [r2, #12]
 800b07c:	0952      	lsrs	r2, r2, #5
 800b07e:	b292      	uxth	r2, r2
 800b080:	fbb3 f1f2 	udiv	r1, r3, r2
 800b084:	fb01 f202 	mul.w	r2, r1, r2
 800b088:	1a9b      	subs	r3, r3, r2
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <find_volume+0x2b8>
 800b090:	230d      	movs	r3, #13
 800b092:	e123      	b.n	800b2dc <find_volume+0x4fc>
 800b094:	20003480 	.word	0x20003480

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	3338      	adds	r3, #56	; 0x38
 800b09c:	3313      	adds	r3, #19
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fbca 	bl	8009838 <ld_word>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <find_volume+0x2dc>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	3338      	adds	r3, #56	; 0x38
 800b0b2:	3320      	adds	r3, #32
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fbd7 	bl	8009868 <ld_dword>
 800b0ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	3338      	adds	r3, #56	; 0x38
 800b0c0:	330e      	adds	r3, #14
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fbb8 	bl	8009838 <ld_word>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <find_volume+0x2f6>
 800b0d2:	230d      	movs	r3, #13
 800b0d4:	e102      	b.n	800b2dc <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0da:	4413      	add	r3, r2
 800b0dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0de:	8911      	ldrh	r1, [r2, #8]
 800b0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0e2:	8992      	ldrh	r2, [r2, #12]
 800b0e4:	0952      	lsrs	r2, r2, #5
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	fbb1 f2f2 	udiv	r2, r1, r2
 800b0ec:	b292      	uxth	r2, r2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d201      	bcs.n	800b0fe <find_volume+0x31e>
 800b0fa:	230d      	movs	r3, #13
 800b0fc:	e0ee      	b.n	800b2dc <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b106:	8952      	ldrh	r2, [r2, #10]
 800b108:	fbb3 f3f2 	udiv	r3, r3, r2
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <find_volume+0x338>
 800b114:	230d      	movs	r3, #13
 800b116:	e0e1      	b.n	800b2dc <find_volume+0x4fc>
		fmt = FS_FAT32;
 800b118:	2303      	movs	r3, #3
 800b11a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b124:	4293      	cmp	r3, r2
 800b126:	d802      	bhi.n	800b12e <find_volume+0x34e>
 800b128:	2302      	movs	r3, #2
 800b12a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b134:	4293      	cmp	r3, r2
 800b136:	d802      	bhi.n	800b13e <find_volume+0x35e>
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	1c9a      	adds	r2, r3, #2
 800b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b144:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b14a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b14c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b150:	441a      	add	r2, r3
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	441a      	add	r2, r3
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b164:	2b03      	cmp	r3, #3
 800b166:	d11e      	bne.n	800b1a6 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	3338      	adds	r3, #56	; 0x38
 800b16c:	332a      	adds	r3, #42	; 0x2a
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fb62 	bl	8009838 <ld_word>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <find_volume+0x39e>
 800b17a:	230d      	movs	r3, #13
 800b17c:	e0ae      	b.n	800b2dc <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <find_volume+0x3aa>
 800b186:	230d      	movs	r3, #13
 800b188:	e0a8      	b.n	800b2dc <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	3338      	adds	r3, #56	; 0x38
 800b18e:	332c      	adds	r3, #44	; 0x2c
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fb69 	bl	8009868 <ld_dword>
 800b196:	4602      	mov	r2, r0
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	69db      	ldr	r3, [r3, #28]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a4:	e01f      	b.n	800b1e6 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	891b      	ldrh	r3, [r3, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <find_volume+0x3d2>
 800b1ae:	230d      	movs	r3, #13
 800b1b0:	e094      	b.n	800b2dc <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	441a      	add	r2, r3
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d103      	bne.n	800b1ce <find_volume+0x3ee>
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	e00a      	b.n	800b1e4 <find_volume+0x404>
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	69da      	ldr	r2, [r3, #28]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	4413      	add	r3, r2
 800b1d8:	085a      	lsrs	r2, r3, #1
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b1e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	6a1a      	ldr	r2, [r3, #32]
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	899b      	ldrh	r3, [r3, #12]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f2:	440b      	add	r3, r1
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1f8:	8989      	ldrh	r1, [r1, #12]
 800b1fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d201      	bcs.n	800b206 <find_volume+0x426>
 800b202:	230d      	movs	r3, #13
 800b204:	e06a      	b.n	800b2dc <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	f04f 32ff 	mov.w	r2, #4294967295
 800b20c:	619a      	str	r2, [r3, #24]
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	699a      	ldr	r2, [r3, #24]
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	2280      	movs	r2, #128	; 0x80
 800b21a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b21c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b220:	2b03      	cmp	r3, #3
 800b222:	d149      	bne.n	800b2b8 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	3338      	adds	r3, #56	; 0x38
 800b228:	3330      	adds	r3, #48	; 0x30
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe fb04 	bl	8009838 <ld_word>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d140      	bne.n	800b2b8 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b238:	3301      	adds	r3, #1
 800b23a:	4619      	mov	r1, r3
 800b23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b23e:	f7fe fddd 	bl	8009dfc <move_window>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d137      	bne.n	800b2b8 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	2200      	movs	r2, #0
 800b24c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	3338      	adds	r3, #56	; 0x38
 800b252:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe faee 	bl	8009838 <ld_word>
 800b25c:	4603      	mov	r3, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b264:	429a      	cmp	r2, r3
 800b266:	d127      	bne.n	800b2b8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	3338      	adds	r3, #56	; 0x38
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fafb 	bl	8009868 <ld_dword>
 800b272:	4603      	mov	r3, r0
 800b274:	4a1b      	ldr	r2, [pc, #108]	; (800b2e4 <find_volume+0x504>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d11e      	bne.n	800b2b8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	3338      	adds	r3, #56	; 0x38
 800b27e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe faf0 	bl	8009868 <ld_dword>
 800b288:	4603      	mov	r3, r0
 800b28a:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <find_volume+0x508>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d113      	bne.n	800b2b8 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	3338      	adds	r3, #56	; 0x38
 800b294:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe fae5 	bl	8009868 <ld_dword>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	3338      	adds	r3, #56	; 0x38
 800b2a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe fadb 	bl	8009868 <ld_dword>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <find_volume+0x50c>)
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	4b08      	ldr	r3, [pc, #32]	; (800b2ec <find_volume+0x50c>)
 800b2ca:	801a      	strh	r2, [r3, #0]
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <find_volume+0x50c>)
 800b2ce:	881a      	ldrh	r2, [r3, #0]
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2d6:	f7fe fd29 	bl	8009d2c <clear_lock>
#endif
	return FR_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3758      	adds	r7, #88	; 0x58
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	41615252 	.word	0x41615252
 800b2e8:	61417272 	.word	0x61417272
 800b2ec:	20003484 	.word	0x20003484

0800b2f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b2fa:	2309      	movs	r3, #9
 800b2fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d02e      	beq.n	800b362 <validate+0x72>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d02a      	beq.n	800b362 <validate+0x72>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d025      	beq.n	800b362 <validate+0x72>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	889a      	ldrh	r2, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	88db      	ldrh	r3, [r3, #6]
 800b320:	429a      	cmp	r2, r3
 800b322:	d11e      	bne.n	800b362 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fb85 	bl	8009a38 <lock_fs>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d014      	beq.n	800b35e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe f9de 	bl	80096fc <disk_status>
 800b340:	4603      	mov	r3, r0
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d102      	bne.n	800b350 <validate+0x60>
				res = FR_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
 800b34e:	e008      	b.n	800b362 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2100      	movs	r1, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fb84 	bl	8009a64 <unlock_fs>
 800b35c:	e001      	b.n	800b362 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b35e:	230f      	movs	r3, #15
 800b360:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <validate+0x7e>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	e000      	b.n	800b370 <validate+0x80>
 800b36e:	2300      	movs	r3, #0
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	6013      	str	r3, [r2, #0]
	return res;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b392:	f107 0310 	add.w	r3, r7, #16
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fc88 	bl	800acac <get_ldnumber>
 800b39c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	da01      	bge.n	800b3a8 <f_mount+0x28>
 800b3a4:	230b      	movs	r3, #11
 800b3a6:	e048      	b.n	800b43a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3a8:	4a26      	ldr	r2, [pc, #152]	; (800b444 <f_mount+0xc4>)
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00f      	beq.n	800b3d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3b8:	69b8      	ldr	r0, [r7, #24]
 800b3ba:	f7fe fcb7 	bl	8009d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 f813 	bl	800c3ee <ff_del_syncobj>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <f_mount+0x52>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e033      	b.n	800b43a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00f      	beq.n	800b3fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3310      	adds	r3, #16
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f000 ffdd 	bl	800c3ae <ff_cre_syncobj>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <f_mount+0x7e>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e01d      	b.n	800b43a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	4910      	ldr	r1, [pc, #64]	; (800b444 <f_mount+0xc4>)
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <f_mount+0x94>
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d001      	beq.n	800b418 <f_mount+0x98>
 800b414:	2300      	movs	r3, #0
 800b416:	e010      	b.n	800b43a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b418:	f107 010c 	add.w	r1, r7, #12
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	2200      	movs	r2, #0
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fcdc 	bl	800ade0 <find_volume>
 800b428:	4603      	mov	r3, r0
 800b42a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	7dfa      	ldrb	r2, [r7, #23]
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fb16 	bl	8009a64 <unlock_fs>
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20003480 	.word	0x20003480

0800b448 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b098      	sub	sp, #96	; 0x60
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	4613      	mov	r3, r2
 800b454:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <f_open+0x18>
 800b45c:	2309      	movs	r3, #9
 800b45e:	e1c2      	b.n	800b7e6 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b466:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b468:	79fa      	ldrb	r2, [r7, #7]
 800b46a:	f107 0110 	add.w	r1, r7, #16
 800b46e:	f107 0308 	add.w	r3, r7, #8
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fcb4 	bl	800ade0 <find_volume>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b47e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b482:	2b00      	cmp	r3, #0
 800b484:	f040 819f 	bne.w	800b7c6 <f_open+0x37e>
		dj.obj.fs = fs;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	f107 0314 	add.w	r3, r7, #20
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff fb93 	bl	800abc0 <follow_path>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11a      	bne.n	800b4de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b4a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4ac:	b25b      	sxtb	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	da03      	bge.n	800b4ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800b4b2:	2306      	movs	r3, #6
 800b4b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4b8:	e011      	b.n	800b4de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	f023 0301 	bic.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bf14      	ite	ne
 800b4c4:	2301      	movne	r3, #1
 800b4c6:	2300      	moveq	r3, #0
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fae2 	bl	8009a9c <chk_lock>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	f003 031c 	and.w	r3, r3, #28
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d07f      	beq.n	800b5e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d017      	beq.n	800b520 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d10e      	bne.n	800b516 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4f8:	f7fe fb2c 	bl	8009b54 <enq_lock>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d006      	beq.n	800b510 <f_open+0xc8>
 800b502:	f107 0314 	add.w	r3, r7, #20
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fa94 	bl	800aa34 <dir_register>
 800b50c:	4603      	mov	r3, r0
 800b50e:	e000      	b.n	800b512 <f_open+0xca>
 800b510:	2312      	movs	r3, #18
 800b512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	f043 0308 	orr.w	r3, r3, #8
 800b51c:	71fb      	strb	r3, [r7, #7]
 800b51e:	e010      	b.n	800b542 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b520:	7ebb      	ldrb	r3, [r7, #26]
 800b522:	f003 0311 	and.w	r3, r3, #17
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <f_open+0xea>
					res = FR_DENIED;
 800b52a:	2307      	movs	r3, #7
 800b52c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b530:	e007      	b.n	800b542 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b532:	79fb      	ldrb	r3, [r7, #7]
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <f_open+0xfa>
 800b53c:	2308      	movs	r3, #8
 800b53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b546:	2b00      	cmp	r3, #0
 800b548:	d168      	bne.n	800b61c <f_open+0x1d4>
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	f003 0308 	and.w	r3, r3, #8
 800b550:	2b00      	cmp	r3, #0
 800b552:	d063      	beq.n	800b61c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b554:	f7fe f870 	bl	8009638 <get_fattime>
 800b558:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	330e      	adds	r3, #14
 800b55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b560:	4618      	mov	r0, r3
 800b562:	f7fe f9bf 	bl	80098e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b568:	3316      	adds	r3, #22
 800b56a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe f9b9 	bl	80098e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b574:	330b      	adds	r3, #11
 800b576:	2220      	movs	r2, #32
 800b578:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff f9c3 	bl	800a90c <ld_clust>
 800b586:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b58c:	2200      	movs	r2, #0
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff f9db 	bl	800a94a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b596:	331c      	adds	r3, #28
 800b598:	2100      	movs	r1, #0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe f9a2 	bl	80098e4 <st_dword>
					fs->wflag = 1;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d037      	beq.n	800b61c <f_open+0x1d4>
						dw = fs->winsect;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b5b2:	f107 0314 	add.w	r3, r7, #20
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fecb 	bl	800a356 <remove_chain>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b5c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d126      	bne.n	800b61c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fc12 	bl	8009dfc <move_window>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5e2:	3a01      	subs	r2, #1
 800b5e4:	615a      	str	r2, [r3, #20]
 800b5e6:	e019      	b.n	800b61c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d115      	bne.n	800b61c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5f0:	7ebb      	ldrb	r3, [r7, #26]
 800b5f2:	f003 0310 	and.w	r3, r3, #16
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b600:	e00c      	b.n	800b61c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	f003 0302 	and.w	r3, r3, #2
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <f_open+0x1d4>
 800b60c:	7ebb      	ldrb	r3, [r7, #26]
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <f_open+0x1d4>
						res = FR_DENIED;
 800b616:	2307      	movs	r3, #7
 800b618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b620:	2b00      	cmp	r3, #0
 800b622:	d128      	bne.n	800b676 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	f003 0308 	and.w	r3, r3, #8
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	f023 0301 	bic.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bf14      	ite	ne
 800b64e:	2301      	movne	r3, #1
 800b650:	2300      	moveq	r3, #0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fa9b 	bl	8009b98 <inc_lock>
 800b662:	4602      	mov	r2, r0
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <f_open+0x22e>
 800b670:	2302      	movs	r3, #2
 800b672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 80a3 	bne.w	800b7c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff f940 	bl	800a90c <ld_clust>
 800b68c:	4602      	mov	r2, r0
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	331c      	adds	r3, #28
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe f8e6 	bl	8009868 <ld_dword>
 800b69c:	4602      	mov	r2, r0
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	88da      	ldrh	r2, [r3, #6]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	79fa      	ldrb	r2, [r7, #7]
 800b6ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3330      	adds	r3, #48	; 0x30
 800b6d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe f950 	bl	800997e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	f003 0320 	and.w	r3, r3, #32
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d06e      	beq.n	800b7c6 <f_open+0x37e>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d06a      	beq.n	800b7c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	895b      	ldrh	r3, [r3, #10]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	899b      	ldrh	r3, [r3, #12]
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	657b      	str	r3, [r7, #84]	; 0x54
 800b714:	e016      	b.n	800b744 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fc2b 	bl	8009f76 <get_fat>
 800b720:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b724:	2b01      	cmp	r3, #1
 800b726:	d802      	bhi.n	800b72e <f_open+0x2e6>
 800b728:	2302      	movs	r3, #2
 800b72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b734:	d102      	bne.n	800b73c <f_open+0x2f4>
 800b736:	2301      	movs	r3, #1
 800b738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b73c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	657b      	str	r3, [r7, #84]	; 0x54
 800b744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d103      	bne.n	800b754 <f_open+0x30c>
 800b74c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b750:	429a      	cmp	r2, r3
 800b752:	d8e0      	bhi.n	800b716 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b758:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b75a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d131      	bne.n	800b7c6 <f_open+0x37e>
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	899b      	ldrh	r3, [r3, #12]
 800b766:	461a      	mov	r2, r3
 800b768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b76a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b76e:	fb01 f202 	mul.w	r2, r1, r2
 800b772:	1a9b      	subs	r3, r3, r2
 800b774:	2b00      	cmp	r3, #0
 800b776:	d026      	beq.n	800b7c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fe fbdb 	bl	8009f38 <clust2sect>
 800b782:	6478      	str	r0, [r7, #68]	; 0x44
 800b784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b786:	2b00      	cmp	r3, #0
 800b788:	d103      	bne.n	800b792 <f_open+0x34a>
						res = FR_INT_ERR;
 800b78a:	2302      	movs	r3, #2
 800b78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b790:	e019      	b.n	800b7c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	899b      	ldrh	r3, [r3, #12]
 800b796:	461a      	mov	r2, r3
 800b798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b79a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a0:	441a      	add	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	7858      	ldrb	r0, [r3, #1]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6a1a      	ldr	r2, [r3, #32]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f7fd ffe1 	bl	800977c <disk_read>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <f_open+0x37e>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <f_open+0x38c>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe f941 	bl	8009a64 <unlock_fs>
 800b7e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3760      	adds	r7, #96	; 0x60
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b08c      	sub	sp, #48	; 0x30
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f107 0210 	add.w	r2, r7, #16
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff fd6e 	bl	800b2f0 <validate>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d107      	bne.n	800b832 <f_write+0x44>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	7d5b      	ldrb	r3, [r3, #21]
 800b826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b82a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <f_write+0x58>
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f912 	bl	8009a64 <unlock_fs>
 800b840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b844:	e192      	b.n	800bb6c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	7d1b      	ldrb	r3, [r3, #20]
 800b84a:	f003 0302 	and.w	r3, r3, #2
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <f_write+0x72>
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2107      	movs	r1, #7
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe f904 	bl	8009a64 <unlock_fs>
 800b85c:	2307      	movs	r3, #7
 800b85e:	e185      	b.n	800bb6c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	699a      	ldr	r2, [r3, #24]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	441a      	add	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	f080 816a 	bcs.w	800bb46 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	43db      	mvns	r3, r3
 800b878:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b87a:	e164      	b.n	800bb46 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	8992      	ldrh	r2, [r2, #12]
 800b884:	fbb3 f1f2 	udiv	r1, r3, r2
 800b888:	fb01 f202 	mul.w	r2, r1, r2
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f040 810f 	bne.w	800bab2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	8992      	ldrh	r2, [r2, #12]
 800b89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	8952      	ldrh	r2, [r2, #10]
 800b8a4:	3a01      	subs	r2, #1
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d14d      	bne.n	800b94c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10c      	bne.n	800b8d2 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d11a      	bne.n	800b8fa <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fda9 	bl	800a420 <create_chain>
 800b8ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8d0:	e013      	b.n	800b8fa <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7fe fe35 	bl	800a550 <clmt_clust>
 800b8e6:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8e8:	e007      	b.n	800b8fa <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	f7fe fd94 	bl	800a420 <create_chain>
 800b8f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8127 	beq.w	800bb50 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	2b01      	cmp	r3, #1
 800b906:	d109      	bne.n	800b91c <f_write+0x12e>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2202      	movs	r2, #2
 800b90c:	755a      	strb	r2, [r3, #21]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2102      	movs	r1, #2
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe f8a6 	bl	8009a64 <unlock_fs>
 800b918:	2302      	movs	r3, #2
 800b91a:	e127      	b.n	800bb6c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d109      	bne.n	800b938 <f_write+0x14a>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	755a      	strb	r2, [r3, #21]
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2101      	movs	r1, #1
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe f898 	bl	8009a64 <unlock_fs>
 800b934:	2301      	movs	r3, #1
 800b936:	e119      	b.n	800bb6c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <f_write+0x15e>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b94a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	7d1b      	ldrb	r3, [r3, #20]
 800b950:	b25b      	sxtb	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	da1d      	bge.n	800b992 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	7858      	ldrb	r0, [r3, #1]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a1a      	ldr	r2, [r3, #32]
 800b964:	2301      	movs	r3, #1
 800b966:	f7fd ff29 	bl	80097bc <disk_write>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <f_write+0x196>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	755a      	strb	r2, [r3, #21]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2101      	movs	r1, #1
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe f872 	bl	8009a64 <unlock_fs>
 800b980:	2301      	movs	r3, #1
 800b982:	e0f3      	b.n	800bb6c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	7d1b      	ldrb	r3, [r3, #20]
 800b988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7fe facc 	bl	8009f38 <clust2sect>
 800b9a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d109      	bne.n	800b9bc <f_write+0x1ce>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	755a      	strb	r2, [r3, #21]
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe f856 	bl	8009a64 <unlock_fs>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e0d7      	b.n	800bb6c <f_write+0x37e>
			sect += csect;
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	899b      	ldrh	r3, [r3, #12]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d048      	beq.n	800ba6a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	4413      	add	r3, r2
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	8952      	ldrh	r2, [r2, #10]
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d905      	bls.n	800b9f2 <f_write+0x204>
					cc = fs->csize - csect;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	895b      	ldrh	r3, [r3, #10]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	7858      	ldrb	r0, [r3, #1]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	69f9      	ldr	r1, [r7, #28]
 800b9fc:	f7fd fede 	bl	80097bc <disk_write>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d009      	beq.n	800ba1a <f_write+0x22c>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	755a      	strb	r2, [r3, #21]
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe f827 	bl	8009a64 <unlock_fs>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e0a8      	b.n	800bb6c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1a      	ldr	r2, [r3, #32]
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	6a3a      	ldr	r2, [r7, #32]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d918      	bls.n	800ba5a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1a      	ldr	r2, [r3, #32]
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	8992      	ldrh	r2, [r2, #12]
 800ba3a:	fb02 f303 	mul.w	r3, r2, r3
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	18d1      	adds	r1, r2, r3
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	899b      	ldrh	r3, [r3, #12]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f7fd ff78 	bl	800993c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	7d1b      	ldrb	r3, [r3, #20]
 800ba50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	899b      	ldrh	r3, [r3, #12]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ba68:	e050      	b.n	800bb0c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d01b      	beq.n	800baac <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d215      	bcs.n	800baac <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	7858      	ldrb	r0, [r3, #1]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	f7fd fe75 	bl	800977c <disk_read>
 800ba92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d009      	beq.n	800baac <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	755a      	strb	r2, [r3, #21]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2101      	movs	r1, #1
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd ffde 	bl	8009a64 <unlock_fs>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e05f      	b.n	800bb6c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	899b      	ldrh	r3, [r3, #12]
 800bab6:	4618      	mov	r0, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	8992      	ldrh	r2, [r2, #12]
 800bac0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac4:	fb01 f202 	mul.w	r2, r1, r2
 800bac8:	1a9b      	subs	r3, r3, r2
 800baca:	1ac3      	subs	r3, r0, r3
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d901      	bls.n	800bada <f_write+0x2ec>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	8992      	ldrh	r2, [r2, #12]
 800bae8:	fbb3 f0f2 	udiv	r0, r3, r2
 800baec:	fb00 f202 	mul.w	r2, r0, r2
 800baf0:	1a9b      	subs	r3, r3, r2
 800baf2:	440b      	add	r3, r1
 800baf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf6:	69f9      	ldr	r1, [r7, #28]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fd ff1f 	bl	800993c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	7d1b      	ldrb	r3, [r3, #20]
 800bb02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb0c:	69fa      	ldr	r2, [r7, #28]
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	4413      	add	r3, r2
 800bb12:	61fb      	str	r3, [r7, #28]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	699a      	ldr	r2, [r3, #24]
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	441a      	add	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	619a      	str	r2, [r3, #24]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	68da      	ldr	r2, [r3, #12]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	bf38      	it	cc
 800bb2c:	461a      	movcc	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	60da      	str	r2, [r3, #12]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	441a      	add	r2, r3
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f ae97 	bne.w	800b87c <f_write+0x8e>
 800bb4e:	e000      	b.n	800bb52 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb50:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	7d1b      	ldrb	r3, [r3, #20]
 800bb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fd ff7d 	bl	8009a64 <unlock_fs>
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3730      	adds	r7, #48	; 0x30
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f107 0208 	add.w	r2, r7, #8
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff fbb3 	bl	800b2f0 <validate>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d16d      	bne.n	800bc70 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7d1b      	ldrb	r3, [r3, #20]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d067      	beq.n	800bc70 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7d1b      	ldrb	r3, [r3, #20]
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da1a      	bge.n	800bbe0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	7858      	ldrb	r0, [r3, #1]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1a      	ldr	r2, [r3, #32]
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f7fd fdff 	bl	80097bc <disk_write>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d006      	beq.n	800bbd2 <f_sync+0x5e>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fd ff4b 	bl	8009a64 <unlock_fs>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e055      	b.n	800bc7e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7d1b      	ldrb	r3, [r3, #20]
 800bbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bbe0:	f7fd fd2a 	bl	8009638 <get_fattime>
 800bbe4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fe f904 	bl	8009dfc <move_window>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d138      	bne.n	800bc70 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	330b      	adds	r3, #11
 800bc08:	781a      	ldrb	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	330b      	adds	r3, #11
 800bc0e:	f042 0220 	orr.w	r2, r2, #32
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6818      	ldr	r0, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68f9      	ldr	r1, [r7, #12]
 800bc22:	f7fe fe92 	bl	800a94a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f103 021c 	add.w	r2, r3, #28
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fd fe56 	bl	80098e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3316      	adds	r3, #22
 800bc3c:	6939      	ldr	r1, [r7, #16]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fd fe50 	bl	80098e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3312      	adds	r3, #18
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fd fe2f 	bl	80098ae <st_word>
					fs->wflag = 1;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2201      	movs	r2, #1
 800bc54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe f8fd 	bl	8009e58 <sync_fs>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	7d1b      	ldrb	r3, [r3, #20]
 800bc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	7dfa      	ldrb	r2, [r7, #23]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fd fef4 	bl	8009a64 <unlock_fs>
 800bc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7ff ff70 	bl	800bb74 <f_sync>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d11d      	bne.n	800bcda <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f107 0208 	add.w	r2, r7, #8
 800bca4:	4611      	mov	r1, r2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff fb22 	bl	800b2f0 <validate>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d111      	bne.n	800bcda <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fd fffa 	bl	8009cb4 <dec_lock>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d102      	bne.n	800bcd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fd fec5 	bl	8009a64 <unlock_fs>
#endif
		}
	}
	return res;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b090      	sub	sp, #64	; 0x40
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f107 0208 	add.w	r2, r7, #8
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fafa 	bl	800b2f0 <validate>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bd02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d103      	bne.n	800bd12 <f_lseek+0x2e>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7d5b      	ldrb	r3, [r3, #21]
 800bd0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bd12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <f_lseek+0x4a>
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bd20:	4611      	mov	r1, r2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fd fe9e 	bl	8009a64 <unlock_fs>
 800bd28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd2c:	e244      	b.n	800c1b8 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 80f2 	beq.w	800bf1c <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d164      	bne.n	800be0a <f_lseek+0x126>
			tbl = fp->cltbl;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	627a      	str	r2, [r7, #36]	; 0x24
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	2302      	movs	r3, #2
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d044      	beq.n	800bdea <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	2300      	movs	r3, #0
 800bd66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	3301      	adds	r3, #1
 800bd76:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe f8fa 	bl	8009f76 <get_fat>
 800bd82:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d809      	bhi.n	800bd9e <f_lseek+0xba>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	755a      	strb	r2, [r3, #21]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2102      	movs	r1, #2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fd fe65 	bl	8009a64 <unlock_fs>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e20c      	b.n	800c1b8 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda4:	d109      	bne.n	800bdba <f_lseek+0xd6>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	755a      	strb	r2, [r3, #21]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2101      	movs	r1, #1
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fd fe57 	bl	8009a64 <unlock_fs>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e1fe      	b.n	800c1b8 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d0d4      	beq.n	800bd6e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bdc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d809      	bhi.n	800bde0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	627a      	str	r2, [r7, #36]	; 0x24
 800bdd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	627a      	str	r2, [r7, #36]	; 0x24
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d3ba      	bcc.n	800bd60 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdf0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bdf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d803      	bhi.n	800be02 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	e1d1      	b.n	800c1a6 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800be02:	2311      	movs	r3, #17
 800be04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800be08:	e1cd      	b.n	800c1a6 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d902      	bls.n	800be1a <f_lseek+0x136>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 81bf 	beq.w	800c1a6 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7fe fb8e 	bl	800a550 <clmt_clust>
 800be34:	4602      	mov	r2, r0
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	69db      	ldr	r3, [r3, #28]
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7fe f878 	bl	8009f38 <clust2sect>
 800be48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <f_lseek+0x180>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	755a      	strb	r2, [r3, #21]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2102      	movs	r1, #2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd fe02 	bl	8009a64 <unlock_fs>
 800be60:	2302      	movs	r3, #2
 800be62:	e1a9      	b.n	800c1b8 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	3b01      	subs	r3, #1
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	8992      	ldrh	r2, [r2, #12]
 800be6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	8952      	ldrh	r2, [r2, #10]
 800be74:	3a01      	subs	r2, #1
 800be76:	4013      	ands	r3, r2
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	4413      	add	r3, r2
 800be7c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	8992      	ldrh	r2, [r2, #12]
 800be86:	fbb3 f1f2 	udiv	r1, r3, r2
 800be8a:	fb01 f202 	mul.w	r2, r1, r2
 800be8e:	1a9b      	subs	r3, r3, r2
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 8188 	beq.w	800c1a6 <f_lseek+0x4c2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	f000 8182 	beq.w	800c1a6 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	7d1b      	ldrb	r3, [r3, #20]
 800bea6:	b25b      	sxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	da1d      	bge.n	800bee8 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	7858      	ldrb	r0, [r3, #1]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1a      	ldr	r2, [r3, #32]
 800beba:	2301      	movs	r3, #1
 800bebc:	f7fd fc7e 	bl	80097bc <disk_write>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <f_lseek+0x1f6>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	755a      	strb	r2, [r3, #21]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2101      	movs	r1, #1
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fd fdc7 	bl	8009a64 <unlock_fs>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e16e      	b.n	800c1b8 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	7d1b      	ldrb	r3, [r3, #20]
 800bede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	7858      	ldrb	r0, [r3, #1]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bef2:	2301      	movs	r3, #1
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	f7fd fc41 	bl	800977c <disk_read>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d009      	beq.n	800bf14 <f_lseek+0x230>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	755a      	strb	r2, [r3, #21]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2101      	movs	r1, #1
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fd fdaa 	bl	8009a64 <unlock_fs>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e151      	b.n	800c1b8 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	621a      	str	r2, [r3, #32]
 800bf1a:	e144      	b.n	800c1a6 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d908      	bls.n	800bf38 <f_lseek+0x254>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7d1b      	ldrb	r3, [r3, #20]
 800bf2a:	f003 0302 	and.w	r3, r3, #2
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf46:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 80ce 	beq.w	800c0ec <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	895b      	ldrh	r3, [r3, #10]
 800bf54:	461a      	mov	r2, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	899b      	ldrh	r3, [r3, #12]
 800bf5a:	fb02 f303 	mul.w	r3, r2, r3
 800bf5e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d01b      	beq.n	800bf9e <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	1e5a      	subs	r2, r3, #1
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf70:	6a3b      	ldr	r3, [r7, #32]
 800bf72:	1e59      	subs	r1, r3, #1
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d30f      	bcc.n	800bf9e <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	1e5a      	subs	r2, r3, #1
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	425b      	negs	r3, r3
 800bf86:	401a      	ands	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	69db      	ldr	r3, [r3, #28]
 800bf9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf9c:	e02c      	b.n	800bff8 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d123      	bne.n	800bff2 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2100      	movs	r1, #0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fa36 	bl	800a420 <create_chain>
 800bfb4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d109      	bne.n	800bfd0 <f_lseek+0x2ec>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	755a      	strb	r2, [r3, #21]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2102      	movs	r1, #2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fd4c 	bl	8009a64 <unlock_fs>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e0f3      	b.n	800c1b8 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd6:	d109      	bne.n	800bfec <f_lseek+0x308>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	755a      	strb	r2, [r3, #21]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd fd3e 	bl	8009a64 <unlock_fs>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e0e5      	b.n	800c1b8 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d076      	beq.n	800c0ec <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800bffe:	e044      	b.n	800c08a <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	603b      	str	r3, [r7, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	441a      	add	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7d1b      	ldrb	r3, [r3, #20]
 800c018:	f003 0302 	and.w	r3, r3, #2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe f9fb 	bl	800a420 <create_chain>
 800c02a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d108      	bne.n	800c044 <f_lseek+0x360>
							ofs = 0; break;
 800c032:	2300      	movs	r3, #0
 800c034:	603b      	str	r3, [r7, #0]
 800c036:	e02c      	b.n	800c092 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fd ff9a 	bl	8009f76 <get_fat>
 800c042:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04a:	d109      	bne.n	800c060 <f_lseek+0x37c>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	755a      	strb	r2, [r3, #21]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2101      	movs	r1, #1
 800c056:	4618      	mov	r0, r3
 800c058:	f7fd fd04 	bl	8009a64 <unlock_fs>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e0ab      	b.n	800c1b8 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	2b01      	cmp	r3, #1
 800c064:	d904      	bls.n	800c070 <f_lseek+0x38c>
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d309      	bcc.n	800c084 <f_lseek+0x3a0>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	755a      	strb	r2, [r3, #21]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2102      	movs	r1, #2
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fd fcf2 	bl	8009a64 <unlock_fs>
 800c080:	2302      	movs	r3, #2
 800c082:	e099      	b.n	800c1b8 <f_lseek+0x4d4>
					fp->clust = clst;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c088:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d8b6      	bhi.n	800c000 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	441a      	add	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	899b      	ldrh	r3, [r3, #12]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0aa:	fb01 f202 	mul.w	r2, r1, r2
 800c0ae:	1a9b      	subs	r3, r3, r2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01b      	beq.n	800c0ec <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fd ff3d 	bl	8009f38 <clust2sect>
 800c0be:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d109      	bne.n	800c0da <f_lseek+0x3f6>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	755a      	strb	r2, [r3, #21]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fd fcc7 	bl	8009a64 <unlock_fs>
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e06e      	b.n	800c1b8 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0e8:	4413      	add	r3, r2
 800c0ea:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	699a      	ldr	r2, [r3, #24]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d90a      	bls.n	800c10e <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	699a      	ldr	r2, [r3, #24]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7d1b      	ldrb	r3, [r3, #20]
 800c104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	8992      	ldrh	r2, [r2, #12]
 800c116:	fbb3 f1f2 	udiv	r1, r3, r2
 800c11a:	fb01 f202 	mul.w	r2, r1, r2
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d040      	beq.n	800c1a6 <f_lseek+0x4c2>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d03b      	beq.n	800c1a6 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7d1b      	ldrb	r3, [r3, #20]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	da1d      	bge.n	800c174 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	7858      	ldrb	r0, [r3, #1]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1a      	ldr	r2, [r3, #32]
 800c146:	2301      	movs	r3, #1
 800c148:	f7fd fb38 	bl	80097bc <disk_write>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <f_lseek+0x482>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	755a      	strb	r2, [r3, #21]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2101      	movs	r1, #1
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fc81 	bl	8009a64 <unlock_fs>
 800c162:	2301      	movs	r3, #1
 800c164:	e028      	b.n	800c1b8 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7d1b      	ldrb	r3, [r3, #20]
 800c16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	7858      	ldrb	r0, [r3, #1]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c17e:	2301      	movs	r3, #1
 800c180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c182:	f7fd fafb 	bl	800977c <disk_read>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d009      	beq.n	800c1a0 <f_lseek+0x4bc>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	755a      	strb	r2, [r3, #21]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2101      	movs	r1, #1
 800c196:	4618      	mov	r0, r3
 800c198:	f7fd fc64 	bl	8009a64 <unlock_fs>
 800c19c:	2301      	movs	r3, #1
 800c19e:	e00b      	b.n	800c1b8 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fd fc58 	bl	8009a64 <unlock_fs>
 800c1b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3740      	adds	r7, #64	; 0x40
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c1cc:	78fb      	ldrb	r3, [r7, #3]
 800c1ce:	2b0a      	cmp	r3, #10
 800c1d0:	d103      	bne.n	800c1da <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c1d2:	210d      	movs	r1, #13
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff fff3 	bl	800c1c0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db25      	blt.n	800c232 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	60fa      	str	r2, [r7, #12]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	78fa      	ldrb	r2, [r7, #3]
 800c1f2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b3c      	cmp	r3, #60	; 0x3c
 800c1f8:	dd12      	ble.n	800c220 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f103 010c 	add.w	r1, r3, #12
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	f107 0308 	add.w	r3, r7, #8
 800c20a:	f7ff faf0 	bl	800b7ee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	429a      	cmp	r2, r3
 800c214:	d101      	bne.n	800c21a <putc_bfd+0x5a>
 800c216:	2300      	movs	r3, #0
 800c218:	e001      	b.n	800c21e <putc_bfd+0x5e>
 800c21a:	f04f 33ff 	mov.w	r3, #4294967295
 800c21e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	609a      	str	r2, [r3, #8]
 800c230:	e000      	b.n	800c234 <putc_bfd+0x74>
	if (i < 0) return;
 800c232:	bf00      	nop
}
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	db16      	blt.n	800c278 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f103 010c 	add.w	r1, r3, #12
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	461a      	mov	r2, r3
 800c25a:	f107 030c 	add.w	r3, r7, #12
 800c25e:	f7ff fac6 	bl	800b7ee <f_write>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d107      	bne.n	800c278 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4293      	cmp	r3, r2
 800c270:	d102      	bne.n	800c278 <putc_flush+0x3e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	e001      	b.n	800c27c <putc_flush+0x42>
	return EOF;
 800c278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	605a      	str	r2, [r3, #4]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	609a      	str	r2, [r3, #8]
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b096      	sub	sp, #88	; 0x58
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff ffe0 	bl	800c284 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c2c4:	e009      	b.n	800c2da <f_puts+0x2c>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff ff73 	bl	800c1c0 <putc_bfd>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1f1      	bne.n	800c2c6 <f_puts+0x18>
	return putc_flush(&pb);
 800c2e2:	f107 030c 	add.w	r3, r7, #12
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff ffa7 	bl	800c23a <putc_flush>
 800c2ec:	4603      	mov	r3, r0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3758      	adds	r7, #88	; 0x58
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c306:	2301      	movs	r3, #1
 800c308:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c30e:	4b1f      	ldr	r3, [pc, #124]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c310:	7a5b      	ldrb	r3, [r3, #9]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d131      	bne.n	800c37c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c318:	4b1c      	ldr	r3, [pc, #112]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c31a:	7a5b      	ldrb	r3, [r3, #9]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c322:	2100      	movs	r1, #0
 800c324:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c326:	4b19      	ldr	r3, [pc, #100]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c328:	7a5b      	ldrb	r3, [r3, #9]
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	4a17      	ldr	r2, [pc, #92]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c336:	4b15      	ldr	r3, [pc, #84]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c338:	7a5b      	ldrb	r3, [r3, #9]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	461a      	mov	r2, r3
 800c33e:	4b13      	ldr	r3, [pc, #76]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c340:	4413      	add	r3, r2
 800c342:	79fa      	ldrb	r2, [r7, #7]
 800c344:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c348:	7a5b      	ldrb	r3, [r3, #9]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	1c5a      	adds	r2, r3, #1
 800c34e:	b2d1      	uxtb	r1, r2
 800c350:	4a0e      	ldr	r2, [pc, #56]	; (800c38c <FATFS_LinkDriverEx+0x94>)
 800c352:	7251      	strb	r1, [r2, #9]
 800c354:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c356:	7dbb      	ldrb	r3, [r7, #22]
 800c358:	3330      	adds	r3, #48	; 0x30
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	3301      	adds	r3, #1
 800c364:	223a      	movs	r2, #58	; 0x3a
 800c366:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	3302      	adds	r3, #2
 800c36c:	222f      	movs	r2, #47	; 0x2f
 800c36e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	3303      	adds	r3, #3
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	200034a8 	.word	0x200034a8

0800c390 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c39a:	2200      	movs	r2, #0
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff ffaa 	bl	800c2f8 <FATFS_LinkDriverEx>
 800c3a4:	4603      	mov	r3, r0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b086      	sub	sp, #24
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	6039      	str	r1, [r7, #0]
 800c3b8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c3c2:	f107 030c 	add.w	r3, r7, #12
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f8cd 	bl	800c568 <osSemaphoreCreate>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	617b      	str	r3, [r7, #20]

    return ret;
 800c3e4:	697b      	ldr	r3, [r7, #20]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f96c 	bl	800c6d4 <osSemaphoreDelete>
#endif
    return 1;
 800c3fc:	2301      	movs	r3, #1
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f8d8 	bl	800c5cc <osSemaphoreWait>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c422:	2301      	movs	r3, #1
 800c424:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c426:	68fb      	ldr	r3, [r7, #12]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f915 	bl	800c668 <osSemaphoreRelease>
#endif
}
 800c43e:	bf00      	nop
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	4603      	mov	r3, r0
 800c44e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c450:	2300      	movs	r3, #0
 800c452:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c458:	2b84      	cmp	r3, #132	; 0x84
 800c45a:	d005      	beq.n	800c468 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c45c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	3303      	adds	r3, #3
 800c466:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47c:	f3ef 8305 	mrs	r3, IPSR
 800c480:	607b      	str	r3, [r7, #4]
  return(result);
 800c482:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c49e:	f001 fa3f 	bl	800d920 <vTaskStartScheduler>
  
  return osOK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4aa:	b089      	sub	sp, #36	; 0x24
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d020      	beq.n	800c4fc <osThreadCreate+0x54>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d01c      	beq.n	800c4fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685c      	ldr	r4, [r3, #4]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681d      	ldr	r5, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691e      	ldr	r6, [r3, #16]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff ffb6 	bl	800c446 <makeFreeRtosPriority>
 800c4da:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4e4:	9202      	str	r2, [sp, #8]
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	9100      	str	r1, [sp, #0]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 ffa7 	bl	800d444 <xTaskCreateStatic>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	e01c      	b.n	800c536 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685c      	ldr	r4, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c508:	b29e      	uxth	r6, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c510:	4618      	mov	r0, r3
 800c512:	f7ff ff98 	bl	800c446 <makeFreeRtosPriority>
 800c516:	4602      	mov	r2, r0
 800c518:	f107 030c 	add.w	r3, r7, #12
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	9200      	str	r2, [sp, #0]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	4632      	mov	r2, r6
 800c524:	4629      	mov	r1, r5
 800c526:	4620      	mov	r0, r4
 800c528:	f000 ffe9 	bl	800d4fe <xTaskCreate>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d001      	beq.n	800c536 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c532:	2300      	movs	r3, #0
 800c534:	e000      	b.n	800c538 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c536:	68fb      	ldr	r3, [r7, #12]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c540 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <osDelay+0x16>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	e000      	b.n	800c558 <osDelay+0x18>
 800c556:	2301      	movs	r3, #1
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 f9ad 	bl	800d8b8 <vTaskDelay>
  
  return osOK;
 800c55e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00f      	beq.n	800c59a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10a      	bne.n	800c596 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	2203      	movs	r2, #3
 800c586:	9200      	str	r2, [sp, #0]
 800c588:	2200      	movs	r2, #0
 800c58a:	2100      	movs	r1, #0
 800c58c:	2001      	movs	r0, #1
 800c58e:	f000 f9f9 	bl	800c984 <xQueueGenericCreateStatic>
 800c592:	4603      	mov	r3, r0
 800c594:	e016      	b.n	800c5c4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	e014      	b.n	800c5c4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d110      	bne.n	800c5c2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	f000 fa65 	bl	800ca74 <xQueueGenericCreate>
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d005      	beq.n	800c5be <osSemaphoreCreate+0x56>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 fab5 	bl	800cb28 <xQueueGenericSend>
      return sema;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	e000      	b.n	800c5c4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c5c2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c5e0:	2380      	movs	r3, #128	; 0x80
 800c5e2:	e03a      	b.n	800c65a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d103      	bne.n	800c5f8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	e009      	b.n	800c60c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d006      	beq.n	800c60c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <osSemaphoreWait+0x40>
      ticks = 1;
 800c608:	2301      	movs	r3, #1
 800c60a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c60c:	f7ff ff33 	bl	800c476 <inHandlerMode>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d017      	beq.n	800c646 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c616:	f107 0308 	add.w	r3, r7, #8
 800c61a:	461a      	mov	r2, r3
 800c61c:	2100      	movs	r1, #0
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fd1a 	bl	800d058 <xQueueReceiveFromISR>
 800c624:	4603      	mov	r3, r0
 800c626:	2b01      	cmp	r3, #1
 800c628:	d001      	beq.n	800c62e <osSemaphoreWait+0x62>
      return osErrorOS;
 800c62a:	23ff      	movs	r3, #255	; 0xff
 800c62c:	e015      	b.n	800c65a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d011      	beq.n	800c658 <osSemaphoreWait+0x8c>
 800c634:	4b0b      	ldr	r3, [pc, #44]	; (800c664 <osSemaphoreWait+0x98>)
 800c636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	e008      	b.n	800c658 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c646:	68f9      	ldr	r1, [r7, #12]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fbf9 	bl	800ce40 <xQueueSemaphoreTake>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b01      	cmp	r3, #1
 800c652:	d001      	beq.n	800c658 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c654:	23ff      	movs	r3, #255	; 0xff
 800c656:	e000      	b.n	800c65a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c674:	2300      	movs	r3, #0
 800c676:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c678:	f7ff fefd 	bl	800c476 <inHandlerMode>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d016      	beq.n	800c6b0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c682:	f107 0308 	add.w	r3, r7, #8
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fb4b 	bl	800cd24 <xQueueGiveFromISR>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b01      	cmp	r3, #1
 800c692:	d001      	beq.n	800c698 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c694:	23ff      	movs	r3, #255	; 0xff
 800c696:	e017      	b.n	800c6c8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d013      	beq.n	800c6c6 <osSemaphoreRelease+0x5e>
 800c69e:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <osSemaphoreRelease+0x68>)
 800c6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	e00a      	b.n	800c6c6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fa36 	bl	800cb28 <xQueueGenericSend>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d001      	beq.n	800c6c6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c6c2:	23ff      	movs	r3, #255	; 0xff
 800c6c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c6dc:	f7ff fecb 	bl	800c476 <inHandlerMode>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c6e6:	2382      	movs	r3, #130	; 0x82
 800c6e8:	e003      	b.n	800c6f2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fd34 	bl	800d158 <vQueueDelete>

  return osOK; 
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c6fa:	b590      	push	{r4, r7, lr}
 800c6fc:	b085      	sub	sp, #20
 800c6fe:	af02      	add	r7, sp, #8
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d011      	beq.n	800c730 <osMessageCreate+0x36>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00d      	beq.n	800c730 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6859      	ldr	r1, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2400      	movs	r4, #0
 800c726:	9400      	str	r4, [sp, #0]
 800c728:	f000 f92c 	bl	800c984 <xQueueGenericCreateStatic>
 800c72c:	4603      	mov	r3, r0
 800c72e:	e008      	b.n	800c742 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6818      	ldr	r0, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	4619      	mov	r1, r3
 800c73c:	f000 f99a 	bl	800ca74 <xQueueGenericCreate>
 800c740:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}

0800c74a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c74a:	b480      	push	{r7}
 800c74c:	b083      	sub	sp, #12
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f103 0208 	add.w	r2, r3, #8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f04f 32ff 	mov.w	r2, #4294967295
 800c762:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f103 0208 	add.w	r2, r3, #8
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f103 0208 	add.w	r2, r3, #8
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c77e:	bf00      	nop
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c78a:	b480      	push	{r7}
 800c78c:	b083      	sub	sp, #12
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	601a      	str	r2, [r3, #0]
}
 800c7e0:	bf00      	nop
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d103      	bne.n	800c80c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e00c      	b.n	800c826 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3308      	adds	r3, #8
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e002      	b.n	800c81a <vListInsert+0x2e>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	429a      	cmp	r2, r3
 800c824:	d2f6      	bcs.n	800c814 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	601a      	str	r2, [r3, #0]
}
 800c852:	bf00      	nop
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c85e:	b480      	push	{r7}
 800c860:	b085      	sub	sp, #20
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6892      	ldr	r2, [r2, #8]
 800c874:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6852      	ldr	r2, [r2, #4]
 800c87e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	429a      	cmp	r2, r3
 800c888:	d103      	bne.n	800c892 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689a      	ldr	r2, [r3, #8]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	1e5a      	subs	r2, r3, #1
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10a      	bne.n	800c8de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8de:	f001 ff81 	bl	800e7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8ee:	fb01 f303 	mul.w	r3, r1, r3
 800c8f2:	441a      	add	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90e:	3b01      	subs	r3, #1
 800c910:	68f9      	ldr	r1, [r7, #12]
 800c912:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c914:	fb01 f303 	mul.w	r3, r1, r3
 800c918:	441a      	add	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	22ff      	movs	r2, #255	; 0xff
 800c922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	22ff      	movs	r2, #255	; 0xff
 800c92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d114      	bne.n	800c95e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01a      	beq.n	800c972 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3310      	adds	r3, #16
 800c940:	4618      	mov	r0, r3
 800c942:	f001 fa3f 	bl	800ddc4 <xTaskRemoveFromEventList>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d012      	beq.n	800c972 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c94c:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <xQueueGenericReset+0xcc>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	e009      	b.n	800c972 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3310      	adds	r3, #16
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fef1 	bl	800c74a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3324      	adds	r3, #36	; 0x24
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff feec 	bl	800c74a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c972:	f001 ff67 	bl	800e844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c976:	2301      	movs	r3, #1
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08e      	sub	sp, #56	; 0x38
 800c988:	af02      	add	r7, sp, #8
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <xQueueGenericCreateStatic+0x52>
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <xQueueGenericCreateStatic+0x56>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e000      	b.n	800c9dc <xQueueGenericCreateStatic+0x58>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	623b      	str	r3, [r7, #32]
}
 800c9f2:	bf00      	nop
 800c9f4:	e7fe      	b.n	800c9f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d102      	bne.n	800ca02 <xQueueGenericCreateStatic+0x7e>
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <xQueueGenericCreateStatic+0x82>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <xQueueGenericCreateStatic+0x84>
 800ca06:	2300      	movs	r3, #0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	61fb      	str	r3, [r7, #28]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca22:	2348      	movs	r3, #72	; 0x48
 800ca24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2b48      	cmp	r3, #72	; 0x48
 800ca2a:	d00a      	beq.n	800ca42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	61bb      	str	r3, [r7, #24]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00d      	beq.n	800ca6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 f83f 	bl	800cae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3730      	adds	r7, #48	; 0x30
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08a      	sub	sp, #40	; 0x28
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10a      	bne.n	800ca9e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	613b      	str	r3, [r7, #16]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	fb02 f303 	mul.w	r3, r2, r3
 800caa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	3348      	adds	r3, #72	; 0x48
 800caac:	4618      	mov	r0, r3
 800caae:	f001 ffbb 	bl	800ea28 <pvPortMalloc>
 800cab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d011      	beq.n	800cade <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	3348      	adds	r3, #72	; 0x48
 800cac2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cacc:	79fa      	ldrb	r2, [r7, #7]
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4613      	mov	r3, r2
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f000 f805 	bl	800cae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cade:	69bb      	ldr	r3, [r7, #24]
	}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3720      	adds	r7, #32
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d103      	bne.n	800cb04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	69ba      	ldr	r2, [r7, #24]
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	e002      	b.n	800cb0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb16:	2101      	movs	r1, #1
 800cb18:	69b8      	ldr	r0, [r7, #24]
 800cb1a:	f7ff fecb 	bl	800c8b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08e      	sub	sp, #56	; 0x38
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb36:	2300      	movs	r3, #0
 800cb38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10a      	bne.n	800cb5a <xQueueGenericSend+0x32>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d103      	bne.n	800cb68 <xQueueGenericSend+0x40>
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <xQueueGenericSend+0x44>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e000      	b.n	800cb6e <xQueueGenericSend+0x46>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <xQueueGenericSend+0x60>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d103      	bne.n	800cb96 <xQueueGenericSend+0x6e>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d101      	bne.n	800cb9a <xQueueGenericSend+0x72>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e000      	b.n	800cb9c <xQueueGenericSend+0x74>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	623b      	str	r3, [r7, #32]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbb6:	f001 fac5 	bl	800e144 <xTaskGetSchedulerState>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <xQueueGenericSend+0x9e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d101      	bne.n	800cbca <xQueueGenericSend+0xa2>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e000      	b.n	800cbcc <xQueueGenericSend+0xa4>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	61fb      	str	r3, [r7, #28]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbe6:	f001 fdfd 	bl	800e7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d302      	bcc.n	800cbfc <xQueueGenericSend+0xd4>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d129      	bne.n	800cc50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc02:	f000 fae4 	bl	800d1ce <prvCopyDataToQueue>
 800cc06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d010      	beq.n	800cc32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	3324      	adds	r3, #36	; 0x24
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 f8d5 	bl	800ddc4 <xTaskRemoveFromEventList>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc20:	4b3f      	ldr	r3, [pc, #252]	; (800cd20 <xQueueGenericSend+0x1f8>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	e00a      	b.n	800cc48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc38:	4b39      	ldr	r3, [pc, #228]	; (800cd20 <xQueueGenericSend+0x1f8>)
 800cc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc48:	f001 fdfc 	bl	800e844 <vPortExitCritical>
				return pdPASS;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e063      	b.n	800cd18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc56:	f001 fdf5 	bl	800e844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e05c      	b.n	800cd18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc64:	f107 0314 	add.w	r3, r7, #20
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 f90d 	bl	800de88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc72:	f001 fde7 	bl	800e844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc76:	f000 febd 	bl	800d9f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc7a:	f001 fdb3 	bl	800e7e4 <vPortEnterCritical>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d103      	bne.n	800cc94 <xQueueGenericSend+0x16c>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc9a:	b25b      	sxtb	r3, r3
 800cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca0:	d103      	bne.n	800ccaa <xQueueGenericSend+0x182>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccaa:	f001 fdcb 	bl	800e844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccae:	1d3a      	adds	r2, r7, #4
 800ccb0:	f107 0314 	add.w	r3, r7, #20
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f001 f8fc 	bl	800deb4 <xTaskCheckForTimeOut>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d124      	bne.n	800cd0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccc4:	f000 fb7b 	bl	800d3be <prvIsQueueFull>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d018      	beq.n	800cd00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f001 f850 	bl	800dd7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccde:	f000 fb06 	bl	800d2ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cce2:	f000 fe95 	bl	800da10 <xTaskResumeAll>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f47f af7c 	bne.w	800cbe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <xQueueGenericSend+0x1f8>)
 800ccf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	e772      	b.n	800cbe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd02:	f000 faf4 	bl	800d2ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd06:	f000 fe83 	bl	800da10 <xTaskResumeAll>
 800cd0a:	e76c      	b.n	800cbe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0e:	f000 faee 	bl	800d2ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd12:	f000 fe7d 	bl	800da10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3738      	adds	r7, #56	; 0x38
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	e000ed04 	.word	0xe000ed04

0800cd24 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	; 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	623b      	str	r3, [r7, #32]
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00a      	beq.n	800cd6c <xQueueGiveFromISR+0x48>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	61fb      	str	r3, [r7, #28]
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <xQueueGiveFromISR+0x58>
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <xQueueGiveFromISR+0x5c>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e000      	b.n	800cd82 <xQueueGiveFromISR+0x5e>
 800cd80:	2300      	movs	r3, #0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <xQueueGiveFromISR+0x78>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	61bb      	str	r3, [r7, #24]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd9c:	f001 fe04 	bl	800e9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cda0:	f3ef 8211 	mrs	r2, BASEPRI
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	617a      	str	r2, [r7, #20]
 800cdb6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdb8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d22b      	bcs.n	800ce24 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde6:	d112      	bne.n	800ce0e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d016      	beq.n	800ce1e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	3324      	adds	r3, #36	; 0x24
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 ffe5 	bl	800ddc4 <xTaskRemoveFromEventList>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00e      	beq.n	800ce1e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00b      	beq.n	800ce1e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	e007      	b.n	800ce1e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce12:	3301      	adds	r3, #1
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	b25a      	sxtb	r2, r3
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	637b      	str	r3, [r7, #52]	; 0x34
 800ce22:	e001      	b.n	800ce28 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce24:	2300      	movs	r3, #0
 800ce26:	637b      	str	r3, [r7, #52]	; 0x34
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3738      	adds	r7, #56	; 0x38
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08e      	sub	sp, #56	; 0x38
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce52:	2300      	movs	r3, #0
 800ce54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10a      	bne.n	800ce72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	623b      	str	r3, [r7, #32]
}
 800ce6e:	bf00      	nop
 800ce70:	e7fe      	b.n	800ce70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	61fb      	str	r3, [r7, #28]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce90:	f001 f958 	bl	800e144 <xTaskGetSchedulerState>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d102      	bne.n	800cea0 <xQueueSemaphoreTake+0x60>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <xQueueSemaphoreTake+0x64>
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <xQueueSemaphoreTake+0x66>
 800cea4:	2300      	movs	r3, #0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10a      	bne.n	800cec0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	61bb      	str	r3, [r7, #24]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cec0:	f001 fc90 	bl	800e7e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d024      	beq.n	800cf1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	1e5a      	subs	r2, r3, #1
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d104      	bne.n	800ceea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cee0:	f001 fad8 	bl	800e494 <pvTaskIncrementMutexHeldCount>
 800cee4:	4602      	mov	r2, r0
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00f      	beq.n	800cf12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	3310      	adds	r3, #16
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 ff64 	bl	800ddc4 <xTaskRemoveFromEventList>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf02:	4b54      	ldr	r3, [pc, #336]	; (800d054 <xQueueSemaphoreTake+0x214>)
 800cf04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf12:	f001 fc97 	bl	800e844 <vPortExitCritical>
				return pdPASS;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e097      	b.n	800d04a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d111      	bne.n	800cf44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	617b      	str	r3, [r7, #20]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf3c:	f001 fc82 	bl	800e844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e082      	b.n	800d04a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf4a:	f107 030c 	add.w	r3, r7, #12
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 ff9a 	bl	800de88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf58:	f001 fc74 	bl	800e844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf5c:	f000 fd4a 	bl	800d9f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf60:	f001 fc40 	bl	800e7e4 <vPortEnterCritical>
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf6a:	b25b      	sxtb	r3, r3
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf70:	d103      	bne.n	800cf7a <xQueueSemaphoreTake+0x13a>
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf80:	b25b      	sxtb	r3, r3
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf86:	d103      	bne.n	800cf90 <xQueueSemaphoreTake+0x150>
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf90:	f001 fc58 	bl	800e844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf94:	463a      	mov	r2, r7
 800cf96:	f107 030c 	add.w	r3, r7, #12
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 ff89 	bl	800deb4 <xTaskCheckForTimeOut>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d132      	bne.n	800d00e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfaa:	f000 f9f2 	bl	800d392 <prvIsQueueEmpty>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d026      	beq.n	800d002 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d109      	bne.n	800cfd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cfbc:	f001 fc12 	bl	800e7e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f001 f8db 	bl	800e180 <xTaskPriorityInherit>
 800cfca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfcc:	f001 fc3a 	bl	800e844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	3324      	adds	r3, #36	; 0x24
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 fecf 	bl	800dd7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfe0:	f000 f985 	bl	800d2ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfe4:	f000 fd14 	bl	800da10 <xTaskResumeAll>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f47f af68 	bne.w	800cec0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cff0:	4b18      	ldr	r3, [pc, #96]	; (800d054 <xQueueSemaphoreTake+0x214>)
 800cff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	e75e      	b.n	800cec0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d004:	f000 f973 	bl	800d2ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d008:	f000 fd02 	bl	800da10 <xTaskResumeAll>
 800d00c:	e758      	b.n	800cec0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d00e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d010:	f000 f96d 	bl	800d2ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d014:	f000 fcfc 	bl	800da10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d01a:	f000 f9ba 	bl	800d392 <prvIsQueueEmpty>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	f43f af4d 	beq.w	800cec0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00d      	beq.n	800d048 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d02c:	f001 fbda 	bl	800e7e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d032:	f000 f8b4 	bl	800d19e <prvGetDisinheritPriorityAfterTimeout>
 800d036:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d03e:	4618      	mov	r0, r3
 800d040:	f001 f99a 	bl	800e378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d044:	f001 fbfe 	bl	800e844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3738      	adds	r7, #56	; 0x38
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	e000ed04 	.word	0xe000ed04

0800d058 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08e      	sub	sp, #56	; 0x38
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	623b      	str	r3, [r7, #32]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <xQueueReceiveFromISR+0x3a>
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d101      	bne.n	800d096 <xQueueReceiveFromISR+0x3e>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <xQueueReceiveFromISR+0x40>
 800d096:	2300      	movs	r3, #0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	61fb      	str	r3, [r7, #28]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0b2:	f001 fc79 	bl	800e9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d0b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	61ba      	str	r2, [r7, #24]
 800d0cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d0ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d02f      	beq.n	800d13e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0e8:	68b9      	ldr	r1, [r7, #8]
 800d0ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ec:	f000 f8d9 	bl	800d2a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	1e5a      	subs	r2, r3, #1
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d100:	d112      	bne.n	800d128 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d016      	beq.n	800d138 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10c:	3310      	adds	r3, #16
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fe58 	bl	800ddc4 <xTaskRemoveFromEventList>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00e      	beq.n	800d138 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	e007      	b.n	800d138 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d12c:	3301      	adds	r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	b25a      	sxtb	r2, r3
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d138:	2301      	movs	r3, #1
 800d13a:	637b      	str	r3, [r7, #52]	; 0x34
 800d13c:	e001      	b.n	800d142 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d13e:	2300      	movs	r3, #0
 800d140:	637b      	str	r3, [r7, #52]	; 0x34
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f383 8811 	msr	BASEPRI, r3
}
 800d14c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d150:	4618      	mov	r0, r3
 800d152:	3738      	adds	r7, #56	; 0x38
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10a      	bne.n	800d180 <vQueueDelete+0x28>
	__asm volatile
 800d16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	60bb      	str	r3, [r7, #8]
}
 800d17c:	bf00      	nop
 800d17e:	e7fe      	b.n	800d17e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 f935 	bl	800d3f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f001 fd15 	bl	800ebc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d19e:	b480      	push	{r7}
 800d1a0:	b085      	sub	sp, #20
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d006      	beq.n	800d1bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f1c3 0307 	rsb	r3, r3, #7
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	e001      	b.n	800d1c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
	}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10d      	bne.n	800d208 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d14d      	bne.n	800d290 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f001 f837 	bl	800e26c <xTaskPriorityDisinherit>
 800d1fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	609a      	str	r2, [r3, #8]
 800d206:	e043      	b.n	800d290 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d119      	bne.n	800d242 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6858      	ldr	r0, [r3, #4]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	461a      	mov	r2, r3
 800d218:	68b9      	ldr	r1, [r7, #8]
 800d21a:	f001 fe1b 	bl	800ee54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d226:	441a      	add	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	429a      	cmp	r2, r3
 800d236:	d32b      	bcc.n	800d290 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	605a      	str	r2, [r3, #4]
 800d240:	e026      	b.n	800d290 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	68d8      	ldr	r0, [r3, #12]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24a:	461a      	mov	r2, r3
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	f001 fe01 	bl	800ee54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25a:	425b      	negs	r3, r3
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	68da      	ldr	r2, [r3, #12]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d207      	bcs.n	800d27e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	689a      	ldr	r2, [r3, #8]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	425b      	negs	r3, r3
 800d278:	441a      	add	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d105      	bne.n	800d290 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3b01      	subs	r3, #1
 800d28e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d298:	697b      	ldr	r3, [r7, #20]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d018      	beq.n	800d2e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2bc:	441a      	add	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d303      	bcc.n	800d2d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68d9      	ldr	r1, [r3, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2de:	461a      	mov	r2, r3
 800d2e0:	6838      	ldr	r0, [r7, #0]
 800d2e2:	f001 fdb7 	bl	800ee54 <memcpy>
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b084      	sub	sp, #16
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2f6:	f001 fa75 	bl	800e7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d300:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d302:	e011      	b.n	800d328 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d012      	beq.n	800d332 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	3324      	adds	r3, #36	; 0x24
 800d310:	4618      	mov	r0, r3
 800d312:	f000 fd57 	bl	800ddc4 <xTaskRemoveFromEventList>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d31c:	f000 fe2c 	bl	800df78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	3b01      	subs	r3, #1
 800d324:	b2db      	uxtb	r3, r3
 800d326:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dce9      	bgt.n	800d304 <prvUnlockQueue+0x16>
 800d330:	e000      	b.n	800d334 <prvUnlockQueue+0x46>
					break;
 800d332:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	22ff      	movs	r2, #255	; 0xff
 800d338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d33c:	f001 fa82 	bl	800e844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d340:	f001 fa50 	bl	800e7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d34a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d34c:	e011      	b.n	800d372 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d012      	beq.n	800d37c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3310      	adds	r3, #16
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 fd32 	bl	800ddc4 <xTaskRemoveFromEventList>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d366:	f000 fe07 	bl	800df78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	dce9      	bgt.n	800d34e <prvUnlockQueue+0x60>
 800d37a:	e000      	b.n	800d37e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d37c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	22ff      	movs	r2, #255	; 0xff
 800d382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d386:	f001 fa5d 	bl	800e844 <vPortExitCritical>
}
 800d38a:	bf00      	nop
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b084      	sub	sp, #16
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d39a:	f001 fa23 	bl	800e7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	e001      	b.n	800d3b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3b0:	f001 fa48 	bl	800e844 <vPortExitCritical>

	return xReturn;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b084      	sub	sp, #16
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3c6:	f001 fa0d 	bl	800e7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d102      	bne.n	800d3dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	e001      	b.n	800d3e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3e0:	f001 fa30 	bl	800e844 <vPortExitCritical>

	return xReturn;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	60fb      	str	r3, [r7, #12]
 800d3fc:	e016      	b.n	800d42c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d3fe:	4a10      	ldr	r2, [pc, #64]	; (800d440 <vQueueUnregisterQueue+0x50>)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	4413      	add	r3, r2
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d10b      	bne.n	800d426 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d40e:	4a0c      	ldr	r2, [pc, #48]	; (800d440 <vQueueUnregisterQueue+0x50>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2100      	movs	r1, #0
 800d414:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d418:	4a09      	ldr	r2, [pc, #36]	; (800d440 <vQueueUnregisterQueue+0x50>)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	4413      	add	r3, r2
 800d420:	2200      	movs	r2, #0
 800d422:	605a      	str	r2, [r3, #4]
				break;
 800d424:	e006      	b.n	800d434 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3301      	adds	r3, #1
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b07      	cmp	r3, #7
 800d430:	d9e5      	bls.n	800d3fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	200034b4 	.word	0x200034b4

0800d444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08e      	sub	sp, #56	; 0x38
 800d448:	af04      	add	r7, sp, #16
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	623b      	str	r3, [r7, #32]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10a      	bne.n	800d48a <xTaskCreateStatic+0x46>
	__asm volatile
 800d474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	61fb      	str	r3, [r7, #28]
}
 800d486:	bf00      	nop
 800d488:	e7fe      	b.n	800d488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d48a:	23b4      	movs	r3, #180	; 0xb4
 800d48c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2bb4      	cmp	r3, #180	; 0xb4
 800d492:	d00a      	beq.n	800d4aa <xTaskCreateStatic+0x66>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	61bb      	str	r3, [r7, #24]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d01e      	beq.n	800d4f0 <xTaskCreateStatic+0xac>
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d01b      	beq.n	800d4f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9303      	str	r3, [sp, #12]
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	9302      	str	r3, [sp, #8]
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	68b9      	ldr	r1, [r7, #8]
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 f850 	bl	800d588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ea:	f000 f8eb 	bl	800d6c4 <prvAddNewTaskToReadyList>
 800d4ee:	e001      	b.n	800d4f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4f4:	697b      	ldr	r3, [r7, #20]
	}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3728      	adds	r7, #40	; 0x28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b08c      	sub	sp, #48	; 0x30
 800d502:	af04      	add	r7, sp, #16
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	603b      	str	r3, [r7, #0]
 800d50a:	4613      	mov	r3, r2
 800d50c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4618      	mov	r0, r3
 800d514:	f001 fa88 	bl	800ea28 <pvPortMalloc>
 800d518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00e      	beq.n	800d53e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d520:	20b4      	movs	r0, #180	; 0xb4
 800d522:	f001 fa81 	bl	800ea28 <pvPortMalloc>
 800d526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	631a      	str	r2, [r3, #48]	; 0x30
 800d534:	e005      	b.n	800d542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d536:	6978      	ldr	r0, [r7, #20]
 800d538:	f001 fb42 	bl	800ebc0 <vPortFree>
 800d53c:	e001      	b.n	800d542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d017      	beq.n	800d578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d550:	88fa      	ldrh	r2, [r7, #6]
 800d552:	2300      	movs	r3, #0
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f000 f80e 	bl	800d588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d56c:	69f8      	ldr	r0, [r7, #28]
 800d56e:	f000 f8a9 	bl	800d6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d572:	2301      	movs	r3, #1
 800d574:	61bb      	str	r3, [r7, #24]
 800d576:	e002      	b.n	800d57e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d578:	f04f 33ff 	mov.w	r3, #4294967295
 800d57c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d57e:	69bb      	ldr	r3, [r7, #24]
	}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	f023 0307 	bic.w	r3, r3, #7
 800d5ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	617b      	str	r3, [r7, #20]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d01f      	beq.n	800d616 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	e012      	b.n	800d602 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	7819      	ldrb	r1, [r3, #0]
 800d5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	3334      	adds	r3, #52	; 0x34
 800d5ec:	460a      	mov	r2, r1
 800d5ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d006      	beq.n	800d60a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	3301      	adds	r3, #1
 800d600:	61fb      	str	r3, [r7, #28]
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	2b0f      	cmp	r3, #15
 800d606:	d9e9      	bls.n	800d5dc <prvInitialiseNewTask+0x54>
 800d608:	e000      	b.n	800d60c <prvInitialiseNewTask+0x84>
			{
				break;
 800d60a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d614:	e003      	b.n	800d61e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	2b06      	cmp	r3, #6
 800d622:	d901      	bls.n	800d628 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d624:	2306      	movs	r3, #6
 800d626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d62c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d632:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d636:	2200      	movs	r2, #0
 800d638:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	3304      	adds	r3, #4
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff f8a3 	bl	800c78a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	3318      	adds	r3, #24
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff f89e 	bl	800c78a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	f1c3 0207 	rsb	r2, r3, #7
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d666:	2200      	movs	r2, #0
 800d668:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d676:	334c      	adds	r3, #76	; 0x4c
 800d678:	2260      	movs	r2, #96	; 0x60
 800d67a:	2100      	movs	r1, #0
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 fbf7 	bl	800ee70 <memset>
 800d682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d684:	4a0c      	ldr	r2, [pc, #48]	; (800d6b8 <prvInitialiseNewTask+0x130>)
 800d686:	651a      	str	r2, [r3, #80]	; 0x50
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	4a0c      	ldr	r2, [pc, #48]	; (800d6bc <prvInitialiseNewTask+0x134>)
 800d68c:	655a      	str	r2, [r3, #84]	; 0x54
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	4a0b      	ldr	r2, [pc, #44]	; (800d6c0 <prvInitialiseNewTask+0x138>)
 800d692:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	68f9      	ldr	r1, [r7, #12]
 800d698:	69b8      	ldr	r0, [r7, #24]
 800d69a:	f000 ff75 	bl	800e588 <pxPortInitialiseStack>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6b0:	bf00      	nop
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0800fa8c 	.word	0x0800fa8c
 800d6bc:	0800faac 	.word	0x0800faac
 800d6c0:	0800fa6c 	.word	0x0800fa6c

0800d6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6cc:	f001 f88a 	bl	800e7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <prvAddNewTaskToReadyList+0xb8>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4a29      	ldr	r2, [pc, #164]	; (800d77c <prvAddNewTaskToReadyList+0xb8>)
 800d6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6da:	4b29      	ldr	r3, [pc, #164]	; (800d780 <prvAddNewTaskToReadyList+0xbc>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6e2:	4a27      	ldr	r2, [pc, #156]	; (800d780 <prvAddNewTaskToReadyList+0xbc>)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6e8:	4b24      	ldr	r3, [pc, #144]	; (800d77c <prvAddNewTaskToReadyList+0xb8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d110      	bne.n	800d712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6f0:	f000 fc66 	bl	800dfc0 <prvInitialiseTaskLists>
 800d6f4:	e00d      	b.n	800d712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6f6:	4b23      	ldr	r3, [pc, #140]	; (800d784 <prvAddNewTaskToReadyList+0xc0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d109      	bne.n	800d712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6fe:	4b20      	ldr	r3, [pc, #128]	; (800d780 <prvAddNewTaskToReadyList+0xbc>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d708:	429a      	cmp	r2, r3
 800d70a:	d802      	bhi.n	800d712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d70c:	4a1c      	ldr	r2, [pc, #112]	; (800d780 <prvAddNewTaskToReadyList+0xbc>)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d712:	4b1d      	ldr	r3, [pc, #116]	; (800d788 <prvAddNewTaskToReadyList+0xc4>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3301      	adds	r3, #1
 800d718:	4a1b      	ldr	r2, [pc, #108]	; (800d788 <prvAddNewTaskToReadyList+0xc4>)
 800d71a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	2201      	movs	r2, #1
 800d722:	409a      	lsls	r2, r3
 800d724:	4b19      	ldr	r3, [pc, #100]	; (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4313      	orrs	r3, r2
 800d72a:	4a18      	ldr	r2, [pc, #96]	; (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4a15      	ldr	r2, [pc, #84]	; (800d790 <prvAddNewTaskToReadyList+0xcc>)
 800d73c:	441a      	add	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3304      	adds	r3, #4
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7ff f82d 	bl	800c7a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d74a:	f001 f87b 	bl	800e844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <prvAddNewTaskToReadyList+0xc0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00e      	beq.n	800d774 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d756:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <prvAddNewTaskToReadyList+0xbc>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	429a      	cmp	r2, r3
 800d762:	d207      	bcs.n	800d774 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d764:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <prvAddNewTaskToReadyList+0xd0>)
 800d766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76a:	601a      	str	r2, [r3, #0]
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	200035f4 	.word	0x200035f4
 800d780:	200034f4 	.word	0x200034f4
 800d784:	20003600 	.word	0x20003600
 800d788:	20003610 	.word	0x20003610
 800d78c:	200035fc 	.word	0x200035fc
 800d790:	200034f8 	.word	0x200034f8
 800d794:	e000ed04 	.word	0xe000ed04

0800d798 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d7a0:	f001 f820 	bl	800e7e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <vTaskDelete+0x18>
 800d7aa:	4b39      	ldr	r3, [pc, #228]	; (800d890 <vTaskDelete+0xf8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	e000      	b.n	800d7b2 <vTaskDelete+0x1a>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff f850 	bl	800c85e <uxListRemove>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d115      	bne.n	800d7f0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c8:	4932      	ldr	r1, [pc, #200]	; (800d894 <vTaskDelete+0xfc>)
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10a      	bne.n	800d7f0 <vTaskDelete+0x58>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7de:	2201      	movs	r2, #1
 800d7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7e4:	43da      	mvns	r2, r3
 800d7e6:	4b2c      	ldr	r3, [pc, #176]	; (800d898 <vTaskDelete+0x100>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	4a2a      	ldr	r2, [pc, #168]	; (800d898 <vTaskDelete+0x100>)
 800d7ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3318      	adds	r3, #24
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7ff f82e 	bl	800c85e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d802:	4b26      	ldr	r3, [pc, #152]	; (800d89c <vTaskDelete+0x104>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3301      	adds	r3, #1
 800d808:	4a24      	ldr	r2, [pc, #144]	; (800d89c <vTaskDelete+0x104>)
 800d80a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d80c:	4b20      	ldr	r3, [pc, #128]	; (800d890 <vTaskDelete+0xf8>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d10b      	bne.n	800d82e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3304      	adds	r3, #4
 800d81a:	4619      	mov	r1, r3
 800d81c:	4820      	ldr	r0, [pc, #128]	; (800d8a0 <vTaskDelete+0x108>)
 800d81e:	f7fe ffc1 	bl	800c7a4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d822:	4b20      	ldr	r3, [pc, #128]	; (800d8a4 <vTaskDelete+0x10c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3301      	adds	r3, #1
 800d828:	4a1e      	ldr	r2, [pc, #120]	; (800d8a4 <vTaskDelete+0x10c>)
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	e009      	b.n	800d842 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d82e:	4b1e      	ldr	r3, [pc, #120]	; (800d8a8 <vTaskDelete+0x110>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3b01      	subs	r3, #1
 800d834:	4a1c      	ldr	r2, [pc, #112]	; (800d8a8 <vTaskDelete+0x110>)
 800d836:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 fc2f 	bl	800e09c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d83e:	f000 fc61 	bl	800e104 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d842:	f000 ffff 	bl	800e844 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d846:	4b19      	ldr	r3, [pc, #100]	; (800d8ac <vTaskDelete+0x114>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d01b      	beq.n	800d886 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800d84e:	4b10      	ldr	r3, [pc, #64]	; (800d890 <vTaskDelete+0xf8>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	429a      	cmp	r2, r3
 800d856:	d116      	bne.n	800d886 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d858:	4b15      	ldr	r3, [pc, #84]	; (800d8b0 <vTaskDelete+0x118>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <vTaskDelete+0xde>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60bb      	str	r3, [r7, #8]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800d876:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <vTaskDelete+0x11c>)
 800d878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d886:	bf00      	nop
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	200034f4 	.word	0x200034f4
 800d894:	200034f8 	.word	0x200034f8
 800d898:	200035fc 	.word	0x200035fc
 800d89c:	20003610 	.word	0x20003610
 800d8a0:	200035c8 	.word	0x200035c8
 800d8a4:	200035dc 	.word	0x200035dc
 800d8a8:	200035f4 	.word	0x200035f4
 800d8ac:	20003600 	.word	0x20003600
 800d8b0:	2000361c 	.word	0x2000361c
 800d8b4:	e000ed04 	.word	0xe000ed04

0800d8b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d017      	beq.n	800d8fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <vTaskDelay+0x60>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00a      	beq.n	800d8e8 <vTaskDelay+0x30>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	60bb      	str	r3, [r7, #8]
}
 800d8e4:	bf00      	nop
 800d8e6:	e7fe      	b.n	800d8e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8e8:	f000 f884 	bl	800d9f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fde4 	bl	800e4bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8f4:	f000 f88c 	bl	800da10 <xTaskResumeAll>
 800d8f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d107      	bne.n	800d910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d900:	4b06      	ldr	r3, [pc, #24]	; (800d91c <vTaskDelay+0x64>)
 800d902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	2000361c 	.word	0x2000361c
 800d91c:	e000ed04 	.word	0xe000ed04

0800d920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d926:	2300      	movs	r3, #0
 800d928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d92e:	463a      	mov	r2, r7
 800d930:	1d39      	adds	r1, r7, #4
 800d932:	f107 0308 	add.w	r3, r7, #8
 800d936:	4618      	mov	r0, r3
 800d938:	f7f4 f8fa 	bl	8001b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	9202      	str	r2, [sp, #8]
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	2300      	movs	r3, #0
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	2300      	movs	r3, #0
 800d94c:	460a      	mov	r2, r1
 800d94e:	4921      	ldr	r1, [pc, #132]	; (800d9d4 <vTaskStartScheduler+0xb4>)
 800d950:	4821      	ldr	r0, [pc, #132]	; (800d9d8 <vTaskStartScheduler+0xb8>)
 800d952:	f7ff fd77 	bl	800d444 <xTaskCreateStatic>
 800d956:	4603      	mov	r3, r0
 800d958:	4a20      	ldr	r2, [pc, #128]	; (800d9dc <vTaskStartScheduler+0xbc>)
 800d95a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d95c:	4b1f      	ldr	r3, [pc, #124]	; (800d9dc <vTaskStartScheduler+0xbc>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d964:	2301      	movs	r3, #1
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	e001      	b.n	800d96e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d11b      	bne.n	800d9ac <vTaskStartScheduler+0x8c>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	613b      	str	r3, [r7, #16]
}
 800d986:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d988:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <vTaskStartScheduler+0xc0>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	334c      	adds	r3, #76	; 0x4c
 800d98e:	4a15      	ldr	r2, [pc, #84]	; (800d9e4 <vTaskStartScheduler+0xc4>)
 800d990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d992:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <vTaskStartScheduler+0xc8>)
 800d994:	f04f 32ff 	mov.w	r2, #4294967295
 800d998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d99a:	4b14      	ldr	r3, [pc, #80]	; (800d9ec <vTaskStartScheduler+0xcc>)
 800d99c:	2201      	movs	r2, #1
 800d99e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <vTaskStartScheduler+0xd0>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9a6:	f000 fe7b 	bl	800e6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9aa:	e00e      	b.n	800d9ca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b2:	d10a      	bne.n	800d9ca <vTaskStartScheduler+0xaa>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	60fb      	str	r3, [r7, #12]
}
 800d9c6:	bf00      	nop
 800d9c8:	e7fe      	b.n	800d9c8 <vTaskStartScheduler+0xa8>
}
 800d9ca:	bf00      	nop
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	0800f9c4 	.word	0x0800f9c4
 800d9d8:	0800df91 	.word	0x0800df91
 800d9dc:	20003618 	.word	0x20003618
 800d9e0:	200034f4 	.word	0x200034f4
 800d9e4:	200000ac 	.word	0x200000ac
 800d9e8:	20003614 	.word	0x20003614
 800d9ec:	20003600 	.word	0x20003600
 800d9f0:	200035f8 	.word	0x200035f8

0800d9f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9f8:	4b04      	ldr	r3, [pc, #16]	; (800da0c <vTaskSuspendAll+0x18>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	4a03      	ldr	r2, [pc, #12]	; (800da0c <vTaskSuspendAll+0x18>)
 800da00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da02:	bf00      	nop
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	2000361c 	.word	0x2000361c

0800da10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da16:	2300      	movs	r3, #0
 800da18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da1e:	4b41      	ldr	r3, [pc, #260]	; (800db24 <xTaskResumeAll+0x114>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10a      	bne.n	800da3c <xTaskResumeAll+0x2c>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	603b      	str	r3, [r7, #0]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da3c:	f000 fed2 	bl	800e7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da40:	4b38      	ldr	r3, [pc, #224]	; (800db24 <xTaskResumeAll+0x114>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3b01      	subs	r3, #1
 800da46:	4a37      	ldr	r2, [pc, #220]	; (800db24 <xTaskResumeAll+0x114>)
 800da48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da4a:	4b36      	ldr	r3, [pc, #216]	; (800db24 <xTaskResumeAll+0x114>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d161      	bne.n	800db16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da52:	4b35      	ldr	r3, [pc, #212]	; (800db28 <xTaskResumeAll+0x118>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d05d      	beq.n	800db16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da5a:	e02e      	b.n	800daba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5c:	4b33      	ldr	r3, [pc, #204]	; (800db2c <xTaskResumeAll+0x11c>)
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3318      	adds	r3, #24
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fef8 	bl	800c85e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3304      	adds	r3, #4
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe fef3 	bl	800c85e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	2201      	movs	r2, #1
 800da7e:	409a      	lsls	r2, r3
 800da80:	4b2b      	ldr	r3, [pc, #172]	; (800db30 <xTaskResumeAll+0x120>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4313      	orrs	r3, r2
 800da86:	4a2a      	ldr	r2, [pc, #168]	; (800db30 <xTaskResumeAll+0x120>)
 800da88:	6013      	str	r3, [r2, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8e:	4613      	mov	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4a27      	ldr	r2, [pc, #156]	; (800db34 <xTaskResumeAll+0x124>)
 800da98:	441a      	add	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3304      	adds	r3, #4
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7fe fe7f 	bl	800c7a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daaa:	4b23      	ldr	r3, [pc, #140]	; (800db38 <xTaskResumeAll+0x128>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d302      	bcc.n	800daba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dab4:	4b21      	ldr	r3, [pc, #132]	; (800db3c <xTaskResumeAll+0x12c>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daba:	4b1c      	ldr	r3, [pc, #112]	; (800db2c <xTaskResumeAll+0x11c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1cc      	bne.n	800da5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dac8:	f000 fb1c 	bl	800e104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dacc:	4b1c      	ldr	r3, [pc, #112]	; (800db40 <xTaskResumeAll+0x130>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d010      	beq.n	800dafa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dad8:	f000 f836 	bl	800db48 <xTaskIncrementTick>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dae2:	4b16      	ldr	r3, [pc, #88]	; (800db3c <xTaskResumeAll+0x12c>)
 800dae4:	2201      	movs	r2, #1
 800dae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	3b01      	subs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1f1      	bne.n	800dad8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800daf4:	4b12      	ldr	r3, [pc, #72]	; (800db40 <xTaskResumeAll+0x130>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dafa:	4b10      	ldr	r3, [pc, #64]	; (800db3c <xTaskResumeAll+0x12c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d009      	beq.n	800db16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db02:	2301      	movs	r3, #1
 800db04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db06:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <xTaskResumeAll+0x134>)
 800db08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db16:	f000 fe95 	bl	800e844 <vPortExitCritical>

	return xAlreadyYielded;
 800db1a:	68bb      	ldr	r3, [r7, #8]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	2000361c 	.word	0x2000361c
 800db28:	200035f4 	.word	0x200035f4
 800db2c:	200035b4 	.word	0x200035b4
 800db30:	200035fc 	.word	0x200035fc
 800db34:	200034f8 	.word	0x200034f8
 800db38:	200034f4 	.word	0x200034f4
 800db3c:	20003608 	.word	0x20003608
 800db40:	20003604 	.word	0x20003604
 800db44:	e000ed04 	.word	0xe000ed04

0800db48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db4e:	2300      	movs	r3, #0
 800db50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db52:	4b4e      	ldr	r3, [pc, #312]	; (800dc8c <xTaskIncrementTick+0x144>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	f040 808e 	bne.w	800dc78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db5c:	4b4c      	ldr	r3, [pc, #304]	; (800dc90 <xTaskIncrementTick+0x148>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db64:	4a4a      	ldr	r2, [pc, #296]	; (800dc90 <xTaskIncrementTick+0x148>)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d120      	bne.n	800dbb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db70:	4b48      	ldr	r3, [pc, #288]	; (800dc94 <xTaskIncrementTick+0x14c>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <xTaskIncrementTick+0x48>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	603b      	str	r3, [r7, #0]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <xTaskIncrementTick+0x46>
 800db90:	4b40      	ldr	r3, [pc, #256]	; (800dc94 <xTaskIncrementTick+0x14c>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	60fb      	str	r3, [r7, #12]
 800db96:	4b40      	ldr	r3, [pc, #256]	; (800dc98 <xTaskIncrementTick+0x150>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a3e      	ldr	r2, [pc, #248]	; (800dc94 <xTaskIncrementTick+0x14c>)
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	4a3e      	ldr	r2, [pc, #248]	; (800dc98 <xTaskIncrementTick+0x150>)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	4b3d      	ldr	r3, [pc, #244]	; (800dc9c <xTaskIncrementTick+0x154>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	4a3c      	ldr	r2, [pc, #240]	; (800dc9c <xTaskIncrementTick+0x154>)
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	f000 faa9 	bl	800e104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbb2:	4b3b      	ldr	r3, [pc, #236]	; (800dca0 <xTaskIncrementTick+0x158>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d348      	bcc.n	800dc4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbbc:	4b35      	ldr	r3, [pc, #212]	; (800dc94 <xTaskIncrementTick+0x14c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d104      	bne.n	800dbd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbc6:	4b36      	ldr	r3, [pc, #216]	; (800dca0 <xTaskIncrementTick+0x158>)
 800dbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbcc:	601a      	str	r2, [r3, #0]
					break;
 800dbce:	e03e      	b.n	800dc4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd0:	4b30      	ldr	r3, [pc, #192]	; (800dc94 <xTaskIncrementTick+0x14c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d203      	bcs.n	800dbf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbe8:	4a2d      	ldr	r2, [pc, #180]	; (800dca0 <xTaskIncrementTick+0x158>)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbee:	e02e      	b.n	800dc4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe fe32 	bl	800c85e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d004      	beq.n	800dc0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	3318      	adds	r3, #24
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fe29 	bl	800c85e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc10:	2201      	movs	r2, #1
 800dc12:	409a      	lsls	r2, r3
 800dc14:	4b23      	ldr	r3, [pc, #140]	; (800dca4 <xTaskIncrementTick+0x15c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	4a22      	ldr	r2, [pc, #136]	; (800dca4 <xTaskIncrementTick+0x15c>)
 800dc1c:	6013      	str	r3, [r2, #0]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	4613      	mov	r3, r2
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	4413      	add	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4a1f      	ldr	r2, [pc, #124]	; (800dca8 <xTaskIncrementTick+0x160>)
 800dc2c:	441a      	add	r2, r3
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	3304      	adds	r3, #4
 800dc32:	4619      	mov	r1, r3
 800dc34:	4610      	mov	r0, r2
 800dc36:	f7fe fdb5 	bl	800c7a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3e:	4b1b      	ldr	r3, [pc, #108]	; (800dcac <xTaskIncrementTick+0x164>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d3b9      	bcc.n	800dbbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc4c:	e7b6      	b.n	800dbbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc4e:	4b17      	ldr	r3, [pc, #92]	; (800dcac <xTaskIncrementTick+0x164>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc54:	4914      	ldr	r1, [pc, #80]	; (800dca8 <xTaskIncrementTick+0x160>)
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	440b      	add	r3, r1
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d901      	bls.n	800dc6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dc66:	2301      	movs	r3, #1
 800dc68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <xTaskIncrementTick+0x168>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d007      	beq.n	800dc82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dc72:	2301      	movs	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	e004      	b.n	800dc82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc78:	4b0e      	ldr	r3, [pc, #56]	; (800dcb4 <xTaskIncrementTick+0x16c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	4a0d      	ldr	r2, [pc, #52]	; (800dcb4 <xTaskIncrementTick+0x16c>)
 800dc80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc82:	697b      	ldr	r3, [r7, #20]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	2000361c 	.word	0x2000361c
 800dc90:	200035f8 	.word	0x200035f8
 800dc94:	200035ac 	.word	0x200035ac
 800dc98:	200035b0 	.word	0x200035b0
 800dc9c:	2000360c 	.word	0x2000360c
 800dca0:	20003614 	.word	0x20003614
 800dca4:	200035fc 	.word	0x200035fc
 800dca8:	200034f8 	.word	0x200034f8
 800dcac:	200034f4 	.word	0x200034f4
 800dcb0:	20003608 	.word	0x20003608
 800dcb4:	20003604 	.word	0x20003604

0800dcb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcbe:	4b29      	ldr	r3, [pc, #164]	; (800dd64 <vTaskSwitchContext+0xac>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcc6:	4b28      	ldr	r3, [pc, #160]	; (800dd68 <vTaskSwitchContext+0xb0>)
 800dcc8:	2201      	movs	r2, #1
 800dcca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dccc:	e044      	b.n	800dd58 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800dcce:	4b26      	ldr	r3, [pc, #152]	; (800dd68 <vTaskSwitchContext+0xb0>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd4:	4b25      	ldr	r3, [pc, #148]	; (800dd6c <vTaskSwitchContext+0xb4>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	fab3 f383 	clz	r3, r3
 800dce0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dce2:	7afb      	ldrb	r3, [r7, #11]
 800dce4:	f1c3 031f 	rsb	r3, r3, #31
 800dce8:	617b      	str	r3, [r7, #20]
 800dcea:	4921      	ldr	r1, [pc, #132]	; (800dd70 <vTaskSwitchContext+0xb8>)
 800dcec:	697a      	ldr	r2, [r7, #20]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	440b      	add	r3, r1
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <vTaskSwitchContext+0x5c>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	607b      	str	r3, [r7, #4]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <vTaskSwitchContext+0x5a>
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4a14      	ldr	r2, [pc, #80]	; (800dd70 <vTaskSwitchContext+0xb8>)
 800dd20:	4413      	add	r3, r2
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	605a      	str	r2, [r3, #4]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	3308      	adds	r3, #8
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d104      	bne.n	800dd44 <vTaskSwitchContext+0x8c>
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	605a      	str	r2, [r3, #4]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	4a0a      	ldr	r2, [pc, #40]	; (800dd74 <vTaskSwitchContext+0xbc>)
 800dd4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd4e:	4b09      	ldr	r3, [pc, #36]	; (800dd74 <vTaskSwitchContext+0xbc>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	334c      	adds	r3, #76	; 0x4c
 800dd54:	4a08      	ldr	r2, [pc, #32]	; (800dd78 <vTaskSwitchContext+0xc0>)
 800dd56:	6013      	str	r3, [r2, #0]
}
 800dd58:	bf00      	nop
 800dd5a:	371c      	adds	r7, #28
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	2000361c 	.word	0x2000361c
 800dd68:	20003608 	.word	0x20003608
 800dd6c:	200035fc 	.word	0x200035fc
 800dd70:	200034f8 	.word	0x200034f8
 800dd74:	200034f4 	.word	0x200034f4
 800dd78:	200000ac 	.word	0x200000ac

0800dd7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10a      	bne.n	800dda2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	60fb      	str	r3, [r7, #12]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dda2:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <vTaskPlaceOnEventList+0x44>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3318      	adds	r3, #24
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7fe fd1e 	bl	800c7ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f000 fb82 	bl	800e4bc <prvAddCurrentTaskToDelayedList>
}
 800ddb8:	bf00      	nop
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	200034f4 	.word	0x200034f4

0800ddc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10a      	bne.n	800ddf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	60fb      	str	r3, [r7, #12]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	3318      	adds	r3, #24
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fd32 	bl	800c85e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddfa:	4b1d      	ldr	r3, [pc, #116]	; (800de70 <xTaskRemoveFromEventList+0xac>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d11c      	bne.n	800de3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	3304      	adds	r3, #4
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe fd29 	bl	800c85e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de10:	2201      	movs	r2, #1
 800de12:	409a      	lsls	r2, r3
 800de14:	4b17      	ldr	r3, [pc, #92]	; (800de74 <xTaskRemoveFromEventList+0xb0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4313      	orrs	r3, r2
 800de1a:	4a16      	ldr	r2, [pc, #88]	; (800de74 <xTaskRemoveFromEventList+0xb0>)
 800de1c:	6013      	str	r3, [r2, #0]
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4a13      	ldr	r2, [pc, #76]	; (800de78 <xTaskRemoveFromEventList+0xb4>)
 800de2c:	441a      	add	r2, r3
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	3304      	adds	r3, #4
 800de32:	4619      	mov	r1, r3
 800de34:	4610      	mov	r0, r2
 800de36:	f7fe fcb5 	bl	800c7a4 <vListInsertEnd>
 800de3a:	e005      	b.n	800de48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3318      	adds	r3, #24
 800de40:	4619      	mov	r1, r3
 800de42:	480e      	ldr	r0, [pc, #56]	; (800de7c <xTaskRemoveFromEventList+0xb8>)
 800de44:	f7fe fcae 	bl	800c7a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4c:	4b0c      	ldr	r3, [pc, #48]	; (800de80 <xTaskRemoveFromEventList+0xbc>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	429a      	cmp	r2, r3
 800de54:	d905      	bls.n	800de62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de56:	2301      	movs	r3, #1
 800de58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de5a:	4b0a      	ldr	r3, [pc, #40]	; (800de84 <xTaskRemoveFromEventList+0xc0>)
 800de5c:	2201      	movs	r2, #1
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	e001      	b.n	800de66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de66:	697b      	ldr	r3, [r7, #20]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3718      	adds	r7, #24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	2000361c 	.word	0x2000361c
 800de74:	200035fc 	.word	0x200035fc
 800de78:	200034f8 	.word	0x200034f8
 800de7c:	200035b4 	.word	0x200035b4
 800de80:	200034f4 	.word	0x200034f4
 800de84:	20003608 	.word	0x20003608

0800de88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de90:	4b06      	ldr	r3, [pc, #24]	; (800deac <vTaskInternalSetTimeOutState+0x24>)
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <vTaskInternalSetTimeOutState+0x28>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	605a      	str	r2, [r3, #4]
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	2000360c 	.word	0x2000360c
 800deb0:	200035f8 	.word	0x200035f8

0800deb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	613b      	str	r3, [r7, #16]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	60fb      	str	r3, [r7, #12]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800def6:	f000 fc75 	bl	800e7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800defa:	4b1d      	ldr	r3, [pc, #116]	; (800df70 <xTaskCheckForTimeOut+0xbc>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df12:	d102      	bne.n	800df1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df14:	2300      	movs	r3, #0
 800df16:	61fb      	str	r3, [r7, #28]
 800df18:	e023      	b.n	800df62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	4b15      	ldr	r3, [pc, #84]	; (800df74 <xTaskCheckForTimeOut+0xc0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	429a      	cmp	r2, r3
 800df24:	d007      	beq.n	800df36 <xTaskCheckForTimeOut+0x82>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	69ba      	ldr	r2, [r7, #24]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d302      	bcc.n	800df36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df30:	2301      	movs	r3, #1
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	e015      	b.n	800df62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d20b      	bcs.n	800df58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	1ad2      	subs	r2, r2, r3
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7ff ff9b 	bl	800de88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df52:	2300      	movs	r3, #0
 800df54:	61fb      	str	r3, [r7, #28]
 800df56:	e004      	b.n	800df62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2200      	movs	r2, #0
 800df5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df5e:	2301      	movs	r3, #1
 800df60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df62:	f000 fc6f 	bl	800e844 <vPortExitCritical>

	return xReturn;
 800df66:	69fb      	ldr	r3, [r7, #28]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3720      	adds	r7, #32
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	200035f8 	.word	0x200035f8
 800df74:	2000360c 	.word	0x2000360c

0800df78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df78:	b480      	push	{r7}
 800df7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df7c:	4b03      	ldr	r3, [pc, #12]	; (800df8c <vTaskMissedYield+0x14>)
 800df7e:	2201      	movs	r2, #1
 800df80:	601a      	str	r2, [r3, #0]
}
 800df82:	bf00      	nop
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	20003608 	.word	0x20003608

0800df90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df98:	f000 f852 	bl	800e040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df9c:	4b06      	ldr	r3, [pc, #24]	; (800dfb8 <prvIdleTask+0x28>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d9f9      	bls.n	800df98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfa4:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <prvIdleTask+0x2c>)
 800dfa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfb4:	e7f0      	b.n	800df98 <prvIdleTask+0x8>
 800dfb6:	bf00      	nop
 800dfb8:	200034f8 	.word	0x200034f8
 800dfbc:	e000ed04 	.word	0xe000ed04

0800dfc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	607b      	str	r3, [r7, #4]
 800dfca:	e00c      	b.n	800dfe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4a12      	ldr	r2, [pc, #72]	; (800e020 <prvInitialiseTaskLists+0x60>)
 800dfd8:	4413      	add	r3, r2
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fe fbb5 	bl	800c74a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	607b      	str	r3, [r7, #4]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b06      	cmp	r3, #6
 800dfea:	d9ef      	bls.n	800dfcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dfec:	480d      	ldr	r0, [pc, #52]	; (800e024 <prvInitialiseTaskLists+0x64>)
 800dfee:	f7fe fbac 	bl	800c74a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dff2:	480d      	ldr	r0, [pc, #52]	; (800e028 <prvInitialiseTaskLists+0x68>)
 800dff4:	f7fe fba9 	bl	800c74a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dff8:	480c      	ldr	r0, [pc, #48]	; (800e02c <prvInitialiseTaskLists+0x6c>)
 800dffa:	f7fe fba6 	bl	800c74a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dffe:	480c      	ldr	r0, [pc, #48]	; (800e030 <prvInitialiseTaskLists+0x70>)
 800e000:	f7fe fba3 	bl	800c74a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e004:	480b      	ldr	r0, [pc, #44]	; (800e034 <prvInitialiseTaskLists+0x74>)
 800e006:	f7fe fba0 	bl	800c74a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e00a:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <prvInitialiseTaskLists+0x78>)
 800e00c:	4a05      	ldr	r2, [pc, #20]	; (800e024 <prvInitialiseTaskLists+0x64>)
 800e00e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e010:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <prvInitialiseTaskLists+0x7c>)
 800e012:	4a05      	ldr	r2, [pc, #20]	; (800e028 <prvInitialiseTaskLists+0x68>)
 800e014:	601a      	str	r2, [r3, #0]
}
 800e016:	bf00      	nop
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200034f8 	.word	0x200034f8
 800e024:	20003584 	.word	0x20003584
 800e028:	20003598 	.word	0x20003598
 800e02c:	200035b4 	.word	0x200035b4
 800e030:	200035c8 	.word	0x200035c8
 800e034:	200035e0 	.word	0x200035e0
 800e038:	200035ac 	.word	0x200035ac
 800e03c:	200035b0 	.word	0x200035b0

0800e040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e046:	e019      	b.n	800e07c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e048:	f000 fbcc 	bl	800e7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04c:	4b10      	ldr	r3, [pc, #64]	; (800e090 <prvCheckTasksWaitingTermination+0x50>)
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	3304      	adds	r3, #4
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fe fc00 	bl	800c85e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e05e:	4b0d      	ldr	r3, [pc, #52]	; (800e094 <prvCheckTasksWaitingTermination+0x54>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3b01      	subs	r3, #1
 800e064:	4a0b      	ldr	r2, [pc, #44]	; (800e094 <prvCheckTasksWaitingTermination+0x54>)
 800e066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e068:	4b0b      	ldr	r3, [pc, #44]	; (800e098 <prvCheckTasksWaitingTermination+0x58>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	4a0a      	ldr	r2, [pc, #40]	; (800e098 <prvCheckTasksWaitingTermination+0x58>)
 800e070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e072:	f000 fbe7 	bl	800e844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 f810 	bl	800e09c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e07c:	4b06      	ldr	r3, [pc, #24]	; (800e098 <prvCheckTasksWaitingTermination+0x58>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1e1      	bne.n	800e048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	200035c8 	.word	0x200035c8
 800e094:	200035f4 	.word	0x200035f4
 800e098:	200035dc 	.word	0x200035dc

0800e09c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	334c      	adds	r3, #76	; 0x4c
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 ff8b 	bl	800efc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d108      	bne.n	800e0ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 fd7f 	bl	800ebc0 <vPortFree>
				vPortFree( pxTCB );
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fd7c 	bl	800ebc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0c8:	e018      	b.n	800e0fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d103      	bne.n	800e0dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fd73 	bl	800ebc0 <vPortFree>
	}
 800e0da:	e00f      	b.n	800e0fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d00a      	beq.n	800e0fc <prvDeleteTCB+0x60>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	60fb      	str	r3, [r7, #12]
}
 800e0f8:	bf00      	nop
 800e0fa:	e7fe      	b.n	800e0fa <prvDeleteTCB+0x5e>
	}
 800e0fc:	bf00      	nop
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10a:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <prvResetNextTaskUnblockTime+0x38>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d104      	bne.n	800e11e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <prvResetNextTaskUnblockTime+0x3c>)
 800e116:	f04f 32ff 	mov.w	r2, #4294967295
 800e11a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e11c:	e008      	b.n	800e130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e11e:	4b07      	ldr	r3, [pc, #28]	; (800e13c <prvResetNextTaskUnblockTime+0x38>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	4a04      	ldr	r2, [pc, #16]	; (800e140 <prvResetNextTaskUnblockTime+0x3c>)
 800e12e:	6013      	str	r3, [r2, #0]
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	200035ac 	.word	0x200035ac
 800e140:	20003614 	.word	0x20003614

0800e144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e14a:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <xTaskGetSchedulerState+0x34>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d102      	bne.n	800e158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e152:	2301      	movs	r3, #1
 800e154:	607b      	str	r3, [r7, #4]
 800e156:	e008      	b.n	800e16a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e158:	4b08      	ldr	r3, [pc, #32]	; (800e17c <xTaskGetSchedulerState+0x38>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d102      	bne.n	800e166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e160:	2302      	movs	r3, #2
 800e162:	607b      	str	r3, [r7, #4]
 800e164:	e001      	b.n	800e16a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e166:	2300      	movs	r3, #0
 800e168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e16a:	687b      	ldr	r3, [r7, #4]
	}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	20003600 	.word	0x20003600
 800e17c:	2000361c 	.word	0x2000361c

0800e180 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e18c:	2300      	movs	r3, #0
 800e18e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d05e      	beq.n	800e254 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19a:	4b31      	ldr	r3, [pc, #196]	; (800e260 <xTaskPriorityInherit+0xe0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d24e      	bcs.n	800e242 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	db06      	blt.n	800e1ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ac:	4b2c      	ldr	r3, [pc, #176]	; (800e260 <xTaskPriorityInherit+0xe0>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b2:	f1c3 0207 	rsb	r2, r3, #7
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	6959      	ldr	r1, [r3, #20]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4a26      	ldr	r2, [pc, #152]	; (800e264 <xTaskPriorityInherit+0xe4>)
 800e1cc:	4413      	add	r3, r2
 800e1ce:	4299      	cmp	r1, r3
 800e1d0:	d12f      	bne.n	800e232 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fe fb41 	bl	800c85e <uxListRemove>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10a      	bne.n	800e1f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ec:	43da      	mvns	r2, r3
 800e1ee:	4b1e      	ldr	r3, [pc, #120]	; (800e268 <xTaskPriorityInherit+0xe8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	4a1c      	ldr	r2, [pc, #112]	; (800e268 <xTaskPriorityInherit+0xe8>)
 800e1f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1f8:	4b19      	ldr	r3, [pc, #100]	; (800e260 <xTaskPriorityInherit+0xe0>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e206:	2201      	movs	r2, #1
 800e208:	409a      	lsls	r2, r3
 800e20a:	4b17      	ldr	r3, [pc, #92]	; (800e268 <xTaskPriorityInherit+0xe8>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4313      	orrs	r3, r2
 800e210:	4a15      	ldr	r2, [pc, #84]	; (800e268 <xTaskPriorityInherit+0xe8>)
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4a10      	ldr	r2, [pc, #64]	; (800e264 <xTaskPriorityInherit+0xe4>)
 800e222:	441a      	add	r2, r3
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	3304      	adds	r3, #4
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f7fe faba 	bl	800c7a4 <vListInsertEnd>
 800e230:	e004      	b.n	800e23c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e232:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <xTaskPriorityInherit+0xe0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e008      	b.n	800e254 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e246:	4b06      	ldr	r3, [pc, #24]	; (800e260 <xTaskPriorityInherit+0xe0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d201      	bcs.n	800e254 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e250:	2301      	movs	r3, #1
 800e252:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e254:	68fb      	ldr	r3, [r7, #12]
	}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200034f4 	.word	0x200034f4
 800e264:	200034f8 	.word	0x200034f8
 800e268:	200035fc 	.word	0x200035fc

0800e26c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d06e      	beq.n	800e360 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e282:	4b3a      	ldr	r3, [pc, #232]	; (800e36c <xTaskPriorityDisinherit+0x100>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d00a      	beq.n	800e2a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e290:	f383 8811 	msr	BASEPRI, r3
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	60fb      	str	r3, [r7, #12]
}
 800e29e:	bf00      	nop
 800e2a0:	e7fe      	b.n	800e2a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10a      	bne.n	800e2c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	60bb      	str	r3, [r7, #8]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2c4:	1e5a      	subs	r2, r3, #1
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d044      	beq.n	800e360 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d140      	bne.n	800e360 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fabb 	bl	800c85e <uxListRemove>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d115      	bne.n	800e31a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f2:	491f      	ldr	r1, [pc, #124]	; (800e370 <xTaskPriorityDisinherit+0x104>)
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	440b      	add	r3, r1
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <xTaskPriorityDisinherit+0xae>
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	2201      	movs	r2, #1
 800e30a:	fa02 f303 	lsl.w	r3, r2, r3
 800e30e:	43da      	mvns	r2, r3
 800e310:	4b18      	ldr	r3, [pc, #96]	; (800e374 <xTaskPriorityDisinherit+0x108>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4013      	ands	r3, r2
 800e316:	4a17      	ldr	r2, [pc, #92]	; (800e374 <xTaskPriorityDisinherit+0x108>)
 800e318:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e326:	f1c3 0207 	rsb	r2, r3, #7
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e332:	2201      	movs	r2, #1
 800e334:	409a      	lsls	r2, r3
 800e336:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <xTaskPriorityDisinherit+0x108>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	4a0d      	ldr	r2, [pc, #52]	; (800e374 <xTaskPriorityDisinherit+0x108>)
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4a08      	ldr	r2, [pc, #32]	; (800e370 <xTaskPriorityDisinherit+0x104>)
 800e34e:	441a      	add	r2, r3
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	3304      	adds	r3, #4
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f7fe fa24 	bl	800c7a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e35c:	2301      	movs	r3, #1
 800e35e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e360:	697b      	ldr	r3, [r7, #20]
	}
 800e362:	4618      	mov	r0, r3
 800e364:	3718      	adds	r7, #24
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	200034f4 	.word	0x200034f4
 800e370:	200034f8 	.word	0x200034f8
 800e374:	200035fc 	.word	0x200035fc

0800e378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e386:	2301      	movs	r3, #1
 800e388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d077      	beq.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	60fb      	str	r3, [r7, #12]
}
 800e3aa:	bf00      	nop
 800e3ac:	e7fe      	b.n	800e3ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d902      	bls.n	800e3be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	61fb      	str	r3, [r7, #28]
 800e3bc:	e002      	b.n	800e3c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d058      	beq.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d153      	bne.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e3d8:	4b2b      	ldr	r3, [pc, #172]	; (800e488 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d10a      	bne.n	800e3f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	60bb      	str	r3, [r7, #8]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	69fa      	ldr	r2, [r7, #28]
 800e402:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	db04      	blt.n	800e416 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	f1c3 0207 	rsb	r2, r3, #7
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	6959      	ldr	r1, [r3, #20]
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	4613      	mov	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4a19      	ldr	r2, [pc, #100]	; (800e48c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e426:	4413      	add	r3, r2
 800e428:	4299      	cmp	r1, r3
 800e42a:	d129      	bne.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	3304      	adds	r3, #4
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe fa14 	bl	800c85e <uxListRemove>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10a      	bne.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e440:	2201      	movs	r2, #1
 800e442:	fa02 f303 	lsl.w	r3, r2, r3
 800e446:	43da      	mvns	r2, r3
 800e448:	4b11      	ldr	r3, [pc, #68]	; (800e490 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4013      	ands	r3, r2
 800e44e:	4a10      	ldr	r2, [pc, #64]	; (800e490 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e450:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e456:	2201      	movs	r2, #1
 800e458:	409a      	lsls	r2, r3
 800e45a:	4b0d      	ldr	r3, [pc, #52]	; (800e490 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4313      	orrs	r3, r2
 800e460:	4a0b      	ldr	r2, [pc, #44]	; (800e490 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e462:	6013      	str	r3, [r2, #0]
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	4613      	mov	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4a06      	ldr	r2, [pc, #24]	; (800e48c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e472:	441a      	add	r2, r3
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	3304      	adds	r3, #4
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7fe f992 	bl	800c7a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e480:	bf00      	nop
 800e482:	3720      	adds	r7, #32
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	200034f4 	.word	0x200034f4
 800e48c:	200034f8 	.word	0x200034f8
 800e490:	200035fc 	.word	0x200035fc

0800e494 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e494:	b480      	push	{r7}
 800e496:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e498:	4b07      	ldr	r3, [pc, #28]	; (800e4b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d004      	beq.n	800e4aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4a6:	3201      	adds	r2, #1
 800e4a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e4aa:	4b03      	ldr	r3, [pc, #12]	; (800e4b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
	}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr
 800e4b8:	200034f4 	.word	0x200034f4

0800e4bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4c6:	4b29      	ldr	r3, [pc, #164]	; (800e56c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4cc:	4b28      	ldr	r3, [pc, #160]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fe f9c3 	bl	800c85e <uxListRemove>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10b      	bne.n	800e4f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e4de:	4b24      	ldr	r3, [pc, #144]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ea:	43da      	mvns	r2, r3
 800e4ec:	4b21      	ldr	r3, [pc, #132]	; (800e574 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	4a20      	ldr	r2, [pc, #128]	; (800e574 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e4f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fc:	d10a      	bne.n	800e514 <prvAddCurrentTaskToDelayedList+0x58>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e504:	4b1a      	ldr	r3, [pc, #104]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3304      	adds	r3, #4
 800e50a:	4619      	mov	r1, r3
 800e50c:	481a      	ldr	r0, [pc, #104]	; (800e578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e50e:	f7fe f949 	bl	800c7a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e512:	e026      	b.n	800e562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4413      	add	r3, r2
 800e51a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e51c:	4b14      	ldr	r3, [pc, #80]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e524:	68ba      	ldr	r2, [r7, #8]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d209      	bcs.n	800e540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e52c:	4b13      	ldr	r3, [pc, #76]	; (800e57c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	4b0f      	ldr	r3, [pc, #60]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3304      	adds	r3, #4
 800e536:	4619      	mov	r1, r3
 800e538:	4610      	mov	r0, r2
 800e53a:	f7fe f957 	bl	800c7ec <vListInsert>
}
 800e53e:	e010      	b.n	800e562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e540:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	4b0a      	ldr	r3, [pc, #40]	; (800e570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3304      	adds	r3, #4
 800e54a:	4619      	mov	r1, r3
 800e54c:	4610      	mov	r0, r2
 800e54e:	f7fe f94d 	bl	800c7ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e552:	4b0c      	ldr	r3, [pc, #48]	; (800e584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d202      	bcs.n	800e562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e55c:	4a09      	ldr	r2, [pc, #36]	; (800e584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	6013      	str	r3, [r2, #0]
}
 800e562:	bf00      	nop
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	200035f8 	.word	0x200035f8
 800e570:	200034f4 	.word	0x200034f4
 800e574:	200035fc 	.word	0x200035fc
 800e578:	200035e0 	.word	0x200035e0
 800e57c:	200035b0 	.word	0x200035b0
 800e580:	200035ac 	.word	0x200035ac
 800e584:	20003614 	.word	0x20003614

0800e588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3b04      	subs	r3, #4
 800e598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e5a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3b04      	subs	r3, #4
 800e5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	f023 0201 	bic.w	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3b04      	subs	r3, #4
 800e5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5b8:	4a0c      	ldr	r2, [pc, #48]	; (800e5ec <pxPortInitialiseStack+0x64>)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3b14      	subs	r3, #20
 800e5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3b04      	subs	r3, #4
 800e5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f06f 0202 	mvn.w	r2, #2
 800e5d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3b20      	subs	r3, #32
 800e5dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5de:	68fb      	ldr	r3, [r7, #12]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	0800e5f1 	.word	0x0800e5f1

0800e5f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e5fa:	4b12      	ldr	r3, [pc, #72]	; (800e644 <prvTaskExitError+0x54>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e602:	d00a      	beq.n	800e61a <prvTaskExitError+0x2a>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	60fb      	str	r3, [r7, #12]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <prvTaskExitError+0x28>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	60bb      	str	r3, [r7, #8]
}
 800e62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e62e:	bf00      	nop
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0fc      	beq.n	800e630 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e636:	bf00      	nop
 800e638:	bf00      	nop
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	200000a8 	.word	0x200000a8
	...

0800e650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e650:	4b07      	ldr	r3, [pc, #28]	; (800e670 <pxCurrentTCBConst2>)
 800e652:	6819      	ldr	r1, [r3, #0]
 800e654:	6808      	ldr	r0, [r1, #0]
 800e656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65a:	f380 8809 	msr	PSP, r0
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f04f 0000 	mov.w	r0, #0
 800e666:	f380 8811 	msr	BASEPRI, r0
 800e66a:	4770      	bx	lr
 800e66c:	f3af 8000 	nop.w

0800e670 <pxCurrentTCBConst2>:
 800e670:	200034f4 	.word	0x200034f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop

0800e678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e678:	4808      	ldr	r0, [pc, #32]	; (800e69c <prvPortStartFirstTask+0x24>)
 800e67a:	6800      	ldr	r0, [r0, #0]
 800e67c:	6800      	ldr	r0, [r0, #0]
 800e67e:	f380 8808 	msr	MSP, r0
 800e682:	f04f 0000 	mov.w	r0, #0
 800e686:	f380 8814 	msr	CONTROL, r0
 800e68a:	b662      	cpsie	i
 800e68c:	b661      	cpsie	f
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	df00      	svc	0
 800e698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e69a:	bf00      	nop
 800e69c:	e000ed08 	.word	0xe000ed08

0800e6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6a6:	4b46      	ldr	r3, [pc, #280]	; (800e7c0 <xPortStartScheduler+0x120>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a46      	ldr	r2, [pc, #280]	; (800e7c4 <xPortStartScheduler+0x124>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d10a      	bne.n	800e6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	613b      	str	r3, [r7, #16]
}
 800e6c2:	bf00      	nop
 800e6c4:	e7fe      	b.n	800e6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6c6:	4b3e      	ldr	r3, [pc, #248]	; (800e7c0 <xPortStartScheduler+0x120>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a3f      	ldr	r2, [pc, #252]	; (800e7c8 <xPortStartScheduler+0x128>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d10a      	bne.n	800e6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	60fb      	str	r3, [r7, #12]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6e6:	4b39      	ldr	r3, [pc, #228]	; (800e7cc <xPortStartScheduler+0x12c>)
 800e6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	22ff      	movs	r2, #255	; 0xff
 800e6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	b2db      	uxtb	r3, r3
 800e704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	4b31      	ldr	r3, [pc, #196]	; (800e7d0 <xPortStartScheduler+0x130>)
 800e70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e70e:	4b31      	ldr	r3, [pc, #196]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e710:	2207      	movs	r2, #7
 800e712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e714:	e009      	b.n	800e72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e716:	4b2f      	ldr	r3, [pc, #188]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3b01      	subs	r3, #1
 800e71c:	4a2d      	ldr	r2, [pc, #180]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e720:	78fb      	ldrb	r3, [r7, #3]
 800e722:	b2db      	uxtb	r3, r3
 800e724:	005b      	lsls	r3, r3, #1
 800e726:	b2db      	uxtb	r3, r3
 800e728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e72a:	78fb      	ldrb	r3, [r7, #3]
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e732:	2b80      	cmp	r3, #128	; 0x80
 800e734:	d0ef      	beq.n	800e716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e736:	4b27      	ldr	r3, [pc, #156]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f1c3 0307 	rsb	r3, r3, #7
 800e73e:	2b04      	cmp	r3, #4
 800e740:	d00a      	beq.n	800e758 <xPortStartScheduler+0xb8>
	__asm volatile
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	f383 8811 	msr	BASEPRI, r3
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	60bb      	str	r3, [r7, #8]
}
 800e754:	bf00      	nop
 800e756:	e7fe      	b.n	800e756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e758:	4b1e      	ldr	r3, [pc, #120]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	021b      	lsls	r3, r3, #8
 800e75e:	4a1d      	ldr	r2, [pc, #116]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e762:	4b1c      	ldr	r3, [pc, #112]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e76a:	4a1a      	ldr	r2, [pc, #104]	; (800e7d4 <xPortStartScheduler+0x134>)
 800e76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	b2da      	uxtb	r2, r3
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e776:	4b18      	ldr	r3, [pc, #96]	; (800e7d8 <xPortStartScheduler+0x138>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a17      	ldr	r2, [pc, #92]	; (800e7d8 <xPortStartScheduler+0x138>)
 800e77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <xPortStartScheduler+0x138>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a14      	ldr	r2, [pc, #80]	; (800e7d8 <xPortStartScheduler+0x138>)
 800e788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e78e:	f000 f8dd 	bl	800e94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e792:	4b12      	ldr	r3, [pc, #72]	; (800e7dc <xPortStartScheduler+0x13c>)
 800e794:	2200      	movs	r2, #0
 800e796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e798:	f000 f8fc 	bl	800e994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e79c:	4b10      	ldr	r3, [pc, #64]	; (800e7e0 <xPortStartScheduler+0x140>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a0f      	ldr	r2, [pc, #60]	; (800e7e0 <xPortStartScheduler+0x140>)
 800e7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7a8:	f7ff ff66 	bl	800e678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7ac:	f7ff fa84 	bl	800dcb8 <vTaskSwitchContext>
	prvTaskExitError();
 800e7b0:	f7ff ff1e 	bl	800e5f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3718      	adds	r7, #24
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	e000ed00 	.word	0xe000ed00
 800e7c4:	410fc271 	.word	0x410fc271
 800e7c8:	410fc270 	.word	0x410fc270
 800e7cc:	e000e400 	.word	0xe000e400
 800e7d0:	20003620 	.word	0x20003620
 800e7d4:	20003624 	.word	0x20003624
 800e7d8:	e000ed20 	.word	0xe000ed20
 800e7dc:	200000a8 	.word	0x200000a8
 800e7e0:	e000ef34 	.word	0xe000ef34

0800e7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	607b      	str	r3, [r7, #4]
}
 800e7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e7fe:	4b0f      	ldr	r3, [pc, #60]	; (800e83c <vPortEnterCritical+0x58>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3301      	adds	r3, #1
 800e804:	4a0d      	ldr	r2, [pc, #52]	; (800e83c <vPortEnterCritical+0x58>)
 800e806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e808:	4b0c      	ldr	r3, [pc, #48]	; (800e83c <vPortEnterCritical+0x58>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d10f      	bne.n	800e830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e810:	4b0b      	ldr	r3, [pc, #44]	; (800e840 <vPortEnterCritical+0x5c>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00a      	beq.n	800e830 <vPortEnterCritical+0x4c>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	603b      	str	r3, [r7, #0]
}
 800e82c:	bf00      	nop
 800e82e:	e7fe      	b.n	800e82e <vPortEnterCritical+0x4a>
	}
}
 800e830:	bf00      	nop
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr
 800e83c:	200000a8 	.word	0x200000a8
 800e840:	e000ed04 	.word	0xe000ed04

0800e844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e84a:	4b12      	ldr	r3, [pc, #72]	; (800e894 <vPortExitCritical+0x50>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10a      	bne.n	800e868 <vPortExitCritical+0x24>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	607b      	str	r3, [r7, #4]
}
 800e864:	bf00      	nop
 800e866:	e7fe      	b.n	800e866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e868:	4b0a      	ldr	r3, [pc, #40]	; (800e894 <vPortExitCritical+0x50>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3b01      	subs	r3, #1
 800e86e:	4a09      	ldr	r2, [pc, #36]	; (800e894 <vPortExitCritical+0x50>)
 800e870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e872:	4b08      	ldr	r3, [pc, #32]	; (800e894 <vPortExitCritical+0x50>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d105      	bne.n	800e886 <vPortExitCritical+0x42>
 800e87a:	2300      	movs	r3, #0
 800e87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	f383 8811 	msr	BASEPRI, r3
}
 800e884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e886:	bf00      	nop
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	200000a8 	.word	0x200000a8
	...

0800e8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8a0:	f3ef 8009 	mrs	r0, PSP
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	4b15      	ldr	r3, [pc, #84]	; (800e900 <pxCurrentTCBConst>)
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	f01e 0f10 	tst.w	lr, #16
 800e8b0:	bf08      	it	eq
 800e8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ba:	6010      	str	r0, [r2, #0]
 800e8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e8c4:	f380 8811 	msr	BASEPRI, r0
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f7ff f9f2 	bl	800dcb8 <vTaskSwitchContext>
 800e8d4:	f04f 0000 	mov.w	r0, #0
 800e8d8:	f380 8811 	msr	BASEPRI, r0
 800e8dc:	bc09      	pop	{r0, r3}
 800e8de:	6819      	ldr	r1, [r3, #0]
 800e8e0:	6808      	ldr	r0, [r1, #0]
 800e8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e6:	f01e 0f10 	tst.w	lr, #16
 800e8ea:	bf08      	it	eq
 800e8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e8f0:	f380 8809 	msr	PSP, r0
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	f3af 8000 	nop.w

0800e900 <pxCurrentTCBConst>:
 800e900:	200034f4 	.word	0x200034f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop

0800e908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	607b      	str	r3, [r7, #4]
}
 800e920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e922:	f7ff f911 	bl	800db48 <xTaskIncrementTick>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d003      	beq.n	800e934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e92c:	4b06      	ldr	r3, [pc, #24]	; (800e948 <SysTick_Handler+0x40>)
 800e92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	2300      	movs	r3, #0
 800e936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	f383 8811 	msr	BASEPRI, r3
}
 800e93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	e000ed04 	.word	0xe000ed04

0800e94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <vPortSetupTimerInterrupt+0x34>)
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e956:	4b0b      	ldr	r3, [pc, #44]	; (800e984 <vPortSetupTimerInterrupt+0x38>)
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e95c:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <vPortSetupTimerInterrupt+0x3c>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a0a      	ldr	r2, [pc, #40]	; (800e98c <vPortSetupTimerInterrupt+0x40>)
 800e962:	fba2 2303 	umull	r2, r3, r2, r3
 800e966:	099b      	lsrs	r3, r3, #6
 800e968:	4a09      	ldr	r2, [pc, #36]	; (800e990 <vPortSetupTimerInterrupt+0x44>)
 800e96a:	3b01      	subs	r3, #1
 800e96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e96e:	4b04      	ldr	r3, [pc, #16]	; (800e980 <vPortSetupTimerInterrupt+0x34>)
 800e970:	2207      	movs	r2, #7
 800e972:	601a      	str	r2, [r3, #0]
}
 800e974:	bf00      	nop
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	e000e010 	.word	0xe000e010
 800e984:	e000e018 	.word	0xe000e018
 800e988:	20000088 	.word	0x20000088
 800e98c:	10624dd3 	.word	0x10624dd3
 800e990:	e000e014 	.word	0xe000e014

0800e994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e9a4 <vPortEnableVFP+0x10>
 800e998:	6801      	ldr	r1, [r0, #0]
 800e99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e99e:	6001      	str	r1, [r0, #0]
 800e9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9a2:	bf00      	nop
 800e9a4:	e000ed88 	.word	0xe000ed88

0800e9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9ae:	f3ef 8305 	mrs	r3, IPSR
 800e9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b0f      	cmp	r3, #15
 800e9b8:	d914      	bls.n	800e9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9ba:	4a17      	ldr	r2, [pc, #92]	; (800ea18 <vPortValidateInterruptPriority+0x70>)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4413      	add	r3, r2
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9c4:	4b15      	ldr	r3, [pc, #84]	; (800ea1c <vPortValidateInterruptPriority+0x74>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	7afa      	ldrb	r2, [r7, #11]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d20a      	bcs.n	800e9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	607b      	str	r3, [r7, #4]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ea20 <vPortValidateInterruptPriority+0x78>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <vPortValidateInterruptPriority+0x7c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d90a      	bls.n	800ea0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	603b      	str	r3, [r7, #0]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <vPortValidateInterruptPriority+0x60>
	}
 800ea0a:	bf00      	nop
 800ea0c:	3714      	adds	r7, #20
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	e000e3f0 	.word	0xe000e3f0
 800ea1c:	20003620 	.word	0x20003620
 800ea20:	e000ed0c 	.word	0xe000ed0c
 800ea24:	20003624 	.word	0x20003624

0800ea28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b08a      	sub	sp, #40	; 0x28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea30:	2300      	movs	r3, #0
 800ea32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea34:	f7fe ffde 	bl	800d9f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea38:	4b5b      	ldr	r3, [pc, #364]	; (800eba8 <pvPortMalloc+0x180>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea40:	f000 f920 	bl	800ec84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea44:	4b59      	ldr	r3, [pc, #356]	; (800ebac <pvPortMalloc+0x184>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f040 8093 	bne.w	800eb78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d01d      	beq.n	800ea94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ea58:	2208      	movs	r2, #8
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f003 0307 	and.w	r3, r3, #7
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d014      	beq.n	800ea94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f023 0307 	bic.w	r3, r3, #7
 800ea70:	3308      	adds	r3, #8
 800ea72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00a      	beq.n	800ea94 <pvPortMalloc+0x6c>
	__asm volatile
 800ea7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea82:	f383 8811 	msr	BASEPRI, r3
 800ea86:	f3bf 8f6f 	isb	sy
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	617b      	str	r3, [r7, #20]
}
 800ea90:	bf00      	nop
 800ea92:	e7fe      	b.n	800ea92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d06e      	beq.n	800eb78 <pvPortMalloc+0x150>
 800ea9a:	4b45      	ldr	r3, [pc, #276]	; (800ebb0 <pvPortMalloc+0x188>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d869      	bhi.n	800eb78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eaa4:	4b43      	ldr	r3, [pc, #268]	; (800ebb4 <pvPortMalloc+0x18c>)
 800eaa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eaa8:	4b42      	ldr	r3, [pc, #264]	; (800ebb4 <pvPortMalloc+0x18c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eaae:	e004      	b.n	800eaba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d903      	bls.n	800eacc <pvPortMalloc+0xa4>
 800eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1f1      	bne.n	800eab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eacc:	4b36      	ldr	r3, [pc, #216]	; (800eba8 <pvPortMalloc+0x180>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d050      	beq.n	800eb78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ead6:	6a3b      	ldr	r3, [r7, #32]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2208      	movs	r2, #8
 800eadc:	4413      	add	r3, r2
 800eade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	2308      	movs	r3, #8
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d91f      	bls.n	800eb38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4413      	add	r3, r2
 800eafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	f003 0307 	and.w	r3, r3, #7
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00a      	beq.n	800eb20 <pvPortMalloc+0xf8>
	__asm volatile
 800eb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	613b      	str	r3, [r7, #16]
}
 800eb1c:	bf00      	nop
 800eb1e:	e7fe      	b.n	800eb1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	1ad2      	subs	r2, r2, r3
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb32:	69b8      	ldr	r0, [r7, #24]
 800eb34:	f000 f908 	bl	800ed48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb38:	4b1d      	ldr	r3, [pc, #116]	; (800ebb0 <pvPortMalloc+0x188>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	4a1b      	ldr	r2, [pc, #108]	; (800ebb0 <pvPortMalloc+0x188>)
 800eb44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb46:	4b1a      	ldr	r3, [pc, #104]	; (800ebb0 <pvPortMalloc+0x188>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	4b1b      	ldr	r3, [pc, #108]	; (800ebb8 <pvPortMalloc+0x190>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d203      	bcs.n	800eb5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb52:	4b17      	ldr	r3, [pc, #92]	; (800ebb0 <pvPortMalloc+0x188>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a18      	ldr	r2, [pc, #96]	; (800ebb8 <pvPortMalloc+0x190>)
 800eb58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <pvPortMalloc+0x184>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	431a      	orrs	r2, r3
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb6e:	4b13      	ldr	r3, [pc, #76]	; (800ebbc <pvPortMalloc+0x194>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	3301      	adds	r3, #1
 800eb74:	4a11      	ldr	r2, [pc, #68]	; (800ebbc <pvPortMalloc+0x194>)
 800eb76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb78:	f7fe ff4a 	bl	800da10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	f003 0307 	and.w	r3, r3, #7
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <pvPortMalloc+0x174>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	60fb      	str	r3, [r7, #12]
}
 800eb98:	bf00      	nop
 800eb9a:	e7fe      	b.n	800eb9a <pvPortMalloc+0x172>
	return pvReturn;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3728      	adds	r7, #40	; 0x28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20007230 	.word	0x20007230
 800ebac:	20007244 	.word	0x20007244
 800ebb0:	20007234 	.word	0x20007234
 800ebb4:	20007228 	.word	0x20007228
 800ebb8:	20007238 	.word	0x20007238
 800ebbc:	2000723c 	.word	0x2000723c

0800ebc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d04d      	beq.n	800ec6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ebd2:	2308      	movs	r3, #8
 800ebd4:	425b      	negs	r3, r3
 800ebd6:	697a      	ldr	r2, [r7, #20]
 800ebd8:	4413      	add	r3, r2
 800ebda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <vPortFree+0xb8>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4013      	ands	r3, r2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10a      	bne.n	800ec04 <vPortFree+0x44>
	__asm volatile
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	60fb      	str	r3, [r7, #12]
}
 800ec00:	bf00      	nop
 800ec02:	e7fe      	b.n	800ec02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <vPortFree+0x62>
	__asm volatile
 800ec0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec10:	f383 8811 	msr	BASEPRI, r3
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	60bb      	str	r3, [r7, #8]
}
 800ec1e:	bf00      	nop
 800ec20:	e7fe      	b.n	800ec20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	4b14      	ldr	r3, [pc, #80]	; (800ec78 <vPortFree+0xb8>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4013      	ands	r3, r2
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d01e      	beq.n	800ec6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d11a      	bne.n	800ec6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <vPortFree+0xb8>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	43db      	mvns	r3, r3
 800ec42:	401a      	ands	r2, r3
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec48:	f7fe fed4 	bl	800d9f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <vPortFree+0xbc>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4413      	add	r3, r2
 800ec56:	4a09      	ldr	r2, [pc, #36]	; (800ec7c <vPortFree+0xbc>)
 800ec58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec5a:	6938      	ldr	r0, [r7, #16]
 800ec5c:	f000 f874 	bl	800ed48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec60:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <vPortFree+0xc0>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	3301      	adds	r3, #1
 800ec66:	4a06      	ldr	r2, [pc, #24]	; (800ec80 <vPortFree+0xc0>)
 800ec68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec6a:	f7fe fed1 	bl	800da10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec6e:	bf00      	nop
 800ec70:	3718      	adds	r7, #24
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20007244 	.word	0x20007244
 800ec7c:	20007234 	.word	0x20007234
 800ec80:	20007240 	.word	0x20007240

0800ec84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ec8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec90:	4b27      	ldr	r3, [pc, #156]	; (800ed30 <prvHeapInit+0xac>)
 800ec92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f003 0307 	and.w	r3, r3, #7
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00c      	beq.n	800ecb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3307      	adds	r3, #7
 800eca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f023 0307 	bic.w	r3, r3, #7
 800ecaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	4a1f      	ldr	r2, [pc, #124]	; (800ed30 <prvHeapInit+0xac>)
 800ecb4:	4413      	add	r3, r2
 800ecb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecbc:	4a1d      	ldr	r2, [pc, #116]	; (800ed34 <prvHeapInit+0xb0>)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ecc2:	4b1c      	ldr	r3, [pc, #112]	; (800ed34 <prvHeapInit+0xb0>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	4413      	add	r3, r2
 800ecce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ecd0:	2208      	movs	r2, #8
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	1a9b      	subs	r3, r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f023 0307 	bic.w	r3, r3, #7
 800ecde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	4a15      	ldr	r2, [pc, #84]	; (800ed38 <prvHeapInit+0xb4>)
 800ece4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ece6:	4b14      	ldr	r3, [pc, #80]	; (800ed38 <prvHeapInit+0xb4>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2200      	movs	r2, #0
 800ecec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ecee:	4b12      	ldr	r3, [pc, #72]	; (800ed38 <prvHeapInit+0xb4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	1ad2      	subs	r2, r2, r3
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed04:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <prvHeapInit+0xb4>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	4a0a      	ldr	r2, [pc, #40]	; (800ed3c <prvHeapInit+0xb8>)
 800ed12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	4a09      	ldr	r2, [pc, #36]	; (800ed40 <prvHeapInit+0xbc>)
 800ed1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <prvHeapInit+0xc0>)
 800ed1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ed22:	601a      	str	r2, [r3, #0]
}
 800ed24:	bf00      	nop
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	20003628 	.word	0x20003628
 800ed34:	20007228 	.word	0x20007228
 800ed38:	20007230 	.word	0x20007230
 800ed3c:	20007238 	.word	0x20007238
 800ed40:	20007234 	.word	0x20007234
 800ed44:	20007244 	.word	0x20007244

0800ed48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b085      	sub	sp, #20
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed50:	4b28      	ldr	r3, [pc, #160]	; (800edf4 <prvInsertBlockIntoFreeList+0xac>)
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	e002      	b.n	800ed5c <prvInsertBlockIntoFreeList+0x14>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d8f7      	bhi.n	800ed56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	4413      	add	r3, r2
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d108      	bne.n	800ed8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	441a      	add	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	441a      	add	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d118      	bne.n	800edd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	4b15      	ldr	r3, [pc, #84]	; (800edf8 <prvInsertBlockIntoFreeList+0xb0>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d00d      	beq.n	800edc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	685a      	ldr	r2, [r3, #4]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	441a      	add	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	e008      	b.n	800edd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800edc6:	4b0c      	ldr	r3, [pc, #48]	; (800edf8 <prvInsertBlockIntoFreeList+0xb0>)
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	601a      	str	r2, [r3, #0]
 800edce:	e003      	b.n	800edd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d002      	beq.n	800ede6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ede6:	bf00      	nop
 800ede8:	3714      	adds	r7, #20
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	20007228 	.word	0x20007228
 800edf8:	20007230 	.word	0x20007230

0800edfc <__errno>:
 800edfc:	4b01      	ldr	r3, [pc, #4]	; (800ee04 <__errno+0x8>)
 800edfe:	6818      	ldr	r0, [r3, #0]
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	200000ac 	.word	0x200000ac

0800ee08 <__libc_init_array>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	4d0d      	ldr	r5, [pc, #52]	; (800ee40 <__libc_init_array+0x38>)
 800ee0c:	4c0d      	ldr	r4, [pc, #52]	; (800ee44 <__libc_init_array+0x3c>)
 800ee0e:	1b64      	subs	r4, r4, r5
 800ee10:	10a4      	asrs	r4, r4, #2
 800ee12:	2600      	movs	r6, #0
 800ee14:	42a6      	cmp	r6, r4
 800ee16:	d109      	bne.n	800ee2c <__libc_init_array+0x24>
 800ee18:	4d0b      	ldr	r5, [pc, #44]	; (800ee48 <__libc_init_array+0x40>)
 800ee1a:	4c0c      	ldr	r4, [pc, #48]	; (800ee4c <__libc_init_array+0x44>)
 800ee1c:	f000 fcf8 	bl	800f810 <_init>
 800ee20:	1b64      	subs	r4, r4, r5
 800ee22:	10a4      	asrs	r4, r4, #2
 800ee24:	2600      	movs	r6, #0
 800ee26:	42a6      	cmp	r6, r4
 800ee28:	d105      	bne.n	800ee36 <__libc_init_array+0x2e>
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee30:	4798      	blx	r3
 800ee32:	3601      	adds	r6, #1
 800ee34:	e7ee      	b.n	800ee14 <__libc_init_array+0xc>
 800ee36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee3a:	4798      	blx	r3
 800ee3c:	3601      	adds	r6, #1
 800ee3e:	e7f2      	b.n	800ee26 <__libc_init_array+0x1e>
 800ee40:	0800fb08 	.word	0x0800fb08
 800ee44:	0800fb08 	.word	0x0800fb08
 800ee48:	0800fb08 	.word	0x0800fb08
 800ee4c:	0800fb0c 	.word	0x0800fb0c

0800ee50 <__retarget_lock_acquire_recursive>:
 800ee50:	4770      	bx	lr

0800ee52 <__retarget_lock_release_recursive>:
 800ee52:	4770      	bx	lr

0800ee54 <memcpy>:
 800ee54:	440a      	add	r2, r1
 800ee56:	4291      	cmp	r1, r2
 800ee58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee5c:	d100      	bne.n	800ee60 <memcpy+0xc>
 800ee5e:	4770      	bx	lr
 800ee60:	b510      	push	{r4, lr}
 800ee62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee6a:	4291      	cmp	r1, r2
 800ee6c:	d1f9      	bne.n	800ee62 <memcpy+0xe>
 800ee6e:	bd10      	pop	{r4, pc}

0800ee70 <memset>:
 800ee70:	4402      	add	r2, r0
 800ee72:	4603      	mov	r3, r0
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d100      	bne.n	800ee7a <memset+0xa>
 800ee78:	4770      	bx	lr
 800ee7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee7e:	e7f9      	b.n	800ee74 <memset+0x4>

0800ee80 <sbrk_aligned>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4e0e      	ldr	r6, [pc, #56]	; (800eebc <sbrk_aligned+0x3c>)
 800ee84:	460c      	mov	r4, r1
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	4605      	mov	r5, r0
 800ee8a:	b911      	cbnz	r1, 800ee92 <sbrk_aligned+0x12>
 800ee8c:	f000 f8f6 	bl	800f07c <_sbrk_r>
 800ee90:	6030      	str	r0, [r6, #0]
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f8f1 	bl	800f07c <_sbrk_r>
 800ee9a:	1c43      	adds	r3, r0, #1
 800ee9c:	d00a      	beq.n	800eeb4 <sbrk_aligned+0x34>
 800ee9e:	1cc4      	adds	r4, r0, #3
 800eea0:	f024 0403 	bic.w	r4, r4, #3
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d007      	beq.n	800eeb8 <sbrk_aligned+0x38>
 800eea8:	1a21      	subs	r1, r4, r0
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f000 f8e6 	bl	800f07c <_sbrk_r>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d101      	bne.n	800eeb8 <sbrk_aligned+0x38>
 800eeb4:	f04f 34ff 	mov.w	r4, #4294967295
 800eeb8:	4620      	mov	r0, r4
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	20007250 	.word	0x20007250

0800eec0 <_malloc_r>:
 800eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec4:	1ccd      	adds	r5, r1, #3
 800eec6:	f025 0503 	bic.w	r5, r5, #3
 800eeca:	3508      	adds	r5, #8
 800eecc:	2d0c      	cmp	r5, #12
 800eece:	bf38      	it	cc
 800eed0:	250c      	movcc	r5, #12
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	4607      	mov	r7, r0
 800eed6:	db01      	blt.n	800eedc <_malloc_r+0x1c>
 800eed8:	42a9      	cmp	r1, r5
 800eeda:	d905      	bls.n	800eee8 <_malloc_r+0x28>
 800eedc:	230c      	movs	r3, #12
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	2600      	movs	r6, #0
 800eee2:	4630      	mov	r0, r6
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	4e2e      	ldr	r6, [pc, #184]	; (800efa4 <_malloc_r+0xe4>)
 800eeea:	f000 f8f7 	bl	800f0dc <__malloc_lock>
 800eeee:	6833      	ldr	r3, [r6, #0]
 800eef0:	461c      	mov	r4, r3
 800eef2:	bb34      	cbnz	r4, 800ef42 <_malloc_r+0x82>
 800eef4:	4629      	mov	r1, r5
 800eef6:	4638      	mov	r0, r7
 800eef8:	f7ff ffc2 	bl	800ee80 <sbrk_aligned>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	4604      	mov	r4, r0
 800ef00:	d14d      	bne.n	800ef9e <_malloc_r+0xde>
 800ef02:	6834      	ldr	r4, [r6, #0]
 800ef04:	4626      	mov	r6, r4
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d140      	bne.n	800ef8c <_malloc_r+0xcc>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4638      	mov	r0, r7
 800ef10:	eb04 0803 	add.w	r8, r4, r3
 800ef14:	f000 f8b2 	bl	800f07c <_sbrk_r>
 800ef18:	4580      	cmp	r8, r0
 800ef1a:	d13a      	bne.n	800ef92 <_malloc_r+0xd2>
 800ef1c:	6821      	ldr	r1, [r4, #0]
 800ef1e:	3503      	adds	r5, #3
 800ef20:	1a6d      	subs	r5, r5, r1
 800ef22:	f025 0503 	bic.w	r5, r5, #3
 800ef26:	3508      	adds	r5, #8
 800ef28:	2d0c      	cmp	r5, #12
 800ef2a:	bf38      	it	cc
 800ef2c:	250c      	movcc	r5, #12
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4638      	mov	r0, r7
 800ef32:	f7ff ffa5 	bl	800ee80 <sbrk_aligned>
 800ef36:	3001      	adds	r0, #1
 800ef38:	d02b      	beq.n	800ef92 <_malloc_r+0xd2>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	442b      	add	r3, r5
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	e00e      	b.n	800ef60 <_malloc_r+0xa0>
 800ef42:	6822      	ldr	r2, [r4, #0]
 800ef44:	1b52      	subs	r2, r2, r5
 800ef46:	d41e      	bmi.n	800ef86 <_malloc_r+0xc6>
 800ef48:	2a0b      	cmp	r2, #11
 800ef4a:	d916      	bls.n	800ef7a <_malloc_r+0xba>
 800ef4c:	1961      	adds	r1, r4, r5
 800ef4e:	42a3      	cmp	r3, r4
 800ef50:	6025      	str	r5, [r4, #0]
 800ef52:	bf18      	it	ne
 800ef54:	6059      	strne	r1, [r3, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	bf08      	it	eq
 800ef5a:	6031      	streq	r1, [r6, #0]
 800ef5c:	5162      	str	r2, [r4, r5]
 800ef5e:	604b      	str	r3, [r1, #4]
 800ef60:	4638      	mov	r0, r7
 800ef62:	f104 060b 	add.w	r6, r4, #11
 800ef66:	f000 f8bf 	bl	800f0e8 <__malloc_unlock>
 800ef6a:	f026 0607 	bic.w	r6, r6, #7
 800ef6e:	1d23      	adds	r3, r4, #4
 800ef70:	1af2      	subs	r2, r6, r3
 800ef72:	d0b6      	beq.n	800eee2 <_malloc_r+0x22>
 800ef74:	1b9b      	subs	r3, r3, r6
 800ef76:	50a3      	str	r3, [r4, r2]
 800ef78:	e7b3      	b.n	800eee2 <_malloc_r+0x22>
 800ef7a:	6862      	ldr	r2, [r4, #4]
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	bf0c      	ite	eq
 800ef80:	6032      	streq	r2, [r6, #0]
 800ef82:	605a      	strne	r2, [r3, #4]
 800ef84:	e7ec      	b.n	800ef60 <_malloc_r+0xa0>
 800ef86:	4623      	mov	r3, r4
 800ef88:	6864      	ldr	r4, [r4, #4]
 800ef8a:	e7b2      	b.n	800eef2 <_malloc_r+0x32>
 800ef8c:	4634      	mov	r4, r6
 800ef8e:	6876      	ldr	r6, [r6, #4]
 800ef90:	e7b9      	b.n	800ef06 <_malloc_r+0x46>
 800ef92:	230c      	movs	r3, #12
 800ef94:	603b      	str	r3, [r7, #0]
 800ef96:	4638      	mov	r0, r7
 800ef98:	f000 f8a6 	bl	800f0e8 <__malloc_unlock>
 800ef9c:	e7a1      	b.n	800eee2 <_malloc_r+0x22>
 800ef9e:	6025      	str	r5, [r4, #0]
 800efa0:	e7de      	b.n	800ef60 <_malloc_r+0xa0>
 800efa2:	bf00      	nop
 800efa4:	2000724c 	.word	0x2000724c

0800efa8 <cleanup_glue>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	460c      	mov	r4, r1
 800efac:	6809      	ldr	r1, [r1, #0]
 800efae:	4605      	mov	r5, r0
 800efb0:	b109      	cbz	r1, 800efb6 <cleanup_glue+0xe>
 800efb2:	f7ff fff9 	bl	800efa8 <cleanup_glue>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4628      	mov	r0, r5
 800efba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efbe:	f000 b899 	b.w	800f0f4 <_free_r>
	...

0800efc4 <_reclaim_reent>:
 800efc4:	4b2c      	ldr	r3, [pc, #176]	; (800f078 <_reclaim_reent+0xb4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4283      	cmp	r3, r0
 800efca:	b570      	push	{r4, r5, r6, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	d051      	beq.n	800f074 <_reclaim_reent+0xb0>
 800efd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efd2:	b143      	cbz	r3, 800efe6 <_reclaim_reent+0x22>
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d14a      	bne.n	800f070 <_reclaim_reent+0xac>
 800efda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efdc:	6819      	ldr	r1, [r3, #0]
 800efde:	b111      	cbz	r1, 800efe6 <_reclaim_reent+0x22>
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 f887 	bl	800f0f4 <_free_r>
 800efe6:	6961      	ldr	r1, [r4, #20]
 800efe8:	b111      	cbz	r1, 800eff0 <_reclaim_reent+0x2c>
 800efea:	4620      	mov	r0, r4
 800efec:	f000 f882 	bl	800f0f4 <_free_r>
 800eff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eff2:	b111      	cbz	r1, 800effa <_reclaim_reent+0x36>
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 f87d 	bl	800f0f4 <_free_r>
 800effa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800effc:	b111      	cbz	r1, 800f004 <_reclaim_reent+0x40>
 800effe:	4620      	mov	r0, r4
 800f000:	f000 f878 	bl	800f0f4 <_free_r>
 800f004:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f006:	b111      	cbz	r1, 800f00e <_reclaim_reent+0x4a>
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f873 	bl	800f0f4 <_free_r>
 800f00e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f010:	b111      	cbz	r1, 800f018 <_reclaim_reent+0x54>
 800f012:	4620      	mov	r0, r4
 800f014:	f000 f86e 	bl	800f0f4 <_free_r>
 800f018:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f01a:	b111      	cbz	r1, 800f022 <_reclaim_reent+0x5e>
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 f869 	bl	800f0f4 <_free_r>
 800f022:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f024:	b111      	cbz	r1, 800f02c <_reclaim_reent+0x68>
 800f026:	4620      	mov	r0, r4
 800f028:	f000 f864 	bl	800f0f4 <_free_r>
 800f02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f02e:	b111      	cbz	r1, 800f036 <_reclaim_reent+0x72>
 800f030:	4620      	mov	r0, r4
 800f032:	f000 f85f 	bl	800f0f4 <_free_r>
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	b1e3      	cbz	r3, 800f074 <_reclaim_reent+0xb0>
 800f03a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f03c:	4620      	mov	r0, r4
 800f03e:	4798      	blx	r3
 800f040:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f042:	b1b9      	cbz	r1, 800f074 <_reclaim_reent+0xb0>
 800f044:	4620      	mov	r0, r4
 800f046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f04a:	f7ff bfad 	b.w	800efa8 <cleanup_glue>
 800f04e:	5949      	ldr	r1, [r1, r5]
 800f050:	b941      	cbnz	r1, 800f064 <_reclaim_reent+0xa0>
 800f052:	3504      	adds	r5, #4
 800f054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f056:	2d80      	cmp	r5, #128	; 0x80
 800f058:	68d9      	ldr	r1, [r3, #12]
 800f05a:	d1f8      	bne.n	800f04e <_reclaim_reent+0x8a>
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 f849 	bl	800f0f4 <_free_r>
 800f062:	e7ba      	b.n	800efda <_reclaim_reent+0x16>
 800f064:	680e      	ldr	r6, [r1, #0]
 800f066:	4620      	mov	r0, r4
 800f068:	f000 f844 	bl	800f0f4 <_free_r>
 800f06c:	4631      	mov	r1, r6
 800f06e:	e7ef      	b.n	800f050 <_reclaim_reent+0x8c>
 800f070:	2500      	movs	r5, #0
 800f072:	e7ef      	b.n	800f054 <_reclaim_reent+0x90>
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	bf00      	nop
 800f078:	200000ac 	.word	0x200000ac

0800f07c <_sbrk_r>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4d06      	ldr	r5, [pc, #24]	; (800f098 <_sbrk_r+0x1c>)
 800f080:	2300      	movs	r3, #0
 800f082:	4604      	mov	r4, r0
 800f084:	4608      	mov	r0, r1
 800f086:	602b      	str	r3, [r5, #0]
 800f088:	f7f4 f91c 	bl	80032c4 <_sbrk>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d102      	bne.n	800f096 <_sbrk_r+0x1a>
 800f090:	682b      	ldr	r3, [r5, #0]
 800f092:	b103      	cbz	r3, 800f096 <_sbrk_r+0x1a>
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	bd38      	pop	{r3, r4, r5, pc}
 800f098:	20007254 	.word	0x20007254

0800f09c <siprintf>:
 800f09c:	b40e      	push	{r1, r2, r3}
 800f09e:	b500      	push	{lr}
 800f0a0:	b09c      	sub	sp, #112	; 0x70
 800f0a2:	ab1d      	add	r3, sp, #116	; 0x74
 800f0a4:	9002      	str	r0, [sp, #8]
 800f0a6:	9006      	str	r0, [sp, #24]
 800f0a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0ac:	4809      	ldr	r0, [pc, #36]	; (800f0d4 <siprintf+0x38>)
 800f0ae:	9107      	str	r1, [sp, #28]
 800f0b0:	9104      	str	r1, [sp, #16]
 800f0b2:	4909      	ldr	r1, [pc, #36]	; (800f0d8 <siprintf+0x3c>)
 800f0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0b8:	9105      	str	r1, [sp, #20]
 800f0ba:	6800      	ldr	r0, [r0, #0]
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	a902      	add	r1, sp, #8
 800f0c0:	f000 f8c0 	bl	800f244 <_svfiprintf_r>
 800f0c4:	9b02      	ldr	r3, [sp, #8]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	701a      	strb	r2, [r3, #0]
 800f0ca:	b01c      	add	sp, #112	; 0x70
 800f0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0d0:	b003      	add	sp, #12
 800f0d2:	4770      	bx	lr
 800f0d4:	200000ac 	.word	0x200000ac
 800f0d8:	ffff0208 	.word	0xffff0208

0800f0dc <__malloc_lock>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	; (800f0e4 <__malloc_lock+0x8>)
 800f0de:	f7ff beb7 	b.w	800ee50 <__retarget_lock_acquire_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	20007248 	.word	0x20007248

0800f0e8 <__malloc_unlock>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	; (800f0f0 <__malloc_unlock+0x8>)
 800f0ea:	f7ff beb2 	b.w	800ee52 <__retarget_lock_release_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	20007248 	.word	0x20007248

0800f0f4 <_free_r>:
 800f0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0f6:	2900      	cmp	r1, #0
 800f0f8:	d044      	beq.n	800f184 <_free_r+0x90>
 800f0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0fe:	9001      	str	r0, [sp, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	f1a1 0404 	sub.w	r4, r1, #4
 800f106:	bfb8      	it	lt
 800f108:	18e4      	addlt	r4, r4, r3
 800f10a:	f7ff ffe7 	bl	800f0dc <__malloc_lock>
 800f10e:	4a1e      	ldr	r2, [pc, #120]	; (800f188 <_free_r+0x94>)
 800f110:	9801      	ldr	r0, [sp, #4]
 800f112:	6813      	ldr	r3, [r2, #0]
 800f114:	b933      	cbnz	r3, 800f124 <_free_r+0x30>
 800f116:	6063      	str	r3, [r4, #4]
 800f118:	6014      	str	r4, [r2, #0]
 800f11a:	b003      	add	sp, #12
 800f11c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f120:	f7ff bfe2 	b.w	800f0e8 <__malloc_unlock>
 800f124:	42a3      	cmp	r3, r4
 800f126:	d908      	bls.n	800f13a <_free_r+0x46>
 800f128:	6825      	ldr	r5, [r4, #0]
 800f12a:	1961      	adds	r1, r4, r5
 800f12c:	428b      	cmp	r3, r1
 800f12e:	bf01      	itttt	eq
 800f130:	6819      	ldreq	r1, [r3, #0]
 800f132:	685b      	ldreq	r3, [r3, #4]
 800f134:	1949      	addeq	r1, r1, r5
 800f136:	6021      	streq	r1, [r4, #0]
 800f138:	e7ed      	b.n	800f116 <_free_r+0x22>
 800f13a:	461a      	mov	r2, r3
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	b10b      	cbz	r3, 800f144 <_free_r+0x50>
 800f140:	42a3      	cmp	r3, r4
 800f142:	d9fa      	bls.n	800f13a <_free_r+0x46>
 800f144:	6811      	ldr	r1, [r2, #0]
 800f146:	1855      	adds	r5, r2, r1
 800f148:	42a5      	cmp	r5, r4
 800f14a:	d10b      	bne.n	800f164 <_free_r+0x70>
 800f14c:	6824      	ldr	r4, [r4, #0]
 800f14e:	4421      	add	r1, r4
 800f150:	1854      	adds	r4, r2, r1
 800f152:	42a3      	cmp	r3, r4
 800f154:	6011      	str	r1, [r2, #0]
 800f156:	d1e0      	bne.n	800f11a <_free_r+0x26>
 800f158:	681c      	ldr	r4, [r3, #0]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	6053      	str	r3, [r2, #4]
 800f15e:	4421      	add	r1, r4
 800f160:	6011      	str	r1, [r2, #0]
 800f162:	e7da      	b.n	800f11a <_free_r+0x26>
 800f164:	d902      	bls.n	800f16c <_free_r+0x78>
 800f166:	230c      	movs	r3, #12
 800f168:	6003      	str	r3, [r0, #0]
 800f16a:	e7d6      	b.n	800f11a <_free_r+0x26>
 800f16c:	6825      	ldr	r5, [r4, #0]
 800f16e:	1961      	adds	r1, r4, r5
 800f170:	428b      	cmp	r3, r1
 800f172:	bf04      	itt	eq
 800f174:	6819      	ldreq	r1, [r3, #0]
 800f176:	685b      	ldreq	r3, [r3, #4]
 800f178:	6063      	str	r3, [r4, #4]
 800f17a:	bf04      	itt	eq
 800f17c:	1949      	addeq	r1, r1, r5
 800f17e:	6021      	streq	r1, [r4, #0]
 800f180:	6054      	str	r4, [r2, #4]
 800f182:	e7ca      	b.n	800f11a <_free_r+0x26>
 800f184:	b003      	add	sp, #12
 800f186:	bd30      	pop	{r4, r5, pc}
 800f188:	2000724c 	.word	0x2000724c

0800f18c <__ssputs_r>:
 800f18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f190:	688e      	ldr	r6, [r1, #8]
 800f192:	429e      	cmp	r6, r3
 800f194:	4682      	mov	sl, r0
 800f196:	460c      	mov	r4, r1
 800f198:	4690      	mov	r8, r2
 800f19a:	461f      	mov	r7, r3
 800f19c:	d838      	bhi.n	800f210 <__ssputs_r+0x84>
 800f19e:	898a      	ldrh	r2, [r1, #12]
 800f1a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1a4:	d032      	beq.n	800f20c <__ssputs_r+0x80>
 800f1a6:	6825      	ldr	r5, [r4, #0]
 800f1a8:	6909      	ldr	r1, [r1, #16]
 800f1aa:	eba5 0901 	sub.w	r9, r5, r1
 800f1ae:	6965      	ldr	r5, [r4, #20]
 800f1b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	444b      	add	r3, r9
 800f1bc:	106d      	asrs	r5, r5, #1
 800f1be:	429d      	cmp	r5, r3
 800f1c0:	bf38      	it	cc
 800f1c2:	461d      	movcc	r5, r3
 800f1c4:	0553      	lsls	r3, r2, #21
 800f1c6:	d531      	bpl.n	800f22c <__ssputs_r+0xa0>
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	f7ff fe79 	bl	800eec0 <_malloc_r>
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	b950      	cbnz	r0, 800f1e8 <__ssputs_r+0x5c>
 800f1d2:	230c      	movs	r3, #12
 800f1d4:	f8ca 3000 	str.w	r3, [sl]
 800f1d8:	89a3      	ldrh	r3, [r4, #12]
 800f1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e8:	6921      	ldr	r1, [r4, #16]
 800f1ea:	464a      	mov	r2, r9
 800f1ec:	f7ff fe32 	bl	800ee54 <memcpy>
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fa:	81a3      	strh	r3, [r4, #12]
 800f1fc:	6126      	str	r6, [r4, #16]
 800f1fe:	6165      	str	r5, [r4, #20]
 800f200:	444e      	add	r6, r9
 800f202:	eba5 0509 	sub.w	r5, r5, r9
 800f206:	6026      	str	r6, [r4, #0]
 800f208:	60a5      	str	r5, [r4, #8]
 800f20a:	463e      	mov	r6, r7
 800f20c:	42be      	cmp	r6, r7
 800f20e:	d900      	bls.n	800f212 <__ssputs_r+0x86>
 800f210:	463e      	mov	r6, r7
 800f212:	6820      	ldr	r0, [r4, #0]
 800f214:	4632      	mov	r2, r6
 800f216:	4641      	mov	r1, r8
 800f218:	f000 faa8 	bl	800f76c <memmove>
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	1b9b      	subs	r3, r3, r6
 800f220:	60a3      	str	r3, [r4, #8]
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	4433      	add	r3, r6
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	2000      	movs	r0, #0
 800f22a:	e7db      	b.n	800f1e4 <__ssputs_r+0x58>
 800f22c:	462a      	mov	r2, r5
 800f22e:	f000 fab7 	bl	800f7a0 <_realloc_r>
 800f232:	4606      	mov	r6, r0
 800f234:	2800      	cmp	r0, #0
 800f236:	d1e1      	bne.n	800f1fc <__ssputs_r+0x70>
 800f238:	6921      	ldr	r1, [r4, #16]
 800f23a:	4650      	mov	r0, sl
 800f23c:	f7ff ff5a 	bl	800f0f4 <_free_r>
 800f240:	e7c7      	b.n	800f1d2 <__ssputs_r+0x46>
	...

0800f244 <_svfiprintf_r>:
 800f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f248:	4698      	mov	r8, r3
 800f24a:	898b      	ldrh	r3, [r1, #12]
 800f24c:	061b      	lsls	r3, r3, #24
 800f24e:	b09d      	sub	sp, #116	; 0x74
 800f250:	4607      	mov	r7, r0
 800f252:	460d      	mov	r5, r1
 800f254:	4614      	mov	r4, r2
 800f256:	d50e      	bpl.n	800f276 <_svfiprintf_r+0x32>
 800f258:	690b      	ldr	r3, [r1, #16]
 800f25a:	b963      	cbnz	r3, 800f276 <_svfiprintf_r+0x32>
 800f25c:	2140      	movs	r1, #64	; 0x40
 800f25e:	f7ff fe2f 	bl	800eec0 <_malloc_r>
 800f262:	6028      	str	r0, [r5, #0]
 800f264:	6128      	str	r0, [r5, #16]
 800f266:	b920      	cbnz	r0, 800f272 <_svfiprintf_r+0x2e>
 800f268:	230c      	movs	r3, #12
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	e0d1      	b.n	800f416 <_svfiprintf_r+0x1d2>
 800f272:	2340      	movs	r3, #64	; 0x40
 800f274:	616b      	str	r3, [r5, #20]
 800f276:	2300      	movs	r3, #0
 800f278:	9309      	str	r3, [sp, #36]	; 0x24
 800f27a:	2320      	movs	r3, #32
 800f27c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f280:	f8cd 800c 	str.w	r8, [sp, #12]
 800f284:	2330      	movs	r3, #48	; 0x30
 800f286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f430 <_svfiprintf_r+0x1ec>
 800f28a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f28e:	f04f 0901 	mov.w	r9, #1
 800f292:	4623      	mov	r3, r4
 800f294:	469a      	mov	sl, r3
 800f296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f29a:	b10a      	cbz	r2, 800f2a0 <_svfiprintf_r+0x5c>
 800f29c:	2a25      	cmp	r2, #37	; 0x25
 800f29e:	d1f9      	bne.n	800f294 <_svfiprintf_r+0x50>
 800f2a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2a4:	d00b      	beq.n	800f2be <_svfiprintf_r+0x7a>
 800f2a6:	465b      	mov	r3, fp
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	4638      	mov	r0, r7
 800f2ae:	f7ff ff6d 	bl	800f18c <__ssputs_r>
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f000 80aa 	beq.w	800f40c <_svfiprintf_r+0x1c8>
 800f2b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2ba:	445a      	add	r2, fp
 800f2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f2be:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80a2 	beq.w	800f40c <_svfiprintf_r+0x1c8>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2d2:	f10a 0a01 	add.w	sl, sl, #1
 800f2d6:	9304      	str	r3, [sp, #16]
 800f2d8:	9307      	str	r3, [sp, #28]
 800f2da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2de:	931a      	str	r3, [sp, #104]	; 0x68
 800f2e0:	4654      	mov	r4, sl
 800f2e2:	2205      	movs	r2, #5
 800f2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e8:	4851      	ldr	r0, [pc, #324]	; (800f430 <_svfiprintf_r+0x1ec>)
 800f2ea:	f7f0 ff89 	bl	8000200 <memchr>
 800f2ee:	9a04      	ldr	r2, [sp, #16]
 800f2f0:	b9d8      	cbnz	r0, 800f32a <_svfiprintf_r+0xe6>
 800f2f2:	06d0      	lsls	r0, r2, #27
 800f2f4:	bf44      	itt	mi
 800f2f6:	2320      	movmi	r3, #32
 800f2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2fc:	0711      	lsls	r1, r2, #28
 800f2fe:	bf44      	itt	mi
 800f300:	232b      	movmi	r3, #43	; 0x2b
 800f302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f306:	f89a 3000 	ldrb.w	r3, [sl]
 800f30a:	2b2a      	cmp	r3, #42	; 0x2a
 800f30c:	d015      	beq.n	800f33a <_svfiprintf_r+0xf6>
 800f30e:	9a07      	ldr	r2, [sp, #28]
 800f310:	4654      	mov	r4, sl
 800f312:	2000      	movs	r0, #0
 800f314:	f04f 0c0a 	mov.w	ip, #10
 800f318:	4621      	mov	r1, r4
 800f31a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f31e:	3b30      	subs	r3, #48	; 0x30
 800f320:	2b09      	cmp	r3, #9
 800f322:	d94e      	bls.n	800f3c2 <_svfiprintf_r+0x17e>
 800f324:	b1b0      	cbz	r0, 800f354 <_svfiprintf_r+0x110>
 800f326:	9207      	str	r2, [sp, #28]
 800f328:	e014      	b.n	800f354 <_svfiprintf_r+0x110>
 800f32a:	eba0 0308 	sub.w	r3, r0, r8
 800f32e:	fa09 f303 	lsl.w	r3, r9, r3
 800f332:	4313      	orrs	r3, r2
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	46a2      	mov	sl, r4
 800f338:	e7d2      	b.n	800f2e0 <_svfiprintf_r+0x9c>
 800f33a:	9b03      	ldr	r3, [sp, #12]
 800f33c:	1d19      	adds	r1, r3, #4
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	9103      	str	r1, [sp, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	bfbb      	ittet	lt
 800f346:	425b      	neglt	r3, r3
 800f348:	f042 0202 	orrlt.w	r2, r2, #2
 800f34c:	9307      	strge	r3, [sp, #28]
 800f34e:	9307      	strlt	r3, [sp, #28]
 800f350:	bfb8      	it	lt
 800f352:	9204      	strlt	r2, [sp, #16]
 800f354:	7823      	ldrb	r3, [r4, #0]
 800f356:	2b2e      	cmp	r3, #46	; 0x2e
 800f358:	d10c      	bne.n	800f374 <_svfiprintf_r+0x130>
 800f35a:	7863      	ldrb	r3, [r4, #1]
 800f35c:	2b2a      	cmp	r3, #42	; 0x2a
 800f35e:	d135      	bne.n	800f3cc <_svfiprintf_r+0x188>
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	1d1a      	adds	r2, r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	9203      	str	r2, [sp, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfb8      	it	lt
 800f36c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f370:	3402      	adds	r4, #2
 800f372:	9305      	str	r3, [sp, #20]
 800f374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f440 <_svfiprintf_r+0x1fc>
 800f378:	7821      	ldrb	r1, [r4, #0]
 800f37a:	2203      	movs	r2, #3
 800f37c:	4650      	mov	r0, sl
 800f37e:	f7f0 ff3f 	bl	8000200 <memchr>
 800f382:	b140      	cbz	r0, 800f396 <_svfiprintf_r+0x152>
 800f384:	2340      	movs	r3, #64	; 0x40
 800f386:	eba0 000a 	sub.w	r0, r0, sl
 800f38a:	fa03 f000 	lsl.w	r0, r3, r0
 800f38e:	9b04      	ldr	r3, [sp, #16]
 800f390:	4303      	orrs	r3, r0
 800f392:	3401      	adds	r4, #1
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f39a:	4826      	ldr	r0, [pc, #152]	; (800f434 <_svfiprintf_r+0x1f0>)
 800f39c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3a0:	2206      	movs	r2, #6
 800f3a2:	f7f0 ff2d 	bl	8000200 <memchr>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d038      	beq.n	800f41c <_svfiprintf_r+0x1d8>
 800f3aa:	4b23      	ldr	r3, [pc, #140]	; (800f438 <_svfiprintf_r+0x1f4>)
 800f3ac:	bb1b      	cbnz	r3, 800f3f6 <_svfiprintf_r+0x1b2>
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	3307      	adds	r3, #7
 800f3b2:	f023 0307 	bic.w	r3, r3, #7
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	9303      	str	r3, [sp, #12]
 800f3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3bc:	4433      	add	r3, r6
 800f3be:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c0:	e767      	b.n	800f292 <_svfiprintf_r+0x4e>
 800f3c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	2001      	movs	r0, #1
 800f3ca:	e7a5      	b.n	800f318 <_svfiprintf_r+0xd4>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	3401      	adds	r4, #1
 800f3d0:	9305      	str	r3, [sp, #20]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	f04f 0c0a 	mov.w	ip, #10
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3de:	3a30      	subs	r2, #48	; 0x30
 800f3e0:	2a09      	cmp	r2, #9
 800f3e2:	d903      	bls.n	800f3ec <_svfiprintf_r+0x1a8>
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d0c5      	beq.n	800f374 <_svfiprintf_r+0x130>
 800f3e8:	9105      	str	r1, [sp, #20]
 800f3ea:	e7c3      	b.n	800f374 <_svfiprintf_r+0x130>
 800f3ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e7f0      	b.n	800f3d8 <_svfiprintf_r+0x194>
 800f3f6:	ab03      	add	r3, sp, #12
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	4b0f      	ldr	r3, [pc, #60]	; (800f43c <_svfiprintf_r+0x1f8>)
 800f3fe:	a904      	add	r1, sp, #16
 800f400:	4638      	mov	r0, r7
 800f402:	f3af 8000 	nop.w
 800f406:	1c42      	adds	r2, r0, #1
 800f408:	4606      	mov	r6, r0
 800f40a:	d1d6      	bne.n	800f3ba <_svfiprintf_r+0x176>
 800f40c:	89ab      	ldrh	r3, [r5, #12]
 800f40e:	065b      	lsls	r3, r3, #25
 800f410:	f53f af2c 	bmi.w	800f26c <_svfiprintf_r+0x28>
 800f414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f416:	b01d      	add	sp, #116	; 0x74
 800f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41c:	ab03      	add	r3, sp, #12
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	462a      	mov	r2, r5
 800f422:	4b06      	ldr	r3, [pc, #24]	; (800f43c <_svfiprintf_r+0x1f8>)
 800f424:	a904      	add	r1, sp, #16
 800f426:	4638      	mov	r0, r7
 800f428:	f000 f87a 	bl	800f520 <_printf_i>
 800f42c:	e7eb      	b.n	800f406 <_svfiprintf_r+0x1c2>
 800f42e:	bf00      	nop
 800f430:	0800facc 	.word	0x0800facc
 800f434:	0800fad6 	.word	0x0800fad6
 800f438:	00000000 	.word	0x00000000
 800f43c:	0800f18d 	.word	0x0800f18d
 800f440:	0800fad2 	.word	0x0800fad2

0800f444 <_printf_common>:
 800f444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	4616      	mov	r6, r2
 800f44a:	4699      	mov	r9, r3
 800f44c:	688a      	ldr	r2, [r1, #8]
 800f44e:	690b      	ldr	r3, [r1, #16]
 800f450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f454:	4293      	cmp	r3, r2
 800f456:	bfb8      	it	lt
 800f458:	4613      	movlt	r3, r2
 800f45a:	6033      	str	r3, [r6, #0]
 800f45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f460:	4607      	mov	r7, r0
 800f462:	460c      	mov	r4, r1
 800f464:	b10a      	cbz	r2, 800f46a <_printf_common+0x26>
 800f466:	3301      	adds	r3, #1
 800f468:	6033      	str	r3, [r6, #0]
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	0699      	lsls	r1, r3, #26
 800f46e:	bf42      	ittt	mi
 800f470:	6833      	ldrmi	r3, [r6, #0]
 800f472:	3302      	addmi	r3, #2
 800f474:	6033      	strmi	r3, [r6, #0]
 800f476:	6825      	ldr	r5, [r4, #0]
 800f478:	f015 0506 	ands.w	r5, r5, #6
 800f47c:	d106      	bne.n	800f48c <_printf_common+0x48>
 800f47e:	f104 0a19 	add.w	sl, r4, #25
 800f482:	68e3      	ldr	r3, [r4, #12]
 800f484:	6832      	ldr	r2, [r6, #0]
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	42ab      	cmp	r3, r5
 800f48a:	dc26      	bgt.n	800f4da <_printf_common+0x96>
 800f48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f490:	1e13      	subs	r3, r2, #0
 800f492:	6822      	ldr	r2, [r4, #0]
 800f494:	bf18      	it	ne
 800f496:	2301      	movne	r3, #1
 800f498:	0692      	lsls	r2, r2, #26
 800f49a:	d42b      	bmi.n	800f4f4 <_printf_common+0xb0>
 800f49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	47c0      	blx	r8
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d01e      	beq.n	800f4e8 <_printf_common+0xa4>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	68e5      	ldr	r5, [r4, #12]
 800f4ae:	6832      	ldr	r2, [r6, #0]
 800f4b0:	f003 0306 	and.w	r3, r3, #6
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	bf08      	it	eq
 800f4b8:	1aad      	subeq	r5, r5, r2
 800f4ba:	68a3      	ldr	r3, [r4, #8]
 800f4bc:	6922      	ldr	r2, [r4, #16]
 800f4be:	bf0c      	ite	eq
 800f4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4c4:	2500      	movne	r5, #0
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	bfc4      	itt	gt
 800f4ca:	1a9b      	subgt	r3, r3, r2
 800f4cc:	18ed      	addgt	r5, r5, r3
 800f4ce:	2600      	movs	r6, #0
 800f4d0:	341a      	adds	r4, #26
 800f4d2:	42b5      	cmp	r5, r6
 800f4d4:	d11a      	bne.n	800f50c <_printf_common+0xc8>
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e008      	b.n	800f4ec <_printf_common+0xa8>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	4652      	mov	r2, sl
 800f4de:	4649      	mov	r1, r9
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	47c0      	blx	r8
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	d103      	bne.n	800f4f0 <_printf_common+0xac>
 800f4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f0:	3501      	adds	r5, #1
 800f4f2:	e7c6      	b.n	800f482 <_printf_common+0x3e>
 800f4f4:	18e1      	adds	r1, r4, r3
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	2030      	movs	r0, #48	; 0x30
 800f4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4fe:	4422      	add	r2, r4
 800f500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f508:	3302      	adds	r3, #2
 800f50a:	e7c7      	b.n	800f49c <_printf_common+0x58>
 800f50c:	2301      	movs	r3, #1
 800f50e:	4622      	mov	r2, r4
 800f510:	4649      	mov	r1, r9
 800f512:	4638      	mov	r0, r7
 800f514:	47c0      	blx	r8
 800f516:	3001      	adds	r0, #1
 800f518:	d0e6      	beq.n	800f4e8 <_printf_common+0xa4>
 800f51a:	3601      	adds	r6, #1
 800f51c:	e7d9      	b.n	800f4d2 <_printf_common+0x8e>
	...

0800f520 <_printf_i>:
 800f520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f524:	7e0f      	ldrb	r7, [r1, #24]
 800f526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f528:	2f78      	cmp	r7, #120	; 0x78
 800f52a:	4691      	mov	r9, r2
 800f52c:	4680      	mov	r8, r0
 800f52e:	460c      	mov	r4, r1
 800f530:	469a      	mov	sl, r3
 800f532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f536:	d807      	bhi.n	800f548 <_printf_i+0x28>
 800f538:	2f62      	cmp	r7, #98	; 0x62
 800f53a:	d80a      	bhi.n	800f552 <_printf_i+0x32>
 800f53c:	2f00      	cmp	r7, #0
 800f53e:	f000 80d8 	beq.w	800f6f2 <_printf_i+0x1d2>
 800f542:	2f58      	cmp	r7, #88	; 0x58
 800f544:	f000 80a3 	beq.w	800f68e <_printf_i+0x16e>
 800f548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f550:	e03a      	b.n	800f5c8 <_printf_i+0xa8>
 800f552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f556:	2b15      	cmp	r3, #21
 800f558:	d8f6      	bhi.n	800f548 <_printf_i+0x28>
 800f55a:	a101      	add	r1, pc, #4	; (adr r1, 800f560 <_printf_i+0x40>)
 800f55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f560:	0800f5b9 	.word	0x0800f5b9
 800f564:	0800f5cd 	.word	0x0800f5cd
 800f568:	0800f549 	.word	0x0800f549
 800f56c:	0800f549 	.word	0x0800f549
 800f570:	0800f549 	.word	0x0800f549
 800f574:	0800f549 	.word	0x0800f549
 800f578:	0800f5cd 	.word	0x0800f5cd
 800f57c:	0800f549 	.word	0x0800f549
 800f580:	0800f549 	.word	0x0800f549
 800f584:	0800f549 	.word	0x0800f549
 800f588:	0800f549 	.word	0x0800f549
 800f58c:	0800f6d9 	.word	0x0800f6d9
 800f590:	0800f5fd 	.word	0x0800f5fd
 800f594:	0800f6bb 	.word	0x0800f6bb
 800f598:	0800f549 	.word	0x0800f549
 800f59c:	0800f549 	.word	0x0800f549
 800f5a0:	0800f6fb 	.word	0x0800f6fb
 800f5a4:	0800f549 	.word	0x0800f549
 800f5a8:	0800f5fd 	.word	0x0800f5fd
 800f5ac:	0800f549 	.word	0x0800f549
 800f5b0:	0800f549 	.word	0x0800f549
 800f5b4:	0800f6c3 	.word	0x0800f6c3
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	1d1a      	adds	r2, r3, #4
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	602a      	str	r2, [r5, #0]
 800f5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e0a3      	b.n	800f714 <_printf_i+0x1f4>
 800f5cc:	6820      	ldr	r0, [r4, #0]
 800f5ce:	6829      	ldr	r1, [r5, #0]
 800f5d0:	0606      	lsls	r6, r0, #24
 800f5d2:	f101 0304 	add.w	r3, r1, #4
 800f5d6:	d50a      	bpl.n	800f5ee <_printf_i+0xce>
 800f5d8:	680e      	ldr	r6, [r1, #0]
 800f5da:	602b      	str	r3, [r5, #0]
 800f5dc:	2e00      	cmp	r6, #0
 800f5de:	da03      	bge.n	800f5e8 <_printf_i+0xc8>
 800f5e0:	232d      	movs	r3, #45	; 0x2d
 800f5e2:	4276      	negs	r6, r6
 800f5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5e8:	485e      	ldr	r0, [pc, #376]	; (800f764 <_printf_i+0x244>)
 800f5ea:	230a      	movs	r3, #10
 800f5ec:	e019      	b.n	800f622 <_printf_i+0x102>
 800f5ee:	680e      	ldr	r6, [r1, #0]
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5f6:	bf18      	it	ne
 800f5f8:	b236      	sxthne	r6, r6
 800f5fa:	e7ef      	b.n	800f5dc <_printf_i+0xbc>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	6820      	ldr	r0, [r4, #0]
 800f600:	1d19      	adds	r1, r3, #4
 800f602:	6029      	str	r1, [r5, #0]
 800f604:	0601      	lsls	r1, r0, #24
 800f606:	d501      	bpl.n	800f60c <_printf_i+0xec>
 800f608:	681e      	ldr	r6, [r3, #0]
 800f60a:	e002      	b.n	800f612 <_printf_i+0xf2>
 800f60c:	0646      	lsls	r6, r0, #25
 800f60e:	d5fb      	bpl.n	800f608 <_printf_i+0xe8>
 800f610:	881e      	ldrh	r6, [r3, #0]
 800f612:	4854      	ldr	r0, [pc, #336]	; (800f764 <_printf_i+0x244>)
 800f614:	2f6f      	cmp	r7, #111	; 0x6f
 800f616:	bf0c      	ite	eq
 800f618:	2308      	moveq	r3, #8
 800f61a:	230a      	movne	r3, #10
 800f61c:	2100      	movs	r1, #0
 800f61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f622:	6865      	ldr	r5, [r4, #4]
 800f624:	60a5      	str	r5, [r4, #8]
 800f626:	2d00      	cmp	r5, #0
 800f628:	bfa2      	ittt	ge
 800f62a:	6821      	ldrge	r1, [r4, #0]
 800f62c:	f021 0104 	bicge.w	r1, r1, #4
 800f630:	6021      	strge	r1, [r4, #0]
 800f632:	b90e      	cbnz	r6, 800f638 <_printf_i+0x118>
 800f634:	2d00      	cmp	r5, #0
 800f636:	d04d      	beq.n	800f6d4 <_printf_i+0x1b4>
 800f638:	4615      	mov	r5, r2
 800f63a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f63e:	fb03 6711 	mls	r7, r3, r1, r6
 800f642:	5dc7      	ldrb	r7, [r0, r7]
 800f644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f648:	4637      	mov	r7, r6
 800f64a:	42bb      	cmp	r3, r7
 800f64c:	460e      	mov	r6, r1
 800f64e:	d9f4      	bls.n	800f63a <_printf_i+0x11a>
 800f650:	2b08      	cmp	r3, #8
 800f652:	d10b      	bne.n	800f66c <_printf_i+0x14c>
 800f654:	6823      	ldr	r3, [r4, #0]
 800f656:	07de      	lsls	r6, r3, #31
 800f658:	d508      	bpl.n	800f66c <_printf_i+0x14c>
 800f65a:	6923      	ldr	r3, [r4, #16]
 800f65c:	6861      	ldr	r1, [r4, #4]
 800f65e:	4299      	cmp	r1, r3
 800f660:	bfde      	ittt	le
 800f662:	2330      	movle	r3, #48	; 0x30
 800f664:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f66c:	1b52      	subs	r2, r2, r5
 800f66e:	6122      	str	r2, [r4, #16]
 800f670:	f8cd a000 	str.w	sl, [sp]
 800f674:	464b      	mov	r3, r9
 800f676:	aa03      	add	r2, sp, #12
 800f678:	4621      	mov	r1, r4
 800f67a:	4640      	mov	r0, r8
 800f67c:	f7ff fee2 	bl	800f444 <_printf_common>
 800f680:	3001      	adds	r0, #1
 800f682:	d14c      	bne.n	800f71e <_printf_i+0x1fe>
 800f684:	f04f 30ff 	mov.w	r0, #4294967295
 800f688:	b004      	add	sp, #16
 800f68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68e:	4835      	ldr	r0, [pc, #212]	; (800f764 <_printf_i+0x244>)
 800f690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f694:	6829      	ldr	r1, [r5, #0]
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	f851 6b04 	ldr.w	r6, [r1], #4
 800f69c:	6029      	str	r1, [r5, #0]
 800f69e:	061d      	lsls	r5, r3, #24
 800f6a0:	d514      	bpl.n	800f6cc <_printf_i+0x1ac>
 800f6a2:	07df      	lsls	r7, r3, #31
 800f6a4:	bf44      	itt	mi
 800f6a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f6aa:	6023      	strmi	r3, [r4, #0]
 800f6ac:	b91e      	cbnz	r6, 800f6b6 <_printf_i+0x196>
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	f023 0320 	bic.w	r3, r3, #32
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	2310      	movs	r3, #16
 800f6b8:	e7b0      	b.n	800f61c <_printf_i+0xfc>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	f043 0320 	orr.w	r3, r3, #32
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	2378      	movs	r3, #120	; 0x78
 800f6c4:	4828      	ldr	r0, [pc, #160]	; (800f768 <_printf_i+0x248>)
 800f6c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6ca:	e7e3      	b.n	800f694 <_printf_i+0x174>
 800f6cc:	0659      	lsls	r1, r3, #25
 800f6ce:	bf48      	it	mi
 800f6d0:	b2b6      	uxthmi	r6, r6
 800f6d2:	e7e6      	b.n	800f6a2 <_printf_i+0x182>
 800f6d4:	4615      	mov	r5, r2
 800f6d6:	e7bb      	b.n	800f650 <_printf_i+0x130>
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	6826      	ldr	r6, [r4, #0]
 800f6dc:	6961      	ldr	r1, [r4, #20]
 800f6de:	1d18      	adds	r0, r3, #4
 800f6e0:	6028      	str	r0, [r5, #0]
 800f6e2:	0635      	lsls	r5, r6, #24
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	d501      	bpl.n	800f6ec <_printf_i+0x1cc>
 800f6e8:	6019      	str	r1, [r3, #0]
 800f6ea:	e002      	b.n	800f6f2 <_printf_i+0x1d2>
 800f6ec:	0670      	lsls	r0, r6, #25
 800f6ee:	d5fb      	bpl.n	800f6e8 <_printf_i+0x1c8>
 800f6f0:	8019      	strh	r1, [r3, #0]
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	4615      	mov	r5, r2
 800f6f8:	e7ba      	b.n	800f670 <_printf_i+0x150>
 800f6fa:	682b      	ldr	r3, [r5, #0]
 800f6fc:	1d1a      	adds	r2, r3, #4
 800f6fe:	602a      	str	r2, [r5, #0]
 800f700:	681d      	ldr	r5, [r3, #0]
 800f702:	6862      	ldr	r2, [r4, #4]
 800f704:	2100      	movs	r1, #0
 800f706:	4628      	mov	r0, r5
 800f708:	f7f0 fd7a 	bl	8000200 <memchr>
 800f70c:	b108      	cbz	r0, 800f712 <_printf_i+0x1f2>
 800f70e:	1b40      	subs	r0, r0, r5
 800f710:	6060      	str	r0, [r4, #4]
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	6123      	str	r3, [r4, #16]
 800f716:	2300      	movs	r3, #0
 800f718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f71c:	e7a8      	b.n	800f670 <_printf_i+0x150>
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	462a      	mov	r2, r5
 800f722:	4649      	mov	r1, r9
 800f724:	4640      	mov	r0, r8
 800f726:	47d0      	blx	sl
 800f728:	3001      	adds	r0, #1
 800f72a:	d0ab      	beq.n	800f684 <_printf_i+0x164>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	079b      	lsls	r3, r3, #30
 800f730:	d413      	bmi.n	800f75a <_printf_i+0x23a>
 800f732:	68e0      	ldr	r0, [r4, #12]
 800f734:	9b03      	ldr	r3, [sp, #12]
 800f736:	4298      	cmp	r0, r3
 800f738:	bfb8      	it	lt
 800f73a:	4618      	movlt	r0, r3
 800f73c:	e7a4      	b.n	800f688 <_printf_i+0x168>
 800f73e:	2301      	movs	r3, #1
 800f740:	4632      	mov	r2, r6
 800f742:	4649      	mov	r1, r9
 800f744:	4640      	mov	r0, r8
 800f746:	47d0      	blx	sl
 800f748:	3001      	adds	r0, #1
 800f74a:	d09b      	beq.n	800f684 <_printf_i+0x164>
 800f74c:	3501      	adds	r5, #1
 800f74e:	68e3      	ldr	r3, [r4, #12]
 800f750:	9903      	ldr	r1, [sp, #12]
 800f752:	1a5b      	subs	r3, r3, r1
 800f754:	42ab      	cmp	r3, r5
 800f756:	dcf2      	bgt.n	800f73e <_printf_i+0x21e>
 800f758:	e7eb      	b.n	800f732 <_printf_i+0x212>
 800f75a:	2500      	movs	r5, #0
 800f75c:	f104 0619 	add.w	r6, r4, #25
 800f760:	e7f5      	b.n	800f74e <_printf_i+0x22e>
 800f762:	bf00      	nop
 800f764:	0800fadd 	.word	0x0800fadd
 800f768:	0800faee 	.word	0x0800faee

0800f76c <memmove>:
 800f76c:	4288      	cmp	r0, r1
 800f76e:	b510      	push	{r4, lr}
 800f770:	eb01 0402 	add.w	r4, r1, r2
 800f774:	d902      	bls.n	800f77c <memmove+0x10>
 800f776:	4284      	cmp	r4, r0
 800f778:	4623      	mov	r3, r4
 800f77a:	d807      	bhi.n	800f78c <memmove+0x20>
 800f77c:	1e43      	subs	r3, r0, #1
 800f77e:	42a1      	cmp	r1, r4
 800f780:	d008      	beq.n	800f794 <memmove+0x28>
 800f782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f78a:	e7f8      	b.n	800f77e <memmove+0x12>
 800f78c:	4402      	add	r2, r0
 800f78e:	4601      	mov	r1, r0
 800f790:	428a      	cmp	r2, r1
 800f792:	d100      	bne.n	800f796 <memmove+0x2a>
 800f794:	bd10      	pop	{r4, pc}
 800f796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f79e:	e7f7      	b.n	800f790 <memmove+0x24>

0800f7a0 <_realloc_r>:
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	4614      	mov	r4, r2
 800f7a8:	460e      	mov	r6, r1
 800f7aa:	b921      	cbnz	r1, 800f7b6 <_realloc_r+0x16>
 800f7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	f7ff bb85 	b.w	800eec0 <_malloc_r>
 800f7b6:	b92a      	cbnz	r2, 800f7c4 <_realloc_r+0x24>
 800f7b8:	f7ff fc9c 	bl	800f0f4 <_free_r>
 800f7bc:	4625      	mov	r5, r4
 800f7be:	4628      	mov	r0, r5
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	f000 f81b 	bl	800f7fe <_malloc_usable_size_r>
 800f7c8:	4284      	cmp	r4, r0
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	d802      	bhi.n	800f7d4 <_realloc_r+0x34>
 800f7ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7d2:	d812      	bhi.n	800f7fa <_realloc_r+0x5a>
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f7ff fb72 	bl	800eec0 <_malloc_r>
 800f7dc:	4605      	mov	r5, r0
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0ed      	beq.n	800f7be <_realloc_r+0x1e>
 800f7e2:	42bc      	cmp	r4, r7
 800f7e4:	4622      	mov	r2, r4
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	bf28      	it	cs
 800f7ea:	463a      	movcs	r2, r7
 800f7ec:	f7ff fb32 	bl	800ee54 <memcpy>
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f7ff fc7e 	bl	800f0f4 <_free_r>
 800f7f8:	e7e1      	b.n	800f7be <_realloc_r+0x1e>
 800f7fa:	4635      	mov	r5, r6
 800f7fc:	e7df      	b.n	800f7be <_realloc_r+0x1e>

0800f7fe <_malloc_usable_size_r>:
 800f7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f802:	1f18      	subs	r0, r3, #4
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfbc      	itt	lt
 800f808:	580b      	ldrlt	r3, [r1, r0]
 800f80a:	18c0      	addlt	r0, r0, r3
 800f80c:	4770      	bx	lr
	...

0800f810 <_init>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	bf00      	nop
 800f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f816:	bc08      	pop	{r3}
 800f818:	469e      	mov	lr, r3
 800f81a:	4770      	bx	lr

0800f81c <_fini>:
 800f81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81e:	bf00      	nop
 800f820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f822:	bc08      	pop	{r3}
 800f824:	469e      	mov	lr, r3
 800f826:	4770      	bx	lr
