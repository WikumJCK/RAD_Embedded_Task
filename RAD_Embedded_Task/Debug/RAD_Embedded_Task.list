
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800fa98  0800fa98  0001fa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd60  0800fd60  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd60  0800fd60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd68  0800fd68  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd68  0800fd68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd6c  0800fd6c  0001fd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800fd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
 10 .bss          0000716c  2000010c  2000010c  0002010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007278  20007278  0002010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a96a  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056f0  00000000  00000000  0004aaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c0  00000000  00000000  00050198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020a0  00000000  00000000  00052458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002afae  00000000  00000000  000544f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b170  00000000  00000000  0007f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f30a1  00000000  00000000  000aa616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019d6b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098c4  00000000  00000000  0019d708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fa80 	.word	0x0800fa80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000110 	.word	0x20000110
 80001ec:	0800fa80 	.word	0x0800fa80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <SELECT+0x14>)
 80005ae:	f004 fa9f 	bl	8004af0 <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020000 	.word	0x40020000

080005bc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2110      	movs	r1, #16
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <DESELECT+0x14>)
 80005c6:	f004 fa93 	bl	8004af0 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000

080005d4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005de:	bf00      	nop
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <SPI_TxByte+0x30>)
 80005e2:	f006 fb34 	bl	8006c4e <HAL_SPI_GetState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1f9      	bne.n	80005e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1,1000);
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxByte+0x30>)
 80005f6:	f006 f84c 	bl	8006692 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000071c 	.word	0x2000071c

08000608 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000616:	bf00      	nop
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <SPI_RxByte+0x38>)
 800061a:	f006 fb18 	bl	8006c4e <HAL_SPI_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d1f9      	bne.n	8000618 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1,1000);
 8000624:	1dba      	adds	r2, r7, #6
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <SPI_RxByte+0x38>)
 8000632:	f006 f96a 	bl	800690a <HAL_SPI_TransmitReceive>
//  HAL_SPI_TransmitReceive_DMA(&hspi1, &dummy, &data, 1);
  return data;
 8000636:	79bb      	ldrb	r3, [r7, #6]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000071c 	.word	0x2000071c

08000644 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800064c:	f7ff ffdc 	bl	8000608 <SPI_RxByte>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	701a      	strb	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <SD_ReadyWait+0x34>)
 8000668:	2232      	movs	r2, #50	; 0x32
 800066a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800066c:	f7ff ffcc 	bl	8000608 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000670:	f7ff ffca 	bl	8000608 <SPI_RxByte>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2bff      	cmp	r3, #255	; 0xff
 800067c:	d004      	beq.n	8000688 <SD_ReadyWait+0x28>
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SD_ReadyWait+0x34>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f3      	bne.n	8000670 <SD_ReadyWait+0x10>

  return res;
 8000688:	79fb      	ldrb	r3, [r7, #7]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20003459 	.word	0x20003459

08000698 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800069e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006a2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80006a4:	f7ff ff8a 	bl	80005bc <DESELECT>

  for(int i = 0; i < 10; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	e005      	b.n	80006ba <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006ae:	20ff      	movs	r0, #255	; 0xff
 80006b0:	f7ff ff90 	bl	80005d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	3301      	adds	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	2b09      	cmp	r3, #9
 80006be:	ddf6      	ble.n	80006ae <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80006c0:	f7ff ff70 	bl	80005a4 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006d8:	2395      	movs	r3, #149	; 0x95
 80006da:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e009      	b.n	80006f6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff72 	bl	80005d4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	ddf2      	ble.n	80006e2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006fc:	e002      	b.n	8000704 <SD_PowerOn+0x6c>
  {
    Count--;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3b01      	subs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000704:	f7ff ff80 	bl	8000608 <SPI_RxByte>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d002      	beq.n	8000714 <SD_PowerOn+0x7c>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f4      	bne.n	80006fe <SD_PowerOn+0x66>
  }

  DESELECT();
 8000714:	f7ff ff52 	bl	80005bc <DESELECT>
  SPI_TxByte(0XFF);
 8000718:	20ff      	movs	r0, #255	; 0xff
 800071a:	f7ff ff5b 	bl	80005d4 <SPI_TxByte>

  PowerFlag = 1;
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_PowerOn+0x94>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000129 	.word	0x20000129

08000730 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SD_PowerOff+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000129 	.word	0x20000129

08000748 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_CheckPower+0x14>)
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000129 	.word	0x20000129

08000760 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <SD_RxDataBlock+0x68>)
 800076c:	220a      	movs	r2, #10
 800076e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000770:	f7ff ff4a 	bl	8000608 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d104      	bne.n	8000788 <SD_RxDataBlock+0x28>
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <SD_RxDataBlock+0x68>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f3      	bne.n	8000770 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2bfe      	cmp	r3, #254	; 0xfe
 800078c:	d001      	beq.n	8000792 <SD_RxDataBlock+0x32>
    return FALSE;
 800078e:	2300      	movs	r3, #0
 8000790:	e016      	b.n	80007c0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff53 	bl	8000644 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff4d 	bl	8000644 <SPI_RxBytePtr>
  } while(btr -= 2);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	3b02      	subs	r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1ed      	bne.n	8000792 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80007b6:	f7ff ff27 	bl	8000608 <SPI_RxByte>
  SPI_RxByte();
 80007ba:	f7ff ff25 	bl	8000608 <SPI_RxByte>

  return TRUE;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20003458 	.word	0x20003458

080007cc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007dc:	f7ff ff40 	bl	8000660 <SD_ReadyWait>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d001      	beq.n	80007ea <SD_TxDataBlock+0x1e>
    return FALSE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e040      	b.n	800086c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fef1 	bl	80005d4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	2bfd      	cmp	r3, #253	; 0xfd
 80007f6:	d031      	beq.n	800085c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee5 	bl	80005d4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fede 	bl	80005d4 <SPI_TxByte>
    } while (--wc);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3b01      	subs	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1eb      	bne.n	80007fc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000824:	f7ff fef0 	bl	8000608 <SPI_RxByte>
    SPI_RxByte();
 8000828:	f7ff feee 	bl	8000608 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800082c:	e00b      	b.n	8000846 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800082e:	f7ff feeb 	bl	8000608 <SPI_RxByte>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	2b05      	cmp	r3, #5
 800083e:	d006      	beq.n	800084e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000840:	7b7b      	ldrb	r3, [r7, #13]
 8000842:	3301      	adds	r3, #1
 8000844:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	2b40      	cmp	r3, #64	; 0x40
 800084a:	d9f0      	bls.n	800082e <SD_TxDataBlock+0x62>
 800084c:	e000      	b.n	8000850 <SD_TxDataBlock+0x84>
        break;
 800084e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000850:	bf00      	nop
 8000852:	f7ff fed9 	bl	8000608 <SPI_RxByte>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0fa      	beq.n	8000852 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	2b05      	cmp	r3, #5
 8000864:	d101      	bne.n	800086a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000880:	f7ff feee 	bl	8000660 <SD_ReadyWait>
 8000884:	4603      	mov	r3, r0
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d001      	beq.n	800088e <SD_SendCmd+0x1a>
    return 0xFF;
 800088a:	23ff      	movs	r3, #255	; 0xff
 800088c:	e040      	b.n	8000910 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fe9f 	bl	80005d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	0e1b      	lsrs	r3, r3, #24
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe99 	bl	80005d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	0c1b      	lsrs	r3, r3, #16
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe93 	bl	80005d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe8d 	bl	80005d4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe88 	bl	80005d4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b40      	cmp	r3, #64	; 0x40
 80008cc:	d101      	bne.n	80008d2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80008ce:	2395      	movs	r3, #149	; 0x95
 80008d0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b48      	cmp	r3, #72	; 0x48
 80008d6:	d101      	bne.n	80008dc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008d8:	2387      	movs	r3, #135	; 0x87
 80008da:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe78 	bl	80005d4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b4c      	cmp	r3, #76	; 0x4c
 80008e8:	d101      	bne.n	80008ee <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008ea:	f7ff fe8d 	bl	8000608 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008ee:	230a      	movs	r3, #10
 80008f0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008f2:	f7ff fe89 	bl	8000608 <SPI_RxByte>
 80008f6:	4603      	mov	r3, r0
 80008f8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da05      	bge.n	800090e <SD_SendCmd+0x9a>
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	3b01      	subs	r3, #1
 8000906:	73bb      	strb	r3, [r7, #14]
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f1      	bne.n	80008f2 <SD_SendCmd+0x7e>

  return res;
 800090e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000928:	2301      	movs	r3, #1
 800092a:	e0d5      	b.n	8000ad8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800092c:	4b6c      	ldr	r3, [pc, #432]	; (8000ae0 <SD_disk_initialize+0x1c8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <SD_disk_initialize+0x2a>
    return Stat;
 800093a:	4b69      	ldr	r3, [pc, #420]	; (8000ae0 <SD_disk_initialize+0x1c8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	e0ca      	b.n	8000ad8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000942:	f7ff fea9 	bl	8000698 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000946:	f7ff fe2d 	bl	80005a4 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800094e:	2100      	movs	r1, #0
 8000950:	2040      	movs	r0, #64	; 0x40
 8000952:	f7ff ff8f 	bl	8000874 <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	f040 80a5 	bne.w	8000aa8 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800095e:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <SD_disk_initialize+0x1cc>)
 8000960:	2264      	movs	r2, #100	; 0x64
 8000962:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000968:	2048      	movs	r0, #72	; 0x48
 800096a:	f7ff ff83 	bl	8000874 <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d158      	bne.n	8000a26 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e00c      	b.n	8000994 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800097a:	7bfc      	ldrb	r4, [r7, #15]
 800097c:	f7ff fe44 	bl	8000608 <SPI_RxByte>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	f104 0310 	add.w	r3, r4, #16
 8000988:	443b      	add	r3, r7
 800098a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	3301      	adds	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d9ef      	bls.n	800097a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800099a:	7abb      	ldrb	r3, [r7, #10]
 800099c:	2b01      	cmp	r3, #1
 800099e:	f040 8083 	bne.w	8000aa8 <SD_disk_initialize+0x190>
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	2baa      	cmp	r3, #170	; 0xaa
 80009a6:	d17f      	bne.n	8000aa8 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009a8:	2100      	movs	r1, #0
 80009aa:	2077      	movs	r0, #119	; 0x77
 80009ac:	f7ff ff62 	bl	8000874 <SD_SendCmd>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d807      	bhi.n	80009c6 <SD_disk_initialize+0xae>
 80009b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009ba:	2069      	movs	r0, #105	; 0x69
 80009bc:	f7ff ff5a 	bl	8000874 <SD_SendCmd>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d005      	beq.n	80009d2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <SD_disk_initialize+0x1cc>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1eb      	bne.n	80009a8 <SD_disk_initialize+0x90>
 80009d0:	e000      	b.n	80009d4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009d2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <SD_disk_initialize+0x1cc>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d064      	beq.n	8000aa8 <SD_disk_initialize+0x190>
 80009de:	2100      	movs	r1, #0
 80009e0:	207a      	movs	r0, #122	; 0x7a
 80009e2:	f7ff ff47 	bl	8000874 <SD_SendCmd>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d15d      	bne.n	8000aa8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e00c      	b.n	8000a0c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009f2:	7bfc      	ldrb	r4, [r7, #15]
 80009f4:	f7ff fe08 	bl	8000608 <SPI_RxByte>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	f104 0310 	add.w	r3, r4, #16
 8000a00:	443b      	add	r3, r7
 8000a02:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d9ef      	bls.n	80009f2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a12:	7a3b      	ldrb	r3, [r7, #8]
 8000a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SD_disk_initialize+0x108>
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	e000      	b.n	8000a22 <SD_disk_initialize+0x10a>
 8000a20:	2302      	movs	r3, #2
 8000a22:	73bb      	strb	r3, [r7, #14]
 8000a24:	e040      	b.n	8000aa8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a26:	2100      	movs	r1, #0
 8000a28:	2077      	movs	r0, #119	; 0x77
 8000a2a:	f7ff ff23 	bl	8000874 <SD_SendCmd>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d808      	bhi.n	8000a46 <SD_disk_initialize+0x12e>
 8000a34:	2100      	movs	r1, #0
 8000a36:	2069      	movs	r0, #105	; 0x69
 8000a38:	f7ff ff1c 	bl	8000874 <SD_SendCmd>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d801      	bhi.n	8000a46 <SD_disk_initialize+0x12e>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e000      	b.n	8000a48 <SD_disk_initialize+0x130>
 8000a46:	2301      	movs	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d10e      	bne.n	8000a6e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a50:	2100      	movs	r1, #0
 8000a52:	2077      	movs	r0, #119	; 0x77
 8000a54:	f7ff ff0e 	bl	8000874 <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d80e      	bhi.n	8000a7c <SD_disk_initialize+0x164>
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2069      	movs	r0, #105	; 0x69
 8000a62:	f7ff ff07 	bl	8000874 <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a6c:	e00d      	b.n	8000a8a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2041      	movs	r0, #65	; 0x41
 8000a72:	f7ff feff 	bl	8000874 <SD_SendCmd>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d005      	beq.n	8000a88 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <SD_disk_initialize+0x1cc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1e1      	bne.n	8000a4a <SD_disk_initialize+0x132>
 8000a86:	e000      	b.n	8000a8a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a88:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <SD_disk_initialize+0x1cc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d007      	beq.n	8000aa4 <SD_disk_initialize+0x18c>
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	2050      	movs	r0, #80	; 0x50
 8000a9a:	f7ff feeb 	bl	8000874 <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <SD_disk_initialize+0x1d0>)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000aae:	f7ff fd85 	bl	80005bc <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000ab2:	f7ff fda9 	bl	8000608 <SPI_RxByte>

  if (type)
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d008      	beq.n	8000ace <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SD_disk_initialize+0x1c8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SD_disk_initialize+0x1c8>)
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e001      	b.n	8000ad2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000ace:	f7ff fe2f 	bl	8000730 <SD_PowerOff>
  }

  return Stat;
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <SD_disk_initialize+0x1c8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20003458 	.word	0x20003458
 8000ae8:	20000128 	.word	0x20000128

08000aec <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e002      	b.n	8000b06 <SD_disk_status+0x1a>

  return Stat;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SD_disk_status+0x28>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <SD_disk_read+0x1c>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b34:	2304      	movs	r3, #4
 8000b36:	e051      	b.n	8000bdc <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <SD_disk_read+0xcc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e048      	b.n	8000bdc <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <SD_disk_read+0xd0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	025b      	lsls	r3, r3, #9
 8000b5a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b5c:	f7ff fd22 	bl	80005a4 <SELECT>

  if (count == 1)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d111      	bne.n	8000b8a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2051      	movs	r0, #81	; 0x51
 8000b6a:	f7ff fe83 	bl	8000874 <SD_SendCmd>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d129      	bne.n	8000bc8 <SD_disk_read+0xb0>
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdf1 	bl	8000760 <SD_RxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d021      	beq.n	8000bc8 <SD_disk_read+0xb0>
      count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e01e      	b.n	8000bc8 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2052      	movs	r0, #82	; 0x52
 8000b8e:	f7ff fe71 	bl	8000874 <SD_SendCmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d117      	bne.n	8000bc8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f7ff fddf 	bl	8000760 <SD_RxDataBlock>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00a      	beq.n	8000bbe <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bae:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1ed      	bne.n	8000b98 <SD_disk_read+0x80>
 8000bbc:	e000      	b.n	8000bc0 <SD_disk_read+0xa8>
          break;
 8000bbe:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	204c      	movs	r0, #76	; 0x4c
 8000bc4:	f7ff fe56 	bl	8000874 <SD_SendCmd>
    }
  }

  DESELECT();
 8000bc8:	f7ff fcf8 	bl	80005bc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000bcc:	f7ff fd1c 	bl	8000608 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000128 	.word	0x20000128

08000bec <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <SD_disk_write+0x1c>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <SD_disk_write+0x20>
    return RES_PARERR;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e06b      	b.n	8000ce4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <SD_disk_write+0x100>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e062      	b.n	8000ce4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <SD_disk_write+0x100>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e059      	b.n	8000ce4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <SD_disk_write+0x104>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	025b      	lsls	r3, r3, #9
 8000c40:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c42:	f7ff fcaf 	bl	80005a4 <SELECT>

  if (count == 1)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d110      	bne.n	8000c6e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	2058      	movs	r0, #88	; 0x58
 8000c50:	f7ff fe10 	bl	8000874 <SD_SendCmd>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d13a      	bne.n	8000cd0 <SD_disk_write+0xe4>
 8000c5a:	21fe      	movs	r1, #254	; 0xfe
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f7ff fdb5 	bl	80007cc <SD_TxDataBlock>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d033      	beq.n	8000cd0 <SD_disk_write+0xe4>
      count = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	e030      	b.n	8000cd0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <SD_disk_write+0x104>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d007      	beq.n	8000c8a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2077      	movs	r0, #119	; 0x77
 8000c7e:	f7ff fdf9 	bl	8000874 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	2057      	movs	r0, #87	; 0x57
 8000c86:	f7ff fdf5 	bl	8000874 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2059      	movs	r0, #89	; 0x59
 8000c8e:	f7ff fdf1 	bl	8000874 <SD_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11b      	bne.n	8000cd0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c98:	21fc      	movs	r1, #252	; 0xfc
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f7ff fd96 	bl	80007cc <SD_TxDataBlock>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00a      	beq.n	8000cbc <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cac:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ee      	bne.n	8000c98 <SD_disk_write+0xac>
 8000cba:	e000      	b.n	8000cbe <SD_disk_write+0xd2>
          break;
 8000cbc:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000cbe:	21fd      	movs	r1, #253	; 0xfd
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fd83 	bl	80007cc <SD_TxDataBlock>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000cd0:	f7ff fc74 	bl	80005bc <DESELECT>
  SPI_RxByte();
 8000cd4:	f7ff fc98 	bl	8000608 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000128 	.word	0x20000128

08000cf4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b08b      	sub	sp, #44	; 0x2c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	603a      	str	r2, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	460b      	mov	r3, r1
 8000d02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	e11b      	b.n	8000f4a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	d129      	bne.n	8000d72 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d017      	beq.n	8000d56 <SD_disk_ioctl+0x62>
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	dc1f      	bgt.n	8000d6a <SD_disk_ioctl+0x76>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <SD_disk_ioctl+0x40>
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d00b      	beq.n	8000d4a <SD_disk_ioctl+0x56>
 8000d32:	e01a      	b.n	8000d6a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d34:	f7ff fd08 	bl	8000748 <SD_CheckPower>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d3e:	f7ff fcf7 	bl	8000730 <SD_PowerOff>
      res = RES_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d48:	e0fd      	b.n	8000f46 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d4a:	f7ff fca5 	bl	8000698 <SD_PowerOn>
      res = RES_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d54:	e0f7      	b.n	8000f46 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	1c5c      	adds	r4, r3, #1
 8000d5a:	f7ff fcf5 	bl	8000748 <SD_CheckPower>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d68:	e0ed      	b.n	8000f46 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d70:	e0e9      	b.n	8000f46 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <SD_disk_ioctl+0x260>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e0e2      	b.n	8000f4a <SD_disk_ioctl+0x256>

    SELECT();
 8000d84:	f7ff fc0e 	bl	80005a4 <SELECT>

    switch (ctrl)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b0d      	cmp	r3, #13
 8000d8c:	f200 80cc 	bhi.w	8000f28 <SD_disk_ioctl+0x234>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <SD_disk_ioctl+0xa4>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000e93 	.word	0x08000e93
 8000d9c:	08000dd1 	.word	0x08000dd1
 8000da0:	08000e83 	.word	0x08000e83
 8000da4:	08000f29 	.word	0x08000f29
 8000da8:	08000f29 	.word	0x08000f29
 8000dac:	08000f29 	.word	0x08000f29
 8000db0:	08000f29 	.word	0x08000f29
 8000db4:	08000f29 	.word	0x08000f29
 8000db8:	08000f29 	.word	0x08000f29
 8000dbc:	08000f29 	.word	0x08000f29
 8000dc0:	08000f29 	.word	0x08000f29
 8000dc4:	08000ea5 	.word	0x08000ea5
 8000dc8:	08000ec9 	.word	0x08000ec9
 8000dcc:	08000eed 	.word	0x08000eed
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2049      	movs	r0, #73	; 0x49
 8000dd4:	f7ff fd4e 	bl	8000874 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 80a8 	bne.w	8000f30 <SD_disk_ioctl+0x23c>
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2110      	movs	r1, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fcba 	bl	8000760 <SD_RxDataBlock>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 809e 	beq.w	8000f30 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000df4:	7b3b      	ldrb	r3, [r7, #12]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d10e      	bne.n	8000e1c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	7d3b      	ldrb	r3, [r7, #20]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e12:	8bfb      	ldrh	r3, [r7, #30]
 8000e14:	029a      	lsls	r2, r3, #10
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e02e      	b.n	8000e7a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e1c:	7c7b      	ldrb	r3, [r7, #17]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	09db      	lsrs	r3, r3, #7
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	7d7b      	ldrb	r3, [r7, #21]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0306 	and.w	r3, r3, #6
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e44:	7d3b      	ldrb	r3, [r7, #20]
 8000e46:	099b      	lsrs	r3, r3, #6
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	7cfb      	ldrb	r3, [r7, #19]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	7cbb      	ldrb	r3, [r7, #18]
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e6c:	8bfa      	ldrh	r2, [r7, #30]
 8000e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e72:	3b09      	subs	r3, #9
 8000e74:	409a      	lsls	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e80:	e056      	b.n	8000f30 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e90:	e055      	b.n	8000f3e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e92:	f7ff fbe5 	bl	8000660 <SD_ReadyWait>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d14b      	bne.n	8000f34 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ea2:	e047      	b.n	8000f34 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2049      	movs	r0, #73	; 0x49
 8000ea8:	f7ff fce4 	bl	8000874 <SD_SendCmd>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d142      	bne.n	8000f38 <SD_disk_ioctl+0x244>
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	6a38      	ldr	r0, [r7, #32]
 8000eb6:	f7ff fc53 	bl	8000760 <SD_RxDataBlock>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03b      	beq.n	8000f38 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ec6:	e037      	b.n	8000f38 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ec8:	2100      	movs	r1, #0
 8000eca:	204a      	movs	r0, #74	; 0x4a
 8000ecc:	f7ff fcd2 	bl	8000874 <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d132      	bne.n	8000f3c <SD_disk_ioctl+0x248>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc41 	bl	8000760 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d02b      	beq.n	8000f3c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eea:	e027      	b.n	8000f3c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000eec:	2100      	movs	r1, #0
 8000eee:	207a      	movs	r0, #122	; 0x7a
 8000ef0:	f7ff fcc0 	bl	8000874 <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f00:	e00b      	b.n	8000f1a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000f02:	6a3c      	ldr	r4, [r7, #32]
 8000f04:	1c63      	adds	r3, r4, #1
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	f7ff fb7e 	bl	8000608 <SPI_RxByte>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9ef      	bls.n	8000f02 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f2e:	e006      	b.n	8000f3e <SD_disk_ioctl+0x24a>
      break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <SD_disk_ioctl+0x24a>
      break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <SD_disk_ioctl+0x24a>
      break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <SD_disk_ioctl+0x24a>
      break;
 8000f3c:	bf00      	nop
    }

    DESELECT();
 8000f3e:	f7ff fb3d 	bl	80005bc <DESELECT>
    SPI_RxByte();
 8000f42:	f7ff fb61 	bl	8000608 <SPI_RxByte>
  }

  return res;
 8000f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	372c      	adds	r7, #44	; 0x2c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000

08000f58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <vApplicationGetIdleTaskMemory+0x30>)
 8000f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000012c 	.word	0x2000012c
 8000f88:	200001e0 	.word	0x200001e0

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0a8      	sub	sp, #160	; 0xa0
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f002 fbc7 	bl	8003724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f8a1 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 fb75 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9e:	f000 fb15 	bl	80015cc <MX_DMA_Init>
  MX_ETH_Init();
 8000fa2:	f000 f909 	bl	80011b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fa6:	f000 fab9 	bl	800151c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000faa:	f000 fae1 	bl	8001570 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000fae:	f000 f9c7 	bl	8001340 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000fb2:	f000 f94f 	bl	8001254 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000fb6:	f000 f98d 	bl	80012d4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fba:	f008 fcf5 	bl	80099a8 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000fbe:	f000 fa5f 	bl	8001480 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000fc2:	4839      	ldr	r0, [pc, #228]	; (80010a8 <main+0x11c>)
 8000fc4:	f005 ff6c 	bl	8006ea0 <HAL_TIM_Base_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000fc8:	4b38      	ldr	r3, [pc, #224]	; (80010ac <main+0x120>)
 8000fca:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000fd4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b fd57 	bl	800ca8e <osMessageCreate>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <main+0x124>)
 8000fe4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityAboveNormal, 0, 256);
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <main+0x128>)
 8000fe8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 8000ffa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f00b fc1b 	bl	800c83c <osThreadCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <main+0x12c>)
 800100a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <main+0x130>)
 800100e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001012:	461d      	mov	r5, r3
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 8001020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00b fc08 	bl	800c83c <osThreadCreate>
 800102c:	4603      	mov	r3, r0
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <main+0x134>)
 8001030:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <main+0x138>)
 8001034:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001038:	461d      	mov	r5, r3
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 8001046:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00b fbf5 	bl	800c83c <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <main+0x13c>)
 8001056:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <main+0x140>)
 800105a:	f107 0420 	add.w	r4, r7, #32
 800105e:	461d      	mov	r5, r3
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00b fbe2 	bl	800c83c <osThreadCreate>
 8001078:	4603      	mov	r3, r0
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <main+0x144>)
 800107c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityAboveNormal, 0, 128);
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <main+0x148>)
 8001080:	1d3c      	adds	r4, r7, #4
 8001082:	461d      	mov	r5, r3
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00b fbd1 	bl	800c83c <osThreadCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <main+0x14c>)
 800109e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010a0:	f00b fbc5 	bl	800c82e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x118>
 80010a6:	bf00      	nop
 80010a8:	20000834 	.word	0x20000834
 80010ac:	0800fae4 	.word	0x0800fae4
 80010b0:	20000f48 	.word	0x20000f48
 80010b4:	0800faf4 	.word	0x0800faf4
 80010b8:	20000f34 	.word	0x20000f34
 80010bc:	0800fb10 	.word	0x0800fb10
 80010c0:	20000f38 	.word	0x20000f38
 80010c4:	0800fb2c 	.word	0x0800fb2c
 80010c8:	20000f3c 	.word	0x20000f3c
 80010cc:	0800fb48 	.word	0x0800fb48
 80010d0:	20000f40 	.word	0x20000f40
 80010d4:	0800fb64 	.word	0x0800fb64
 80010d8:	20000f44 	.word	0x20000f44

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00d fff8 	bl	800f0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <SystemClock_Config+0xd4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <SystemClock_Config+0xd4>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <SystemClock_Config+0xd4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemClock_Config+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <SystemClock_Config+0xd8>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <SystemClock_Config+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001150:	23a8      	movs	r3, #168	; 0xa8
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001158:	2307      	movs	r3, #7
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fcdb 	bl	8005b1c <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800116c:	f000 fe07 	bl	8001d7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2105      	movs	r1, #5
 800118e:	4618      	mov	r0, r3
 8001190:	f004 ff3c 	bl	800600c <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800119a:	f000 fdf0 	bl	8001d7e <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2001      	movs	r0, #1
 80011a4:	f005 f818 	bl	80061d8 <HAL_RCC_MCOConfig>
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_ETH_Init+0x84>)
 80011be:	4a20      	ldr	r2, [pc, #128]	; (8001240 <MX_ETH_Init+0x88>)
 80011c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_ETH_Init+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_ETH_Init+0x8c>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_ETH_Init+0x8c>)
 80011d0:	22e1      	movs	r2, #225	; 0xe1
 80011d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_ETH_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_ETH_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_ETH_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_ETH_Init+0x84>)
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <MX_ETH_Init+0x8c>)
 80011ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_ETH_Init+0x84>)
 80011ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_ETH_Init+0x84>)
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <MX_ETH_Init+0x90>)
 80011f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_ETH_Init+0x84>)
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_ETH_Init+0x94>)
 80011fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_ETH_Init+0x84>)
 8001202:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001206:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_ETH_Init+0x84>)
 800120a:	f002 ff9d 	bl	8004148 <HAL_ETH_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001214:	f000 fdb3 	bl	8001d7e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001218:	2238      	movs	r2, #56	; 0x38
 800121a:	2100      	movs	r1, #0
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_ETH_Init+0x98>)
 800121e:	f00d ff5f 	bl	800f0e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_ETH_Init+0x98>)
 8001224:	2221      	movs	r2, #33	; 0x21
 8001226:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_ETH_Init+0x98>)
 800122a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800122e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_ETH_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000558 	.word	0x20000558
 8001240:	40028000 	.word	0x40028000
 8001244:	20003408 	.word	0x20003408
 8001248:	200004b8 	.word	0x200004b8
 800124c:	20000418 	.word	0x20000418
 8001250:	200003e0 	.word	0x200003e0

08001254 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_I2C2_Init+0x74>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <MX_I2C2_Init+0x78>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <MX_I2C2_Init+0x7c>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_I2C2_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_I2C2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C2_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_I2C2_Init+0x74>)
 8001292:	f003 fc61 	bl	8004b58 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 fd6f 	bl	8001d7e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_I2C2_Init+0x74>)
 80012a4:	f004 faa2 	bl	80057ec <HAL_I2CEx_ConfigAnalogFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012ae:	f000 fd66 	bl	8001d7e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C2_Init+0x74>)
 80012b6:	f004 fad5 	bl	8005864 <HAL_I2CEx_ConfigDigitalFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 fd5d 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000608 	.word	0x20000608
 80012cc:	40005800 	.word	0x40005800
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_SPI1_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <MX_SPI1_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI1_Init+0x64>)
 8001300:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI1_Init+0x64>)
 8001308:	2220      	movs	r2, #32
 800130a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI1_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_SPI1_Init+0x64>)
 8001326:	f005 f92b 	bl	8006580 <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fd25 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000071c 	.word	0x2000071c
 800133c:	40013000 	.word	0x40013000

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00d feb1 	bl	800f0e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <MX_TIM1_Init+0x138>)
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <MX_TIM1_Init+0x13c>)
 8001382:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_TIM1_Init+0x138>)
 8001386:	22a7      	movs	r2, #167	; 0xa7
 8001388:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <MX_TIM1_Init+0x138>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MX_TIM1_Init+0x138>)
 8001392:	2263      	movs	r2, #99	; 0x63
 8001394:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_TIM1_Init+0x138>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_TIM1_Init+0x138>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_TIM1_Init+0x138>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a8:	4833      	ldr	r0, [pc, #204]	; (8001478 <MX_TIM1_Init+0x138>)
 80013aa:	f005 fd29 	bl	8006e00 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013b4:	f000 fce3 	bl	8001d7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c2:	4619      	mov	r1, r3
 80013c4:	482c      	ldr	r0, [pc, #176]	; (8001478 <MX_TIM1_Init+0x138>)
 80013c6:	f006 f92f 	bl	8007628 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013d0:	f000 fcd5 	bl	8001d7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d4:	4828      	ldr	r0, [pc, #160]	; (8001478 <MX_TIM1_Init+0x138>)
 80013d6:	f005 fe3b 	bl	8007050 <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013e0:	f000 fccd 	bl	8001d7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f0:	4619      	mov	r1, r3
 80013f2:	4821      	ldr	r0, [pc, #132]	; (8001478 <MX_TIM1_Init+0x138>)
 80013f4:	f006 fd18 	bl	8007e28 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013fe:	f000 fcbe 	bl	8001d7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <MX_TIM1_Init+0x138>)
 8001428:	f006 f83c 	bl	80074a4 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001432:	f000 fca4 	bl	8001d7e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM1_Init+0x138>)
 800145a:	f006 fd61 	bl	8007f20 <HAL_TIMEx_ConfigBreakDeadTime>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001464:	f000 fc8b 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM1_Init+0x138>)
 800146a:	f000 ff63 	bl	8002334 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3758      	adds	r7, #88	; 0x58
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000834 	.word	0x20000834
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM3_Init+0x94>)
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_TIM3_Init+0x98>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_TIM3_Init+0x94>)
 80014a4:	2247      	movs	r2, #71	; 0x47
 80014a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM3_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <MX_TIM3_Init+0x94>)
 80014b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_TIM3_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <MX_TIM3_Init+0x94>)
 80014c4:	f005 fc9c 	bl	8006e00 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 fc56 	bl	8001d7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_TIM3_Init+0x94>)
 80014e0:	f006 f8a2 	bl	8007628 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fc48 	bl	8001d7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_TIM3_Init+0x94>)
 80014fc:	f006 fc94 	bl	8007e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001506:	f000 fc3a 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000087c 	.word	0x2000087c
 8001518:	40000400 	.word	0x40000400

0800151c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART3_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART3_UART_Init+0x4c>)
 8001554:	f006 fd4a 	bl	8007fec <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 fc0e 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000924 	.word	0x20000924
 800156c:	40004800 	.word	0x40004800

08001570 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800157a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2204      	movs	r2, #4
 8001580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2202      	movs	r2, #2
 8001586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2202      	movs	r2, #2
 8001592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2201      	movs	r2, #1
 8001598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	f004 f995 	bl	80058e2 <HAL_PCD_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 fbde 	bl	8001d7e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000a28 	.word	0x20000a28

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <MX_DMA_Init+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <MX_DMA_Init+0xb8>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_DMA_Init+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <MX_DMA_Init+0xb8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <MX_DMA_Init+0xb8>)
 80015f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_DMA_Init+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	200c      	movs	r0, #12
 8001610:	f002 f962 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001614:	200c      	movs	r0, #12
 8001616:	f002 f97b 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	200e      	movs	r0, #14
 8001620:	f002 f95a 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001624:	200e      	movs	r0, #14
 8001626:	f002 f973 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	200f      	movs	r0, #15
 8001630:	f002 f952 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001634:	200f      	movs	r0, #15
 8001636:	f002 f96b 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2105      	movs	r1, #5
 800163e:	202f      	movs	r0, #47	; 0x2f
 8001640:	f002 f94a 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001644:	202f      	movs	r0, #47	; 0x2f
 8001646:	f002 f963 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2105      	movs	r1, #5
 800164e:	2039      	movs	r0, #57	; 0x39
 8001650:	f002 f942 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001654:	2039      	movs	r0, #57	; 0x39
 8001656:	f002 f95b 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	203a      	movs	r0, #58	; 0x3a
 8001660:	f002 f93a 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001664:	203a      	movs	r0, #58	; 0x3a
 8001666:	f002 f953 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2044      	movs	r0, #68	; 0x44
 8001670:	f002 f932 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001674:	2044      	movs	r0, #68	; 0x44
 8001676:	f002 f94b 	bl	8003910 <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b6e      	ldr	r3, [pc, #440]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a6d      	ldr	r2, [pc, #436]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b67      	ldr	r3, [pc, #412]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a66      	ldr	r2, [pc, #408]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b64      	ldr	r3, [pc, #400]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a5f      	ldr	r2, [pc, #380]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a58      	ldr	r2, [pc, #352]	; (800185c <MX_GPIO_Init+0x1d4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b52      	ldr	r3, [pc, #328]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a51      	ldr	r2, [pc, #324]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a4a      	ldr	r2, [pc, #296]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <MX_GPIO_Init+0x1d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b44      	ldr	r3, [pc, #272]	; (800185c <MX_GPIO_Init+0x1d4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a43      	ldr	r2, [pc, #268]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a3c      	ldr	r2, [pc, #240]	; (800185c <MX_GPIO_Init+0x1d4>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <MX_GPIO_Init+0x1d4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f244 0181 	movw	r1, #16513	; 0x4081
 8001784:	4836      	ldr	r0, [pc, #216]	; (8001860 <MX_GPIO_Init+0x1d8>)
 8001786:	f003 f9b3 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	4835      	ldr	r0, [pc, #212]	; (8001864 <MX_GPIO_Init+0x1dc>)
 8001790:	f003 f9ae 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x1e0>)
 80017ac:	f002 fff4 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 80017b0:	2308      	movs	r3, #8
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <MX_GPIO_Init+0x1e4>)
 80017c4:	f002 ffe8 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	481f      	ldr	r0, [pc, #124]	; (8001860 <MX_GPIO_Init+0x1d8>)
 80017e2:	f002 ffd9 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <MX_GPIO_Init+0x1dc>)
 80017fe:	f002 ffcb 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <MX_GPIO_Init+0x1dc>)
 8001816:	f002 ffbf 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <MX_GPIO_Init+0x1e0>)
 8001838:	f002 ffae 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_SensorD5_Pin */
  GPIO_InitStruct.Pin = Temp_SensorD5_Pin;
 800183c:	2320      	movs	r3, #32
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_SensorD5_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_GPIO_Init+0x1e8>)
 8001850:	f002 ffa2 	bl	8004798 <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400
 8001864:	40021800 	.word	0x40021800
 8001868:	40020800 	.word	0x40020800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020c00 	.word	0x40020c00

08001874 <bcdToDec>:
   return (uint8_t)( (val/10*16) + (val%10) );
 }

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	461a      	mov	r2, r3
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4413      	add	r3, r2
 }
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <Get_Time>:
 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }

 void Get_Time (void)
 {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af02      	add	r7, sp, #8
 	uint8_t get_time[7];
// 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 80018aa:	23d0      	movs	r3, #208	; 0xd0
 80018ac:	b299      	uxth	r1, r3
 80018ae:	2307      	movs	r3, #7
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	463b      	mov	r3, r7
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	2200      	movs	r2, #0
 80018ba:	481f      	ldr	r0, [pc, #124]	; (8001938 <Get_Time+0x94>)
 80018bc:	f003 fa90 	bl	8004de0 <HAL_I2C_Mem_Read_DMA>
 	time.seconds = bcdToDec(get_time[0]);
 80018c0:	783b      	ldrb	r3, [r7, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffd6 	bl	8001874 <bcdToDec>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <Get_Time+0x98>)
 80018ce:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ffce 	bl	8001874 <bcdToDec>
 80018d8:	4603      	mov	r3, r0
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <Get_Time+0x98>)
 80018de:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 80018e0:	78bb      	ldrb	r3, [r7, #2]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ffc6 	bl	8001874 <bcdToDec>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <Get_Time+0x98>)
 80018ee:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffbe 	bl	8001874 <bcdToDec>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <Get_Time+0x98>)
 80018fe:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 8001900:	793b      	ldrb	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ffb6 	bl	8001874 <bcdToDec>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <Get_Time+0x98>)
 800190e:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 8001910:	797b      	ldrb	r3, [r7, #5]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ffae 	bl	8001874 <bcdToDec>
 8001918:	4603      	mov	r3, r0
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <Get_Time+0x98>)
 800191e:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ffa6 	bl	8001874 <bcdToDec>
 8001928:	4603      	mov	r3, r0
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <Get_Time+0x98>)
 800192e:	719a      	strb	r2, [r3, #6]
 }
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000608 	.word	0x20000608
 800193c:	20000f70 	.word	0x20000f70

08001940 <Start_RTC>:

char time_buffer[10];
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	Set_Time(00, 03, 14, 4, 15, 2, 24);
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8001948:	f7ff ffac 	bl	80018a4 <Get_Time>
	  sprintf(time_buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <Start_RTC+0x44>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	461a      	mov	r2, r3
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <Start_RTC+0x44>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	4619      	mov	r1, r3
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <Start_RTC+0x44>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	460b      	mov	r3, r1
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <Start_RTC+0x48>)
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <Start_RTC+0x4c>)
 8001964:	f00d fd1e 	bl	800f3a4 <siprintf>
//	  sprintf ((char*)uart_buffer,"LED Status %d\r",led_status);
	  send_uart_dma(time_buffer, strlen((char*)time_buffer));
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <Start_RTC+0x4c>)
 800196a:	f7fe fc41 	bl	80001f0 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <Start_RTC+0x4c>)
 8001974:	f000 f80c 	bl	8001990 <send_uart_dma>
	  osDelay(1000);
 8001978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197c:	f00a ffaa 	bl	800c8d4 <osDelay>
  {
 8001980:	e7e2      	b.n	8001948 <Start_RTC+0x8>
 8001982:	bf00      	nop
 8001984:	20000f70 	.word	0x20000f70
 8001988:	0800fb80 	.word	0x0800fb80
 800198c:	20000f78 	.word	0x20000f78

08001990 <send_uart_dma>:
/**
* @brief Function implementing the UART_LEDTask thread.
* @param argument: Not used
* @retval None
*/
void send_uart_dma(uint8_t* ptr, uint16_t len){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 800199c:	bf00      	nop
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <send_uart_dma+0x30>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fb      	beq.n	800199e <send_uart_dma+0xe>

	UART_SendFlag=0;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <send_uart_dma+0x30>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	461a      	mov	r2, r3
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <send_uart_dma+0x34>)
 80019b4:	f006 fb68 	bl	8008088 <HAL_UART_Transmit_DMA>

}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000001 	.word	0x20000001
 80019c4:	20000924 	.word	0x20000924

080019c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_UART_RxCpltCallback+0x40>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b0d      	cmp	r3, #13
 80019d6:	d007      	beq.n	80019e8 <HAL_UART_RxCpltCallback+0x20>
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_UART_RxCpltCallback+0x40>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b0a      	cmp	r3, #10
 80019de:	d003      	beq.n	80019e8 <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_UART_RxCpltCallback+0x40>)
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_UART_RxCpltCallback+0x44>)
 80019e6:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_UART_RxCpltCallback+0x40>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b0d      	cmp	r3, #13
 80019ee:	d102      	bne.n	80019f6 <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_UART_RxCpltCallback+0x48>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_UART_RxCpltCallback+0x40>)
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <HAL_UART_RxCpltCallback+0x4c>)
 80019fc:	f006 fbc2 	bl	8008184 <HAL_UART_Receive_DMA>

}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000f4c 	.word	0x20000f4c
 8001a0c:	20000f4d 	.word	0x20000f4d
 8001a10:	20000f4e 	.word	0x20000f4e
 8001a14:	20000924 	.word	0x20000924

08001a18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_UART_TxCpltCallback+0x1c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000001 	.word	0x20000001

08001a38 <Start_UART_LED>:
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001a40:	481e      	ldr	r0, [pc, #120]	; (8001abc <Start_UART_LED+0x84>)
 8001a42:	f7fe fbd5 	bl	80001f0 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481b      	ldr	r0, [pc, #108]	; (8001abc <Start_UART_LED+0x84>)
 8001a4e:	f7ff ff9f 	bl	8001990 <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <Start_UART_LED+0x88>)
 8001a56:	481b      	ldr	r0, [pc, #108]	; (8001ac4 <Start_UART_LED+0x8c>)
 8001a58:	f006 fb94 	bl	8008184 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <Start_UART_LED+0x90>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d026      	beq.n	8001ab2 <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <Start_UART_LED+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

	      	//process command
	      	switch (cmd){
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <Start_UART_LED+0x94>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b33      	cmp	r3, #51	; 0x33
 8001a70:	d010      	beq.n	8001a94 <Start_UART_LED+0x5c>
 8001a72:	2b33      	cmp	r3, #51	; 0x33
 8001a74:	dc14      	bgt.n	8001aa0 <Start_UART_LED+0x68>
 8001a76:	2b31      	cmp	r3, #49	; 0x31
 8001a78:	d002      	beq.n	8001a80 <Start_UART_LED+0x48>
 8001a7a:	2b32      	cmp	r3, #50	; 0x32
 8001a7c:	d005      	beq.n	8001a8a <Start_UART_LED+0x52>
 8001a7e:	e00f      	b.n	8001aa0 <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8001a80:	2101      	movs	r1, #1
 8001a82:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <Start_UART_LED+0x98>)
 8001a84:	f003 f84d 	bl	8004b22 <HAL_GPIO_TogglePin>
	      		break;
 8001a88:	e00a      	b.n	8001aa0 <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <Start_UART_LED+0x98>)
 8001a8e:	f003 f848 	bl	8004b22 <HAL_GPIO_TogglePin>
	      		break;
 8001a92:	e005      	b.n	8001aa0 <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8001a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <Start_UART_LED+0x98>)
 8001a9a:	f003 f842 	bl	8004b22 <HAL_GPIO_TogglePin>
	      		break;
 8001a9e:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <Start_UART_LED+0x84>)
 8001aa2:	f7fe fba5 	bl	80001f0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <Start_UART_LED+0x84>)
 8001aae:	f7ff ff6f 	bl	8001990 <send_uart_dma>

	      	}

    osDelay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f00a ff0e 	bl	800c8d4 <osDelay>
	  if(cmdstate){
 8001ab8:	e7d0      	b.n	8001a5c <Start_UART_LED+0x24>
 8001aba:	bf00      	nop
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	20000f4c 	.word	0x20000f4c
 8001ac4:	20000924 	.word	0x20000924
 8001ac8:	20000f4e 	.word	0x20000f4e
 8001acc:	20000f4d 	.word	0x20000f4d
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <bufsize>:
void send_uart (char *string){
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart3,(uint8_t *)string,len,2000);
}

int bufsize(char *buf){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	int i=0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 8001ae0:	e002      	b.n	8001ae8 <bufsize+0x14>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f6      	bne.n	8001ae2 <bufsize+0xe>
	return i;
 8001af4:	68fb      	ldr	r3, [r7, #12]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <bufclear>:

void bufclear(void){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e007      	b.n	8001b20 <bufclear+0x1c>
		SD_buffer[i]= '\0';
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <bufclear+0x34>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	dbf3      	blt.n	8001b10 <bufclear+0xc>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20002ff0 	.word	0x20002ff0

08001b3c <Start_DataLogging>:
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
	fresult = f_mount(&fs,"",0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	4937      	ldr	r1, [pc, #220]	; (8001c24 <Start_DataLogging+0xe8>)
 8001b48:	4837      	ldr	r0, [pc, #220]	; (8001c28 <Start_DataLogging+0xec>)
 8001b4a:	f009 fde3 	bl	800b714 <f_mount>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <Start_DataLogging+0xf0>)
 8001b54:	701a      	strb	r2, [r3, #0]
//	if(fresult != FR_OK) send_uart("error in mounting SD CARD...\n");
//	else send_uart("SD Card mounted successfully...\n");
	fresult = f_open(&fil,"file1.txt",FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8001b56:	2213      	movs	r2, #19
 8001b58:	4935      	ldr	r1, [pc, #212]	; (8001c30 <Start_DataLogging+0xf4>)
 8001b5a:	4836      	ldr	r0, [pc, #216]	; (8001c34 <Start_DataLogging+0xf8>)
 8001b5c:	f009 fe3e 	bl	800b7dc <f_open>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <Start_DataLogging+0xf0>)
 8001b66:	701a      	strb	r2, [r3, #0]
	strcpy(SD_buffer,"This data is from file\n\n");
 8001b68:	4a33      	ldr	r2, [pc, #204]	; (8001c38 <Start_DataLogging+0xfc>)
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <Start_DataLogging+0x100>)
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b78:	c403      	stmia	r4!, {r0, r1}
 8001b7a:	7022      	strb	r2, [r4, #0]
	fresult = f_write(&fil,SD_buffer,bufsize(SD_buffer),&bw);
 8001b7c:	482e      	ldr	r0, [pc, #184]	; (8001c38 <Start_DataLogging+0xfc>)
 8001b7e:	f7ff ffa9 	bl	8001ad4 <bufsize>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <Start_DataLogging+0x104>)
 8001b88:	492b      	ldr	r1, [pc, #172]	; (8001c38 <Start_DataLogging+0xfc>)
 8001b8a:	482a      	ldr	r0, [pc, #168]	; (8001c34 <Start_DataLogging+0xf8>)
 8001b8c:	f009 fff9 	bl	800bb82 <f_write>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <Start_DataLogging+0xf0>)
 8001b96:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8001b98:	4826      	ldr	r0, [pc, #152]	; (8001c34 <Start_DataLogging+0xf8>)
 8001b9a:	f00a fa3e 	bl	800c01a <f_close>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <Start_DataLogging+0xf0>)
 8001ba4:	701a      	strb	r2, [r3, #0]
	bufclear();
 8001ba6:	f7ff ffad 	bl	8001b04 <bufclear>
	unsigned long ptr = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	fresult = f_open(&fil,"file2.txt",FA_OPEN_ALWAYS|FA_WRITE);
 8001bae:	2212      	movs	r2, #18
 8001bb0:	4924      	ldr	r1, [pc, #144]	; (8001c44 <Start_DataLogging+0x108>)
 8001bb2:	4820      	ldr	r0, [pc, #128]	; (8001c34 <Start_DataLogging+0xf8>)
 8001bb4:	f009 fe12 	bl	800b7dc <f_open>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <Start_DataLogging+0xf0>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil, ptr);
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <Start_DataLogging+0xf8>)
 8001bc4:	f00a fa58 	bl	800c078 <f_lseek>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <Start_DataLogging+0xf0>)
 8001bce:	701a      	strb	r2, [r3, #0]
	fresult = f_puts(time_buffer,&fil);
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <Start_DataLogging+0xf8>)
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <Start_DataLogging+0x10c>)
 8001bd4:	f00a fd35 	bl	800c642 <f_puts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <Start_DataLogging+0xf0>)
 8001bde:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(time_buffer);
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <Start_DataLogging+0x10c>)
 8001be2:	f7ff ff77 	bl	8001ad4 <bufsize>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(",\n",&fil);
 8001bf0:	4910      	ldr	r1, [pc, #64]	; (8001c34 <Start_DataLogging+0xf8>)
 8001bf2:	4816      	ldr	r0, [pc, #88]	; (8001c4c <Start_DataLogging+0x110>)
 8001bf4:	f00a fd25 	bl	800c642 <f_puts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <Start_DataLogging+0xf0>)
 8001bfe:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3302      	adds	r3, #2
 8001c04:	60fb      	str	r3, [r7, #12]
//	fresult = f_write(&fil,time_buffer,bufsize(time_buffer),&bw);
	fresult = f_close(&fil);
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <Start_DataLogging+0xf8>)
 8001c08:	f00a fa07 	bl	800c01a <f_close>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <Start_DataLogging+0xf0>)
 8001c12:	701a      	strb	r2, [r3, #0]
	bufclear();
 8001c14:	f7ff ff76 	bl	8001b04 <bufclear>
//	fresult = f_puts(time_buffer,&fil);
//	fresult = f_puts(",",&fil);
//	//fresult = f_puts(fan_speed,&fil);
//	fresult = f_puts("\n\n",&fil);
////	fresult = f_close(&fil);
    osDelay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f00a fe5a 	bl	800c8d4 <osDelay>
	fresult = f_open(&fil,"file2.txt",FA_OPEN_ALWAYS|FA_WRITE);
 8001c20:	e7c5      	b.n	8001bae <Start_DataLogging+0x72>
 8001c22:	bf00      	nop
 8001c24:	0800fb90 	.word	0x0800fb90
 8001c28:	20000f84 	.word	0x20000f84
 8001c2c:	20002fec 	.word	0x20002fec
 8001c30:	0800fb94 	.word	0x0800fb94
 8001c34:	20001fbc 	.word	0x20001fbc
 8001c38:	20002ff0 	.word	0x20002ff0
 8001c3c:	0800fba0 	.word	0x0800fba0
 8001c40:	200033f0 	.word	0x200033f0
 8001c44:	0800fbbc 	.word	0x0800fbbc
 8001c48:	20000f78 	.word	0x20000f78
 8001c4c:	0800fbc8 	.word	0x0800fbc8

08001c50 <Start_FanControl>:
*/

char fan_speed[20];
/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
	uint8_t sp = 45;
 8001c58:	232d      	movs	r3, #45	; 0x2d
 8001c5a:	73bb      	strb	r3, [r7, #14]
	TIM1->CCR1 = 50;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <Start_FanControl+0x4c>)
 8001c5e:	2232      	movs	r2, #50	; 0x32
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001c62:	2100      	movs	r1, #0
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <Start_FanControl+0x50>)
 8001c66:	f005 fa4d 	bl	8007104 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	for(uint8_t i =0;i<100;i++){
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e00e      	b.n	8001c8e <Start_FanControl+0x3e>
		TIM1->CCR1 = i;
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <Start_FanControl+0x4c>)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	6353      	str	r3, [r2, #52]	; 0x34
		sprintf(fan_speed,"Fan Speed : %02d",sp);
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <Start_FanControl+0x54>)
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <Start_FanControl+0x58>)
 8001c7e:	f00d fb91 	bl	800f3a4 <siprintf>
		osDelay(10);
 8001c82:	200a      	movs	r0, #10
 8001c84:	f00a fe26 	bl	800c8d4 <osDelay>
	for(uint8_t i =0;i<100;i++){
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b63      	cmp	r3, #99	; 0x63
 8001c92:	d9ed      	bls.n	8001c70 <Start_FanControl+0x20>
	}
    osDelay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f00a fe1d 	bl	800c8d4 <osDelay>
	for(uint8_t i =0;i<100;i++){
 8001c9a:	e7e6      	b.n	8001c6a <Start_FanControl+0x1a>
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	20000834 	.word	0x20000834
 8001ca4:	0800fbcc 	.word	0x0800fbcc
 8001ca8:	200033f4 	.word	0x200033f4

08001cac <Start_Temp>:
* @retval None
*/

/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */

	TM_OneWire_Init(&OW, Temp_Sensor_GPIO_Port, Temp_Sensor_Pin);
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4925      	ldr	r1, [pc, #148]	; (8001d4c <Start_Temp+0xa0>)
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <Start_Temp+0xa4>)
 8001cba:	f001 fa8b 	bl	80031d4 <TM_OneWire_Init>

	if (TM_OneWire_First(&OW)) {
 8001cbe:	4824      	ldr	r0, [pc, #144]	; (8001d50 <Start_Temp+0xa4>)
 8001cc0:	f001 fba8 	bl	8003414 <TM_OneWire_First>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <Start_Temp+0x30>
		/* Set LED GREEN */
		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <Start_Temp+0xa8>)
 8001cce:	f002 ff28 	bl	8004b22 <HAL_GPIO_TogglePin>

		/* Read ROM number */
		TM_OneWire_GetFullROM(&OW, DS_ROM);
 8001cd2:	4921      	ldr	r1, [pc, #132]	; (8001d58 <Start_Temp+0xac>)
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <Start_Temp+0xa4>)
 8001cd6:	f001 fca5 	bl	8003624 <TM_OneWire_GetFullROM>
 8001cda:	e003      	b.n	8001ce4 <Start_Temp+0x38>
	} else {
		/* Set LED RED */
		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	481d      	ldr	r0, [pc, #116]	; (8001d54 <Start_Temp+0xa8>)
 8001ce0:	f002 ff1f 	bl	8004b22 <HAL_GPIO_TogglePin>
	}

	if (TM_DS18B20_Is(DS_ROM)) {
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <Start_Temp+0xac>)
 8001ce6:	f001 f837 	bl	8002d58 <TM_DS18B20_Is>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d011      	beq.n	8001d14 <Start_Temp+0x68>
	        /* Set resolution */
	        TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_12bits);
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4919      	ldr	r1, [pc, #100]	; (8001d58 <Start_Temp+0xac>)
 8001cf4:	4816      	ldr	r0, [pc, #88]	; (8001d50 <Start_Temp+0xa4>)
 8001cf6:	f000 ffa7 	bl	8002c48 <TM_DS18B20_SetResolution>

	        /* Set high and low alarms */
	        TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 8001cfa:	221e      	movs	r2, #30
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <Start_Temp+0xac>)
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <Start_Temp+0xa4>)
 8001d00:	f001 f8a3 	bl	8002e4a <TM_DS18B20_SetAlarmHighTemperature>
	        TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 8001d04:	220a      	movs	r2, #10
 8001d06:	4914      	ldr	r1, [pc, #80]	; (8001d58 <Start_Temp+0xac>)
 8001d08:	4811      	ldr	r0, [pc, #68]	; (8001d50 <Start_Temp+0xa4>)
 8001d0a:	f001 f836 	bl	8002d7a <TM_DS18B20_SetAlarmLowTemperature>

	        /* Start conversion on all sensors */
	        TM_DS18B20_StartAll(&OW);
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <Start_Temp+0xa4>)
 8001d10:	f000 fe86 	bl	8002a20 <TM_DS18B20_StartAll>
	    }
  for(;;)
  {
	  if (TM_DS18B20_Is(DS_ROM)) {
 8001d14:	4810      	ldr	r0, [pc, #64]	; (8001d58 <Start_Temp+0xac>)
 8001d16:	f001 f81f 	bl	8002d58 <TM_DS18B20_Is>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <Start_Temp+0x96>
	              /* Everything is done */
	              if (TM_DS18B20_AllDone(&OW)) {
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <Start_Temp+0xa4>)
 8001d22:	f001 f8fa 	bl	8002f1a <TM_DS18B20_AllDone>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <Start_Temp+0x96>
	                  /* Read temperature from device */
	                  if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <Start_Temp+0xb0>)
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <Start_Temp+0xac>)
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <Start_Temp+0xa4>)
 8001d32:	f000 fe89 	bl	8002a48 <TM_DS18B20_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <Start_Temp+0x96>
	                      /* Temp read OK, CRC is OK */

	                      /* Start again on all sensors */
	                      TM_DS18B20_StartAll(&OW);
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <Start_Temp+0xa4>)
 8001d3e:	f000 fe6f 	bl	8002a20 <TM_DS18B20_StartAll>
	                      /* CRC failed, hardware problems on data line */
	                  }
	              }
	          }

    osDelay(100);
 8001d42:	2064      	movs	r0, #100	; 0x64
 8001d44:	f00a fdc6 	bl	800c8d4 <osDelay>
	  if (TM_DS18B20_Is(DS_ROM)) {
 8001d48:	e7e4      	b.n	8001d14 <Start_Temp+0x68>
 8001d4a:	bf00      	nop
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	20000f50 	.word	0x20000f50
 8001d54:	40020400 	.word	0x40020400
 8001d58:	20000f64 	.word	0x20000f64
 8001d5c:	20000f6c 	.word	0x20000f6c

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f000 fd99 	bl	80028a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d82:	b672      	cpsid	i
}
 8001d84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <Error_Handler+0x8>

08001d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_MspInit+0x54>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_MspInit+0x54>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x54>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_MspInit+0x54>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_MspInit+0x54>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_MspInit+0x54>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210f      	movs	r1, #15
 8001dca:	f06f 0001 	mvn.w	r0, #1
 8001dce:	f001 fd83 	bl	80038d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <HAL_ETH_MspInit+0x174>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f040 80a4 	bne.w	8001f4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	4b45      	ldr	r3, [pc, #276]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4a44      	ldr	r2, [pc, #272]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a36      	ldr	r2, [pc, #216]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eba:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ec8:	2332      	movs	r3, #50	; 0x32
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481e      	ldr	r0, [pc, #120]	; (8001f5c <HAL_ETH_MspInit+0x17c>)
 8001ee4:	f002 fc58 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ee8:	2386      	movs	r3, #134	; 0x86
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ef8:	230b      	movs	r3, #11
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4817      	ldr	r0, [pc, #92]	; (8001f60 <HAL_ETH_MspInit+0x180>)
 8001f04:	f002 fc48 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f1a:	230b      	movs	r3, #11
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <HAL_ETH_MspInit+0x184>)
 8001f26:	f002 fc37 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f3c:	230b      	movs	r3, #11
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <HAL_ETH_MspInit+0x188>)
 8001f48:	f002 fc26 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3738      	adds	r7, #56	; 0x38
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40028000 	.word	0x40028000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40021800 	.word	0x40021800

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_I2C_MspInit+0x13c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 8088 	bne.w	80020a0 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001f9a:	f043 0320 	orr.w	r3, r3, #32
 8001f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fac:	2303      	movs	r3, #3
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <HAL_I2C_MspInit+0x144>)
 8001fc8:	f002 fbe6 	bl	8004798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a35      	ldr	r2, [pc, #212]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_I2C_MspInit+0x140>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8001fea:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <HAL_I2C_MspInit+0x14c>)
 8001fec:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8001ff0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ff4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8002004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002008:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002028:	4822      	ldr	r0, [pc, #136]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 800202a:	f001 fc7f 	bl	800392c <HAL_DMA_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002034:	f7ff fea3 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
 800203e:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_I2C_MspInit+0x148>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_I2C_MspInit+0x154>)
 8002048:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_I2C_MspInit+0x150>)
 800204c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002050:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002054:	2240      	movs	r2, #64	; 0x40
 8002056:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_I2C_MspInit+0x150>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002064:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_I2C_MspInit+0x150>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_I2C_MspInit+0x150>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002086:	f001 fc51 	bl	800392c <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8002090:	f7ff fe75 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_I2C_MspInit+0x150>)
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_I2C_MspInit+0x150>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40005800 	.word	0x40005800
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40021400 	.word	0x40021400
 80020b4:	2000065c 	.word	0x2000065c
 80020b8:	40026058 	.word	0x40026058
 80020bc:	200006bc 	.word	0x200006bc
 80020c0:	400260b8 	.word	0x400260b8

080020c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a57      	ldr	r2, [pc, #348]	; (8002240 <HAL_SPI_MspInit+0x17c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f040 80a8 	bne.w	8002238 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_SPI_MspInit+0x180>)
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_SPI_MspInit+0x180>)
 80020f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f6:	6453      	str	r3, [r2, #68]	; 0x44
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_SPI_MspInit+0x180>)
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <HAL_SPI_MspInit+0x180>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_SPI_MspInit+0x180>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_SPI_MspInit+0x180>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_SPI_MspInit+0x180>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_SPI_MspInit+0x180>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_SPI_MspInit+0x180>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800213c:	2370      	movs	r3, #112	; 0x70
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214c:	2305      	movs	r3, #5
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	483c      	ldr	r0, [pc, #240]	; (8002248 <HAL_SPI_MspInit+0x184>)
 8002158:	f002 fb1e 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800215c:	2320      	movs	r3, #32
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216c:	2305      	movs	r3, #5
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4835      	ldr	r0, [pc, #212]	; (800224c <HAL_SPI_MspInit+0x188>)
 8002178:	f002 fb0e 	bl	8004798 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 800217e:	4a35      	ldr	r2, [pc, #212]	; (8002254 <HAL_SPI_MspInit+0x190>)
 8002180:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 8002184:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002188:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80021be:	4824      	ldr	r0, [pc, #144]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021c0:	f001 fbb4 	bl	800392c <HAL_DMA_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80021ca:	f7ff fdd8 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d4:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_SPI_MspInit+0x18c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_SPI_MspInit+0x198>)
 80021de:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80021e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_SPI_MspInit+0x194>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_SPI_MspInit+0x194>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_SPI_MspInit+0x194>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_SPI_MspInit+0x194>)
 8002210:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002214:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_SPI_MspInit+0x194>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <HAL_SPI_MspInit+0x194>)
 800221e:	f001 fb85 	bl	800392c <HAL_DMA_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002228:	f7ff fda9 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_SPI_MspInit+0x194>)
 8002230:	649a      	str	r2, [r3, #72]	; 0x48
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_SPI_MspInit+0x194>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013000 	.word	0x40013000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	20000774 	.word	0x20000774
 8002254:	40026440 	.word	0x40026440
 8002258:	200007d4 	.word	0x200007d4
 800225c:	40026488 	.word	0x40026488

08002260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <HAL_TIM_Base_MspInit+0xc0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d13e      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002292:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 8002296:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800229a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022be:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80022d2:	4815      	ldr	r0, [pc, #84]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022d4:	f001 fb2a 	bl	800392c <HAL_DMA_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022de:	f7ff fd4e 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ee:	e012      	b.n	8002316 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_TIM_Base_MspInit+0xd0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10d      	bne.n	8002316 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_TIM_Base_MspInit+0xc4>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40023800 	.word	0x40023800
 8002328:	200008c4 	.word	0x200008c4
 800232c:	40026428 	.word	0x40026428
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_TIM_MspPostInit+0x68>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d11e      	bne.n	8002394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_TIM_MspPostInit+0x6c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_TIM_MspPostInit+0x6c>)
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_TIM_MspPostInit+0x6c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002384:	2301      	movs	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_TIM_MspPostInit+0x70>)
 8002390:	f002 fa02 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_UART_MspInit+0x154>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 8093 	bne.w	80024f2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4a43      	ldr	r2, [pc, #268]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
 80023f8:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002404:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002416:	2307      	movs	r3, #7
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4838      	ldr	r0, [pc, #224]	; (8002504 <HAL_UART_MspInit+0x15c>)
 8002422:	f002 f9b9 	bl	8004798 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_UART_MspInit+0x164>)
 800242a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_UART_MspInit+0x160>)
 800242e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002432:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_UART_MspInit+0x160>)
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002446:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_UART_MspInit+0x160>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_UART_MspInit+0x160>)
 800245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002460:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002468:	4827      	ldr	r0, [pc, #156]	; (8002508 <HAL_UART_MspInit+0x160>)
 800246a:	f001 fa5f 	bl	800392c <HAL_DMA_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002474:	f7ff fc83 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_UART_MspInit+0x160>)
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_UART_MspInit+0x16c>)
 8002488:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_UART_MspInit+0x168>)
 800248c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002490:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_UART_MspInit+0x168>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024c6:	4812      	ldr	r0, [pc, #72]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024c8:	f001 fa30 	bl	800392c <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80024d2:	f7ff fc54 	bl	8001d7e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2105      	movs	r1, #5
 80024e6:	2027      	movs	r0, #39	; 0x27
 80024e8:	f001 f9f6 	bl	80038d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024ec:	2027      	movs	r0, #39	; 0x27
 80024ee:	f001 fa0f 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40004800 	.word	0x40004800
 8002500:	40023800 	.word	0x40023800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	20000968 	.word	0x20000968
 800250c:	40026028 	.word	0x40026028
 8002510:	200009c8 	.word	0x200009c8
 8002514:	40026070 	.word	0x40026070

08002518 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d13f      	bne.n	80025ba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002556:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002568:	230a      	movs	r3, #10
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4815      	ldr	r0, [pc, #84]	; (80025c8 <HAL_PCD_MspInit+0xb0>)
 8002574:	f002 f910 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	480e      	ldr	r0, [pc, #56]	; (80025c8 <HAL_PCD_MspInit+0xb0>)
 800258e:	f002 f903 	bl	8004798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	6353      	str	r3, [r2, #52]	; 0x34
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_PCD_MspInit+0xac>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	; 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_InitTick+0xe8>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a33      	ldr	r2, [pc, #204]	; (80026b4 <HAL_InitTick+0xe8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_InitTick+0xe8>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f8:	f107 0210 	add.w	r2, r7, #16
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff8a 	bl	800651c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002612:	f003 ff5b 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 8002616:	6378      	str	r0, [r7, #52]	; 0x34
 8002618:	e004      	b.n	8002624 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800261a:	f003 ff57 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 800261e:	4603      	mov	r3, r0
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <HAL_InitTick+0xec>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	3b01      	subs	r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_InitTick+0xf0>)
 8002634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002638:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_InitTick+0xf0>)
 800263c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002640:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_InitTick+0xf0>)
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_InitTick+0xf0>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_InitTick+0xf0>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_InitTick+0xf0>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800265a:	4818      	ldr	r0, [pc, #96]	; (80026bc <HAL_InitTick+0xf0>)
 800265c:	f004 fbd0 	bl	8006e00 <HAL_TIM_Base_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11b      	bne.n	80026a6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800266e:	4813      	ldr	r0, [pc, #76]	; (80026bc <HAL_InitTick+0xf0>)
 8002670:	f004 fc7e 	bl	8006f70 <HAL_TIM_Base_Start_IT>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800267a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800267e:	2b00      	cmp	r3, #0
 8002680:	d111      	bne.n	80026a6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002682:	201c      	movs	r0, #28
 8002684:	f001 f944 	bl	8003910 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d808      	bhi.n	80026a0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800268e:	2200      	movs	r2, #0
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	201c      	movs	r0, #28
 8002694:	f001 f920 	bl	80038d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_InitTick+0xf4>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e002      	b.n	80026a6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3738      	adds	r7, #56	; 0x38
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	20003410 	.word	0x20003410
 80026c0:	2000008c 	.word	0x2000008c

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <DMA1_Stream1_IRQHandler+0x10>)
 80026f6:	f001 fab1 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000968 	.word	0x20000968

08002704 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <DMA1_Stream3_IRQHandler+0x10>)
 800270a:	f001 faa7 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000065c 	.word	0x2000065c

08002718 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Stream4_IRQHandler+0x10>)
 800271e:	f001 fa9d 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200009c8 	.word	0x200009c8

0800272c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM2_IRQHandler+0x10>)
 8002732:	f004 fdaf 	bl	8007294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20003410 	.word	0x20003410

08002740 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <USART3_IRQHandler+0x10>)
 8002746:	f005 fd4d 	bl	80081e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000924 	.word	0x20000924

08002754 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Stream7_IRQHandler+0x10>)
 800275a:	f001 fa7f 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200006bc 	.word	0x200006bc

08002768 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <DMA2_Stream1_IRQHandler+0x10>)
 800276e:	f001 fa75 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200008c4 	.word	0x200008c4

0800277c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA2_Stream2_IRQHandler+0x10>)
 8002782:	f001 fa6b 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000774 	.word	0x20000774

08002790 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA2_Stream5_IRQHandler+0x10>)
 8002796:	f001 fa61 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200007d4 	.word	0x200007d4

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f00c fc4a 	bl	800f06c <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	220c      	movs	r2, #12
 80027dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20030000 	.word	0x20030000
 8002804:	00000400 	.word	0x00000400
 8002808:	2000345c 	.word	0x2000345c
 800280c:	20007278 	.word	0x20007278

08002810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <SystemInit+0x20>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <SystemInit+0x20>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <TM_DELAY_Init+0x5c>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <TM_DELAY_Init+0x5c>)
 8002840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002844:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <TM_DELAY_Init+0x5c>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <TM_DELAY_Init+0x5c>)
 800284c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002850:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <TM_DELAY_Init+0x60>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <TM_DELAY_Init+0x60>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <TM_DELAY_Init+0x60>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <TM_DELAY_Init+0x60>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <TM_DELAY_Init+0x60>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <TM_DELAY_Init+0x60>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8002876:	bf00      	nop
	__ASM volatile ("NOP");
 8002878:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <TM_DELAY_Init+0x60>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000edf0 	.word	0xe000edf0
 8002894:	e0001000 	.word	0xe0001000

08002898 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_IncTick+0x100>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a3c      	ldr	r2, [pc, #240]	; (80029a8 <HAL_IncTick+0x100>)
 80028b6:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_IncTick+0x104>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <HAL_IncTick+0x22>
		TM_Time2--;
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_IncTick+0x104>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a39      	ldr	r2, [pc, #228]	; (80029ac <HAL_IncTick+0x104>)
 80028c8:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80028ca:	2300      	movs	r3, #0
 80028cc:	71fb      	strb	r3, [r7, #7]
 80028ce:	e05f      	b.n	8002990 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <HAL_IncTick+0x108>)
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	685b      	ldr	r3, [r3, #4]
		if (
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d055      	beq.n	800298a <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4a33      	ldr	r2, [pc, #204]	; (80029b0 <HAL_IncTick+0x108>)
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d04a      	beq.n	800298a <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_IncTick+0x108>)
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_IncTick+0x108>)
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	3a01      	subs	r2, #1
 8002912:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <HAL_IncTick+0x108>)
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d132      	bne.n	800298a <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_IncTick+0x108>)
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	491f      	ldr	r1, [pc, #124]	; (80029b0 <HAL_IncTick+0x108>)
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	6858      	ldr	r0, [r3, #4]
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	491c      	ldr	r1, [pc, #112]	; (80029b0 <HAL_IncTick+0x108>)
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4619      	mov	r1, r3
 8002948:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_IncTick+0x108>)
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_IncTick+0x108>)
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	6852      	ldr	r2, [r2, #4]
 8002960:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_IncTick+0x108>)
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_IncTick+0x108>)
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	7813      	ldrb	r3, [r2, #0]
 8002984:	f36f 0341 	bfc	r3, #1, #1
 8002988:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	3301      	adds	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_IncTick+0x108>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	79fa      	ldrb	r2, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d39a      	bcc.n	80028d0 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 800299a:	f7ff ff7d 	bl	8002898 <TM_DELAY_1msHandler>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20003464 	.word	0x20003464
 80029ac:	20003460 	.word	0x20003460
 80029b0:	20003468 	.word	0x20003468

080029b4 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029bc:	f3ef 8305 	mrs	r3, IPSR
 80029c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c2:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d115      	bne.n	80029f4 <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 80029c8:	f000 f81e 	bl	8002a08 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 80029ce:	bf00      	nop
 80029d0:	f000 f81a 	bl	8002a08 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d8f7      	bhi.n	80029d0 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 80029e0:	e00b      	b.n	80029fa <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_Delay+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_Delay+0x40>
				Delay--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
		while (Delay) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f3      	bne.n	80029e2 <HAL_Delay+0x2e>
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20003464 	.word	0x20003464

08002a20 <TM_DS18B20_StartAll>:
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
	
	return 1;
}

void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	TM_OneWire_Reset(OneWire);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fbf0 	bl	800320e <TM_OneWire_Reset>
	/* Skip rom */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002a2e:	21cc      	movs	r1, #204	; 0xcc
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fcb0 	bl	8003396 <TM_OneWire_WriteByte>
	/* Start conversion on all connected devices */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002a36:	2144      	movs	r1, #68	; 0x44
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fcac 	bl	8003396 <TM_OneWire_WriteByte>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <TM_DS18B20_Read>:

uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b08b      	sub	sp, #44	; 0x2c
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!TM_DS18B20_Is(ROM)) {
 8002a5e:	68b8      	ldr	r0, [r7, #8]
 8002a60:	f000 f97a 	bl	8002d58 <TM_DS18B20_Is>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <TM_DS18B20_Read+0x26>
		return 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e0e1      	b.n	8002c32 <TM_DS18B20_Read+0x1ea>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fc5c 	bl	800332c <TM_OneWire_ReadBit>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <TM_DS18B20_Read+0x36>
		/* Conversion is not finished yet */
		return 0; 
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e0d9      	b.n	8002c32 <TM_DS18B20_Read+0x1ea>
	}

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fbc5 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fdad 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002a8c:	21be      	movs	r1, #190	; 0xbe
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fc81 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e00d      	b.n	8002ab6 <TM_DS18B20_Read+0x6e>
		/* Read byte by byte */
		data[i] = TM_OneWire_ReadByte(OneWire);
 8002a9a:	7ffc      	ldrb	r4, [r7, #31]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fc98 	bl	80033d2 <TM_OneWire_ReadByte>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002aaa:	443b      	add	r3, r7
 8002aac:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d9ee      	bls.n	8002a9a <TM_DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = TM_OneWire_CRC8(data, 8);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fdcb 	bl	800365e <TM_OneWire_CRC8>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8]) {
 8002acc:	7f3b      	ldrb	r3, [r7, #28]
 8002ace:	7fba      	ldrb	r2, [r7, #30]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <TM_DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e0ac      	b.n	8002c32 <TM_DS18B20_Read+0x1ea>
	}
	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002ad8:	7d3b      	ldrb	r3, [r7, #20]
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	7d7b      	ldrb	r3, [r7, #21]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb90 	bl	800320e <TM_OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 8002aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da05      	bge.n	8002b02 <TM_DS18B20_Read+0xba>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002af8:	425b      	negs	r3, r3
 8002afa:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002b02:	7e3b      	ldrb	r3, [r7, #24]
 8002b04:	115b      	asrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3309      	adds	r3, #9
 8002b10:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002b12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) {
 8002b36:	7f7b      	ldrb	r3, [r7, #29]
 8002b38:	3b09      	subs	r3, #9
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d858      	bhi.n	8002bf0 <TM_DS18B20_Read+0x1a8>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <TM_DS18B20_Read+0xfc>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002ba5 	.word	0x08002ba5
 8002b50:	08002bcd 	.word	0x08002bcd
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 8002b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002b6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8002b7a:	e03e      	b.n	8002bfa <TM_DS18B20_Read+0x1b2>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 8002b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b96:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8002ba2:	e02a      	b.n	8002bfa <TM_DS18B20_Read+0x1b2>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 8002ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002bba:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bbe:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8002bca:	e016      	b.n	8002bfa <TM_DS18B20_Read+0x1b2>
		case 12: {
			decimal = temperature & 0x0F;
 8002bcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bda:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002bde:	edd7 7a08 	vldr	s15, [r7, #32]
 8002be2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002c3c <TM_DS18B20_Read+0x1f4>
 8002be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bea:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8002bee:	e004      	b.n	8002bfa <TM_DS18B20_Read+0x1b2>
		default: {
			decimal = 0xFF;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <TM_DS18B20_Read+0x1f8>)
 8002bf2:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8002bfa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c06:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) {
 8002c12:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <TM_DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002c1a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002c44 <TM_DS18B20_Read+0x1fc>
 8002c1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c26:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	
	/* Set to pointer */
	*destination = decimal;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	372c      	adds	r7, #44	; 0x2c
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	3d800000 	.word	0x3d800000
 8002c40:	437f0000 	.word	0x437f0000
 8002c44:	00000000 	.word	0x00000000

08002c48 <TM_DS18B20_SetResolution>:
	
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!TM_DS18B20_Is(ROM)) {
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f000 f87e 	bl	8002d58 <TM_DS18B20_Is>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <TM_DS18B20_SetResolution+0x1e>
		return 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e074      	b.n	8002d50 <TM_DS18B20_SetResolution+0x108>
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fad1 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fcb9 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c74:	21be      	movs	r1, #190	; 0xbe
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fb8d 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fba8 	bl	80033d2 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fba5 	bl	80033d2 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fba2 	bl	80033d2 <TM_OneWire_ReadByte>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75bb      	strb	r3, [r7, #22]
	tl = TM_OneWire_ReadByte(OneWire);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fb9d 	bl	80033d2 <TM_OneWire_ReadByte>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	757b      	strb	r3, [r7, #21]
	conf = TM_OneWire_ReadByte(OneWire);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fb98 	bl	80033d2 <TM_OneWire_ReadByte>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d108      	bne.n	8002cbe <TM_DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	f023 0320 	bic.w	r3, r3, #32
 8002cba:	75fb      	strb	r3, [r7, #23]
 8002cbc:	e022      	b.n	8002d04 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b0a      	cmp	r3, #10
 8002cc2:	d108      	bne.n	8002cd6 <TM_DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cca:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	f043 0320 	orr.w	r3, r3, #32
 8002cd2:	75fb      	strb	r3, [r7, #23]
 8002cd4:	e016      	b.n	8002d04 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b0b      	cmp	r3, #11
 8002cda:	d108      	bne.n	8002cee <TM_DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	f023 0320 	bic.w	r3, r3, #32
 8002cea:	75fb      	strb	r3, [r7, #23]
 8002cec:	e00a      	b.n	8002d04 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d107      	bne.n	8002d04 <TM_DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfa:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	f043 0320 	orr.w	r3, r3, #32
 8002d02:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa82 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fc6a 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002d12:	214e      	movs	r1, #78	; 0x4e
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb3e 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002d1a:	7dbb      	ldrb	r3, [r7, #22]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb39 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002d24:	7d7b      	ldrb	r3, [r7, #21]
 8002d26:	4619      	mov	r1, r3
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fb34 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	4619      	mov	r1, r3
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fb2f 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fa68 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fc50 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002d46:	2148      	movs	r1, #72	; 0x48
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fb24 	bl	8003396 <TM_OneWire_WriteByte>
	
	return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <TM_DS18B20_Is>:

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b28      	cmp	r3, #40	; 0x28
 8002d66:	d101      	bne.n	8002d6c <TM_DS18B20_Is+0x14>
		return 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <TM_DS18B20_Is+0x16>
	}
	return 0;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	f7ff ffe5 	bl	8002d58 <TM_DS18B20_Is>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <TM_DS18B20_SetAlarmLowTemperature+0x1e>
		return 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e054      	b.n	8002e42 <TM_DS18B20_SetAlarmLowTemperature+0xc8>
	}
	if (temp > 125) {
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b7d      	cmp	r3, #125	; 0x7d
 8002d9e:	dd01      	ble.n	8002da4 <TM_DS18B20_SetAlarmLowTemperature+0x2a>
		temp = 125;
 8002da0:	237d      	movs	r3, #125	; 0x7d
 8002da2:	71fb      	strb	r3, [r7, #7]
	} 
	if (temp < -55) {
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	f113 0f37 	cmn.w	r3, #55	; 0x37
 8002dac:	da01      	bge.n	8002db2 <TM_DS18B20_SetAlarmLowTemperature+0x38>
		temp = -55;
 8002dae:	23c9      	movs	r3, #201	; 0xc9
 8002db0:	71fb      	strb	r3, [r7, #7]
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa2b 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fc13 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002dc0:	21be      	movs	r1, #190	; 0xbe
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fae7 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fb02 	bl	80033d2 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 faff 	bl	80033d2 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fafc 	bl	80033d2 <TM_OneWire_ReadByte>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]
	tl = TM_OneWire_ReadByte(OneWire);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 faf7 	bl	80033d2 <TM_OneWire_ReadByte>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75bb      	strb	r3, [r7, #22]
	conf = TM_OneWire_ReadByte(OneWire);
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 faf2 	bl	80033d2 <TM_OneWire_ReadByte>
 8002dee:	4603      	mov	r3, r0
 8002df0:	757b      	strb	r3, [r7, #21]
	
	tl = (uint8_t)temp; 
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	75bb      	strb	r3, [r7, #22]

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa09 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fbf1 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002e04:	214e      	movs	r1, #78	; 0x4e
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fac5 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fac0 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fabb 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002e20:	7d7b      	ldrb	r3, [r7, #21]
 8002e22:	4619      	mov	r1, r3
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fab6 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f9ef 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fbd7 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002e38:	2148      	movs	r1, #72	; 0x48
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 faab 	bl	8003396 <TM_OneWire_WriteByte>
	
	return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f7ff ff7d 	bl	8002d58 <TM_DS18B20_Is>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <TM_DS18B20_SetAlarmHighTemperature+0x1e>
		return 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e054      	b.n	8002f12 <TM_DS18B20_SetAlarmHighTemperature+0xc8>
	}
	if (temp > 125) {
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8002e6e:	dd01      	ble.n	8002e74 <TM_DS18B20_SetAlarmHighTemperature+0x2a>
		temp = 125;
 8002e70:	237d      	movs	r3, #125	; 0x7d
 8002e72:	71fb      	strb	r3, [r7, #7]
	} 
	if (temp < -55) {
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	f113 0f37 	cmn.w	r3, #55	; 0x37
 8002e7c:	da01      	bge.n	8002e82 <TM_DS18B20_SetAlarmHighTemperature+0x38>
		temp = -55;
 8002e7e:	23c9      	movs	r3, #201	; 0xc9
 8002e80:	71fb      	strb	r3, [r7, #7]
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f9c3 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fbab 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002e90:	21be      	movs	r1, #190	; 0xbe
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa7f 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fa9a 	bl	80033d2 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa97 	bl	80033d2 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fa94 	bl	80033d2 <TM_OneWire_ReadByte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
	tl = TM_OneWire_ReadByte(OneWire);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa8f 	bl	80033d2 <TM_OneWire_ReadByte>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	75bb      	strb	r3, [r7, #22]
	conf = TM_OneWire_ReadByte(OneWire);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa8a 	bl	80033d2 <TM_OneWire_ReadByte>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	757b      	strb	r3, [r7, #21]
	
	th = (uint8_t)temp; 
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	75fb      	strb	r3, [r7, #23]

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9a1 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fb89 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002ed4:	214e      	movs	r1, #78	; 0x4e
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa5d 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fa58 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002ee6:	7dbb      	ldrb	r3, [r7, #22]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa53 	bl	8003396 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002ef0:	7d7b      	ldrb	r3, [r7, #21]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fa4e 	bl	8003396 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f987 	bl	800320e <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb6f 	bl	80035e6 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f08:	2148      	movs	r1, #72	; 0x48
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa43 	bl	8003396 <TM_OneWire_WriteByte>
	
	return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <TM_DS18B20_AllDone>:
uint8_t TM_DS18B20_AlarmSearch(TM_OneWire_t* OneWire) {
	/* Start alarm search */
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa02 	bl	800332c <TM_OneWire_ReadBit>
 8002f28:	4603      	mov	r3, r0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	460b      	mov	r3, r1
 8002f46:	707b      	strb	r3, [r7, #1]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f87a 	bl	800304c <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002f58:	7838      	ldrb	r0, [r7, #0]
 8002f5a:	787a      	ldrb	r2, [r7, #1]
 8002f5c:	8879      	ldrh	r1, [r7, #2]
 8002f5e:	7d3b      	ldrb	r3, [r7, #20]
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	7c3b      	ldrb	r3, [r7, #16]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	4603      	mov	r3, r0
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f887 	bl	800307c <TM_GPIO_INT_Init>
 8002f6e:	e000      	b.n	8002f72 <TM_GPIO_Init+0x40>
		return;
 8002f70:	bf00      	nop
}
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e015      	b.n	8002fb6 <TM_GPIO_SetPinAsInput+0x3e>
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	fa42 f303 	asr.w	r3, r2, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <TM_GPIO_SetPinAsInput+0x38>
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
	for (i = 0x00; i < 0x10; i++) {
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d9e6      	bls.n	8002f8a <TM_GPIO_SetPinAsInput+0x12>
		}
	}
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e01b      	b.n	8003014 <TM_GPIO_SetPinAsOutput+0x4a>
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	fa42 f303 	asr.w	r3, r2, r3
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <TM_GPIO_SetPinAsOutput+0x44>
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	0052      	lsls	r2, r2, #1
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	43d2      	mvns	r2, r2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	0052      	lsls	r2, r2, #1
 8003002:	2101      	movs	r1, #1
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
	for (i = 0x00; i < 0x10; i++) {
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	d9e0      	bls.n	8002fdc <TM_GPIO_SetPinAsOutput+0x12>
		}
	}
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8003036:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	b29b      	uxth	r3, r3
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffe7 	bl	8003028 <TM_GPIO_GetPortSource>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	2301      	movs	r3, #1
 8003060:	fa03 f202 	lsl.w	r2, r3, r2
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <TM_GPIO_INT_EnableClock+0x2c>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4611      	mov	r1, r2
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <TM_GPIO_INT_EnableClock+0x2c>)
 800306c:	430b      	orrs	r3, r1
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800

0800307c <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	807b      	strh	r3, [r7, #2]
 800308e:	460b      	mov	r3, r1
 8003090:	707b      	strb	r3, [r7, #1]
 8003092:	4613      	mov	r3, r2
 8003094:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffc6 	bl	8003028 <TM_GPIO_GetPortSource>
 800309c:	4603      	mov	r3, r0
 800309e:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e067      	b.n	8003176 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	fa42 f303 	asr.w	r3, r2, r3
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d05b      	beq.n	800316e <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	4a33      	ldr	r2, [pc, #204]	; (8003188 <TM_GPIO_INT_Init+0x10c>)
 80030ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030be:	b21a      	sxth	r2, r3
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b21a      	sxth	r2, r3
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	b291      	uxth	r1, r2
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <TM_GPIO_INT_Init+0x10c>)
 80030d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	0052      	lsls	r2, r2, #1
 80030e0:	2103      	movs	r1, #3
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	43d2      	mvns	r2, r2
 80030e8:	4013      	ands	r3, r2
 80030ea:	7e39      	ldrb	r1, [r7, #24]
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2103      	movs	r1, #3
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	4013      	ands	r3, r2
 800310c:	7879      	ldrb	r1, [r7, #1]
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	0052      	lsls	r2, r2, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <TM_GPIO_INT_Init+0xac>
 8003122:	787b      	ldrb	r3, [r7, #1]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	b292      	uxth	r2, r2
 8003136:	43d2      	mvns	r2, r2
 8003138:	4013      	ands	r3, r2
 800313a:	7839      	ldrb	r1, [r7, #0]
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	b292      	uxth	r2, r2
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2103      	movs	r1, #3
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4013      	ands	r3, r2
 800315c:	7f39      	ldrb	r1, [r7, #28]
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	0052      	lsls	r2, r2, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	e000      	b.n	8003170 <TM_GPIO_INT_Init+0xf4>
			continue;
 800316e:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	3301      	adds	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d994      	bls.n	80030a6 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20003480 	.word	0x20003480

0800318c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <Delay+0x40>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800319a:	f003 f98b 	bl	80064b4 <HAL_RCC_GetHCLKFreq>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <Delay+0x44>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	607b      	str	r3, [r7, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80031b0:	bf00      	nop
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <Delay+0x40>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d3f8      	bcc.n	80031b2 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	e0001000 	.word	0xe0001000
 80031d0:	431bde83 	.word	0x431bde83

080031d4 <TM_OneWire_Init>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_onewire.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 80031e2:	f7ff fb27 	bl	8002834 <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 80031e6:	88f9      	ldrh	r1, [r7, #6]
 80031e8:	2301      	movs	r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2301      	movs	r3, #1
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	2201      	movs	r2, #1
 80031f4:	68b8      	ldr	r0, [r7, #8]
 80031f6:	f7ff fe9c 	bl	8002f32 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	809a      	strh	r2, [r3, #4]
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	889b      	ldrh	r3, [r3, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0412      	lsls	r2, r2, #16
 8003222:	619a      	str	r2, [r3, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	889b      	ldrh	r3, [r3, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7ff fecb 	bl	8002fca <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8003234:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003238:	f7ff ffa8 	bl	800318c <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f7ff fe96 	bl	8002f78 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 800324c:	2046      	movs	r0, #70	; 0x46
 800324e:	f7ff ff9d 	bl	800318c <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	8892      	ldrh	r2, [r2, #4]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 800326a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800326e:	f7ff ff8d 	bl	800318c <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d025      	beq.n	80032da <TM_OneWire_WriteBit+0x5e>
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	889b      	ldrh	r3, [r3, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0412      	lsls	r2, r2, #16
 800329a:	619a      	str	r2, [r3, #24]
		ONEWIRE_OUTPUT(OneWireStruct);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	889b      	ldrh	r3, [r3, #4]
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7ff fe8f 	bl	8002fca <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 80032ac:	200a      	movs	r0, #10
 80032ae:	f7ff ff6d 	bl	800318c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	889b      	ldrh	r3, [r3, #4]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f7ff fe5b 	bl	8002f78 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80032c2:	2037      	movs	r0, #55	; 0x37
 80032c4:	f7ff ff62 	bl	800318c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	889b      	ldrh	r3, [r3, #4]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7ff fe50 	bl	8002f78 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}
}
 80032d8:	e024      	b.n	8003324 <TM_OneWire_WriteBit+0xa8>
		ONEWIRE_LOW(OneWireStruct);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	889b      	ldrh	r3, [r3, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0412      	lsls	r2, r2, #16
 80032e6:	619a      	str	r2, [r3, #24]
		ONEWIRE_OUTPUT(OneWireStruct);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	889b      	ldrh	r3, [r3, #4]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7ff fe69 	bl	8002fca <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 80032f8:	2041      	movs	r0, #65	; 0x41
 80032fa:	f7ff ff47 	bl	800318c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	889b      	ldrh	r3, [r3, #4]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7ff fe35 	bl	8002f78 <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 800330e:	2005      	movs	r0, #5
 8003310:	f7ff ff3c 	bl	800318c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	889b      	ldrh	r3, [r3, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff fe2a 	bl	8002f78 <TM_GPIO_SetPinAsInput>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	889b      	ldrh	r3, [r3, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0412      	lsls	r2, r2, #16
 8003344:	619a      	str	r2, [r3, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	889b      	ldrh	r3, [r3, #4]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7ff fe3a 	bl	8002fca <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8003356:	2003      	movs	r0, #3
 8003358:	f7ff ff18 	bl	800318c <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	889b      	ldrh	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7ff fe06 	bl	8002f78 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 800336c:	200a      	movs	r0, #10
 800336e:	f7ff ff0d 	bl	800318c <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	8892      	ldrh	r2, [r2, #4]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <TM_OneWire_ReadBit+0x5a>
		/* Bit is HIGH */
		bit = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8003386:	2032      	movs	r0, #50	; 0x32
 8003388:	f7ff ff00 	bl	800318c <Delay>
	
	/* Return bit value */
	return bit;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80033a2:	2308      	movs	r3, #8
 80033a4:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80033a6:	e00a      	b.n	80033be <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff62 	bl	800327c <TM_OneWire_WriteBit>
		byte >>= 1;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	73fa      	strb	r2, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ef      	bne.n	80033a8 <TM_OneWire_WriteByte+0x12>
	}
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80033da:	2308      	movs	r3, #8
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	2300      	movs	r3, #0
 80033e0:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80033e2:	e00d      	b.n	8003400 <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff9e 	bl	800332c <TM_OneWire_ReadBit>
 80033f0:	4603      	mov	r3, r0
 80033f2:	01db      	lsls	r3, r3, #7
 80033f4:	b25a      	sxtb	r2, r3
 80033f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	73fa      	strb	r2, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ec      	bne.n	80033e4 <TM_OneWire_ReadByte+0x12>
	}
	
	return byte;
 800340a:	7bbb      	ldrb	r3, [r7, #14]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t* OneWireStruct) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f809 	bl	8003434 <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003422:	21f0      	movs	r1, #240	; 0xf0
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f818 	bl	800345a <TM_OneWire_Search>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <TM_OneWire_ResetSearch>:
uint8_t TM_OneWire_Next(TM_OneWire_t* OneWireStruct) {
   /* Leave the search state alone */
   return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
}

void TM_OneWire_ResetSearch(TM_OneWire_t* OneWireStruct) {
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	71da      	strb	r2, [r3, #7]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8003472:	2301      	movs	r3, #1
 8003474:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	733b      	strb	r3, [r7, #12]

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7a1b      	ldrb	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 809a 	bne.w	80035b8 <TM_OneWire_Search+0x15e>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fec2 	bl	800320e <TM_OneWire_Reset>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	71da      	strb	r2, [r3, #7]
			return 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e09b      	b.n	80035de <TM_OneWire_Search+0x184>
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff73 	bl	8003396 <TM_OneWire_WriteByte>

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff3b 	bl	800332c <TM_OneWire_ReadBit>
 80034b6:	4603      	mov	r3, r0
 80034b8:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff36 	bl	800332c <TM_OneWire_ReadBit>
 80034c0:	4603      	mov	r3, r0
 80034c2:	723b      	strb	r3, [r7, #8]

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80034c4:	7a7b      	ldrb	r3, [r7, #9]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <TM_OneWire_Search+0x76>
 80034ca:	7a3b      	ldrb	r3, [r7, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d064      	beq.n	800359a <TM_OneWire_Search+0x140>
				break;
			} else {
				/* All devices coupled have 0 or 1 */
				if (id_bit != cmp_id_bit) {
 80034d0:	7a7a      	ldrb	r2, [r7, #9]
 80034d2:	7a3b      	ldrb	r3, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d002      	beq.n	80034de <TM_OneWire_Search+0x84>
					/* Bit write value for search */
					search_direction = id_bit;
 80034d8:	7a7b      	ldrb	r3, [r7, #9]
 80034da:	72bb      	strb	r3, [r7, #10]
 80034dc:	e026      	b.n	800352c <TM_OneWire_Search+0xd2>
				} else {
					/* If this discrepancy is before the Last Discrepancy on a previous next then pick the same as last time */
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	799b      	ldrb	r3, [r3, #6]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d20d      	bcs.n	8003504 <TM_OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80034e8:	7b7b      	ldrb	r3, [r7, #13]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	7a5a      	ldrb	r2, [r3, #9]
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	72bb      	strb	r3, [r7, #10]
 8003502:	e008      	b.n	8003516 <TM_OneWire_Search+0xbc>
					} else {
						/* If equal to last pick 1, if not then pick 0 */
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	799b      	ldrb	r3, [r3, #6]
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	72bb      	strb	r3, [r7, #10]
					}
					
					/* If 0 was picked then record its position in LastZero */
					if (search_direction == 0) {
 8003516:	7abb      	ldrb	r3, [r7, #10]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	73bb      	strb	r3, [r7, #14]

						/* Check for Last discrepancy in family */
						if (last_zero < 9) {
 8003520:	7bbb      	ldrb	r3, [r7, #14]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d802      	bhi.n	800352c <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7bba      	ldrb	r2, [r7, #14]
 800352a:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				/* Set or clear the bit in the ROM byte rom_byte_number with mask rom_byte_mask */
				if (search_direction == 1) {
 800352c:	7abb      	ldrb	r3, [r7, #10]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10c      	bne.n	800354c <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003532:	7b7b      	ldrb	r3, [r7, #13]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	7a59      	ldrb	r1, [r3, #9]
 800353a:	7b7b      	ldrb	r3, [r7, #13]
 800353c:	7afa      	ldrb	r2, [r7, #11]
 800353e:	430a      	orrs	r2, r1
 8003540:	b2d1      	uxtb	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	460a      	mov	r2, r1
 8003548:	725a      	strb	r2, [r3, #9]
 800354a:	e010      	b.n	800356e <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800354c:	7b7b      	ldrb	r3, [r7, #13]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	7a5b      	ldrb	r3, [r3, #9]
 8003554:	b25a      	sxtb	r2, r3
 8003556:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800355a:	43db      	mvns	r3, r3
 800355c:	b25b      	sxtb	r3, r3
 800355e:	4013      	ands	r3, r2
 8003560:	b25a      	sxtb	r2, r3
 8003562:	7b7b      	ldrb	r3, [r7, #13]
 8003564:	b2d1      	uxtb	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	460a      	mov	r2, r1
 800356c:	725a      	strb	r2, [r3, #9]
				}
				
				/* Serial number search direction write bit */
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 800356e:	7abb      	ldrb	r3, [r7, #10]
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe82 	bl	800327c <TM_OneWire_WriteBit>

				/* Increment the byte counter id_bit_number and shift the mask rom_byte_mask */
				id_bit_number++;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800357e:	7afb      	ldrb	r3, [r7, #11]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	72fb      	strb	r3, [r7, #11]

				/* If the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask */
				if (rom_byte_mask == 0) {
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <TM_OneWire_Search+0x13a>
					rom_byte_number++;
 800358a:	7b7b      	ldrb	r3, [r7, #13]
 800358c:	3301      	adds	r3, #1
 800358e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	72fb      	strb	r3, [r7, #11]
				}
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);
 8003594:	7b7b      	ldrb	r3, [r7, #13]
 8003596:	2b07      	cmp	r3, #7
 8003598:	d98a      	bls.n	80034b0 <TM_OneWire_Search+0x56>

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d90b      	bls.n	80035b8 <TM_OneWire_Search+0x15e>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7bba      	ldrb	r2, [r7, #14]
 80035a4:	719a      	strb	r2, [r3, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	799b      	ldrb	r3, [r3, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	733b      	strb	r3, [r7, #12]
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80035b8:	7b3b      	ldrb	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <TM_OneWire_Search+0x16c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7a5b      	ldrb	r3, [r3, #9]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80035dc:	7b3b      	ldrb	r3, [r7, #12]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80035f0:	2155      	movs	r1, #85	; 0x55
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fecf 	bl	8003396 <TM_OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e00a      	b.n	8003614 <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fec4 	bl	8003396 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d9f1      	bls.n	80035fe <TM_OneWire_SelectWithPointer+0x18>
	}	
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e00a      	b.n	800364a <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	440b      	add	r3, r1
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	440a      	add	r2, r1
 8003640:	7a52      	ldrb	r2, [r2, #9]
 8003642:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	3301      	adds	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b07      	cmp	r3, #7
 800364e:	d9f1      	bls.n	8003634 <TM_OneWire_GetFullROM+0x10>
	}
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 800366e:	e022      	b.n	80036b6 <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800367a:	2308      	movs	r3, #8
 800367c:	737b      	strb	r3, [r7, #13]
 800367e:	e017      	b.n	80036b0 <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	7bbb      	ldrb	r3, [r7, #14]
 8003684:	4053      	eors	r3, r2
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003694:	7b3b      	ldrb	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80036a0:	43db      	mvns	r3, r3
 80036a2:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80036aa:	7b7b      	ldrb	r3, [r7, #13]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	737b      	strb	r3, [r7, #13]
 80036b0:	7b7b      	ldrb	r3, [r7, #13]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e4      	bne.n	8003680 <TM_OneWire_CRC8+0x22>
	while (len--) {
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	70fa      	strb	r2, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1d7      	bne.n	8003670 <TM_OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003708 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d6:	490e      	ldr	r1, [pc, #56]	; (8003710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036dc:	e002      	b.n	80036e4 <LoopCopyDataInit>

080036de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e2:	3304      	adds	r3, #4

080036e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e8:	d3f9      	bcc.n	80036de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036ec:	4c0b      	ldr	r4, [pc, #44]	; (800371c <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f0:	e001      	b.n	80036f6 <LoopFillZerobss>

080036f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f4:	3204      	adds	r2, #4

080036f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f8:	d3fb      	bcc.n	80036f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036fa:	f7ff f889 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fe:	f00b fcbb 	bl	800f078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003702:	f7fd fc43 	bl	8000f8c <main>
  bx  lr    
 8003706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003708:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003710:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8003714:	0800fd70 	.word	0x0800fd70
  ldr r2, =_sbss
 8003718:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800371c:	20007278 	.word	0x20007278

08003720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003720:	e7fe      	b.n	8003720 <ADC_IRQHandler>
	...

08003724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_Init+0x40>)
 800372e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_Init+0x40>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_Init+0x40>)
 800373a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_Init+0x40>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_Init+0x40>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374c:	2003      	movs	r0, #3
 800374e:	f000 f8b8 	bl	80038c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003752:	200f      	movs	r0, #15
 8003754:	f7fe ff3a 	bl	80025cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003758:	f7fe fb16 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00

08003768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003784:	4013      	ands	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379a:	4a04      	ldr	r2, [pc, #16]	; (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60d3      	str	r3, [r2, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <__NVIC_GetPriorityGrouping+0x18>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 0307 	and.w	r3, r3, #7
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	db0b      	blt.n	80037f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	f003 021f 	and.w	r2, r3, #31
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <__NVIC_EnableIRQ+0x38>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2001      	movs	r0, #1
 80037ee:	fa00 f202 	lsl.w	r2, r0, r2
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
         );
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff4c 	bl	8003768 <__NVIC_SetPriorityGrouping>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ea:	f7ff ff61 	bl	80037b0 <__NVIC_GetPriorityGrouping>
 80038ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f7ff ffb1 	bl	800385c <NVIC_EncodePriority>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff80 	bl	8003808 <__NVIC_SetPriority>
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff54 	bl	80037cc <__NVIC_EnableIRQ>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff f866 	bl	8002a08 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e099      	b.n	8003a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	e00f      	b.n	800398a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396a:	f7ff f84d 	bl	8002a08 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d908      	bls.n	800398a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e078      	b.n	8003a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e8      	bne.n	800396a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_DMA_Init+0x158>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d107      	bne.n	80039f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4313      	orrs	r3, r2
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d117      	bne.n	8003a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb0d 	bl	8004050 <DMA_CheckFifoParam>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e016      	b.n	8003a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fac4 	bl	8003fe4 <DMA_CalcBaseAndBitshift>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	223f      	movs	r2, #63	; 0x3f
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	f010803f 	.word	0xf010803f

08003a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Start_IT+0x26>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e040      	b.n	8003b30 <HAL_DMA_Start_IT+0xa8>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d12f      	bne.n	8003b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa56 	bl	8003f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0216 	orr.w	r2, r2, #22
 8003af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e005      	b.n	8003b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b46:	f7fe ff5f 	bl	8002a08 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e052      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0216 	bic.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_DMA_Abort+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0208 	bic.w	r2, r2, #8
 8003ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bba:	e013      	b.n	8003be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7fe ff24 	bl	8002a08 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d90c      	bls.n	8003be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e015      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	223f      	movs	r2, #63	; 0x3f
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00c      	b.n	8003c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2205      	movs	r2, #5
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c68:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <HAL_DMA_IRQHandler+0x248>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ea8 <HAL_DMA_IRQHandler+0x24c>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2208      	movs	r2, #8
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d043      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	2210      	movs	r2, #16
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d024      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
 8003d8a:	e01f      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
 8003d9c:	e016      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0208 	bic.w	r2, r2, #8
 8003dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808f 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8087 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2220      	movs	r2, #32
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d136      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0216 	bic.w	r2, r2, #22
 8003e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x1da>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	223f      	movs	r2, #63	; 0x3f
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
        }
        return;
 8003e72:	e079      	b.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10d      	bne.n	8003eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d031      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e02c      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
 8003ea2:	bf00      	nop
 8003ea4:	20000088 	.word	0x20000088
 8003ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e01e      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0210 	bic.w	r2, r2, #16
 8003eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d032      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d307      	bcc.n	8003f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f2      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x2cc>
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f68:	bf00      	nop
    }
  }
}
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d108      	bne.n	8003fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fc6:	e007      	b.n	8003fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3b10      	subs	r3, #16
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <DMA_CalcBaseAndBitshift+0x64>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <DMA_CalcBaseAndBitshift+0x68>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d909      	bls.n	8004026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	659a      	str	r2, [r3, #88]	; 0x58
 8004024:	e007      	b.n	8004036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	aaaaaaab 	.word	0xaaaaaaab
 800404c:	0800fc44 	.word	0x0800fc44

08004050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11f      	bne.n	80040aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d856      	bhi.n	800411e <DMA_CheckFifoParam+0xce>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <DMA_CheckFifoParam+0x28>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	0800409b 	.word	0x0800409b
 8004080:	08004089 	.word	0x08004089
 8004084:	0800411f 	.word	0x0800411f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d046      	beq.n	8004122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e043      	b.n	8004122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040a2:	d140      	bne.n	8004126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e03d      	b.n	8004126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b2:	d121      	bne.n	80040f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d837      	bhi.n	800412a <DMA_CheckFifoParam+0xda>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <DMA_CheckFifoParam+0x70>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d7 	.word	0x080040d7
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	080040e9 	.word	0x080040e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e030      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d025      	beq.n	800412e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e6:	e022      	b.n	800412e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040f0:	d11f      	bne.n	8004132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040f6:	e01c      	b.n	8004132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d903      	bls.n	8004106 <DMA_CheckFifoParam+0xb6>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004104:	e018      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      break;
 800410a:	e015      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      break;
 800411c:	e00b      	b.n	8004136 <DMA_CheckFifoParam+0xe6>
      break;
 800411e:	bf00      	nop
 8004120:	e00a      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e008      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;   
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
    }
  } 
  
  return status; 
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06c      	b.n	8004234 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2223      	movs	r2, #35	; 0x23
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd fe37 	bl	8001de0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_ETH_Init+0xf4>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4a30      	ldr	r2, [pc, #192]	; (800423c <HAL_ETH_Init+0xf4>)
 800417c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004180:	6453      	str	r3, [r2, #68]	; 0x44
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <HAL_ETH_Init+0xf4>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800418e:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <HAL_ETH_Init+0xf8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_ETH_Init+0xf8>)
 8004194:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004198:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800419a:	4b29      	ldr	r3, [pc, #164]	; (8004240 <HAL_ETH_Init+0xf8>)
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4927      	ldr	r1, [pc, #156]	; (8004240 <HAL_ETH_Init+0xf8>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_ETH_Init+0xf8>)
 80041aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fe fc20 	bl	8002a08 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041ca:	e011      	b.n	80041f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80041cc:	f7fe fc1c 	bl	8002a08 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041da:	d909      	bls.n	80041f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	22e0      	movs	r2, #224	; 0xe0
 80041e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e021      	b.n	8004234 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e4      	bne.n	80041cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f958 	bl	80044b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f9ff 	bl	800460c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa55 	bl	80046be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	461a      	mov	r2, r3
 800421a:	2100      	movs	r1, #0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f9bd 	bl	800459c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2210      	movs	r2, #16
 800422e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	40013800 	.word	0x40013800

08004244 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <ETH_SetMACConfig+0x15c>)
 800425a:	4013      	ands	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	7c1b      	ldrb	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <ETH_SetMACConfig+0x28>
 8004266:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800426a:	e000      	b.n	800426e <ETH_SetMACConfig+0x2a>
 800426c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	7c5b      	ldrb	r3, [r3, #17]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <ETH_SetMACConfig+0x38>
 8004276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800427a:	e000      	b.n	800427e <ETH_SetMACConfig+0x3a>
 800427c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800427e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004284:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	7fdb      	ldrb	r3, [r3, #31]
 800428a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800428c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004292:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	7f92      	ldrb	r2, [r2, #30]
 8004298:	2a00      	cmp	r2, #0
 800429a:	d102      	bne.n	80042a2 <ETH_SetMACConfig+0x5e>
 800429c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042a0:	e000      	b.n	80042a4 <ETH_SetMACConfig+0x60>
 80042a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80042a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7f1b      	ldrb	r3, [r3, #28]
 80042aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80042ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80042ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d102      	bne.n	80042cc <ETH_SetMACConfig+0x88>
 80042c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ca:	e000      	b.n	80042ce <ETH_SetMACConfig+0x8a>
 80042cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80042ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	7bdb      	ldrb	r3, [r3, #15]
 80042d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80042d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80042dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80042e6:	4313      	orrs	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042fe:	2001      	movs	r0, #1
 8004300:	f7fe fb58 	bl	80029b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f64f 7341 	movw	r3, #65345	; 0xff41
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800432a:	2a00      	cmp	r2, #0
 800432c:	d101      	bne.n	8004332 <ETH_SetMACConfig+0xee>
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	e000      	b.n	8004334 <ETH_SetMACConfig+0xf0>
 8004332:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004334:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800433a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004342:	2a01      	cmp	r2, #1
 8004344:	d101      	bne.n	800434a <ETH_SetMACConfig+0x106>
 8004346:	2208      	movs	r2, #8
 8004348:	e000      	b.n	800434c <ETH_SetMACConfig+0x108>
 800434a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800434c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004354:	2a01      	cmp	r2, #1
 8004356:	d101      	bne.n	800435c <ETH_SetMACConfig+0x118>
 8004358:	2204      	movs	r2, #4
 800435a:	e000      	b.n	800435e <ETH_SetMACConfig+0x11a>
 800435c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800435e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004366:	2a01      	cmp	r2, #1
 8004368:	d101      	bne.n	800436e <ETH_SetMACConfig+0x12a>
 800436a:	2202      	movs	r2, #2
 800436c:	e000      	b.n	8004370 <ETH_SetMACConfig+0x12c>
 800436e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004370:	4313      	orrs	r3, r2
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fe fb13 	bl	80029b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	619a      	str	r2, [r3, #24]
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	ff20810f 	.word	0xff20810f

080043a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <ETH_SetDMAConfig+0x110>)
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <ETH_SetDMAConfig+0x2c>
 80043ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043ce:	e000      	b.n	80043d2 <ETH_SetDMAConfig+0x2e>
 80043d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	7b5b      	ldrb	r3, [r3, #13]
 80043d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	7f52      	ldrb	r2, [r2, #29]
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d102      	bne.n	80043e8 <ETH_SetDMAConfig+0x44>
 80043e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043e6:	e000      	b.n	80043ea <ETH_SetDMAConfig+0x46>
 80043e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80043ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	7b9b      	ldrb	r3, [r3, #14]
 80043f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80043f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80043f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	7f1b      	ldrb	r3, [r3, #28]
 80043fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004400:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	7f9b      	ldrb	r3, [r3, #30]
 8004406:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004408:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800440e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004416:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004418:	4313      	orrs	r3, r2
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	461a      	mov	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800443a:	2001      	movs	r0, #1
 800443c:	f7fe faba 	bl	80029b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	461a      	mov	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004458:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800445e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004464:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800446c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800446e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004476:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800447c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800448a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004498:	2001      	movs	r0, #1
 800449a:	f7fe fa8b 	bl	80029b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	f8de3f23 	.word	0xf8de3f23

080044b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b0a6      	sub	sp, #152	; 0x98
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044f4:	2300      	movs	r3, #0
 80044f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004514:	2300      	movs	r3, #0
 8004516:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800451a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004524:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800452c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fe86 	bl	8004244 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004538:	2301      	movs	r3, #1
 800453a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800453c:	2301      	movs	r3, #1
 800453e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004546:	2301      	movs	r3, #1
 8004548:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800455a:	2300      	movs	r3, #0
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004564:	2301      	movs	r3, #1
 8004566:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800456c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800456e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004572:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004578:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004580:	2300      	movs	r3, #0
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004584:	2300      	movs	r3, #0
 8004586:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004588:	f107 0308 	add.w	r3, r7, #8
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff08 	bl	80043a4 <ETH_SetDMAConfig>
}
 8004594:	bf00      	nop
 8004596:	3798      	adds	r7, #152	; 0x98
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3305      	adds	r3, #5
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	3204      	adds	r2, #4
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <ETH_MACAddressConfig+0x68>)
 80045be:	4413      	add	r3, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3303      	adds	r3, #3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	061a      	lsls	r2, r3, #24
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3302      	adds	r3, #2
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3301      	adds	r3, #1
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4313      	orrs	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <ETH_MACAddressConfig+0x6c>)
 80045ee:	4413      	add	r3, r2
 80045f0:	461a      	mov	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40028040 	.word	0x40028040
 8004608:	40028044 	.word	0x40028044

0800460c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e03e      	b.n	8004698 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	3206      	adds	r2, #6
 800464c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d80c      	bhi.n	800467c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68d9      	ldr	r1, [r3, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	e004      	b.n	8004686 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d9bd      	bls.n	800461a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	611a      	str	r2, [r3, #16]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e046      	b.n	800475a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6919      	ldr	r1, [r3, #16]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2200      	movs	r2, #0
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004708:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004710:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	3212      	adds	r2, #18
 8004726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d80c      	bhi.n	800474a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6919      	ldr	r1, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e004      	b.n	8004754 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	461a      	mov	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d9b5      	bls.n	80046cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	60da      	str	r2, [r3, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e177      	b.n	8004aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047b4:	2201      	movs	r2, #1
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	f040 8166 	bne.w	8004a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d005      	beq.n	80047ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d130      	bne.n	800484c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2203      	movs	r2, #3
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004820:	2201      	movs	r2, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 0201 	and.w	r2, r3, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b03      	cmp	r3, #3
 8004856:	d017      	beq.n	8004888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	2203      	movs	r2, #3
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d123      	bne.n	80048dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	08da      	lsrs	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3208      	adds	r2, #8
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	220f      	movs	r2, #15
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	08da      	lsrs	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3208      	adds	r2, #8
 80048d6:	69b9      	ldr	r1, [r7, #24]
 80048d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	2203      	movs	r2, #3
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0203 	and.w	r2, r3, #3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80c0 	beq.w	8004a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_GPIO_Init+0x324>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	4a65      	ldr	r2, [pc, #404]	; (8004abc <HAL_GPIO_Init+0x324>)
 8004928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492c:	6453      	str	r3, [r2, #68]	; 0x44
 800492e:	4b63      	ldr	r3, [pc, #396]	; (8004abc <HAL_GPIO_Init+0x324>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800493a:	4a61      	ldr	r2, [pc, #388]	; (8004ac0 <HAL_GPIO_Init+0x328>)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	3302      	adds	r3, #2
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_GPIO_Init+0x32c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d037      	beq.n	80049d6 <HAL_GPIO_Init+0x23e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a57      	ldr	r2, [pc, #348]	; (8004ac8 <HAL_GPIO_Init+0x330>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d031      	beq.n	80049d2 <HAL_GPIO_Init+0x23a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_GPIO_Init+0x334>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02b      	beq.n	80049ce <HAL_GPIO_Init+0x236>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a55      	ldr	r2, [pc, #340]	; (8004ad0 <HAL_GPIO_Init+0x338>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d025      	beq.n	80049ca <HAL_GPIO_Init+0x232>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a54      	ldr	r2, [pc, #336]	; (8004ad4 <HAL_GPIO_Init+0x33c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <HAL_GPIO_Init+0x22e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <HAL_GPIO_Init+0x340>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d019      	beq.n	80049c2 <HAL_GPIO_Init+0x22a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a52      	ldr	r2, [pc, #328]	; (8004adc <HAL_GPIO_Init+0x344>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_GPIO_Init+0x226>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a51      	ldr	r2, [pc, #324]	; (8004ae0 <HAL_GPIO_Init+0x348>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00d      	beq.n	80049ba <HAL_GPIO_Init+0x222>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a50      	ldr	r2, [pc, #320]	; (8004ae4 <HAL_GPIO_Init+0x34c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x21e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4f      	ldr	r2, [pc, #316]	; (8004ae8 <HAL_GPIO_Init+0x350>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_GPIO_Init+0x21a>
 80049ae:	2309      	movs	r3, #9
 80049b0:	e012      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049b2:	230a      	movs	r3, #10
 80049b4:	e010      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049b6:	2308      	movs	r3, #8
 80049b8:	e00e      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049ba:	2307      	movs	r3, #7
 80049bc:	e00c      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049be:	2306      	movs	r3, #6
 80049c0:	e00a      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x240>
 80049d6:	2300      	movs	r3, #0
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f002 0203 	and.w	r2, r2, #3
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	4093      	lsls	r3, r2
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e8:	4935      	ldr	r1, [pc, #212]	; (8004ac0 <HAL_GPIO_Init+0x328>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_GPIO_Init+0x354>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a1a:	4a34      	ldr	r2, [pc, #208]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a20:	4b32      	ldr	r3, [pc, #200]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a44:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <HAL_GPIO_Init+0x354>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	f67f ae84 	bls.w	80047b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40020000 	.word	0x40020000
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020c00 	.word	0x40020c00
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40021400 	.word	0x40021400
 8004adc:	40021800 	.word	0x40021800
 8004ae0:	40021c00 	.word	0x40021c00
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	40022400 	.word	0x40022400
 8004aec:	40013c00 	.word	0x40013c00

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	041a      	lsls	r2, r3, #16
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	887b      	ldrh	r3, [r7, #2]
 8004b42:	400b      	ands	r3, r1
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e12b      	b.n	8004dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd f9f4 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	; 0x24
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f001 fc86 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 8004bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4a81      	ldr	r2, [pc, #516]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d807      	bhi.n	8004bdc <HAL_I2C_Init+0x84>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a80      	ldr	r2, [pc, #512]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bf94      	ite	ls
 8004bd4:	2301      	movls	r3, #1
 8004bd6:	2300      	movhi	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e006      	b.n	8004bea <HAL_I2C_Init+0x92>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a7d      	ldr	r2, [pc, #500]	; (8004dd4 <HAL_I2C_Init+0x27c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bf94      	ite	ls
 8004be4:	2301      	movls	r3, #1
 8004be6:	2300      	movhi	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0e7      	b.n	8004dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a78      	ldr	r2, [pc, #480]	; (8004dd8 <HAL_I2C_Init+0x280>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0c9b      	lsrs	r3, r3, #18
 8004bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a6a      	ldr	r2, [pc, #424]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d802      	bhi.n	8004c2c <HAL_I2C_Init+0xd4>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e009      	b.n	8004c40 <HAL_I2C_Init+0xe8>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_I2C_Init+0x284>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	3301      	adds	r3, #1
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	495c      	ldr	r1, [pc, #368]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	d819      	bhi.n	8004c94 <HAL_I2C_Init+0x13c>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e59      	subs	r1, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c74:	400b      	ands	r3, r1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_I2C_Init+0x138>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1e59      	subs	r1, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8e:	e051      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004c90:	2304      	movs	r3, #4
 8004c92:	e04f      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d111      	bne.n	8004cc0 <HAL_I2C_Init+0x168>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e58      	subs	r0, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	440b      	add	r3, r1
 8004caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e012      	b.n	8004ce6 <HAL_I2C_Init+0x18e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	0099      	lsls	r1, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Init+0x196>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e022      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10e      	bne.n	8004d14 <HAL_I2C_Init+0x1bc>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1e58      	subs	r0, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	440b      	add	r3, r1
 8004d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	e00f      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	0099      	lsls	r1, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	6809      	ldr	r1, [r1, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6911      	ldr	r1, [r2, #16]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	4311      	orrs	r1, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	000186a0 	.word	0x000186a0
 8004dd0:	001e847f 	.word	0x001e847f
 8004dd4:	003d08ff 	.word	0x003d08ff
 8004dd8:	431bde83 	.word	0x431bde83
 8004ddc:	10624dd3 	.word	0x10624dd3

08004de0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	460b      	mov	r3, r1
 8004df4:	813b      	strh	r3, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dfa:	f7fd fe05 	bl	8002a08 <HAL_GetTick>
 8004dfe:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	f040 8176 	bne.w	80050fe <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e12:	4b95      	ldr	r3, [pc, #596]	; (8005068 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	4a94      	ldr	r2, [pc, #592]	; (800506c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a1a      	lsrs	r2, r3, #8
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009a      	lsls	r2, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e14c      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d0db      	beq.n	8004e2c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e13e      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d007      	beq.n	8004ea8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2222      	movs	r2, #34	; 0x22
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2240      	movs	r2, #64	; 0x40
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a62      	ldr	r2, [pc, #392]	; (8005070 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004eea:	897a      	ldrh	r2, [r7, #10]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004ef0:	893a      	ldrh	r2, [r7, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80cc 	beq.w	80050a4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02d      	beq.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	4a56      	ldr	r2, [pc, #344]	; (8005074 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	4a55      	ldr	r2, [pc, #340]	; (8005078 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004f22:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	2200      	movs	r2, #0
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	2200      	movs	r2, #0
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	2200      	movs	r2, #0
 8004f3a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3310      	adds	r3, #16
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	461a      	mov	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	f7fe fd95 	bl	8003a88 <HAL_DMA_Start_IT>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 8087 	bne.w	800507c <HAL_I2C_Mem_Read_DMA+0x29c>
 8004f6e:	e013      	b.n	8004f98 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0b3      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f98:	88f8      	ldrh	r0, [r7, #6]
 8004f9a:	893a      	ldrh	r2, [r7, #8]
 8004f9c:	8979      	ldrh	r1, [r7, #10]
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2323      	movs	r3, #35	; 0x23
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f8df 	bl	800516c <I2C_RequestMemoryRead>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d023      	beq.n	8004ffc <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fe2d 	bl	8003c18 <HAL_DMA_Abort_IT>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fda:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e081      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005000:	2b01      	cmp	r3, #1
 8005002:	d108      	bne.n	8005016 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e007      	b.n	8005026 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005024:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005052:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e049      	b.n	80050fa <HAL_I2C_Mem_Read_DMA+0x31a>
 8005066:	bf00      	nop
 8005068:	20000088 	.word	0x20000088
 800506c:	14f8b589 	.word	0x14f8b589
 8005070:	ffff0000 	.word	0xffff0000
 8005074:	0800533d 	.word	0x0800533d
 8005078:	080054e7 	.word	0x080054e7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f043 0210 	orr.w	r2, r3, #16
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e02d      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80050a4:	88f8      	ldrh	r0, [r7, #6]
 80050a6:	893a      	ldrh	r2, [r7, #8]
 80050a8:	8979      	ldrh	r1, [r7, #10]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2323      	movs	r3, #35	; 0x23
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	4603      	mov	r3, r0
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f859 	bl	800516c <I2C_RequestMemoryRead>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e01d      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3728      	adds	r7, #40	; 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4603      	mov	r3, r0
 800517c:	817b      	strh	r3, [r7, #10]
 800517e:	460b      	mov	r3, r1
 8005180:	813b      	strh	r3, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005194:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f9d4 	bl	8005560 <I2C_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051cc:	d103      	bne.n	80051d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0aa      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	4952      	ldr	r1, [pc, #328]	; (8005338 <I2C_RequestMemoryRead+0x1cc>)
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fa0c 	bl	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e097      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	6a39      	ldr	r1, [r7, #32]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fa76 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b04      	cmp	r3, #4
 800522c:	d107      	bne.n	800523e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e076      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	611a      	str	r2, [r3, #16]
 8005252:	e021      	b.n	8005298 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	b29b      	uxth	r3, r3
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	6a39      	ldr	r1, [r7, #32]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fa50 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b04      	cmp	r3, #4
 8005278:	d107      	bne.n	800528a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e050      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	6a39      	ldr	r1, [r7, #32]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fa35 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d107      	bne.n	80052c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e035      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2200      	movs	r2, #0
 80052dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f93d 	bl	8005560 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d103      	bne.n	8005304 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005302:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e013      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005308:	897b      	ldrh	r3, [r7, #10]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	4906      	ldr	r1, [pc, #24]	; (8005338 <I2C_RequestMemoryRead+0x1cc>)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f975 	bl	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	00010002 	.word	0x00010002

0800533c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005358:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800536e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	2200      	movs	r2, #0
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	2200      	movs	r2, #0
 800538e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005396:	2b21      	cmp	r3, #33	; 0x21
 8005398:	d007      	beq.n	80053aa <I2C_DMAXferCplt+0x6e>
 800539a:	7cfb      	ldrb	r3, [r7, #19]
 800539c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80053a0:	2b22      	cmp	r3, #34	; 0x22
 80053a2:	d131      	bne.n	8005408 <I2C_DMAXferCplt+0xcc>
 80053a4:	7cbb      	ldrb	r3, [r7, #18]
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d12e      	bne.n	8005408 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b29      	cmp	r3, #41	; 0x29
 80053c4:	d10a      	bne.n	80053dc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2221      	movs	r2, #33	; 0x21
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2228      	movs	r2, #40	; 0x28
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7ff fea1 	bl	800511c <HAL_I2C_SlaveTxCpltCallback>
 80053da:	e00c      	b.n	80053f6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	2b2a      	cmp	r3, #42	; 0x2a
 80053e0:	d109      	bne.n	80053f6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2222      	movs	r2, #34	; 0x22
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2228      	movs	r2, #40	; 0x28
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f0:	6978      	ldr	r0, [r7, #20]
 80053f2:	f7ff fe9d 	bl	8005130 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005404:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005406:	e06a      	b.n	80054de <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d064      	beq.n	80054de <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800543c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005444:	d009      	beq.n	800545a <I2C_DMAXferCplt+0x11e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d006      	beq.n	800545a <I2C_DMAXferCplt+0x11e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005452:	d002      	beq.n	800545a <I2C_DMAXferCplt+0x11e>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b20      	cmp	r3, #32
 8005458:	d107      	bne.n	800546a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005478:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005488:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005498:	6978      	ldr	r0, [r7, #20]
 800549a:	f7ff fe5d 	bl	8005158 <HAL_I2C_ErrorCallback>
}
 800549e:	e01e      	b.n	80054de <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d10a      	bne.n	80054ca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f7ff fe3e 	bl	8005144 <HAL_I2C_MemRxCpltCallback>
}
 80054c8:	e009      	b.n	80054de <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2212      	movs	r2, #18
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	f7ff fe15 	bl	8005108 <HAL_I2C_MasterRxCpltCallback>
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	2200      	movs	r2, #0
 8005502:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	2200      	movs	r2, #0
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fe fd2b 	bl	8003f70 <HAL_DMA_GetError>
 800551a:	4603      	mov	r3, r0
 800551c:	2b02      	cmp	r3, #2
 800551e:	d01b      	beq.n	8005558 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f043 0210 	orr.w	r2, r3, #16
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fe00 	bl	8005158 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005570:	e025      	b.n	80055be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d021      	beq.n	80055be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557a:	f7fd fa45 	bl	8002a08 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d116      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e023      	b.n	8005606 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10d      	bne.n	80055e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	43da      	mvns	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	e00c      	b.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	43da      	mvns	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	429a      	cmp	r2, r3
 8005602:	d0b6      	beq.n	8005572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800561c:	e051      	b.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d123      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005646:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e046      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d021      	beq.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fd f9c3 	bl	8002a08 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d116      	bne.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e020      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10c      	bne.n	80056e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e00b      	b.n	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d18d      	bne.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005718:	e02d      	b.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f837 	bl	800578e <I2C_IsAcknowledgeFailed>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e02d      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d021      	beq.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fd f969 	bl	8002a08 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e007      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d1ca      	bne.n	800571a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d11b      	bne.n	80057de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d129      	bne.n	8005856 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2224      	movs	r2, #36	; 0x24
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0210 	bic.w	r2, r2, #16
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e000      	b.n	8005858 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
  }
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d12a      	bne.n	80058d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800589e:	89fb      	ldrh	r3, [r7, #14]
 80058a0:	f023 030f 	bic.w	r3, r3, #15
 80058a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	89fa      	ldrh	r2, [r7, #14]
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e4:	b08f      	sub	sp, #60	; 0x3c
 80058e6:	af0a      	add	r7, sp, #40	; 0x28
 80058e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e10f      	b.n	8005b14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc fe02 	bl	8002518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2203      	movs	r2, #3
 8005918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f003 fd97 	bl	8009466 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	687e      	ldr	r6, [r7, #4]
 8005940:	466d      	mov	r5, sp
 8005942:	f106 0410 	add.w	r4, r6, #16
 8005946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800594a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800594c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800594e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005952:	e885 0003 	stmia.w	r5, {r0, r1}
 8005956:	1d33      	adds	r3, r6, #4
 8005958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800595a:	6838      	ldr	r0, [r7, #0]
 800595c:	f003 fd22 	bl	80093a4 <USB_CoreInit>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0d0      	b.n	8005b14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f003 fd85 	bl	8009488 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
 8005982:	e04a      	b.n	8005a1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005984:	7bfa      	ldrb	r2, [r7, #15]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	333d      	adds	r3, #61	; 0x3d
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005998:	7bfa      	ldrb	r2, [r7, #15]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	333c      	adds	r3, #60	; 0x3c
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	b298      	uxth	r0, r3
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3344      	adds	r3, #68	; 0x44
 80059c0:	4602      	mov	r2, r0
 80059c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059c4:	7bfa      	ldrb	r2, [r7, #15]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3340      	adds	r3, #64	; 0x40
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059d8:	7bfa      	ldrb	r2, [r7, #15]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3348      	adds	r3, #72	; 0x48
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	334c      	adds	r3, #76	; 0x4c
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a00:	7bfa      	ldrb	r2, [r7, #15]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3354      	adds	r3, #84	; 0x54
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	3301      	adds	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d3af      	bcc.n	8005984 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e044      	b.n	8005ab4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a40:	7bfa      	ldrb	r2, [r7, #15]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a56:	7bfa      	ldrb	r2, [r7, #15]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a6c:	7bfa      	ldrb	r2, [r7, #15]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3b5      	bcc.n	8005a2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	687e      	ldr	r6, [r7, #4]
 8005ac6:	466d      	mov	r5, sp
 8005ac8:	f106 0410 	add.w	r4, r6, #16
 8005acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005adc:	1d33      	adds	r3, r6, #4
 8005ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae0:	6838      	ldr	r0, [r7, #0]
 8005ae2:	f003 fd1d 	bl	8009520 <USB_DevInit>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e00d      	b.n	8005b14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f003 fee8 	bl	80098e2 <USB_DevDisconnect>

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e267      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d075      	beq.n	8005c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b3a:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d00c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b46:	4b85      	ldr	r3, [pc, #532]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d112      	bne.n	8005b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b52:	4b82      	ldr	r3, [pc, #520]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	4b7e      	ldr	r3, [pc, #504]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05b      	beq.n	8005c24 <HAL_RCC_OscConfig+0x108>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d157      	bne.n	8005c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e242      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d106      	bne.n	8005b90 <HAL_RCC_OscConfig+0x74>
 8005b82:	4b76      	ldr	r3, [pc, #472]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a75      	ldr	r2, [pc, #468]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e01d      	b.n	8005bcc <HAL_RCC_OscConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x98>
 8005b9a:	4b70      	ldr	r3, [pc, #448]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a6f      	ldr	r2, [pc, #444]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4b6d      	ldr	r3, [pc, #436]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6c      	ldr	r2, [pc, #432]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCC_OscConfig+0xb0>
 8005bb4:	4b69      	ldr	r3, [pc, #420]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a68      	ldr	r2, [pc, #416]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b66      	ldr	r3, [pc, #408]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fc ff18 	bl	8002a08 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fc ff14 	bl	8002a08 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e207      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	4b5b      	ldr	r3, [pc, #364]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0xc0>
 8005bfa:	e014      	b.n	8005c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fc ff04 	bl	8002a08 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fc ff00 	bl	8002a08 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e1f3      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c16:	4b51      	ldr	r3, [pc, #324]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0xe8>
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d063      	beq.n	8005cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c32:	4b4a      	ldr	r3, [pc, #296]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3e:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d11c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4a:	4b44      	ldr	r3, [pc, #272]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c56:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_RCC_OscConfig+0x152>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e1c7      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4937      	ldr	r1, [pc, #220]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c82:	e03a      	b.n	8005cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d020      	beq.n	8005cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <HAL_RCC_OscConfig+0x244>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fc feb9 	bl	8002a08 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7fc feb5 	bl	8002a08 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e1a8      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cac:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb8:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4925      	ldr	r1, [pc, #148]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]
 8005ccc:	e015      	b.n	8005cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cce:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <HAL_RCC_OscConfig+0x244>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fc fe98 	bl	8002a08 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cdc:	f7fc fe94 	bl	8002a08 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e187      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d036      	beq.n	8005d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <HAL_RCC_OscConfig+0x248>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7fc fe78 	bl	8002a08 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d1c:	f7fc fe74 	bl	8002a08 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e167      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_RCC_OscConfig+0x240>)
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x200>
 8005d3a:	e01b      	b.n	8005d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_OscConfig+0x248>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d42:	f7fc fe61 	bl	8002a08 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d48:	e00e      	b.n	8005d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d4a:	f7fc fe5d 	bl	8002a08 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d907      	bls.n	8005d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e150      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	42470000 	.word	0x42470000
 8005d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d68:	4b88      	ldr	r3, [pc, #544]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ea      	bne.n	8005d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8097 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d86:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	4b7d      	ldr	r3, [pc, #500]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a7c      	ldr	r2, [pc, #496]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db2:	4b77      	ldr	r3, [pc, #476]	; (8005f90 <HAL_RCC_OscConfig+0x474>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d118      	bne.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dbe:	4b74      	ldr	r3, [pc, #464]	; (8005f90 <HAL_RCC_OscConfig+0x474>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a73      	ldr	r2, [pc, #460]	; (8005f90 <HAL_RCC_OscConfig+0x474>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dca:	f7fc fe1d 	bl	8002a08 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd2:	f7fc fe19 	bl	8002a08 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e10c      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	4b6a      	ldr	r3, [pc, #424]	; (8005f90 <HAL_RCC_OscConfig+0x474>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x2ea>
 8005df8:	4b64      	ldr	r3, [pc, #400]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	6713      	str	r3, [r2, #112]	; 0x70
 8005e04:	e01c      	b.n	8005e40 <HAL_RCC_OscConfig+0x324>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x30c>
 8005e0e:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a5e      	ldr	r2, [pc, #376]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a5b      	ldr	r2, [pc, #364]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0x324>
 8005e28:	4b58      	ldr	r3, [pc, #352]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	4b55      	ldr	r3, [pc, #340]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e3a:	f023 0304 	bic.w	r3, r3, #4
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fc fdde 	bl	8002a08 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4e:	e00a      	b.n	8005e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e50:	f7fc fdda 	bl	8002a08 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e0cb      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e66:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0ee      	beq.n	8005e50 <HAL_RCC_OscConfig+0x334>
 8005e72:	e014      	b.n	8005e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e74:	f7fc fdc8 	bl	8002a08 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7a:	e00a      	b.n	8005e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7c:	f7fc fdc4 	bl	8002a08 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e0b5      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e92:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1ee      	bne.n	8005e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea4:	4b39      	ldr	r3, [pc, #228]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	4a38      	ldr	r2, [pc, #224]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a1 	beq.w	8005ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eba:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d05c      	beq.n	8005f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d141      	bne.n	8005f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ece:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <HAL_RCC_OscConfig+0x478>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fc fd98 	bl	8002a08 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fc fd94 	bl	8002a08 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e087      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eee:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	3b01      	subs	r3, #1
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	491b      	ldr	r1, [pc, #108]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x478>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fc fd6d 	bl	8002a08 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fc fd69 	bl	8002a08 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e05c      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f44:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x416>
 8005f50:	e054      	b.n	8005ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <HAL_RCC_OscConfig+0x478>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fc fd56 	bl	8002a08 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f60:	f7fc fd52 	bl	8002a08 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e045      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_RCC_OscConfig+0x470>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x444>
 8005f7e:	e03d      	b.n	8005ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e038      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	40007000 	.word	0x40007000
 8005f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <HAL_RCC_OscConfig+0x4ec>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d028      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d121      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d11a      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fc8:	4013      	ands	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d111      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800

0800600c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0cc      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006020:	4b68      	ldr	r3, [pc, #416]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d90c      	bls.n	8006048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602e:	4b65      	ldr	r3, [pc, #404]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b63      	ldr	r3, [pc, #396]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0b8      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d020      	beq.n	8006096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006060:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	4a58      	ldr	r2, [pc, #352]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800606a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006078:	4b53      	ldr	r3, [pc, #332]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a52      	ldr	r2, [pc, #328]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006084:	4b50      	ldr	r3, [pc, #320]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	494d      	ldr	r1, [pc, #308]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d044      	beq.n	800612c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d107      	bne.n	80060ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	4b47      	ldr	r3, [pc, #284]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d119      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e07f      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d003      	beq.n	80060ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ca:	4b3f      	ldr	r3, [pc, #252]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e06f      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e067      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ea:	4b37      	ldr	r3, [pc, #220]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f023 0203 	bic.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4934      	ldr	r1, [pc, #208]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060fc:	f7fc fc84 	bl	8002a08 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006102:	e00a      	b.n	800611a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006104:	f7fc fc80 	bl	8002a08 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e04f      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611a:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 020c 	and.w	r2, r3, #12
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	429a      	cmp	r2, r3
 800612a:	d1eb      	bne.n	8006104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800612c:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d20c      	bcs.n	8006154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613a:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e032      	b.n	80061ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4916      	ldr	r1, [pc, #88]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800617e:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	490e      	ldr	r1, [pc, #56]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006192:	f000 f889 	bl	80062a8 <HAL_RCC_GetSysClockFreq>
 8006196:	4602      	mov	r2, r0
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	490a      	ldr	r1, [pc, #40]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 80061a4:	5ccb      	ldrb	r3, [r1, r3]
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_RCC_ClockConfig+0x1c8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fc fa0a 	bl	80025cc <HAL_InitTick>

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40023c00 	.word	0x40023c00
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800fc2c 	.word	0x0800fc2c
 80061d0:	20000088 	.word	0x20000088
 80061d4:	2000008c 	.word	0x2000008c

080061d8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d129      	bne.n	800623e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	4b2b      	ldr	r3, [pc, #172]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30
 80061fa:	4b28      	ldr	r3, [pc, #160]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800620a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620c:	2302      	movs	r3, #2
 800620e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006210:	2303      	movs	r3, #3
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006218:	2300      	movs	r3, #0
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800621c:	f107 031c 	add.w	r3, r7, #28
 8006220:	4619      	mov	r1, r3
 8006222:	481f      	ldr	r0, [pc, #124]	; (80062a0 <HAL_RCC_MCOConfig+0xc8>)
 8006224:	f7fe fab8 	bl	8004798 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006228:	4b1c      	ldr	r3, [pc, #112]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	430b      	orrs	r3, r1
 8006236:	4919      	ldr	r1, [pc, #100]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800623c:	e029      	b.n	8006292 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 8006248:	f043 0304 	orr.w	r3, r3, #4
 800624c:	6313      	str	r3, [r2, #48]	; 0x30
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800625a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	2302      	movs	r3, #2
 8006262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006264:	2303      	movs	r3, #3
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006268:	2300      	movs	r3, #0
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800626c:	2300      	movs	r3, #0
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006270:	f107 031c 	add.w	r3, r7, #28
 8006274:	4619      	mov	r1, r3
 8006276:	480b      	ldr	r0, [pc, #44]	; (80062a4 <HAL_RCC_MCOConfig+0xcc>)
 8006278:	f7fe fa8e 	bl	8004798 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	00d9      	lsls	r1, r3, #3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	430b      	orrs	r3, r1
 800628c:	4903      	ldr	r1, [pc, #12]	; (800629c <HAL_RCC_MCOConfig+0xc4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	608b      	str	r3, [r1, #8]
}
 8006292:	bf00      	nop
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	40020000 	.word	0x40020000
 80062a4:	40020800 	.word	0x40020800

080062a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062ac:	b094      	sub	sp, #80	; 0x50
 80062ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	2300      	movs	r3, #0
 80062b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062b8:	2300      	movs	r3, #0
 80062ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c0:	4b79      	ldr	r3, [pc, #484]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 030c 	and.w	r3, r3, #12
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d00d      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x40>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	f200 80e1 	bhi.w	8006494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0x34>
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d003      	beq.n	80062e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062da:	e0db      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062dc:	4b73      	ldr	r3, [pc, #460]	; (80064ac <HAL_RCC_GetSysClockFreq+0x204>)
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062e0:	e0db      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062e2:	4b73      	ldr	r3, [pc, #460]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062e6:	e0d8      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e8:	4b6f      	ldr	r3, [pc, #444]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062f2:	4b6d      	ldr	r3, [pc, #436]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d063      	beq.n	80063c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fe:	4b6a      	ldr	r3, [pc, #424]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	099b      	lsrs	r3, r3, #6
 8006304:	2200      	movs	r2, #0
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38
 8006308:	63fa      	str	r2, [r7, #60]	; 0x3c
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006310:	633b      	str	r3, [r7, #48]	; 0x30
 8006312:	2300      	movs	r3, #0
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
 8006316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	f04f 0000 	mov.w	r0, #0
 8006322:	f04f 0100 	mov.w	r1, #0
 8006326:	0159      	lsls	r1, r3, #5
 8006328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800632c:	0150      	lsls	r0, r2, #5
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4621      	mov	r1, r4
 8006334:	1a51      	subs	r1, r2, r1
 8006336:	6139      	str	r1, [r7, #16]
 8006338:	4629      	mov	r1, r5
 800633a:	eb63 0301 	sbc.w	r3, r3, r1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800634c:	4659      	mov	r1, fp
 800634e:	018b      	lsls	r3, r1, #6
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006356:	4651      	mov	r1, sl
 8006358:	018a      	lsls	r2, r1, #6
 800635a:	4651      	mov	r1, sl
 800635c:	ebb2 0801 	subs.w	r8, r2, r1
 8006360:	4659      	mov	r1, fp
 8006362:	eb63 0901 	sbc.w	r9, r3, r1
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800637a:	4690      	mov	r8, r2
 800637c:	4699      	mov	r9, r3
 800637e:	4623      	mov	r3, r4
 8006380:	eb18 0303 	adds.w	r3, r8, r3
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	462b      	mov	r3, r5
 8006388:	eb49 0303 	adc.w	r3, r9, r3
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800639a:	4629      	mov	r1, r5
 800639c:	024b      	lsls	r3, r1, #9
 800639e:	4621      	mov	r1, r4
 80063a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063a4:	4621      	mov	r1, r4
 80063a6:	024a      	lsls	r2, r1, #9
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ae:	2200      	movs	r2, #0
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063b8:	f7f9 ff72 	bl	80002a0 <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4613      	mov	r3, r2
 80063c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c4:	e058      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c6:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	099b      	lsrs	r3, r3, #6
 80063cc:	2200      	movs	r2, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	4611      	mov	r1, r2
 80063d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	2300      	movs	r3, #0
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
 80063dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	f04f 0000 	mov.w	r0, #0
 80063e8:	f04f 0100 	mov.w	r1, #0
 80063ec:	0159      	lsls	r1, r3, #5
 80063ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f2:	0150      	lsls	r0, r2, #5
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4641      	mov	r1, r8
 80063fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80063fe:	4649      	mov	r1, r9
 8006400:	eb63 0b01 	sbc.w	fp, r3, r1
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006418:	ebb2 040a 	subs.w	r4, r2, sl
 800641c:	eb63 050b 	sbc.w	r5, r3, fp
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	00eb      	lsls	r3, r5, #3
 800642a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800642e:	00e2      	lsls	r2, r4, #3
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	4643      	mov	r3, r8
 8006436:	18e3      	adds	r3, r4, r3
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	464b      	mov	r3, r9
 800643c:	eb45 0303 	adc.w	r3, r5, r3
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800644e:	4629      	mov	r1, r5
 8006450:	028b      	lsls	r3, r1, #10
 8006452:	4621      	mov	r1, r4
 8006454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006458:	4621      	mov	r1, r4
 800645a:	028a      	lsls	r2, r1, #10
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	2200      	movs	r2, #0
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	61fa      	str	r2, [r7, #28]
 8006468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800646c:	f7f9 ff18 	bl	80002a0 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4613      	mov	r3, r2
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	3301      	adds	r3, #1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800648a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006492:	e002      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006496:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800649a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800649c:	4618      	mov	r0, r3
 800649e:	3750      	adds	r7, #80	; 0x50
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	007a1200 	.word	0x007a1200

080064b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064ba:	681b      	ldr	r3, [r3, #0]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000088 	.word	0x20000088

080064cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064d0:	f7ff fff0 	bl	80064b4 <HAL_RCC_GetHCLKFreq>
 80064d4:	4602      	mov	r2, r0
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4903      	ldr	r1, [pc, #12]	; (80064f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e2:	5ccb      	ldrb	r3, [r1, r3]
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40023800 	.word	0x40023800
 80064f0:	0800fc3c 	.word	0x0800fc3c

080064f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064f8:	f7ff ffdc 	bl	80064b4 <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0b5b      	lsrs	r3, r3, #13
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4903      	ldr	r1, [pc, #12]	; (8006518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40023800 	.word	0x40023800
 8006518:	0800fc3c 	.word	0x0800fc3c

0800651c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	220f      	movs	r2, #15
 800652a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_RCC_GetClockConfig+0x5c>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0203 	and.w	r2, r3, #3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_RCC_GetClockConfig+0x5c>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <HAL_RCC_GetClockConfig+0x5c>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006550:	4b09      	ldr	r3, [pc, #36]	; (8006578 <HAL_RCC_GetClockConfig+0x5c>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <HAL_RCC_GetClockConfig+0x60>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800
 800657c:	40023c00 	.word	0x40023c00

08006580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07b      	b.n	800668a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d009      	beq.n	80065b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
 80065aa:	e005      	b.n	80065b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fb fd76 	bl	80020c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	ea42 0103 	orr.w	r1, r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0104 	and.w	r1, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0210 	and.w	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006678:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SPI_Transmit+0x22>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e126      	b.n	8006902 <HAL_SPI_Transmit+0x270>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066bc:	f7fc f9a4 	bl	8002a08 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066d6:	e10b      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Transmit+0x52>
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066e8:	e102      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2203      	movs	r2, #3
 80066ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006730:	d10f      	bne.n	8006752 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006750:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d007      	beq.n	8006770 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006778:	d14b      	bne.n	8006812 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_SPI_Transmit+0xf6>
 8006782:	8afb      	ldrh	r3, [r7, #22]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d13e      	bne.n	8006806 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	1c9a      	adds	r2, r3, #2
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067ac:	e02b      	b.n	8006806 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d112      	bne.n	80067e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	; 0x36
 80067e0:	e011      	b.n	8006806 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e2:	f7fc f911 	bl	8002a08 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d803      	bhi.n	80067fa <HAL_SPI_Transmit+0x168>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d102      	bne.n	8006800 <HAL_SPI_Transmit+0x16e>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006804:	e074      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1ce      	bne.n	80067ae <HAL_SPI_Transmit+0x11c>
 8006810:	e04c      	b.n	80068ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Transmit+0x18e>
 800681a:	8afb      	ldrh	r3, [r7, #22]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d140      	bne.n	80068a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006846:	e02c      	b.n	80068a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d113      	bne.n	800687e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	86da      	strh	r2, [r3, #54]	; 0x36
 800687c:	e011      	b.n	80068a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800687e:	f7fc f8c3 	bl	8002a08 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d803      	bhi.n	8006896 <HAL_SPI_Transmit+0x204>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d102      	bne.n	800689c <HAL_SPI_Transmit+0x20a>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068a0:	e026      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1cd      	bne.n	8006848 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fa63 	bl	8006d7c <SPI_EndRxTxTransaction>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e000      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80068ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006900:	7ffb      	ldrb	r3, [r7, #31]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08c      	sub	sp, #48	; 0x30
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006918:	2301      	movs	r3, #1
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x26>
 800692c:	2302      	movs	r3, #2
 800692e:	e18a      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x33c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006938:	f7fc f866 	bl	8002a08 <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694e:	887b      	ldrh	r3, [r7, #2]
 8006950:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006956:	2b01      	cmp	r3, #1
 8006958:	d00f      	beq.n	800697a <HAL_SPI_TransmitReceive+0x70>
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006960:	d107      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x68>
 800696a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696e:	2b04      	cmp	r3, #4
 8006970:	d003      	beq.n	800697a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006978:	e15b      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_SPI_TransmitReceive+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_TransmitReceive+0x82>
 8006986:	887b      	ldrh	r3, [r7, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006992:	e14e      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b04      	cmp	r3, #4
 800699e:	d003      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2205      	movs	r2, #5
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	887a      	ldrh	r2, [r7, #2]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	887a      	ldrh	r2, [r7, #2]
 80069be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	887a      	ldrh	r2, [r7, #2]
 80069ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d007      	beq.n	80069fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a04:	d178      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x10a>
 8006a0e:	8b7b      	ldrh	r3, [r7, #26]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d166      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a38:	e053      	b.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d11b      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d016      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d113      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d119      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x1b8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d014      	beq.n	8006ac2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	b292      	uxth	r2, r2
 8006aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ac2:	f7fb ffa1 	bl	8002a08 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d807      	bhi.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d003      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ae0:	e0a7      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1a6      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x130>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1a1      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x130>
 8006af6:	e07c      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x1fc>
 8006b00:	8b7b      	ldrh	r3, [r7, #26]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d16b      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	7812      	ldrb	r2, [r2, #0]
 8006b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b2c:	e057      	b.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d11c      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d114      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d119      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x2ae>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d014      	beq.n	8006bb8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb8:	f7fb ff26 	bl	8002a08 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d803      	bhi.n	8006bd0 <HAL_SPI_TransmitReceive+0x2c6>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x2cc>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bdc:	e029      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1a2      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x224>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d19d      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f8c0 	bl	8006d7c <SPI_EndRxTxTransaction>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d006      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c0e:	e010      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	e000      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3730      	adds	r7, #48	; 0x30
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c5c:	b2db      	uxtb	r3, r3
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c7c:	f7fb fec4 	bl	8002a08 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c8c:	f7fb febc 	bl	8002a08 <HAL_GetTick>
 8006c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	015b      	lsls	r3, r3, #5
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca2:	e054      	b.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d050      	beq.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cac:	f7fb feac 	bl	8002a08 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d902      	bls.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d13d      	bne.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d111      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce4:	d004      	beq.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cee:	d107      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d10f      	bne.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e017      	b.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d19b      	bne.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000088 	.word	0x20000088

08006d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <SPI_EndRxTxTransaction+0x7c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	; (8006dfc <SPI_EndRxTxTransaction+0x80>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	0d5b      	lsrs	r3, r3, #21
 8006d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d98:	fb02 f303 	mul.w	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da6:	d112      	bne.n	8006dce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff ff5a 	bl	8006c6c <SPI_WaitFlagStateUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e00f      	b.n	8006dee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d0f2      	beq.n	8006dce <SPI_EndRxTxTransaction+0x52>
 8006de8:	e000      	b.n	8006dec <SPI_EndRxTxTransaction+0x70>
        break;
 8006dea:	bf00      	nop
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000088 	.word	0x20000088
 8006dfc:	165e9f81 	.word	0x165e9f81

08006e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e041      	b.n	8006e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fb fa1a 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f000 fce2 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d001      	beq.n	8006eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e046      	b.n	8006f46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <HAL_TIM_Base_Start+0xb4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d022      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed2:	d01d      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <HAL_TIM_Base_Start+0xb8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_TIM_Base_Start+0xbc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIM_Base_Start+0xc0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <HAL_TIM_Base_Start+0xc4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIM_Base_Start+0xc8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_TIM_Base_Start+0xcc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d111      	bne.n	8006f34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d010      	beq.n	8006f44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f32:	e007      	b.n	8006f44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e04e      	b.n	8007026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a23      	ldr	r2, [pc, #140]	; (8007034 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1f      	ldr	r2, [pc, #124]	; (8007038 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1e      	ldr	r2, [pc, #120]	; (800703c <HAL_TIM_Base_Start_IT+0xcc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a19      	ldr	r2, [pc, #100]	; (8007048 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <HAL_TIM_Base_Start_IT+0xdc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d010      	beq.n	8007024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007012:	e007      	b.n	8007024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40010400 	.word	0x40010400
 8007048:	40014000 	.word	0x40014000
 800704c:	40001800 	.word	0x40001800

08007050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e041      	b.n	80070e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f839 	bl	80070ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fbba 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <HAL_TIM_PWM_Start+0x24>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	e022      	b.n	800716e <HAL_TIM_PWM_Start+0x6a>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b04      	cmp	r3, #4
 800712c:	d109      	bne.n	8007142 <HAL_TIM_PWM_Start+0x3e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	bf14      	ite	ne
 800713a:	2301      	movne	r3, #1
 800713c:	2300      	moveq	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e015      	b.n	800716e <HAL_TIM_PWM_Start+0x6a>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d109      	bne.n	800715c <HAL_TIM_PWM_Start+0x58>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e008      	b.n	800716e <HAL_TIM_PWM_Start+0x6a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e07c      	b.n	8007270 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0x82>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	e013      	b.n	80071ae <HAL_TIM_PWM_Start+0xaa>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0x92>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007194:	e00b      	b.n	80071ae <HAL_TIM_PWM_Start+0xaa>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_PWM_Start+0xa2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a4:	e003      	b.n	80071ae <HAL_TIM_PWM_Start+0xaa>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fe10 	bl	8007ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <HAL_TIM_PWM_Start+0x174>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <HAL_TIM_PWM_Start+0xcc>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2c      	ldr	r2, [pc, #176]	; (800727c <HAL_TIM_PWM_Start+0x178>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_PWM_Start+0xd0>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <HAL_TIM_PWM_Start+0xd2>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <HAL_TIM_PWM_Start+0x174>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fc:	d01d      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <HAL_TIM_PWM_Start+0x17c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_TIM_PWM_Start+0x180>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <HAL_TIM_PWM_Start+0x184>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a16      	ldr	r2, [pc, #88]	; (800727c <HAL_TIM_PWM_Start+0x178>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a18      	ldr	r2, [pc, #96]	; (800728c <HAL_TIM_PWM_Start+0x188>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_TIM_PWM_Start+0x136>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_TIM_PWM_Start+0x18c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d111      	bne.n	800725e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b06      	cmp	r3, #6
 800724a:	d010      	beq.n	800726e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	e007      	b.n	800726e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0201 	orr.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40014000 	.word	0x40014000
 8007290:	40001800 	.word	0x40001800

08007294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d122      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d11b      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0202 	mvn.w	r2, #2
 80072c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa77 	bl	80077ca <HAL_TIM_IC_CaptureCallback>
 80072dc:	e005      	b.n	80072ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa69 	bl	80077b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa7a 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d122      	bne.n	8007344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b04      	cmp	r3, #4
 800730a:	d11b      	bne.n	8007344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0204 	mvn.w	r2, #4
 8007314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa4d 	bl	80077ca <HAL_TIM_IC_CaptureCallback>
 8007330:	e005      	b.n	800733e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa3f 	bl	80077b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa50 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b08      	cmp	r3, #8
 8007350:	d122      	bne.n	8007398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d11b      	bne.n	8007398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0208 	mvn.w	r2, #8
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa23 	bl	80077ca <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa15 	bl	80077b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa26 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d122      	bne.n	80073ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0310 	and.w	r3, r3, #16
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d11b      	bne.n	80073ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0210 	mvn.w	r2, #16
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2208      	movs	r2, #8
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9f9 	bl	80077ca <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9eb 	bl	80077b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9fc 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10e      	bne.n	8007418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	d107      	bne.n	8007418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0201 	mvn.w	r2, #1
 8007410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa fca4 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b80      	cmp	r3, #128	; 0x80
 8007424:	d10e      	bne.n	8007444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d107      	bne.n	8007444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800743c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fdca 	bl	8007fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	d10e      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745c:	2b40      	cmp	r3, #64	; 0x40
 800745e:	d107      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9c1 	bl	80077f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d10e      	bne.n	800749c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b20      	cmp	r3, #32
 800748a:	d107      	bne.n	800749c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0220 	mvn.w	r2, #32
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fd94 	bl	8007fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074be:	2302      	movs	r3, #2
 80074c0:	e0ae      	b.n	8007620 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b0c      	cmp	r3, #12
 80074ce:	f200 809f 	bhi.w	8007610 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	0800750d 	.word	0x0800750d
 80074dc:	08007611 	.word	0x08007611
 80074e0:	08007611 	.word	0x08007611
 80074e4:	08007611 	.word	0x08007611
 80074e8:	0800754d 	.word	0x0800754d
 80074ec:	08007611 	.word	0x08007611
 80074f0:	08007611 	.word	0x08007611
 80074f4:	08007611 	.word	0x08007611
 80074f8:	0800758f 	.word	0x0800758f
 80074fc:	08007611 	.word	0x08007611
 8007500:	08007611 	.word	0x08007611
 8007504:	08007611 	.word	0x08007611
 8007508:	080075cf 	.word	0x080075cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fa18 	bl	8007948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0208 	orr.w	r2, r2, #8
 8007526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0204 	bic.w	r2, r2, #4
 8007536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6999      	ldr	r1, [r3, #24]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	619a      	str	r2, [r3, #24]
      break;
 800754a:	e064      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fa68 	bl	8007a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6999      	ldr	r1, [r3, #24]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	021a      	lsls	r2, r3, #8
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	619a      	str	r2, [r3, #24]
      break;
 800758c:	e043      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fabd 	bl	8007b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0208 	orr.w	r2, r2, #8
 80075a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0204 	bic.w	r2, r2, #4
 80075b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69d9      	ldr	r1, [r3, #28]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	61da      	str	r2, [r3, #28]
      break;
 80075cc:	e023      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fb11 	bl	8007bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69d9      	ldr	r1, [r3, #28]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	021a      	lsls	r2, r3, #8
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	61da      	str	r2, [r3, #28]
      break;
 800760e:	e002      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	75fb      	strb	r3, [r7, #23]
      break;
 8007614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIM_ConfigClockSource+0x1c>
 8007640:	2302      	movs	r3, #2
 8007642:	e0b4      	b.n	80077ae <HAL_TIM_ConfigClockSource+0x186>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767c:	d03e      	beq.n	80076fc <HAL_TIM_ConfigClockSource+0xd4>
 800767e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007682:	f200 8087 	bhi.w	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768a:	f000 8086 	beq.w	800779a <HAL_TIM_ConfigClockSource+0x172>
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007692:	d87f      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 8007694:	2b70      	cmp	r3, #112	; 0x70
 8007696:	d01a      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0xa6>
 8007698:	2b70      	cmp	r3, #112	; 0x70
 800769a:	d87b      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 800769c:	2b60      	cmp	r3, #96	; 0x60
 800769e:	d050      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x11a>
 80076a0:	2b60      	cmp	r3, #96	; 0x60
 80076a2:	d877      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 80076a4:	2b50      	cmp	r3, #80	; 0x50
 80076a6:	d03c      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xfa>
 80076a8:	2b50      	cmp	r3, #80	; 0x50
 80076aa:	d873      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d058      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x13a>
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d86f      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 80076b4:	2b30      	cmp	r3, #48	; 0x30
 80076b6:	d064      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x15a>
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d86b      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d060      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x15a>
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d867      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d05c      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x15a>
 80076c8:	2b10      	cmp	r3, #16
 80076ca:	d05a      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x15a>
 80076cc:	e062      	b.n	8007794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6899      	ldr	r1, [r3, #8]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f000 fb5d 	bl	8007d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	609a      	str	r2, [r3, #8]
      break;
 80076fa:	e04f      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	6899      	ldr	r1, [r3, #8]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f000 fb46 	bl	8007d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800771e:	609a      	str	r2, [r3, #8]
      break;
 8007720:	e03c      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	461a      	mov	r2, r3
 8007730:	f000 faba 	bl	8007ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2150      	movs	r1, #80	; 0x50
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fb13 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007740:	e02c      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	461a      	mov	r2, r3
 8007750:	f000 fad9 	bl	8007d06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2160      	movs	r1, #96	; 0x60
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fb03 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007760:	e01c      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	461a      	mov	r2, r3
 8007770:	f000 fa9a 	bl	8007ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	4618      	mov	r0, r3
 800777c:	f000 faf3 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007780:	e00c      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f000 faea 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007792:	e003      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      break;
 8007798:	e000      	b.n	800779c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800779a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a40      	ldr	r2, [pc, #256]	; (800791c <TIM_Base_SetConfig+0x114>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d013      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007826:	d00f      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3d      	ldr	r2, [pc, #244]	; (8007920 <TIM_Base_SetConfig+0x118>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00b      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <TIM_Base_SetConfig+0x11c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d007      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <TIM_Base_SetConfig+0x120>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3a      	ldr	r2, [pc, #232]	; (800792c <TIM_Base_SetConfig+0x124>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d108      	bne.n	800785a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2f      	ldr	r2, [pc, #188]	; (800791c <TIM_Base_SetConfig+0x114>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d02b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d027      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2c      	ldr	r2, [pc, #176]	; (8007920 <TIM_Base_SetConfig+0x118>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d023      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a2b      	ldr	r2, [pc, #172]	; (8007924 <TIM_Base_SetConfig+0x11c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01f      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <TIM_Base_SetConfig+0x120>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a29      	ldr	r2, [pc, #164]	; (800792c <TIM_Base_SetConfig+0x124>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d017      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a28      	ldr	r2, [pc, #160]	; (8007930 <TIM_Base_SetConfig+0x128>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <TIM_Base_SetConfig+0x12c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <TIM_Base_SetConfig+0x130>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a25      	ldr	r2, [pc, #148]	; (800793c <TIM_Base_SetConfig+0x134>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a24      	ldr	r2, [pc, #144]	; (8007940 <TIM_Base_SetConfig+0x138>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a23      	ldr	r2, [pc, #140]	; (8007944 <TIM_Base_SetConfig+0x13c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d108      	bne.n	80078cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a0a      	ldr	r2, [pc, #40]	; (800791c <TIM_Base_SetConfig+0x114>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0xf8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a0c      	ldr	r2, [pc, #48]	; (800792c <TIM_Base_SetConfig+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d103      	bne.n	8007908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	615a      	str	r2, [r3, #20]
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40010400 	.word	0x40010400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800
 800793c:	40001800 	.word	0x40001800
 8007940:	40001c00 	.word	0x40001c00
 8007944:	40002000 	.word	0x40002000

08007948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 0302 	bic.w	r3, r3, #2
 8007990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <TIM_OC1_SetConfig+0xd8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC1_SetConfig+0x64>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <TIM_OC1_SetConfig+0xdc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d10c      	bne.n	80079c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0308 	bic.w	r3, r3, #8
 80079b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <TIM_OC1_SetConfig+0xd8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_OC1_SetConfig+0x8e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a14      	ldr	r2, [pc, #80]	; (8007a24 <TIM_OC1_SetConfig+0xdc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d111      	bne.n	80079fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	621a      	str	r2, [r3, #32]
}
 8007a14:	bf00      	nop
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0210 	bic.w	r2, r3, #16
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0320 	bic.w	r3, r3, #32
 8007a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <TIM_OC2_SetConfig+0xe4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC2_SetConfig+0x68>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <TIM_OC2_SetConfig+0xe8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10d      	bne.n	8007aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC2_SetConfig+0xe4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_OC2_SetConfig+0x94>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC2_SetConfig+0xe8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d113      	bne.n	8007ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a21      	ldr	r2, [pc, #132]	; (8007bf4 <TIM_OC3_SetConfig+0xe0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC3_SetConfig+0x66>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a20      	ldr	r2, [pc, #128]	; (8007bf8 <TIM_OC3_SetConfig+0xe4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d10d      	bne.n	8007b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <TIM_OC3_SetConfig+0xe0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_OC3_SetConfig+0x92>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC3_SetConfig+0xe4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d113      	bne.n	8007bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	621a      	str	r2, [r3, #32]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400

08007bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <TIM_OC4_SetConfig+0xa4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC4_SetConfig+0x68>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a11      	ldr	r2, [pc, #68]	; (8007ca4 <TIM_OC4_SetConfig+0xa8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d109      	bne.n	8007c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	019b      	lsls	r3, r3, #6
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40010400 	.word	0x40010400

08007ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f023 0201 	bic.w	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f023 030a 	bic.w	r3, r3, #10
 8007ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b087      	sub	sp, #28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f023 0210 	bic.w	r2, r3, #16
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	031b      	lsls	r3, r3, #12
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f043 0307 	orr.w	r3, r3, #7
 8007d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2201      	movs	r2, #1
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a1a      	ldr	r2, [r3, #32]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	401a      	ands	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1a      	ldr	r2, [r3, #32]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	fa01 f303 	lsl.w	r3, r1, r3
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e05a      	b.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d022      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8c:	d01d      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1a      	ldr	r2, [pc, #104]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	40010400 	.word	0x40010400
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40001800 	.word	0x40001800

08007f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e03d      	b.n	8007fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e03f      	b.n	800807e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa f9c8 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	; 0x24
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 ff43 	bl	8008ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	; 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d165      	bne.n	800816e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_UART_Transmit_DMA+0x26>
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e05e      	b.n	8008170 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_UART_Transmit_DMA+0x38>
 80080bc:	2302      	movs	r3, #2
 80080be:	e057      	b.n	8008170 <HAL_UART_Transmit_DMA+0xe8>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	88fa      	ldrh	r2, [r7, #6]
 80080d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2221      	movs	r2, #33	; 0x21
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ec:	4a22      	ldr	r2, [pc, #136]	; (8008178 <HAL_UART_Transmit_DMA+0xf0>)
 80080ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f4:	4a21      	ldr	r2, [pc, #132]	; (800817c <HAL_UART_Transmit_DMA+0xf4>)
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	4a20      	ldr	r2, [pc, #128]	; (8008180 <HAL_UART_Transmit_DMA+0xf8>)
 80080fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	2200      	movs	r2, #0
 8008106:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	6819      	ldr	r1, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3304      	adds	r3, #4
 800811c:	461a      	mov	r2, r3
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	f7fb fcb2 	bl	8003a88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800812c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	617b      	str	r3, [r7, #20]
   return(result);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008156:	627a      	str	r2, [r7, #36]	; 0x24
 8008158:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6a39      	ldr	r1, [r7, #32]
 800815c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	61fb      	str	r3, [r7, #28]
   return(result);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	e000      	b.n	8008170 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800816e:	2302      	movs	r3, #2
  }
}
 8008170:	4618      	mov	r0, r3
 8008172:	3730      	adds	r7, #48	; 0x30
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	08008755 	.word	0x08008755
 800817c:	080087ef 	.word	0x080087ef
 8008180:	08008967 	.word	0x08008967

08008184 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b20      	cmp	r3, #32
 800819c:	d11d      	bne.n	80081da <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <HAL_UART_Receive_DMA+0x26>
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e016      	b.n	80081dc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Receive_DMA+0x38>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e00f      	b.n	80081dc <HAL_UART_Receive_DMA+0x58>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	461a      	mov	r2, r3
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fc13 	bl	80089fc <UART_Start_Receive_DMA>
 80081d6:	4603      	mov	r3, r0
 80081d8:	e000      	b.n	80081dc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081da:	2302      	movs	r3, #2
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b0ba      	sub	sp, #232	; 0xe8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800820a:	2300      	movs	r3, #0
 800820c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800822a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_UART_IRQHandler+0x66>
 8008236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fd7f 	bl	8008d46 <UART_Receive_IT>
      return;
 8008248:	e256      	b.n	80086f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800824a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80de 	beq.w	8008410 <HAL_UART_IRQHandler+0x22c>
 8008254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008264:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80d1 	beq.w	8008410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <HAL_UART_IRQHandler+0xae>
 800827a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <HAL_UART_IRQHandler+0xd2>
 800829e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	f043 0202 	orr.w	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <HAL_UART_IRQHandler+0xf6>
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0204 	orr.w	r2, r3, #4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d011      	beq.n	800830a <HAL_UART_IRQHandler+0x126>
 80082e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f043 0208 	orr.w	r2, r3, #8
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 81ed 	beq.w	80086ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d008      	beq.n	8008332 <HAL_UART_IRQHandler+0x14e>
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fd0a 	bl	8008d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	bf0c      	ite	eq
 8008340:	2301      	moveq	r3, #1
 8008342:	2300      	movne	r3, #0
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <HAL_UART_IRQHandler+0x17a>
 8008356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d04f      	beq.n	80083fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc12 	bl	8008b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d141      	bne.n	80083f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3314      	adds	r3, #20
 8008378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800838c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3314      	adds	r3, #20
 800839a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800839e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1d9      	bne.n	8008372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d013      	beq.n	80083ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	4a7d      	ldr	r2, [pc, #500]	; (80085c0 <HAL_UART_IRQHandler+0x3dc>)
 80083cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fb fc20 	bl	8003c18 <HAL_DMA_Abort_IT>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d016      	beq.n	800840c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	e00e      	b.n	800840c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f99a 	bl	8008728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	e00a      	b.n	800840c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f996 	bl	8008728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	e006      	b.n	800840c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f992 	bl	8008728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800840a:	e170      	b.n	80086ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840c:	bf00      	nop
    return;
 800840e:	e16e      	b.n	80086ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	2b01      	cmp	r3, #1
 8008416:	f040 814a 	bne.w	80086ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800841a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8143 	beq.w	80086ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 813c 	beq.w	80086ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008436:	2300      	movs	r3, #0
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	f040 80b4 	bne.w	80085c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8140 	beq.w	80086f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800847a:	429a      	cmp	r2, r3
 800847c:	f080 8139 	bcs.w	80086f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008486:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008492:	f000 8088 	beq.w	80085a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	330c      	adds	r3, #12
 800849c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	330c      	adds	r3, #12
 80084be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1d9      	bne.n	8008496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3314      	adds	r3, #20
 80084e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3314      	adds	r3, #20
 8008502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008506:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800850a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800850e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e1      	bne.n	80084e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3314      	adds	r3, #20
 8008524:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800852e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3314      	adds	r3, #20
 800853e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008544:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e3      	bne.n	800851e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008576:	f023 0310 	bic.w	r3, r3, #16
 800857a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008588:	65ba      	str	r2, [r7, #88]	; 0x58
 800858a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800858e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e3      	bne.n	8008564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fb fac9 	bl	8003b38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8c0 	bl	800873c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085bc:	e099      	b.n	80086f2 <HAL_UART_IRQHandler+0x50e>
 80085be:	bf00      	nop
 80085c0:	08008c4f 	.word	0x08008c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 808b 	beq.w	80086f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8086 	beq.w	80086f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	330c      	adds	r3, #12
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800860e:	647a      	str	r2, [r7, #68]	; 0x44
 8008610:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e3      	bne.n	80085ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3314      	adds	r3, #20
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	623b      	str	r3, [r7, #32]
   return(result);
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f023 0301 	bic.w	r3, r3, #1
 8008638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3314      	adds	r3, #20
 8008642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008646:	633a      	str	r2, [r7, #48]	; 0x30
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e3      	bne.n	8008622 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	330c      	adds	r3, #12
 800866e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	60fb      	str	r3, [r7, #12]
   return(result);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0310 	bic.w	r3, r3, #16
 800867e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800868c:	61fa      	str	r2, [r7, #28]
 800868e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	617b      	str	r3, [r7, #20]
   return(result);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e3      	bne.n	8008668 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f848 	bl	800873c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ac:	e023      	b.n	80086f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <HAL_UART_IRQHandler+0x4ea>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fad5 	bl	8008c76 <UART_Transmit_IT>
    return;
 80086cc:	e014      	b.n	80086f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <HAL_UART_IRQHandler+0x514>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fb15 	bl	8008d16 <UART_EndTransmit_IT>
    return;
 80086ec:	e004      	b.n	80086f8 <HAL_UART_IRQHandler+0x514>
    return;
 80086ee:	bf00      	nop
 80086f0:	e002      	b.n	80086f8 <HAL_UART_IRQHandler+0x514>
      return;
 80086f2:	bf00      	nop
 80086f4:	e000      	b.n	80086f8 <HAL_UART_IRQHandler+0x514>
      return;
 80086f6:	bf00      	nop
  }
}
 80086f8:	37e8      	adds	r7, #232	; 0xe8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop

08008700 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b090      	sub	sp, #64	; 0x40
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d137      	bne.n	80087e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	2200      	movs	r2, #0
 8008774:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3314      	adds	r3, #20
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	623b      	str	r3, [r7, #32]
   return(result);
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008796:	633a      	str	r2, [r7, #48]	; 0x30
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e5      	bne.n	8008776 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	330c      	adds	r3, #12
 80087c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ca:	61fa      	str	r2, [r7, #28]
 80087cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	617b      	str	r3, [r7, #20]
   return(result);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e5      	bne.n	80087aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087de:	e002      	b.n	80087e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80087e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087e2:	f7f9 f919 	bl	8001a18 <HAL_UART_TxCpltCallback>
}
 80087e6:	bf00      	nop
 80087e8:	3740      	adds	r7, #64	; 0x40
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff ff7f 	bl	8008700 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b09c      	sub	sp, #112	; 0x70
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d172      	bne.n	800890c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008828:	2200      	movs	r2, #0
 800882a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800882c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	330c      	adds	r3, #12
 8008832:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800883c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008842:	66bb      	str	r3, [r7, #104]	; 0x68
 8008844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800884c:	65ba      	str	r2, [r7, #88]	; 0x58
 800884e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800885a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3314      	adds	r3, #20
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	667b      	str	r3, [r7, #100]	; 0x64
 8008878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3314      	adds	r3, #20
 800887e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008880:	647a      	str	r2, [r7, #68]	; 0x44
 8008882:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800888e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e5      	bne.n	8008860 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3314      	adds	r3, #20
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	623b      	str	r3, [r7, #32]
   return(result);
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	663b      	str	r3, [r7, #96]	; 0x60
 80088ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3314      	adds	r3, #20
 80088b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088b4:	633a      	str	r2, [r7, #48]	; 0x30
 80088b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e5      	bne.n	8008894 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d119      	bne.n	800890c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088f8:	61fa      	str	r2, [r7, #28]
 80088fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	617b      	str	r3, [r7, #20]
   return(result);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e5      	bne.n	80088d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008918:	4619      	mov	r1, r3
 800891a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800891c:	f7ff ff0e 	bl	800873c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008920:	e002      	b.n	8008928 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008922:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008924:	f7f9 f850 	bl	80019c8 <HAL_UART_RxCpltCallback>
}
 8008928:	bf00      	nop
 800892a:	3770      	adds	r7, #112	; 0x70
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	2b01      	cmp	r3, #1
 8008944:	d108      	bne.n	8008958 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fef3 	bl	800873c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008956:	e002      	b.n	800895e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fedb 	bl	8008714 <HAL_UART_RxHalfCpltCallback>
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	bf0c      	ite	eq
 8008986:	2301      	moveq	r3, #1
 8008988:	2300      	movne	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b21      	cmp	r3, #33	; 0x21
 8008998:	d108      	bne.n	80089ac <UART_DMAError+0x46>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2200      	movs	r2, #0
 80089a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089a6:	68b8      	ldr	r0, [r7, #8]
 80089a8:	f000 f8c6 	bl	8008b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	bf0c      	ite	eq
 80089ba:	2301      	moveq	r3, #1
 80089bc:	2300      	movne	r3, #0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b22      	cmp	r3, #34	; 0x22
 80089cc:	d108      	bne.n	80089e0 <UART_DMAError+0x7a>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2200      	movs	r2, #0
 80089d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80089da:	68b8      	ldr	r0, [r7, #8]
 80089dc:	f000 f8d4 	bl	8008b88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	f043 0210 	orr.w	r2, r3, #16
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ec:	68b8      	ldr	r0, [r7, #8]
 80089ee:	f7ff fe9b 	bl	8008728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b098      	sub	sp, #96	; 0x60
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2222      	movs	r2, #34	; 0x22
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	4a40      	ldr	r2, [pc, #256]	; (8008b2c <UART_Start_Receive_DMA+0x130>)
 8008a2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	4a3f      	ldr	r2, [pc, #252]	; (8008b30 <UART_Start_Receive_DMA+0x134>)
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	4a3e      	ldr	r2, [pc, #248]	; (8008b34 <UART_Start_Receive_DMA+0x138>)
 8008a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	2200      	movs	r2, #0
 8008a42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4619      	mov	r1, r3
 8008a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	f7fb f814 	bl	8003a88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a60:	2300      	movs	r3, #0
 8008a62:	613b      	str	r3, [r7, #16]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d019      	beq.n	8008aba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	330c      	adds	r3, #12
 8008aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3314      	adds	r3, #20
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3314      	adds	r3, #20
 8008ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ada:	63ba      	str	r2, [r7, #56]	; 0x38
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3314      	adds	r3, #20
 8008af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	617b      	str	r3, [r7, #20]
   return(result);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b04:	653b      	str	r3, [r7, #80]	; 0x50
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3314      	adds	r3, #20
 8008b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6a39      	ldr	r1, [r7, #32]
 8008b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3760      	adds	r7, #96	; 0x60
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	0800880b 	.word	0x0800880b
 8008b30:	08008931 	.word	0x08008931
 8008b34:	08008967 	.word	0x08008967

08008b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	330c      	adds	r3, #12
 8008b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	61ba      	str	r2, [r7, #24]
 8008b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6979      	ldr	r1, [r7, #20]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e5      	bne.n	8008b40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b7c:	bf00      	nop
 8008b7e:	3724      	adds	r7, #36	; 0x24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b095      	sub	sp, #84	; 0x54
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d119      	bne.n	8008c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	647b      	str	r3, [r7, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c20:	61ba      	str	r2, [r7, #24]
 8008c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e5      	bne.n	8008c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c42:	bf00      	nop
 8008c44:	3754      	adds	r7, #84	; 0x54
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fd5d 	bl	8008728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b21      	cmp	r3, #33	; 0x21
 8008c88:	d13e      	bne.n	8008d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d114      	bne.n	8008cbe <UART_Transmit_IT+0x48>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d110      	bne.n	8008cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	1c9a      	adds	r2, r3, #2
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]
 8008cbc:	e008      	b.n	8008cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6211      	str	r1, [r2, #32]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10f      	bne.n	8008d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7f8 fe6e 	bl	8001a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b08c      	sub	sp, #48	; 0x30
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b22      	cmp	r3, #34	; 0x22
 8008d58:	f040 80ab 	bne.w	8008eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d64:	d117      	bne.n	8008d96 <UART_Receive_IT+0x50>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d113      	bne.n	8008d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	1c9a      	adds	r2, r3, #2
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	629a      	str	r2, [r3, #40]	; 0x28
 8008d94:	e026      	b.n	8008de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da8:	d007      	beq.n	8008dba <UART_Receive_IT+0x74>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <UART_Receive_IT+0x82>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e008      	b.n	8008dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4619      	mov	r1, r3
 8008df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d15a      	bne.n	8008eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0220 	bic.w	r2, r2, #32
 8008e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d135      	bne.n	8008ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f023 0310 	bic.w	r3, r3, #16
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	330c      	adds	r3, #12
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	623a      	str	r2, [r7, #32]
 8008e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	69f9      	ldr	r1, [r7, #28]
 8008e64:	6a3a      	ldr	r2, [r7, #32]
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e5      	bne.n	8008e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d10a      	bne.n	8008e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fc4d 	bl	800873c <HAL_UARTEx_RxEventCallback>
 8008ea2:	e002      	b.n	8008eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7f8 fd8f 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e002      	b.n	8008eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
  }
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3730      	adds	r7, #48	; 0x30
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec0:	b0c0      	sub	sp, #256	; 0x100
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed8:	68d9      	ldr	r1, [r3, #12]
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	ea40 0301 	orr.w	r3, r0, r1
 8008ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f14:	f021 010c 	bic.w	r1, r1, #12
 8008f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f22:	430b      	orrs	r3, r1
 8008f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f36:	6999      	ldr	r1, [r3, #24]
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	ea40 0301 	orr.w	r3, r0, r1
 8008f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b8f      	ldr	r3, [pc, #572]	; (8009188 <UART_SetConfig+0x2cc>)
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d005      	beq.n	8008f5c <UART_SetConfig+0xa0>
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	4b8d      	ldr	r3, [pc, #564]	; (800918c <UART_SetConfig+0x2d0>)
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d104      	bne.n	8008f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f5c:	f7fd faca 	bl	80064f4 <HAL_RCC_GetPCLK2Freq>
 8008f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f64:	e003      	b.n	8008f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f66:	f7fd fab1 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 8008f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f78:	f040 810c 	bne.w	8009194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	1891      	adds	r1, r2, r2
 8008f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f96:	415b      	adcs	r3, r3
 8008f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	eb12 0801 	adds.w	r8, r2, r1
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	eb43 0901 	adc.w	r9, r3, r1
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	f04f 0300 	mov.w	r3, #0
 8008fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fbe:	4690      	mov	r8, r2
 8008fc0:	4699      	mov	r9, r3
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	eb18 0303 	adds.w	r3, r8, r3
 8008fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fcc:	462b      	mov	r3, r5
 8008fce:	eb49 0303 	adc.w	r3, r9, r3
 8008fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fea:	460b      	mov	r3, r1
 8008fec:	18db      	adds	r3, r3, r3
 8008fee:	653b      	str	r3, [r7, #80]	; 0x50
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	eb42 0303 	adc.w	r3, r2, r3
 8008ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009000:	f7f7 f94e 	bl	80002a0 <__aeabi_uldivmod>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4b61      	ldr	r3, [pc, #388]	; (8009190 <UART_SetConfig+0x2d4>)
 800900a:	fba3 2302 	umull	r2, r3, r3, r2
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	011c      	lsls	r4, r3, #4
 8009012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009016:	2200      	movs	r2, #0
 8009018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800901c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009024:	4642      	mov	r2, r8
 8009026:	464b      	mov	r3, r9
 8009028:	1891      	adds	r1, r2, r2
 800902a:	64b9      	str	r1, [r7, #72]	; 0x48
 800902c:	415b      	adcs	r3, r3
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009034:	4641      	mov	r1, r8
 8009036:	eb12 0a01 	adds.w	sl, r2, r1
 800903a:	4649      	mov	r1, r9
 800903c:	eb43 0b01 	adc.w	fp, r3, r1
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800904c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009054:	4692      	mov	sl, r2
 8009056:	469b      	mov	fp, r3
 8009058:	4643      	mov	r3, r8
 800905a:	eb1a 0303 	adds.w	r3, sl, r3
 800905e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009062:	464b      	mov	r3, r9
 8009064:	eb4b 0303 	adc.w	r3, fp, r3
 8009068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800907c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009080:	460b      	mov	r3, r1
 8009082:	18db      	adds	r3, r3, r3
 8009084:	643b      	str	r3, [r7, #64]	; 0x40
 8009086:	4613      	mov	r3, r2
 8009088:	eb42 0303 	adc.w	r3, r2, r3
 800908c:	647b      	str	r3, [r7, #68]	; 0x44
 800908e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009096:	f7f7 f903 	bl	80002a0 <__aeabi_uldivmod>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	4b3b      	ldr	r3, [pc, #236]	; (8009190 <UART_SetConfig+0x2d4>)
 80090a2:	fba3 2301 	umull	r2, r3, r3, r1
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	2264      	movs	r2, #100	; 0x64
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	1acb      	subs	r3, r1, r3
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80090b6:	4b36      	ldr	r3, [pc, #216]	; (8009190 <UART_SetConfig+0x2d4>)
 80090b8:	fba3 2302 	umull	r2, r3, r3, r2
 80090bc:	095b      	lsrs	r3, r3, #5
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090c4:	441c      	add	r4, r3
 80090c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	1891      	adds	r1, r2, r2
 80090de:	63b9      	str	r1, [r7, #56]	; 0x38
 80090e0:	415b      	adcs	r3, r3
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090e8:	4641      	mov	r1, r8
 80090ea:	1851      	adds	r1, r2, r1
 80090ec:	6339      	str	r1, [r7, #48]	; 0x30
 80090ee:	4649      	mov	r1, r9
 80090f0:	414b      	adcs	r3, r1
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009100:	4659      	mov	r1, fp
 8009102:	00cb      	lsls	r3, r1, #3
 8009104:	4651      	mov	r1, sl
 8009106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800910a:	4651      	mov	r1, sl
 800910c:	00ca      	lsls	r2, r1, #3
 800910e:	4610      	mov	r0, r2
 8009110:	4619      	mov	r1, r3
 8009112:	4603      	mov	r3, r0
 8009114:	4642      	mov	r2, r8
 8009116:	189b      	adds	r3, r3, r2
 8009118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800911c:	464b      	mov	r3, r9
 800911e:	460a      	mov	r2, r1
 8009120:	eb42 0303 	adc.w	r3, r2, r3
 8009124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800913c:	460b      	mov	r3, r1
 800913e:	18db      	adds	r3, r3, r3
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
 8009142:	4613      	mov	r3, r2
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800914a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800914e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009152:	f7f7 f8a5 	bl	80002a0 <__aeabi_uldivmod>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <UART_SetConfig+0x2d4>)
 800915c:	fba3 1302 	umull	r1, r3, r3, r2
 8009160:	095b      	lsrs	r3, r3, #5
 8009162:	2164      	movs	r1, #100	; 0x64
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	3332      	adds	r3, #50	; 0x32
 800916e:	4a08      	ldr	r2, [pc, #32]	; (8009190 <UART_SetConfig+0x2d4>)
 8009170:	fba2 2303 	umull	r2, r3, r2, r3
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	f003 0207 	and.w	r2, r3, #7
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4422      	add	r2, r4
 8009182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009184:	e105      	b.n	8009392 <UART_SetConfig+0x4d6>
 8009186:	bf00      	nop
 8009188:	40011000 	.word	0x40011000
 800918c:	40011400 	.word	0x40011400
 8009190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009198:	2200      	movs	r2, #0
 800919a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800919e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80091a6:	4642      	mov	r2, r8
 80091a8:	464b      	mov	r3, r9
 80091aa:	1891      	adds	r1, r2, r2
 80091ac:	6239      	str	r1, [r7, #32]
 80091ae:	415b      	adcs	r3, r3
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
 80091b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091b6:	4641      	mov	r1, r8
 80091b8:	1854      	adds	r4, r2, r1
 80091ba:	4649      	mov	r1, r9
 80091bc:	eb43 0501 	adc.w	r5, r3, r1
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	f04f 0300 	mov.w	r3, #0
 80091c8:	00eb      	lsls	r3, r5, #3
 80091ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ce:	00e2      	lsls	r2, r4, #3
 80091d0:	4614      	mov	r4, r2
 80091d2:	461d      	mov	r5, r3
 80091d4:	4643      	mov	r3, r8
 80091d6:	18e3      	adds	r3, r4, r3
 80091d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091dc:	464b      	mov	r3, r9
 80091de:	eb45 0303 	adc.w	r3, r5, r3
 80091e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	f04f 0300 	mov.w	r3, #0
 80091fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009202:	4629      	mov	r1, r5
 8009204:	008b      	lsls	r3, r1, #2
 8009206:	4621      	mov	r1, r4
 8009208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800920c:	4621      	mov	r1, r4
 800920e:	008a      	lsls	r2, r1, #2
 8009210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009214:	f7f7 f844 	bl	80002a0 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4b60      	ldr	r3, [pc, #384]	; (80093a0 <UART_SetConfig+0x4e4>)
 800921e:	fba3 2302 	umull	r2, r3, r3, r2
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	011c      	lsls	r4, r3, #4
 8009226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800922a:	2200      	movs	r2, #0
 800922c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	1891      	adds	r1, r2, r2
 800923e:	61b9      	str	r1, [r7, #24]
 8009240:	415b      	adcs	r3, r3
 8009242:	61fb      	str	r3, [r7, #28]
 8009244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009248:	4641      	mov	r1, r8
 800924a:	1851      	adds	r1, r2, r1
 800924c:	6139      	str	r1, [r7, #16]
 800924e:	4649      	mov	r1, r9
 8009250:	414b      	adcs	r3, r1
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009260:	4659      	mov	r1, fp
 8009262:	00cb      	lsls	r3, r1, #3
 8009264:	4651      	mov	r1, sl
 8009266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800926a:	4651      	mov	r1, sl
 800926c:	00ca      	lsls	r2, r1, #3
 800926e:	4610      	mov	r0, r2
 8009270:	4619      	mov	r1, r3
 8009272:	4603      	mov	r3, r0
 8009274:	4642      	mov	r2, r8
 8009276:	189b      	adds	r3, r3, r2
 8009278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800927c:	464b      	mov	r3, r9
 800927e:	460a      	mov	r2, r1
 8009280:	eb42 0303 	adc.w	r3, r2, r3
 8009284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	67bb      	str	r3, [r7, #120]	; 0x78
 8009292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80092a0:	4649      	mov	r1, r9
 80092a2:	008b      	lsls	r3, r1, #2
 80092a4:	4641      	mov	r1, r8
 80092a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092aa:	4641      	mov	r1, r8
 80092ac:	008a      	lsls	r2, r1, #2
 80092ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80092b2:	f7f6 fff5 	bl	80002a0 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <UART_SetConfig+0x4e4>)
 80092bc:	fba3 1302 	umull	r1, r3, r3, r2
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	2164      	movs	r1, #100	; 0x64
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	3332      	adds	r3, #50	; 0x32
 80092ce:	4a34      	ldr	r2, [pc, #208]	; (80093a0 <UART_SetConfig+0x4e4>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092da:	441c      	add	r4, r3
 80092dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e0:	2200      	movs	r2, #0
 80092e2:	673b      	str	r3, [r7, #112]	; 0x70
 80092e4:	677a      	str	r2, [r7, #116]	; 0x74
 80092e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80092ea:	4642      	mov	r2, r8
 80092ec:	464b      	mov	r3, r9
 80092ee:	1891      	adds	r1, r2, r2
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	415b      	adcs	r3, r3
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092fa:	4641      	mov	r1, r8
 80092fc:	1851      	adds	r1, r2, r1
 80092fe:	6039      	str	r1, [r7, #0]
 8009300:	4649      	mov	r1, r9
 8009302:	414b      	adcs	r3, r1
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009312:	4659      	mov	r1, fp
 8009314:	00cb      	lsls	r3, r1, #3
 8009316:	4651      	mov	r1, sl
 8009318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800931c:	4651      	mov	r1, sl
 800931e:	00ca      	lsls	r2, r1, #3
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	4603      	mov	r3, r0
 8009326:	4642      	mov	r2, r8
 8009328:	189b      	adds	r3, r3, r2
 800932a:	66bb      	str	r3, [r7, #104]	; 0x68
 800932c:	464b      	mov	r3, r9
 800932e:	460a      	mov	r2, r1
 8009330:	eb42 0303 	adc.w	r3, r2, r3
 8009334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	663b      	str	r3, [r7, #96]	; 0x60
 8009340:	667a      	str	r2, [r7, #100]	; 0x64
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800934e:	4649      	mov	r1, r9
 8009350:	008b      	lsls	r3, r1, #2
 8009352:	4641      	mov	r1, r8
 8009354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009358:	4641      	mov	r1, r8
 800935a:	008a      	lsls	r2, r1, #2
 800935c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009360:	f7f6 ff9e 	bl	80002a0 <__aeabi_uldivmod>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <UART_SetConfig+0x4e4>)
 800936a:	fba3 1302 	umull	r1, r3, r3, r2
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	2164      	movs	r1, #100	; 0x64
 8009372:	fb01 f303 	mul.w	r3, r1, r3
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	3332      	adds	r3, #50	; 0x32
 800937c:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <UART_SetConfig+0x4e4>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	f003 020f 	and.w	r2, r3, #15
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4422      	add	r2, r4
 8009390:	609a      	str	r2, [r3, #8]
}
 8009392:	bf00      	nop
 8009394:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009398:	46bd      	mov	sp, r7
 800939a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800939e:	bf00      	nop
 80093a0:	51eb851f 	.word	0x51eb851f

080093a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093a4:	b084      	sub	sp, #16
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	f107 001c 	add.w	r0, r7, #28
 80093b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d122      	bne.n	8009402 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80093d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 faa2 	bl	8009940 <USB_CoreReset>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	e01a      	b.n	8009438 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa96 	bl	8009940 <USB_CoreReset>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
 800942a:	e005      	b.n	8009438 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	2b01      	cmp	r3, #1
 800943c:	d10b      	bne.n	8009456 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f043 0206 	orr.w	r2, r3, #6
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f043 0220 	orr.w	r2, r3, #32
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009462:	b004      	add	sp, #16
 8009464:	4770      	bx	lr

08009466 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f023 0201 	bic.w	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d115      	bne.n	80094d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094b6:	2001      	movs	r0, #1
 80094b8:	f7f9 fa7c 	bl	80029b4 <HAL_Delay>
      ms++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3301      	adds	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa2e 	bl	8009924 <USB_GetMode>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d01e      	beq.n	800950c <USB_SetCurrentMode+0x84>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b31      	cmp	r3, #49	; 0x31
 80094d2:	d9f0      	bls.n	80094b6 <USB_SetCurrentMode+0x2e>
 80094d4:	e01a      	b.n	800950c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d115      	bne.n	8009508 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094e8:	2001      	movs	r0, #1
 80094ea:	f7f9 fa63 	bl	80029b4 <HAL_Delay>
      ms++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa15 	bl	8009924 <USB_GetMode>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <USB_SetCurrentMode+0x84>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b31      	cmp	r3, #49	; 0x31
 8009504:	d9f0      	bls.n	80094e8 <USB_SetCurrentMode+0x60>
 8009506:	e001      	b.n	800950c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e005      	b.n	8009518 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b32      	cmp	r3, #50	; 0x32
 8009510:	d101      	bne.n	8009516 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009520:	b084      	sub	sp, #16
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800952e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e009      	b.n	8009554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	3340      	adds	r3, #64	; 0x40
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2b0e      	cmp	r3, #14
 8009558:	d9f2      	bls.n	8009540 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d11c      	bne.n	800959a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800956e:	f043 0302 	orr.w	r3, r3, #2
 8009572:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
 8009598:	e00b      	b.n	80095b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095b8:	461a      	mov	r2, r3
 80095ba:	2300      	movs	r3, #0
 80095bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c4:	4619      	mov	r1, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095cc:	461a      	mov	r2, r3
 80095ce:	680b      	ldr	r3, [r1, #0]
 80095d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d10c      	bne.n	80095f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f965 	bl	80098b0 <USB_SetDevSpeed>
 80095e6:	e008      	b.n	80095fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095e8:	2101      	movs	r1, #1
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f960 	bl	80098b0 <USB_SetDevSpeed>
 80095f0:	e003      	b.n	80095fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095f2:	2103      	movs	r1, #3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f95b 	bl	80098b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095fa:	2110      	movs	r1, #16
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f8f3 	bl	80097e8 <USB_FlushTxFifo>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f91f 	bl	8009850 <USB_FlushRxFifo>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	461a      	mov	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	461a      	mov	r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963a:	461a      	mov	r2, r3
 800963c:	2300      	movs	r3, #0
 800963e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009640:	2300      	movs	r3, #0
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	e043      	b.n	80096ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800965c:	d118      	bne.n	8009690 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009670:	461a      	mov	r2, r3
 8009672:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	e013      	b.n	80096a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009686:	461a      	mov	r2, r3
 8009688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	e008      	b.n	80096a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969c:	461a      	mov	r2, r3
 800969e:	2300      	movs	r3, #0
 80096a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ae:	461a      	mov	r2, r3
 80096b0:	2300      	movs	r3, #0
 80096b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c0:	461a      	mov	r2, r3
 80096c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	3301      	adds	r3, #1
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3b7      	bcc.n	8009646 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	e043      	b.n	8009764 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f2:	d118      	bne.n	8009726 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	461a      	mov	r2, r3
 8009708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e013      	b.n	8009738 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	461a      	mov	r2, r3
 800971e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	e008      	b.n	8009738 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	461a      	mov	r2, r3
 8009734:	2300      	movs	r3, #0
 8009736:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	461a      	mov	r2, r3
 8009746:	2300      	movs	r3, #0
 8009748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009756:	461a      	mov	r2, r3
 8009758:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800975c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	429a      	cmp	r2, r3
 800976a:	d3b7      	bcc.n	80096dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800977a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800977e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800978c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f043 0210 	orr.w	r2, r3, #16
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <USB_DevInit+0x2c4>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f043 0208 	orr.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d107      	bne.n	80097d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097cc:	f043 0304 	orr.w	r3, r3, #4
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097e0:	b004      	add	sp, #16
 80097e2:	4770      	bx	lr
 80097e4:	803c3800 	.word	0x803c3800

080097e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4a13      	ldr	r2, [pc, #76]	; (800984c <USB_FlushTxFifo+0x64>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d901      	bls.n	8009808 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e01b      	b.n	8009840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	daf2      	bge.n	80097f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	019b      	lsls	r3, r3, #6
 8009818:	f043 0220 	orr.w	r2, r3, #32
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a08      	ldr	r2, [pc, #32]	; (800984c <USB_FlushTxFifo+0x64>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d901      	bls.n	8009832 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e006      	b.n	8009840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b20      	cmp	r3, #32
 800983c:	d0f0      	beq.n	8009820 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	00030d40 	.word	0x00030d40

08009850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a11      	ldr	r2, [pc, #68]	; (80098ac <USB_FlushRxFifo+0x5c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d901      	bls.n	800986e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e018      	b.n	80098a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	daf2      	bge.n	800985c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2210      	movs	r2, #16
 800987e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3301      	adds	r3, #1
 8009884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4a08      	ldr	r2, [pc, #32]	; (80098ac <USB_FlushRxFifo+0x5c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e006      	b.n	80098a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0310 	and.w	r3, r3, #16
 800989a:	2b10      	cmp	r3, #16
 800989c:	d0f0      	beq.n	8009880 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	00030d40 	.word	0x00030d40

080098b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d0:	4313      	orrs	r3, r2
 80098d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098fc:	f023 0303 	bic.w	r3, r3, #3
 8009900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009910:	f043 0302 	orr.w	r3, r3, #2
 8009914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	f003 0301 	and.w	r3, r3, #1
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <USB_CoreReset+0x64>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d901      	bls.n	800995e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e01b      	b.n	8009996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	daf2      	bge.n	800994c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f043 0201 	orr.w	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3301      	adds	r3, #1
 800997a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <USB_CoreReset+0x64>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d901      	bls.n	8009988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e006      	b.n	8009996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b01      	cmp	r3, #1
 8009992:	d0f0      	beq.n	8009976 <USB_CoreReset+0x36>

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	00030d40 	.word	0x00030d40

080099a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80099ac:	4904      	ldr	r1, [pc, #16]	; (80099c0 <MX_FATFS_Init+0x18>)
 80099ae:	4805      	ldr	r0, [pc, #20]	; (80099c4 <MX_FATFS_Init+0x1c>)
 80099b0:	f002 feb8 	bl	800c724 <FATFS_LinkDriver>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	4b03      	ldr	r3, [pc, #12]	; (80099c8 <MX_FATFS_Init+0x20>)
 80099ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099bc:	bf00      	nop
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	2000349c 	.word	0x2000349c
 80099c4:	20000090 	.word	0x20000090
 80099c8:	2000349a 	.word	0x2000349a

080099cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80099d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7f6 ff95 	bl	8000918 <SD_disk_initialize>
 80099ee:	4603      	mov	r3, r0
 80099f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	4603      	mov	r3, r0
 8009a02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f7 f870 	bl	8000aec <SD_disk_status>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 8009a28:	7bf8      	ldrb	r0, [r7, #15]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	f7f7 f872 	bl	8000b18 <SD_disk_read>
 8009a34:	4603      	mov	r3, r0
 8009a36:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 8009a50:	7bf8      	ldrb	r0, [r7, #15]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	f7f7 f8c8 	bl	8000bec <SD_disk_write>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	603a      	str	r2, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
 8009a74:	460b      	mov	r3, r1
 8009a76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv,cmd,buff);
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	79b9      	ldrb	r1, [r7, #6]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f7 f938 	bl	8000cf4 <SD_disk_ioctl>
 8009a84:	4603      	mov	r3, r0
 8009a86:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	4a08      	ldr	r2, [pc, #32]	; (8009ac0 <disk_status+0x30>)
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	79fa      	ldrb	r2, [r7, #7]
 8009aa8:	4905      	ldr	r1, [pc, #20]	; (8009ac0 <disk_status+0x30>)
 8009aaa:	440a      	add	r2, r1
 8009aac:	7a12      	ldrb	r2, [r2, #8]
 8009aae:	4610      	mov	r0, r2
 8009ab0:	4798      	blx	r3
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200034c8 	.word	0x200034c8

08009ac4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	4a0d      	ldr	r2, [pc, #52]	; (8009b0c <disk_initialize+0x48>)
 8009ad6:	5cd3      	ldrb	r3, [r2, r3]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d111      	bne.n	8009b00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	4a0b      	ldr	r2, [pc, #44]	; (8009b0c <disk_initialize+0x48>)
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <disk_initialize+0x48>)
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	79fa      	ldrb	r2, [r7, #7]
 8009af2:	4906      	ldr	r1, [pc, #24]	; (8009b0c <disk_initialize+0x48>)
 8009af4:	440a      	add	r2, r1
 8009af6:	7a12      	ldrb	r2, [r2, #8]
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200034c8 	.word	0x200034c8

08009b10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	4a0a      	ldr	r2, [pc, #40]	; (8009b4c <disk_read+0x3c>)
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	689c      	ldr	r4, [r3, #8]
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <disk_read+0x3c>)
 8009b30:	4413      	add	r3, r2
 8009b32:	7a18      	ldrb	r0, [r3, #8]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	47a0      	blx	r4
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200034c8 	.word	0x200034c8

08009b50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b50:	b590      	push	{r4, r7, lr}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <disk_write+0x3c>)
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	68dc      	ldr	r4, [r3, #12]
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4a07      	ldr	r2, [pc, #28]	; (8009b8c <disk_write+0x3c>)
 8009b70:	4413      	add	r3, r2
 8009b72:	7a18      	ldrb	r0, [r3, #8]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	68b9      	ldr	r1, [r7, #8]
 8009b7a:	47a0      	blx	r4
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd90      	pop	{r4, r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200034c8 	.word	0x200034c8

08009b90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	603a      	str	r2, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	4a09      	ldr	r2, [pc, #36]	; (8009bc8 <disk_ioctl+0x38>)
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	79fa      	ldrb	r2, [r7, #7]
 8009bae:	4906      	ldr	r1, [pc, #24]	; (8009bc8 <disk_ioctl+0x38>)
 8009bb0:	440a      	add	r2, r1
 8009bb2:	7a10      	ldrb	r0, [r2, #8]
 8009bb4:	79b9      	ldrb	r1, [r7, #6]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4798      	blx	r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200034c8 	.word	0x200034c8

08009bcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	b21a      	sxth	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b21b      	sxth	r3, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	b21b      	sxth	r3, r3
 8009bec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bee:	89fb      	ldrh	r3, [r7, #14]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3303      	adds	r3, #3
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	3202      	adds	r2, #2
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	3201      	adds	r2, #1
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	021b      	lsls	r3, r3, #8
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7812      	ldrb	r2, [r2, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	887a      	ldrh	r2, [r7, #2]
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	887b      	ldrh	r3, [r7, #2]
 8009c5c:	0a1b      	lsrs	r3, r3, #8
 8009c5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	887a      	ldrh	r2, [r7, #2]
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	b2d2      	uxtb	r2, r2
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	607a      	str	r2, [r7, #4]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00d      	beq.n	8009d06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	1c53      	adds	r3, r2, #1
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	6179      	str	r1, [r7, #20]
 8009cf6:	7812      	ldrb	r2, [r2, #0]
 8009cf8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	607b      	str	r3, [r7, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f1      	bne.n	8009cea <mem_cpy+0x1a>
	}
}
 8009d06:	bf00      	nop
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d12:	b480      	push	{r7}
 8009d14:	b087      	sub	sp, #28
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	617a      	str	r2, [r7, #20]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1f3      	bne.n	8009d22 <mem_set+0x10>
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	371c      	adds	r7, #28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d48:	b480      	push	{r7}
 8009d4a:	b089      	sub	sp, #36	; 0x24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	61fb      	str	r3, [r7, #28]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	61fa      	str	r2, [r7, #28]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	61ba      	str	r2, [r7, #24]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	1acb      	subs	r3, r1, r3
 8009d74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	607b      	str	r3, [r7, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <mem_cmp+0x40>
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0eb      	beq.n	8009d60 <mem_cmp+0x18>

	return r;
 8009d88:	697b      	ldr	r3, [r7, #20]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3724      	adds	r7, #36	; 0x24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009da0:	e002      	b.n	8009da8 <chk_chr+0x12>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3301      	adds	r3, #1
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d005      	beq.n	8009dbc <chk_chr+0x26>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d1f2      	bne.n	8009da2 <chk_chr+0xc>
	return *str;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <lock_fs+0x22>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f002 fcdb 	bl	800c79a <ff_req_grant>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <lock_fs+0x22>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <lock_fs+0x24>
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00d      	beq.n	8009e26 <unlock_fs+0x2e>
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	2b0c      	cmp	r3, #12
 8009e0e:	d00a      	beq.n	8009e26 <unlock_fs+0x2e>
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	2b0b      	cmp	r3, #11
 8009e14:	d007      	beq.n	8009e26 <unlock_fs+0x2e>
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	2b0f      	cmp	r3, #15
 8009e1a:	d004      	beq.n	8009e26 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f002 fccf 	bl	800c7c4 <ff_rel_grant>
	}
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	e029      	b.n	8009e98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e44:	4a27      	ldr	r2, [pc, #156]	; (8009ee4 <chk_lock+0xb4>)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	4413      	add	r3, r2
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01d      	beq.n	8009e8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e52:	4a24      	ldr	r2, [pc, #144]	; (8009ee4 <chk_lock+0xb4>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	4413      	add	r3, r2
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d116      	bne.n	8009e92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e64:	4a1f      	ldr	r2, [pc, #124]	; (8009ee4 <chk_lock+0xb4>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d10c      	bne.n	8009e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e78:	4a1a      	ldr	r2, [pc, #104]	; (8009ee4 <chk_lock+0xb4>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	4413      	add	r3, r2
 8009e80:	3308      	adds	r3, #8
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d102      	bne.n	8009e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e8c:	e007      	b.n	8009e9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3301      	adds	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d9d2      	bls.n	8009e44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d109      	bne.n	8009eb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <chk_lock+0x80>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d101      	bne.n	8009eb4 <chk_lock+0x84>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e010      	b.n	8009ed6 <chk_lock+0xa6>
 8009eb4:	2312      	movs	r3, #18
 8009eb6:	e00e      	b.n	8009ed6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d108      	bne.n	8009ed0 <chk_lock+0xa0>
 8009ebe:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <chk_lock+0xb4>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ece:	d101      	bne.n	8009ed4 <chk_lock+0xa4>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	e000      	b.n	8009ed6 <chk_lock+0xa6>
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	200034a8 	.word	0x200034a8

08009ee8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	607b      	str	r3, [r7, #4]
 8009ef2:	e002      	b.n	8009efa <enq_lock+0x12>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	607b      	str	r3, [r7, #4]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d806      	bhi.n	8009f0e <enq_lock+0x26>
 8009f00:	4a09      	ldr	r2, [pc, #36]	; (8009f28 <enq_lock+0x40>)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	4413      	add	r3, r2
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f2      	bne.n	8009ef4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	bf14      	ite	ne
 8009f14:	2301      	movne	r3, #1
 8009f16:	2300      	moveq	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	200034a8 	.word	0x200034a8

08009f2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e01f      	b.n	8009f7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f3c:	4a41      	ldr	r2, [pc, #260]	; (800a044 <inc_lock+0x118>)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	4413      	add	r3, r2
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d113      	bne.n	8009f76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f4e:	4a3d      	ldr	r2, [pc, #244]	; (800a044 <inc_lock+0x118>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	4413      	add	r3, r2
 8009f56:	3304      	adds	r3, #4
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d109      	bne.n	8009f76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f62:	4a38      	ldr	r2, [pc, #224]	; (800a044 <inc_lock+0x118>)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	4413      	add	r3, r2
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d006      	beq.n	8009f84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d9dc      	bls.n	8009f3c <inc_lock+0x10>
 8009f82:	e000      	b.n	8009f86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d132      	bne.n	8009ff2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e002      	b.n	8009f98 <inc_lock+0x6c>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d806      	bhi.n	8009fac <inc_lock+0x80>
 8009f9e:	4a29      	ldr	r2, [pc, #164]	; (800a044 <inc_lock+0x118>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	4413      	add	r3, r2
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1f2      	bne.n	8009f92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d101      	bne.n	8009fb6 <inc_lock+0x8a>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e040      	b.n	800a038 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4922      	ldr	r1, [pc, #136]	; (800a044 <inc_lock+0x118>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	440b      	add	r3, r1
 8009fc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	491e      	ldr	r1, [pc, #120]	; (800a044 <inc_lock+0x118>)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	440b      	add	r3, r1
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	695a      	ldr	r2, [r3, #20]
 8009fd8:	491a      	ldr	r1, [pc, #104]	; (800a044 <inc_lock+0x118>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	440b      	add	r3, r1
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009fe4:	4a17      	ldr	r2, [pc, #92]	; (800a044 <inc_lock+0x118>)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	4413      	add	r3, r2
 8009fec:	330c      	adds	r3, #12
 8009fee:	2200      	movs	r2, #0
 8009ff0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <inc_lock+0xe0>
 8009ff8:	4a12      	ldr	r2, [pc, #72]	; (800a044 <inc_lock+0x118>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4413      	add	r3, r2
 800a000:	330c      	adds	r3, #12
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <inc_lock+0xe0>
 800a008:	2300      	movs	r3, #0
 800a00a:	e015      	b.n	800a038 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d108      	bne.n	800a024 <inc_lock+0xf8>
 800a012:	4a0c      	ldr	r2, [pc, #48]	; (800a044 <inc_lock+0x118>)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	4413      	add	r3, r2
 800a01a:	330c      	adds	r3, #12
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	3301      	adds	r3, #1
 800a020:	b29a      	uxth	r2, r3
 800a022:	e001      	b.n	800a028 <inc_lock+0xfc>
 800a024:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a028:	4906      	ldr	r1, [pc, #24]	; (800a044 <inc_lock+0x118>)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	440b      	add	r3, r1
 800a030:	330c      	adds	r3, #12
 800a032:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3301      	adds	r3, #1
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	200034a8 	.word	0x200034a8

0800a048 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3b01      	subs	r3, #1
 800a054:	607b      	str	r3, [r7, #4]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d825      	bhi.n	800a0a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a05c:	4a17      	ldr	r2, [pc, #92]	; (800a0bc <dec_lock+0x74>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	4413      	add	r3, r2
 800a064:	330c      	adds	r3, #12
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a06a:	89fb      	ldrh	r3, [r7, #14]
 800a06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a070:	d101      	bne.n	800a076 <dec_lock+0x2e>
 800a072:	2300      	movs	r3, #0
 800a074:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a076:	89fb      	ldrh	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <dec_lock+0x3a>
 800a07c:	89fb      	ldrh	r3, [r7, #14]
 800a07e:	3b01      	subs	r3, #1
 800a080:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a082:	4a0e      	ldr	r2, [pc, #56]	; (800a0bc <dec_lock+0x74>)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	4413      	add	r3, r2
 800a08a:	330c      	adds	r3, #12
 800a08c:	89fa      	ldrh	r2, [r7, #14]
 800a08e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d105      	bne.n	800a0a2 <dec_lock+0x5a>
 800a096:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <dec_lock+0x74>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	4413      	add	r3, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	737b      	strb	r3, [r7, #13]
 800a0a6:	e001      	b.n	800a0ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	200034a8 	.word	0x200034a8

0800a0c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e010      	b.n	800a0f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0ce:	4a0d      	ldr	r2, [pc, #52]	; (800a104 <clear_lock+0x44>)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	4413      	add	r3, r2
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d105      	bne.n	800a0ea <clear_lock+0x2a>
 800a0de:	4a09      	ldr	r2, [pc, #36]	; (800a104 <clear_lock+0x44>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	4413      	add	r3, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d9eb      	bls.n	800a0ce <clear_lock+0xe>
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	200034a8 	.word	0x200034a8

0800a108 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	78db      	ldrb	r3, [r3, #3]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d034      	beq.n	800a186 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	7858      	ldrb	r0, [r3, #1]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a12c:	2301      	movs	r3, #1
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	f7ff fd0e 	bl	8009b50 <disk_write>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	73fb      	strb	r3, [r7, #15]
 800a13e:	e022      	b.n	800a186 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	1ad2      	subs	r2, r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	429a      	cmp	r2, r3
 800a154:	d217      	bcs.n	800a186 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	789b      	ldrb	r3, [r3, #2]
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	e010      	b.n	800a180 <sync_window+0x78>
					wsect += fs->fsize;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4413      	add	r3, r2
 800a166:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	7858      	ldrb	r0, [r3, #1]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a172:	2301      	movs	r3, #1
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	f7ff fceb 	bl	8009b50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	613b      	str	r3, [r7, #16]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d8eb      	bhi.n	800a15e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d01b      	beq.n	800a1e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff ffad 	bl	800a108 <sync_window>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d113      	bne.n	800a1e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	7858      	ldrb	r0, [r3, #1]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	f7ff fca3 	bl	8009b10 <disk_read>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff ff87 	bl	800a108 <sync_window>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d159      	bne.n	800a2b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d149      	bne.n	800a2a0 <sync_fs+0xb4>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d145      	bne.n	800a2a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	461a      	mov	r2, r3
 800a220:	2100      	movs	r1, #0
 800a222:	f7ff fd76 	bl	8009d12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3338      	adds	r3, #56	; 0x38
 800a22a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a22e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fd05 	bl	8009c42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3338      	adds	r3, #56	; 0x38
 800a23c:	4921      	ldr	r1, [pc, #132]	; (800a2c4 <sync_fs+0xd8>)
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff fd1a 	bl	8009c78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3338      	adds	r3, #56	; 0x38
 800a248:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a24c:	491e      	ldr	r1, [pc, #120]	; (800a2c8 <sync_fs+0xdc>)
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fd12 	bl	8009c78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3338      	adds	r3, #56	; 0x38
 800a258:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7ff fd08 	bl	8009c78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3338      	adds	r3, #56	; 0x38
 800a26c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f7ff fcfe 	bl	8009c78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7858      	ldrb	r0, [r3, #1]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a294:	2301      	movs	r3, #1
 800a296:	f7ff fc5b 	bl	8009b50 <disk_write>
			fs->fsi_flag = 0;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff fc71 	bl	8009b90 <disk_ioctl>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <sync_fs+0xcc>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	41615252 	.word	0x41615252
 800a2c8:	61417272 	.word	0x61417272

0800a2cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	3b02      	subs	r3, #2
 800a2da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	3b02      	subs	r3, #2
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d301      	bcc.n	800a2ec <clust2sect+0x20>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e008      	b.n	800a2fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	895b      	ldrh	r3, [r3, #10]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	fb03 f202 	mul.w	r2, r3, r2
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	4413      	add	r3, r2
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b086      	sub	sp, #24
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d904      	bls.n	800a32a <get_fat+0x20>
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d302      	bcc.n	800a330 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a32a:	2301      	movs	r3, #1
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	e0bb      	b.n	800a4a8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	f000 8083 	beq.w	800a446 <get_fat+0x13c>
 800a340:	2b03      	cmp	r3, #3
 800a342:	f300 80a7 	bgt.w	800a494 <get_fat+0x18a>
 800a346:	2b01      	cmp	r3, #1
 800a348:	d002      	beq.n	800a350 <get_fat+0x46>
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d056      	beq.n	800a3fc <get_fat+0xf2>
 800a34e:	e0a1      	b.n	800a494 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	085b      	lsrs	r3, r3, #1
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4413      	add	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	899b      	ldrh	r3, [r3, #12]
 800a366:	4619      	mov	r1, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a36e:	4413      	add	r3, r2
 800a370:	4619      	mov	r1, r3
 800a372:	6938      	ldr	r0, [r7, #16]
 800a374:	f7ff ff0c 	bl	800a190 <move_window>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 808d 	bne.w	800a49a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	1c5a      	adds	r2, r3, #1
 800a384:	60fa      	str	r2, [r7, #12]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	8992      	ldrh	r2, [r2, #12]
 800a38a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a38e:	fb01 f202 	mul.w	r2, r1, r2
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4413      	add	r3, r2
 800a398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a39c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	f7ff feec 	bl	800a190 <move_window>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d16f      	bne.n	800a49e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	899b      	ldrh	r3, [r3, #12]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3ca:	fb01 f202 	mul.w	r2, r1, r2
 800a3ce:	1a9b      	subs	r3, r3, r2
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	461a      	mov	r2, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <get_fat+0xe8>
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	091b      	lsrs	r3, r3, #4
 800a3f0:	e002      	b.n	800a3f8 <get_fat+0xee>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3f8:	617b      	str	r3, [r7, #20]
			break;
 800a3fa:	e055      	b.n	800a4a8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	899b      	ldrh	r3, [r3, #12]
 800a404:	085b      	lsrs	r3, r3, #1
 800a406:	b29b      	uxth	r3, r3
 800a408:	4619      	mov	r1, r3
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a410:	4413      	add	r3, r2
 800a412:	4619      	mov	r1, r3
 800a414:	6938      	ldr	r0, [r7, #16]
 800a416:	f7ff febb 	bl	800a190 <move_window>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d140      	bne.n	800a4a2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	8992      	ldrh	r2, [r2, #12]
 800a42e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a432:	fb00 f202 	mul.w	r2, r0, r2
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	440b      	add	r3, r1
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fbc6 	bl	8009bcc <ld_word>
 800a440:	4603      	mov	r3, r0
 800a442:	617b      	str	r3, [r7, #20]
			break;
 800a444:	e030      	b.n	800a4a8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	899b      	ldrh	r3, [r3, #12]
 800a44e:	089b      	lsrs	r3, r3, #2
 800a450:	b29b      	uxth	r3, r3
 800a452:	4619      	mov	r1, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	fbb3 f3f1 	udiv	r3, r3, r1
 800a45a:	4413      	add	r3, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f7ff fe96 	bl	800a190 <move_window>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d11d      	bne.n	800a4a6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	8992      	ldrh	r2, [r2, #12]
 800a478:	fbb3 f0f2 	udiv	r0, r3, r2
 800a47c:	fb00 f202 	mul.w	r2, r0, r2
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	440b      	add	r3, r1
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff fbb9 	bl	8009bfc <ld_dword>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a490:	617b      	str	r3, [r7, #20]
			break;
 800a492:	e009      	b.n	800a4a8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e006      	b.n	800a4a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a49a:	bf00      	nop
 800a49c:	e004      	b.n	800a4a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a49e:	bf00      	nop
 800a4a0:	e002      	b.n	800a4a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4a2:	bf00      	nop
 800a4a4:	e000      	b.n	800a4a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4a6:	bf00      	nop
		}
	}

	return val;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a4b2:	b590      	push	{r4, r7, lr}
 800a4b4:	b089      	sub	sp, #36	; 0x24
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a4be:	2302      	movs	r3, #2
 800a4c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	f240 8102 	bls.w	800a6ce <put_fat+0x21c>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	f080 80fc 	bcs.w	800a6ce <put_fat+0x21c>
		switch (fs->fs_type) {
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	f000 80b6 	beq.w	800a64c <put_fat+0x19a>
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	f300 80fd 	bgt.w	800a6e0 <put_fat+0x22e>
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d003      	beq.n	800a4f2 <put_fat+0x40>
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	f000 8083 	beq.w	800a5f6 <put_fat+0x144>
 800a4f0:	e0f6      	b.n	800a6e0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	085b      	lsrs	r3, r3, #1
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	899b      	ldrh	r3, [r3, #12]
 800a508:	4619      	mov	r1, r3
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a510:	4413      	add	r3, r2
 800a512:	4619      	mov	r1, r3
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff fe3b 	bl	800a190 <move_window>
 800a51a:	4603      	mov	r3, r0
 800a51c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a51e:	7ffb      	ldrb	r3, [r7, #31]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 80d6 	bne.w	800a6d2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	61ba      	str	r2, [r7, #24]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	8992      	ldrh	r2, [r2, #12]
 800a536:	fbb3 f0f2 	udiv	r0, r3, r2
 800a53a:	fb00 f202 	mul.w	r2, r0, r2
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	440b      	add	r3, r1
 800a542:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <put_fat+0xb8>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	b25a      	sxtb	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	b25b      	sxtb	r3, r3
 800a562:	4313      	orrs	r3, r2
 800a564:	b25b      	sxtb	r3, r3
 800a566:	b2db      	uxtb	r3, r3
 800a568:	e001      	b.n	800a56e <put_fat+0xbc>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	899b      	ldrh	r3, [r3, #12]
 800a580:	4619      	mov	r1, r3
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	fbb3 f3f1 	udiv	r3, r3, r1
 800a588:	4413      	add	r3, r2
 800a58a:	4619      	mov	r1, r3
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff fdff 	bl	800a190 <move_window>
 800a592:	4603      	mov	r3, r0
 800a594:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a596:	7ffb      	ldrb	r3, [r7, #31]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f040 809c 	bne.w	800a6d6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	899b      	ldrh	r3, [r3, #12]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5b0:	fb00 f202 	mul.w	r2, r0, r2
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <put_fat+0x11a>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	091b      	lsrs	r3, r3, #4
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	e00e      	b.n	800a5ea <put_fat+0x138>
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b25b      	sxtb	r3, r3
 800a5d2:	f023 030f 	bic.w	r3, r3, #15
 800a5d6:	b25a      	sxtb	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b25b      	sxtb	r3, r3
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	70da      	strb	r2, [r3, #3]
			break;
 800a5f4:	e074      	b.n	800a6e0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	899b      	ldrh	r3, [r3, #12]
 800a5fe:	085b      	lsrs	r3, r3, #1
 800a600:	b29b      	uxth	r3, r3
 800a602:	4619      	mov	r1, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	fbb3 f3f1 	udiv	r3, r3, r1
 800a60a:	4413      	add	r3, r2
 800a60c:	4619      	mov	r1, r3
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff fdbe 	bl	800a190 <move_window>
 800a614:	4603      	mov	r3, r0
 800a616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a618:	7ffb      	ldrb	r3, [r7, #31]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d15d      	bne.n	800a6da <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	8992      	ldrh	r2, [r2, #12]
 800a62c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a630:	fb00 f202 	mul.w	r2, r0, r2
 800a634:	1a9b      	subs	r3, r3, r2
 800a636:	440b      	add	r3, r1
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	b292      	uxth	r2, r2
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff faff 	bl	8009c42 <st_word>
			fs->wflag = 1;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	70da      	strb	r2, [r3, #3]
			break;
 800a64a:	e049      	b.n	800a6e0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	899b      	ldrh	r3, [r3, #12]
 800a654:	089b      	lsrs	r3, r3, #2
 800a656:	b29b      	uxth	r3, r3
 800a658:	4619      	mov	r1, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a660:	4413      	add	r3, r2
 800a662:	4619      	mov	r1, r3
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff fd93 	bl	800a190 <move_window>
 800a66a:	4603      	mov	r3, r0
 800a66c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d134      	bne.n	800a6de <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	8992      	ldrh	r2, [r2, #12]
 800a688:	fbb3 f0f2 	udiv	r0, r3, r2
 800a68c:	fb00 f202 	mul.w	r2, r0, r2
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	440b      	add	r3, r1
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fab1 	bl	8009bfc <ld_dword>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a6a0:	4323      	orrs	r3, r4
 800a6a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	8992      	ldrh	r2, [r2, #12]
 800a6b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6b6:	fb00 f202 	mul.w	r2, r0, r2
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	440b      	add	r3, r1
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff fad9 	bl	8009c78 <st_dword>
			fs->wflag = 1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	70da      	strb	r2, [r3, #3]
			break;
 800a6cc:	e008      	b.n	800a6e0 <put_fat+0x22e>
		}
	}
 800a6ce:	bf00      	nop
 800a6d0:	e006      	b.n	800a6e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a6d2:	bf00      	nop
 800a6d4:	e004      	b.n	800a6e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a6d6:	bf00      	nop
 800a6d8:	e002      	b.n	800a6e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a6de:	bf00      	nop
	return res;
 800a6e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3724      	adds	r7, #36	; 0x24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd90      	pop	{r4, r7, pc}

0800a6ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d904      	bls.n	800a710 <remove_chain+0x26>
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d301      	bcc.n	800a714 <remove_chain+0x2a>
 800a710:	2302      	movs	r3, #2
 800a712:	e04b      	b.n	800a7ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00c      	beq.n	800a734 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	69b8      	ldr	r0, [r7, #24]
 800a722:	f7ff fec6 	bl	800a4b2 <put_fat>
 800a726:	4603      	mov	r3, r0
 800a728:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a72a:	7ffb      	ldrb	r3, [r7, #31]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <remove_chain+0x4a>
 800a730:	7ffb      	ldrb	r3, [r7, #31]
 800a732:	e03b      	b.n	800a7ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff fde7 	bl	800a30a <get_fat>
 800a73c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d031      	beq.n	800a7a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <remove_chain+0x64>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e02e      	b.n	800a7ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d101      	bne.n	800a75a <remove_chain+0x70>
 800a756:	2301      	movs	r3, #1
 800a758:	e028      	b.n	800a7ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a75a:	2200      	movs	r2, #0
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	69b8      	ldr	r0, [r7, #24]
 800a760:	f7ff fea7 	bl	800a4b2 <put_fat>
 800a764:	4603      	mov	r3, r0
 800a766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <remove_chain+0x88>
 800a76e:	7ffb      	ldrb	r3, [r7, #31]
 800a770:	e01c      	b.n	800a7ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	699a      	ldr	r2, [r3, #24]
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	3b02      	subs	r3, #2
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d20b      	bcs.n	800a798 <remove_chain+0xae>
			fs->free_clst++;
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d3c6      	bcc.n	800a734 <remove_chain+0x4a>
 800a7a6:	e000      	b.n	800a7aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a7a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3720      	adds	r7, #32
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10d      	bne.n	800a7e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <create_chain+0x2c>
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d31b      	bcc.n	800a818 <create_chain+0x64>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	61bb      	str	r3, [r7, #24]
 800a7e4:	e018      	b.n	800a818 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fd8e 	bl	800a30a <get_fat>
 800a7ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d801      	bhi.n	800a7fa <create_chain+0x46>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e070      	b.n	800a8dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d101      	bne.n	800a806 <create_chain+0x52>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	e06a      	b.n	800a8dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d201      	bcs.n	800a814 <create_chain+0x60>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	e063      	b.n	800a8dc <create_chain+0x128>
		scl = clst;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3301      	adds	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d307      	bcc.n	800a83c <create_chain+0x88>
				ncl = 2;
 800a82c:	2302      	movs	r3, #2
 800a82e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	429a      	cmp	r2, r3
 800a836:	d901      	bls.n	800a83c <create_chain+0x88>
 800a838:	2300      	movs	r3, #0
 800a83a:	e04f      	b.n	800a8dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fd63 	bl	800a30a <get_fat>
 800a844:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00e      	beq.n	800a86a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d003      	beq.n	800a85a <create_chain+0xa6>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d101      	bne.n	800a85e <create_chain+0xaa>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	e03e      	b.n	800a8dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	429a      	cmp	r2, r3
 800a864:	d1da      	bne.n	800a81c <create_chain+0x68>
 800a866:	2300      	movs	r3, #0
 800a868:	e038      	b.n	800a8dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a86a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	69f9      	ldr	r1, [r7, #28]
 800a872:	6938      	ldr	r0, [r7, #16]
 800a874:	f7ff fe1d 	bl	800a4b2 <put_fat>
 800a878:	4603      	mov	r3, r0
 800a87a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <create_chain+0xe2>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d006      	beq.n	800a896 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6938      	ldr	r0, [r7, #16]
 800a88e:	f7ff fe10 	bl	800a4b2 <put_fat>
 800a892:	4603      	mov	r3, r0
 800a894:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d116      	bne.n	800a8ca <create_chain+0x116>
		fs->last_clst = ncl;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	3b02      	subs	r3, #2
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d804      	bhi.n	800a8ba <create_chain+0x106>
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	1e5a      	subs	r2, r3, #1
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	791b      	ldrb	r3, [r3, #4]
 800a8be:	f043 0301 	orr.w	r3, r3, #1
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	711a      	strb	r2, [r3, #4]
 800a8c8:	e007      	b.n	800a8da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d102      	bne.n	800a8d6 <create_chain+0x122>
 800a8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d4:	e000      	b.n	800a8d8 <create_chain+0x124>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a8da:	69fb      	ldr	r3, [r7, #28]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	899b      	ldrh	r3, [r3, #12]
 800a900:	461a      	mov	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	fbb3 f3f2 	udiv	r3, r3, r2
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	8952      	ldrh	r2, [r2, #10]
 800a90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a910:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1d1a      	adds	r2, r3, #4
 800a916:	613a      	str	r2, [r7, #16]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <clmt_clust+0x42>
 800a922:	2300      	movs	r3, #0
 800a924:	e010      	b.n	800a948 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d307      	bcc.n	800a93e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	3304      	adds	r3, #4
 800a93a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a93c:	e7e9      	b.n	800a912 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a93e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	4413      	add	r3, r2
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a96a:	d204      	bcs.n	800a976 <dir_sdi+0x22>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a976:	2302      	movs	r3, #2
 800a978:	e071      	b.n	800aa5e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <dir_sdi+0x46>
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d902      	bls.n	800a99a <dir_sdi+0x46>
		clst = fs->dirbase;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10c      	bne.n	800a9ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	095b      	lsrs	r3, r3, #5
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	8912      	ldrh	r2, [r2, #8]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d301      	bcc.n	800a9b0 <dir_sdi+0x5c>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	e056      	b.n	800aa5e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	61da      	str	r2, [r3, #28]
 800a9b8:	e02d      	b.n	800aa16 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	895b      	ldrh	r3, [r3, #10]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	899b      	ldrh	r3, [r3, #12]
 800a9c4:	fb02 f303 	mul.w	r3, r2, r3
 800a9c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9ca:	e019      	b.n	800aa00 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6979      	ldr	r1, [r7, #20]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fc9a 	bl	800a30a <get_fat>
 800a9d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d101      	bne.n	800a9e4 <dir_sdi+0x90>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e03c      	b.n	800aa5e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d904      	bls.n	800a9f4 <dir_sdi+0xa0>
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d301      	bcc.n	800a9f8 <dir_sdi+0xa4>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e032      	b.n	800aa5e <dir_sdi+0x10a>
			ofs -= csz;
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d2e1      	bcs.n	800a9cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f7ff fc5e 	bl	800a2cc <clust2sect>
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <dir_sdi+0xd4>
 800aa24:	2302      	movs	r3, #2
 800aa26:	e01a      	b.n	800aa5e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	69da      	ldr	r2, [r3, #28]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	899b      	ldrh	r3, [r3, #12]
 800aa30:	4619      	mov	r1, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa38:	441a      	add	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	899b      	ldrh	r3, [r3, #12]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa50:	fb00 f202 	mul.w	r2, r0, r2
 800aa54:	1a9b      	subs	r3, r3, r2
 800aa56:	18ca      	adds	r2, r1, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	3320      	adds	r3, #32
 800aa7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <dir_next+0x28>
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa8c:	d301      	bcc.n	800aa92 <dir_next+0x2c>
 800aa8e:	2304      	movs	r3, #4
 800aa90:	e0bb      	b.n	800ac0a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	899b      	ldrh	r3, [r3, #12]
 800aa96:	461a      	mov	r2, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa9e:	fb01 f202 	mul.w	r2, r1, r2
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 809d 	bne.w	800abe4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10b      	bne.n	800aad4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	095b      	lsrs	r3, r3, #5
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	8912      	ldrh	r2, [r2, #8]
 800aac4:	4293      	cmp	r3, r2
 800aac6:	f0c0 808d 	bcc.w	800abe4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	61da      	str	r2, [r3, #28]
 800aad0:	2304      	movs	r3, #4
 800aad2:	e09a      	b.n	800ac0a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	899b      	ldrh	r3, [r3, #12]
 800aad8:	461a      	mov	r2, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	8952      	ldrh	r2, [r2, #10]
 800aae4:	3a01      	subs	r2, #1
 800aae6:	4013      	ands	r3, r2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d17b      	bne.n	800abe4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7ff fc08 	bl	800a30a <get_fat>
 800aafa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d801      	bhi.n	800ab06 <dir_next+0xa0>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e081      	b.n	800ac0a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0c:	d101      	bne.n	800ab12 <dir_next+0xac>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e07b      	b.n	800ac0a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d359      	bcc.n	800abd0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d104      	bne.n	800ab2c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	61da      	str	r2, [r3, #28]
 800ab28:	2304      	movs	r3, #4
 800ab2a:	e06e      	b.n	800ac0a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	4619      	mov	r1, r3
 800ab34:	4610      	mov	r0, r2
 800ab36:	f7ff fe3d 	bl	800a7b4 <create_chain>
 800ab3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <dir_next+0xe0>
 800ab42:	2307      	movs	r3, #7
 800ab44:	e061      	b.n	800ac0a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <dir_next+0xea>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	e05c      	b.n	800ac0a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab56:	d101      	bne.n	800ab5c <dir_next+0xf6>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e056      	b.n	800ac0a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7ff fad3 	bl	800a108 <sync_window>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <dir_next+0x106>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e04e      	b.n	800ac0a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	899b      	ldrh	r3, [r3, #12]
 800ab76:	461a      	mov	r2, r3
 800ab78:	2100      	movs	r1, #0
 800ab7a:	f7ff f8ca 	bl	8009d12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab7e:	2300      	movs	r3, #0
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f7ff fba1 	bl	800a2cc <clust2sect>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	635a      	str	r2, [r3, #52]	; 0x34
 800ab90:	e012      	b.n	800abb8 <dir_next+0x152>
						fs->wflag = 1;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fab5 	bl	800a108 <sync_window>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <dir_next+0x142>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e030      	b.n	800ac0a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3301      	adds	r3, #1
 800abac:	613b      	str	r3, [r7, #16]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	635a      	str	r2, [r3, #52]	; 0x34
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	895b      	ldrh	r3, [r3, #10]
 800abbc:	461a      	mov	r2, r3
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d3e6      	bcc.n	800ab92 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	1ad2      	subs	r2, r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800abd6:	6979      	ldr	r1, [r7, #20]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fb77 	bl	800a2cc <clust2sect>
 800abde:	4602      	mov	r2, r0
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	899b      	ldrh	r3, [r3, #12]
 800abf4:	461a      	mov	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800abfc:	fb00 f202 	mul.w	r2, r0, r2
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	18ca      	adds	r2, r1, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b086      	sub	sp, #24
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac22:	2100      	movs	r1, #0
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fe95 	bl	800a954 <dir_sdi>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d12b      	bne.n	800ac8c <dir_alloc+0x7a>
		n = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff faa6 	bl	800a190 <move_window>
 800ac44:	4603      	mov	r3, r0
 800ac46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d11d      	bne.n	800ac8a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2be5      	cmp	r3, #229	; 0xe5
 800ac56:	d004      	beq.n	800ac62 <dir_alloc+0x50>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d107      	bne.n	800ac72 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3301      	adds	r3, #1
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d102      	bne.n	800ac76 <dir_alloc+0x64>
 800ac70:	e00c      	b.n	800ac8c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac72:	2300      	movs	r3, #0
 800ac74:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac76:	2101      	movs	r1, #1
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fef4 	bl	800aa66 <dir_next>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0d7      	beq.n	800ac38 <dir_alloc+0x26>
 800ac88:	e000      	b.n	800ac8c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ac8a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d101      	bne.n	800ac96 <dir_alloc+0x84>
 800ac92:	2307      	movs	r3, #7
 800ac94:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	331a      	adds	r3, #26
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe ff8c 	bl	8009bcc <ld_word>
 800acb4:	4603      	mov	r3, r0
 800acb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b03      	cmp	r3, #3
 800acbe:	d109      	bne.n	800acd4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	3314      	adds	r3, #20
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe ff81 	bl	8009bcc <ld_word>
 800acca:	4603      	mov	r3, r0
 800accc:	041b      	lsls	r3, r3, #16
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800acd4:	68fb      	ldr	r3, [r7, #12]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	331a      	adds	r3, #26
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	b292      	uxth	r2, r2
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe ffa4 	bl	8009c42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d109      	bne.n	800ad16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f103 0214 	add.w	r2, r3, #20
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	0c1b      	lsrs	r3, r3, #16
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fe ff96 	bl	8009c42 <st_word>
	}
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b086      	sub	sp, #24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fe10 	bl	800a954 <dir_sdi>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <dir_find+0x24>
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	e03e      	b.n	800adc0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6938      	ldr	r0, [r7, #16]
 800ad4a:	f7ff fa21 	bl	800a190 <move_window>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d12f      	bne.n	800adb8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <dir_find+0x4e>
 800ad66:	2304      	movs	r3, #4
 800ad68:	75fb      	strb	r3, [r7, #23]
 800ad6a:	e028      	b.n	800adbe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	330b      	adds	r3, #11
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	330b      	adds	r3, #11
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 0308 	and.w	r3, r3, #8
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <dir_find+0x86>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a18      	ldr	r0, [r3, #32]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3324      	adds	r3, #36	; 0x24
 800ad96:	220b      	movs	r2, #11
 800ad98:	4619      	mov	r1, r3
 800ad9a:	f7fe ffd5 	bl	8009d48 <mem_cmp>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff fe5d 	bl	800aa66 <dir_next>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0c5      	beq.n	800ad42 <dir_find+0x24>
 800adb6:	e002      	b.n	800adbe <dir_find+0xa0>
		if (res != FR_OK) break;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800adbc:	bf00      	nop

	return res;
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800add6:	2101      	movs	r1, #1
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff ff1a 	bl	800ac12 <dir_alloc>
 800adde:	4603      	mov	r3, r0
 800ade0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d11c      	bne.n	800ae22 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	4619      	mov	r1, r3
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	f7ff f9ce 	bl	800a190 <move_window>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d111      	bne.n	800ae22 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	2220      	movs	r2, #32
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe ff83 	bl	8009d12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a18      	ldr	r0, [r3, #32]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3324      	adds	r3, #36	; 0x24
 800ae14:	220b      	movs	r2, #11
 800ae16:	4619      	mov	r1, r3
 800ae18:	f7fe ff5a 	bl	8009cd0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ae42:	220b      	movs	r2, #11
 800ae44:	2120      	movs	r1, #32
 800ae46:	68b8      	ldr	r0, [r7, #8]
 800ae48:	f7fe ff63 	bl	8009d12 <mem_set>
	si = i = 0; ni = 8;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	2308      	movs	r3, #8
 800ae56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	61fa      	str	r2, [r7, #28]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	4413      	add	r3, r2
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae66:	7efb      	ldrb	r3, [r7, #27]
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	d94e      	bls.n	800af0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ae6c:	7efb      	ldrb	r3, [r7, #27]
 800ae6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ae70:	d006      	beq.n	800ae80 <create_name+0x54>
 800ae72:	7efb      	ldrb	r3, [r7, #27]
 800ae74:	2b5c      	cmp	r3, #92	; 0x5c
 800ae76:	d110      	bne.n	800ae9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae78:	e002      	b.n	800ae80 <create_name+0x54>
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b2f      	cmp	r3, #47	; 0x2f
 800ae8a:	d0f6      	beq.n	800ae7a <create_name+0x4e>
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b5c      	cmp	r3, #92	; 0x5c
 800ae96:	d0f0      	beq.n	800ae7a <create_name+0x4e>
			break;
 800ae98:	e038      	b.n	800af0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ae9a:	7efb      	ldrb	r3, [r7, #27]
 800ae9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9e:	d003      	beq.n	800aea8 <create_name+0x7c>
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d30c      	bcc.n	800aec2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	2b0b      	cmp	r3, #11
 800aeac:	d002      	beq.n	800aeb4 <create_name+0x88>
 800aeae:	7efb      	ldrb	r3, [r7, #27]
 800aeb0:	2b2e      	cmp	r3, #46	; 0x2e
 800aeb2:	d001      	beq.n	800aeb8 <create_name+0x8c>
 800aeb4:	2306      	movs	r3, #6
 800aeb6:	e044      	b.n	800af42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aeb8:	2308      	movs	r3, #8
 800aeba:	613b      	str	r3, [r7, #16]
 800aebc:	230b      	movs	r3, #11
 800aebe:	617b      	str	r3, [r7, #20]
			continue;
 800aec0:	e022      	b.n	800af08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aec2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	da04      	bge.n	800aed4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aeca:	7efb      	ldrb	r3, [r7, #27]
 800aecc:	3b80      	subs	r3, #128	; 0x80
 800aece:	4a1f      	ldr	r2, [pc, #124]	; (800af4c <create_name+0x120>)
 800aed0:	5cd3      	ldrb	r3, [r2, r3]
 800aed2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aed4:	7efb      	ldrb	r3, [r7, #27]
 800aed6:	4619      	mov	r1, r3
 800aed8:	481d      	ldr	r0, [pc, #116]	; (800af50 <create_name+0x124>)
 800aeda:	f7fe ff5c 	bl	8009d96 <chk_chr>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <create_name+0xbc>
 800aee4:	2306      	movs	r3, #6
 800aee6:	e02c      	b.n	800af42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aee8:	7efb      	ldrb	r3, [r7, #27]
 800aeea:	2b60      	cmp	r3, #96	; 0x60
 800aeec:	d905      	bls.n	800aefa <create_name+0xce>
 800aeee:	7efb      	ldrb	r3, [r7, #27]
 800aef0:	2b7a      	cmp	r3, #122	; 0x7a
 800aef2:	d802      	bhi.n	800aefa <create_name+0xce>
 800aef4:	7efb      	ldrb	r3, [r7, #27]
 800aef6:	3b20      	subs	r3, #32
 800aef8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	613a      	str	r2, [r7, #16]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	4413      	add	r3, r2
 800af04:	7efa      	ldrb	r2, [r7, #27]
 800af06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af08:	e7a6      	b.n	800ae58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	441a      	add	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <create_name+0xf4>
 800af1c:	2306      	movs	r3, #6
 800af1e:	e010      	b.n	800af42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2be5      	cmp	r3, #229	; 0xe5
 800af26:	d102      	bne.n	800af2e <create_name+0x102>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2205      	movs	r2, #5
 800af2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af2e:	7efb      	ldrb	r3, [r7, #27]
 800af30:	2b20      	cmp	r3, #32
 800af32:	d801      	bhi.n	800af38 <create_name+0x10c>
 800af34:	2204      	movs	r2, #4
 800af36:	e000      	b.n	800af3a <create_name+0x10e>
 800af38:	2200      	movs	r2, #0
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	330b      	adds	r3, #11
 800af3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800af42:	4618      	mov	r0, r3
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	0800fc4c 	.word	0x0800fc4c
 800af50:	0800fbe0 	.word	0x0800fbe0

0800af54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800af68:	e002      	b.n	800af70 <follow_path+0x1c>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b2f      	cmp	r3, #47	; 0x2f
 800af76:	d0f8      	beq.n	800af6a <follow_path+0x16>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b5c      	cmp	r3, #92	; 0x5c
 800af7e:	d0f4      	beq.n	800af6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2200      	movs	r2, #0
 800af84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b1f      	cmp	r3, #31
 800af8c:	d80a      	bhi.n	800afa4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2280      	movs	r2, #128	; 0x80
 800af92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800af96:	2100      	movs	r1, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7ff fcdb 	bl	800a954 <dir_sdi>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
 800afa2:	e048      	b.n	800b036 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800afa4:	463b      	mov	r3, r7
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff ff3f 	bl	800ae2c <create_name>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d139      	bne.n	800b02c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff feb0 	bl	800ad1e <dir_find>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afc8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d12c      	bne.n	800b030 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800afd6:	7afb      	ldrb	r3, [r7, #11]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d127      	bne.n	800b030 <follow_path+0xdc>
 800afe0:	2305      	movs	r3, #5
 800afe2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800afe4:	e024      	b.n	800b030 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afe6:	7afb      	ldrb	r3, [r7, #11]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d121      	bne.n	800b034 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	799b      	ldrb	r3, [r3, #6]
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800affc:	2305      	movs	r3, #5
 800affe:	75fb      	strb	r3, [r7, #23]
 800b000:	e019      	b.n	800b036 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	8992      	ldrh	r2, [r2, #12]
 800b010:	fbb3 f0f2 	udiv	r0, r3, r2
 800b014:	fb00 f202 	mul.w	r2, r0, r2
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	440b      	add	r3, r1
 800b01c:	4619      	mov	r1, r3
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7ff fe3e 	bl	800aca0 <ld_clust>
 800b024:	4602      	mov	r2, r0
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b02a:	e7bb      	b.n	800afa4 <follow_path+0x50>
			if (res != FR_OK) break;
 800b02c:	bf00      	nop
 800b02e:	e002      	b.n	800b036 <follow_path+0xe2>
				break;
 800b030:	bf00      	nop
 800b032:	e000      	b.n	800b036 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b034:	bf00      	nop
			}
		}
	}

	return res;
 800b036:	7dfb      	ldrb	r3, [r7, #23]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d031      	beq.n	800b0ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	e002      	b.n	800b064 <get_ldnumber+0x24>
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	3301      	adds	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b20      	cmp	r3, #32
 800b06a:	d903      	bls.n	800b074 <get_ldnumber+0x34>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b3a      	cmp	r3, #58	; 0x3a
 800b072:	d1f4      	bne.n	800b05e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b3a      	cmp	r3, #58	; 0x3a
 800b07a:	d11c      	bne.n	800b0b6 <get_ldnumber+0x76>
			tp = *path;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	60fa      	str	r2, [r7, #12]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	3b30      	subs	r3, #48	; 0x30
 800b08c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b09      	cmp	r3, #9
 800b092:	d80e      	bhi.n	800b0b2 <get_ldnumber+0x72>
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d10a      	bne.n	800b0b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d107      	bne.n	800b0b2 <get_ldnumber+0x72>
					vol = (int)i;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	e002      	b.n	800b0bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b0ba:	693b      	ldr	r3, [r7, #16]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	70da      	strb	r2, [r3, #3]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff f854 	bl	800a190 <move_window>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <check_fs+0x2a>
 800b0ee:	2304      	movs	r3, #4
 800b0f0:	e038      	b.n	800b164 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3338      	adds	r3, #56	; 0x38
 800b0f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fd66 	bl	8009bcc <ld_word>
 800b100:	4603      	mov	r3, r0
 800b102:	461a      	mov	r2, r3
 800b104:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b108:	429a      	cmp	r2, r3
 800b10a:	d001      	beq.n	800b110 <check_fs+0x48>
 800b10c:	2303      	movs	r3, #3
 800b10e:	e029      	b.n	800b164 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b116:	2be9      	cmp	r3, #233	; 0xe9
 800b118:	d009      	beq.n	800b12e <check_fs+0x66>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b120:	2beb      	cmp	r3, #235	; 0xeb
 800b122:	d11e      	bne.n	800b162 <check_fs+0x9a>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b12a:	2b90      	cmp	r3, #144	; 0x90
 800b12c:	d119      	bne.n	800b162 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3338      	adds	r3, #56	; 0x38
 800b132:	3336      	adds	r3, #54	; 0x36
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe fd61 	bl	8009bfc <ld_dword>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b140:	4a0a      	ldr	r2, [pc, #40]	; (800b16c <check_fs+0xa4>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d101      	bne.n	800b14a <check_fs+0x82>
 800b146:	2300      	movs	r3, #0
 800b148:	e00c      	b.n	800b164 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3338      	adds	r3, #56	; 0x38
 800b14e:	3352      	adds	r3, #82	; 0x52
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe fd53 	bl	8009bfc <ld_dword>
 800b156:	4603      	mov	r3, r0
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <check_fs+0xa8>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d101      	bne.n	800b162 <check_fs+0x9a>
 800b15e:	2300      	movs	r3, #0
 800b160:	e000      	b.n	800b164 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b162:	2302      	movs	r3, #2
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	00544146 	.word	0x00544146
 800b170:	33544146 	.word	0x33544146

0800b174 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b096      	sub	sp, #88	; 0x58
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7ff ff59 	bl	800b040 <get_ldnumber>
 800b18e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	2b00      	cmp	r3, #0
 800b194:	da01      	bge.n	800b19a <find_volume+0x26>
 800b196:	230b      	movs	r3, #11
 800b198:	e26a      	b.n	800b670 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b19a:	4aa3      	ldr	r2, [pc, #652]	; (800b428 <find_volume+0x2b4>)
 800b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <find_volume+0x3a>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	e260      	b.n	800b670 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b1ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1b0:	f7fe fe0c 	bl	8009dcc <lock_fs>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <find_volume+0x4a>
 800b1ba:	230f      	movs	r3, #15
 800b1bc:	e258      	b.n	800b670 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	f023 0301 	bic.w	r3, r3, #1
 800b1ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01a      	beq.n	800b20a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	785b      	ldrb	r3, [r3, #1]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fc59 	bl	8009a90 <disk_status>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d007      	beq.n	800b206 <find_volume+0x92>
 800b1f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1fa:	f003 0304 	and.w	r3, r3, #4
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b202:	230a      	movs	r3, #10
 800b204:	e234      	b.n	800b670 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b206:	2300      	movs	r3, #0
 800b208:	e232      	b.n	800b670 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	2200      	movs	r2, #0
 800b20e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fe fc51 	bl	8009ac4 <disk_initialize>
 800b222:	4603      	mov	r3, r0
 800b224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b234:	2303      	movs	r3, #3
 800b236:	e21b      	b.n	800b670 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b238:	79fb      	ldrb	r3, [r7, #7]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <find_volume+0xda>
 800b23e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b242:	f003 0304 	and.w	r3, r3, #4
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b24a:	230a      	movs	r3, #10
 800b24c:	e210      	b.n	800b670 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	7858      	ldrb	r0, [r3, #1]
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	330c      	adds	r3, #12
 800b256:	461a      	mov	r2, r3
 800b258:	2102      	movs	r1, #2
 800b25a:	f7fe fc99 	bl	8009b90 <disk_ioctl>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <find_volume+0xf4>
 800b264:	2301      	movs	r3, #1
 800b266:	e203      	b.n	800b670 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	899b      	ldrh	r3, [r3, #12]
 800b26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b270:	d80d      	bhi.n	800b28e <find_volume+0x11a>
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	899b      	ldrh	r3, [r3, #12]
 800b276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b27a:	d308      	bcc.n	800b28e <find_volume+0x11a>
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	899b      	ldrh	r3, [r3, #12]
 800b280:	461a      	mov	r2, r3
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	899b      	ldrh	r3, [r3, #12]
 800b286:	3b01      	subs	r3, #1
 800b288:	4013      	ands	r3, r2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <find_volume+0x11e>
 800b28e:	2301      	movs	r3, #1
 800b290:	e1ee      	b.n	800b670 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b29a:	f7ff ff15 	bl	800b0c8 <check_fs>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d149      	bne.n	800b340 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	643b      	str	r3, [r7, #64]	; 0x40
 800b2b0:	e01e      	b.n	800b2f0 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2c0:	4413      	add	r3, r2
 800b2c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d006      	beq.n	800b2dc <find_volume+0x168>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fc92 	bl	8009bfc <ld_dword>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	e000      	b.n	800b2de <find_volume+0x16a>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	3358      	adds	r3, #88	; 0x58
 800b2e4:	443b      	add	r3, r7
 800b2e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d9dd      	bls.n	800b2b2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <find_volume+0x192>
 800b300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b302:	3b01      	subs	r3, #1
 800b304:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	3358      	adds	r3, #88	; 0x58
 800b30c:	443b      	add	r3, r7
 800b30e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b312:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <find_volume+0x1b2>
 800b31a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b31c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b31e:	f7ff fed3 	bl	800b0c8 <check_fs>
 800b322:	4603      	mov	r3, r0
 800b324:	e000      	b.n	800b328 <find_volume+0x1b4>
 800b326:	2303      	movs	r3, #3
 800b328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b330:	2b01      	cmp	r3, #1
 800b332:	d905      	bls.n	800b340 <find_volume+0x1cc>
 800b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b336:	3301      	adds	r3, #1
 800b338:	643b      	str	r3, [r7, #64]	; 0x40
 800b33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d9e2      	bls.n	800b306 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b344:	2b04      	cmp	r3, #4
 800b346:	d101      	bne.n	800b34c <find_volume+0x1d8>
 800b348:	2301      	movs	r3, #1
 800b34a:	e191      	b.n	800b670 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b350:	2b01      	cmp	r3, #1
 800b352:	d901      	bls.n	800b358 <find_volume+0x1e4>
 800b354:	230d      	movs	r3, #13
 800b356:	e18b      	b.n	800b670 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35a:	3338      	adds	r3, #56	; 0x38
 800b35c:	330b      	adds	r3, #11
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fc34 	bl	8009bcc <ld_word>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	899b      	ldrh	r3, [r3, #12]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d001      	beq.n	800b374 <find_volume+0x200>
 800b370:	230d      	movs	r3, #13
 800b372:	e17d      	b.n	800b670 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	3338      	adds	r3, #56	; 0x38
 800b378:	3316      	adds	r3, #22
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fc26 	bl	8009bcc <ld_word>
 800b380:	4603      	mov	r3, r0
 800b382:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <find_volume+0x224>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	3338      	adds	r3, #56	; 0x38
 800b38e:	3324      	adds	r3, #36	; 0x24
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe fc33 	bl	8009bfc <ld_dword>
 800b396:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b39c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	789b      	ldrb	r3, [r3, #2]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d005      	beq.n	800b3bc <find_volume+0x248>
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	789b      	ldrb	r3, [r3, #2]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d001      	beq.n	800b3bc <find_volume+0x248>
 800b3b8:	230d      	movs	r3, #13
 800b3ba:	e159      	b.n	800b670 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c4:	fb02 f303 	mul.w	r3, r2, r3
 800b3c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	895b      	ldrh	r3, [r3, #10]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <find_volume+0x27c>
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	895b      	ldrh	r3, [r3, #10]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	895b      	ldrh	r3, [r3, #10]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <find_volume+0x280>
 800b3f0:	230d      	movs	r3, #13
 800b3f2:	e13d      	b.n	800b670 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	3338      	adds	r3, #56	; 0x38
 800b3f8:	3311      	adds	r3, #17
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fbe6 	bl	8009bcc <ld_word>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	891b      	ldrh	r3, [r3, #8]
 800b40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b40e:	8992      	ldrh	r2, [r2, #12]
 800b410:	0952      	lsrs	r2, r2, #5
 800b412:	b292      	uxth	r2, r2
 800b414:	fbb3 f1f2 	udiv	r1, r3, r2
 800b418:	fb01 f202 	mul.w	r2, r1, r2
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	b29b      	uxth	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <find_volume+0x2b8>
 800b424:	230d      	movs	r3, #13
 800b426:	e123      	b.n	800b670 <find_volume+0x4fc>
 800b428:	200034a0 	.word	0x200034a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	3338      	adds	r3, #56	; 0x38
 800b430:	3313      	adds	r3, #19
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fbca 	bl	8009bcc <ld_word>
 800b438:	4603      	mov	r3, r0
 800b43a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <find_volume+0x2dc>
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	3338      	adds	r3, #56	; 0x38
 800b446:	3320      	adds	r3, #32
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fbd7 	bl	8009bfc <ld_dword>
 800b44e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	3338      	adds	r3, #56	; 0x38
 800b454:	330e      	adds	r3, #14
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fbb8 	bl	8009bcc <ld_word>
 800b45c:	4603      	mov	r3, r0
 800b45e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <find_volume+0x2f6>
 800b466:	230d      	movs	r3, #13
 800b468:	e102      	b.n	800b670 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b46a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b46e:	4413      	add	r3, r2
 800b470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b472:	8911      	ldrh	r1, [r2, #8]
 800b474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b476:	8992      	ldrh	r2, [r2, #12]
 800b478:	0952      	lsrs	r2, r2, #5
 800b47a:	b292      	uxth	r2, r2
 800b47c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b480:	b292      	uxth	r2, r2
 800b482:	4413      	add	r3, r2
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d201      	bcs.n	800b492 <find_volume+0x31e>
 800b48e:	230d      	movs	r3, #13
 800b490:	e0ee      	b.n	800b670 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b49a:	8952      	ldrh	r2, [r2, #10]
 800b49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <find_volume+0x338>
 800b4a8:	230d      	movs	r3, #13
 800b4aa:	e0e1      	b.n	800b670 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d802      	bhi.n	800b4c2 <find_volume+0x34e>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d802      	bhi.n	800b4d2 <find_volume+0x35e>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	1c9a      	adds	r2, r3, #2
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e4:	441a      	add	r2, r3
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b4ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	441a      	add	r2, r3
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d11e      	bne.n	800b53a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	3338      	adds	r3, #56	; 0x38
 800b500:	332a      	adds	r3, #42	; 0x2a
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fb62 	bl	8009bcc <ld_word>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <find_volume+0x39e>
 800b50e:	230d      	movs	r3, #13
 800b510:	e0ae      	b.n	800b670 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	891b      	ldrh	r3, [r3, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <find_volume+0x3aa>
 800b51a:	230d      	movs	r3, #13
 800b51c:	e0a8      	b.n	800b670 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	3338      	adds	r3, #56	; 0x38
 800b522:	332c      	adds	r3, #44	; 0x2c
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe fb69 	bl	8009bfc <ld_dword>
 800b52a:	4602      	mov	r2, r0
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	647b      	str	r3, [r7, #68]	; 0x44
 800b538:	e01f      	b.n	800b57a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	891b      	ldrh	r3, [r3, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <find_volume+0x3d2>
 800b542:	230d      	movs	r3, #13
 800b544:	e094      	b.n	800b670 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54c:	441a      	add	r2, r3
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b556:	2b02      	cmp	r3, #2
 800b558:	d103      	bne.n	800b562 <find_volume+0x3ee>
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	e00a      	b.n	800b578 <find_volume+0x404>
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	69da      	ldr	r2, [r3, #28]
 800b566:	4613      	mov	r3, r2
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	4413      	add	r3, r2
 800b56c:	085a      	lsrs	r2, r3, #1
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b578:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	6a1a      	ldr	r2, [r3, #32]
 800b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b580:	899b      	ldrh	r3, [r3, #12]
 800b582:	4619      	mov	r1, r3
 800b584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b586:	440b      	add	r3, r1
 800b588:	3b01      	subs	r3, #1
 800b58a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b58c:	8989      	ldrh	r1, [r1, #12]
 800b58e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b592:	429a      	cmp	r2, r3
 800b594:	d201      	bcs.n	800b59a <find_volume+0x426>
 800b596:	230d      	movs	r3, #13
 800b598:	e06a      	b.n	800b670 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59c:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a0:	619a      	str	r2, [r3, #24]
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	699a      	ldr	r2, [r3, #24]
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	2280      	movs	r2, #128	; 0x80
 800b5ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d149      	bne.n	800b64c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	3338      	adds	r3, #56	; 0x38
 800b5bc:	3330      	adds	r3, #48	; 0x30
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fb04 	bl	8009bcc <ld_word>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d140      	bne.n	800b64c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5d2:	f7fe fddd 	bl	800a190 <move_window>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d137      	bne.n	800b64c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	2200      	movs	r2, #0
 800b5e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	3338      	adds	r3, #56	; 0x38
 800b5e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe faee 	bl	8009bcc <ld_word>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d127      	bne.n	800b64c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	3338      	adds	r3, #56	; 0x38
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fafb 	bl	8009bfc <ld_dword>
 800b606:	4603      	mov	r3, r0
 800b608:	4a1b      	ldr	r2, [pc, #108]	; (800b678 <find_volume+0x504>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d11e      	bne.n	800b64c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	3338      	adds	r3, #56	; 0x38
 800b612:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe faf0 	bl	8009bfc <ld_dword>
 800b61c:	4603      	mov	r3, r0
 800b61e:	4a17      	ldr	r2, [pc, #92]	; (800b67c <find_volume+0x508>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d113      	bne.n	800b64c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b626:	3338      	adds	r3, #56	; 0x38
 800b628:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe fae5 	bl	8009bfc <ld_dword>
 800b632:	4602      	mov	r2, r0
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	3338      	adds	r3, #56	; 0x38
 800b63c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fadb 	bl	8009bfc <ld_dword>
 800b646:	4602      	mov	r2, r0
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b652:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b654:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <find_volume+0x50c>)
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	4b08      	ldr	r3, [pc, #32]	; (800b680 <find_volume+0x50c>)
 800b65e:	801a      	strh	r2, [r3, #0]
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <find_volume+0x50c>)
 800b662:	881a      	ldrh	r2, [r3, #0]
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b66a:	f7fe fd29 	bl	800a0c0 <clear_lock>
#endif
	return FR_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3758      	adds	r7, #88	; 0x58
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	41615252 	.word	0x41615252
 800b67c:	61417272 	.word	0x61417272
 800b680:	200034a4 	.word	0x200034a4

0800b684 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b68e:	2309      	movs	r3, #9
 800b690:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d02e      	beq.n	800b6f6 <validate+0x72>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d02a      	beq.n	800b6f6 <validate+0x72>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d025      	beq.n	800b6f6 <validate+0x72>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	889a      	ldrh	r2, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	88db      	ldrh	r3, [r3, #6]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d11e      	bne.n	800b6f6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe fb85 	bl	8009dcc <lock_fs>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d014      	beq.n	800b6f2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe f9de 	bl	8009a90 <disk_status>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <validate+0x60>
				res = FR_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
 800b6e2:	e008      	b.n	800b6f6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fb84 	bl	8009df8 <unlock_fs>
 800b6f0:	e001      	b.n	800b6f6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b6f2:	230f      	movs	r3, #15
 800b6f4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <validate+0x7e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	e000      	b.n	800b704 <validate+0x80>
 800b702:	2300      	movs	r3, #0
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	6013      	str	r3, [r2, #0]
	return res;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	4613      	mov	r3, r2
 800b720:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b726:	f107 0310 	add.w	r3, r7, #16
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7ff fc88 	bl	800b040 <get_ldnumber>
 800b730:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	da01      	bge.n	800b73c <f_mount+0x28>
 800b738:	230b      	movs	r3, #11
 800b73a:	e048      	b.n	800b7ce <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b73c:	4a26      	ldr	r2, [pc, #152]	; (800b7d8 <f_mount+0xc4>)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b744:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00f      	beq.n	800b76c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b74c:	69b8      	ldr	r0, [r7, #24]
 800b74e:	f7fe fcb7 	bl	800a0c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	4618      	mov	r0, r3
 800b758:	f001 f813 	bl	800c782 <ff_del_syncobj>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <f_mount+0x52>
 800b762:	2302      	movs	r3, #2
 800b764:	e033      	b.n	800b7ce <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00f      	beq.n	800b792 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3310      	adds	r3, #16
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f000 ffdd 	bl	800c742 <ff_cre_syncobj>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <f_mount+0x7e>
 800b78e:	2302      	movs	r3, #2
 800b790:	e01d      	b.n	800b7ce <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4910      	ldr	r1, [pc, #64]	; (800b7d8 <f_mount+0xc4>)
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <f_mount+0x94>
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d001      	beq.n	800b7ac <f_mount+0x98>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e010      	b.n	800b7ce <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7ac:	f107 010c 	add.w	r1, r7, #12
 800b7b0:	f107 0308 	add.w	r3, r7, #8
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fcdc 	bl	800b174 <find_volume>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	7dfa      	ldrb	r2, [r7, #23]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fb16 	bl	8009df8 <unlock_fs>
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3720      	adds	r7, #32
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200034a0 	.word	0x200034a0

0800b7dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b098      	sub	sp, #96	; 0x60
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <f_open+0x18>
 800b7f0:	2309      	movs	r3, #9
 800b7f2:	e1c2      	b.n	800bb7a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7fc:	79fa      	ldrb	r2, [r7, #7]
 800b7fe:	f107 0110 	add.w	r1, r7, #16
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fcb4 	bl	800b174 <find_volume>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b816:	2b00      	cmp	r3, #0
 800b818:	f040 819f 	bne.w	800bb5a <f_open+0x37e>
		dj.obj.fs = fs;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	f107 0314 	add.w	r3, r7, #20
 800b826:	4611      	mov	r1, r2
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fb93 	bl	800af54 <follow_path>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d11a      	bne.n	800b872 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b83c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b840:	b25b      	sxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	da03      	bge.n	800b84e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b846:	2306      	movs	r3, #6
 800b848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b84c:	e011      	b.n	800b872 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	bf14      	ite	ne
 800b858:	2301      	movne	r3, #1
 800b85a:	2300      	moveq	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	461a      	mov	r2, r3
 800b860:	f107 0314 	add.w	r3, r7, #20
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fae2 	bl	8009e30 <chk_lock>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	f003 031c 	and.w	r3, r3, #28
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d07f      	beq.n	800b97c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b880:	2b00      	cmp	r3, #0
 800b882:	d017      	beq.n	800b8b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d10e      	bne.n	800b8aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b88c:	f7fe fb2c 	bl	8009ee8 <enq_lock>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d006      	beq.n	800b8a4 <f_open+0xc8>
 800b896:	f107 0314 	add.w	r3, r7, #20
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fa94 	bl	800adc8 <dir_register>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	e000      	b.n	800b8a6 <f_open+0xca>
 800b8a4:	2312      	movs	r3, #18
 800b8a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	f043 0308 	orr.w	r3, r3, #8
 800b8b0:	71fb      	strb	r3, [r7, #7]
 800b8b2:	e010      	b.n	800b8d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b8b4:	7ebb      	ldrb	r3, [r7, #26]
 800b8b6:	f003 0311 	and.w	r3, r3, #17
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <f_open+0xea>
					res = FR_DENIED;
 800b8be:	2307      	movs	r3, #7
 800b8c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8c4:	e007      	b.n	800b8d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <f_open+0xfa>
 800b8d0:	2308      	movs	r3, #8
 800b8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d168      	bne.n	800b9b0 <f_open+0x1d4>
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d063      	beq.n	800b9b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b8e8:	f7fe f870 	bl	80099cc <get_fattime>
 800b8ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	330e      	adds	r3, #14
 800b8f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe f9bf 	bl	8009c78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	3316      	adds	r3, #22
 800b8fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe f9b9 	bl	8009c78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b908:	330b      	adds	r3, #11
 800b90a:	2220      	movs	r2, #32
 800b90c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b912:	4611      	mov	r1, r2
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff f9c3 	bl	800aca0 <ld_clust>
 800b91a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b920:	2200      	movs	r2, #0
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff f9db 	bl	800acde <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92a:	331c      	adds	r3, #28
 800b92c:	2100      	movs	r1, #0
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe f9a2 	bl	8009c78 <st_dword>
					fs->wflag = 1;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2201      	movs	r2, #1
 800b938:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d037      	beq.n	800b9b0 <f_open+0x1d4>
						dw = fs->winsect;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b944:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b946:	f107 0314 	add.w	r3, r7, #20
 800b94a:	2200      	movs	r2, #0
 800b94c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe fecb 	bl	800a6ea <remove_chain>
 800b954:	4603      	mov	r3, r0
 800b956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b95a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d126      	bne.n	800b9b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fc12 	bl	800a190 <move_window>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b976:	3a01      	subs	r2, #1
 800b978:	615a      	str	r2, [r3, #20]
 800b97a:	e019      	b.n	800b9b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b97c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b980:	2b00      	cmp	r3, #0
 800b982:	d115      	bne.n	800b9b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b984:	7ebb      	ldrb	r3, [r7, #26]
 800b986:	f003 0310 	and.w	r3, r3, #16
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b98e:	2304      	movs	r3, #4
 800b990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b994:	e00c      	b.n	800b9b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <f_open+0x1d4>
 800b9a0:	7ebb      	ldrb	r3, [r7, #26]
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <f_open+0x1d4>
						res = FR_DENIED;
 800b9aa:	2307      	movs	r3, #7
 800b9ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d128      	bne.n	800ba0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b9d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	f023 0301 	bic.w	r3, r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bf14      	ite	ne
 800b9e2:	2301      	movne	r3, #1
 800b9e4:	2300      	moveq	r3, #0
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	f107 0314 	add.w	r3, r7, #20
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe fa9b 	bl	8009f2c <inc_lock>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <f_open+0x22e>
 800ba04:	2302      	movs	r3, #2
 800ba06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ba0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f040 80a3 	bne.w	800bb5a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff f940 	bl	800aca0 <ld_clust>
 800ba20:	4602      	mov	r2, r0
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba28:	331c      	adds	r3, #28
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe f8e6 	bl	8009bfc <ld_dword>
 800ba30:	4602      	mov	r2, r0
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	88da      	ldrh	r2, [r3, #6]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	79fa      	ldrb	r2, [r7, #7]
 800ba4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3330      	adds	r3, #48	; 0x30
 800ba66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe f950 	bl	8009d12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	f003 0320 	and.w	r3, r3, #32
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d06e      	beq.n	800bb5a <f_open+0x37e>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d06a      	beq.n	800bb5a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	68da      	ldr	r2, [r3, #12]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	895b      	ldrh	r3, [r3, #10]
 800ba90:	461a      	mov	r2, r3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	899b      	ldrh	r3, [r3, #12]
 800ba96:	fb02 f303 	mul.w	r3, r2, r3
 800ba9a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	657b      	str	r3, [r7, #84]	; 0x54
 800baa8:	e016      	b.n	800bad8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fc2b 	bl	800a30a <get_fat>
 800bab4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d802      	bhi.n	800bac2 <f_open+0x2e6>
 800babc:	2302      	movs	r3, #2
 800babe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac8:	d102      	bne.n	800bad0 <f_open+0x2f4>
 800baca:	2301      	movs	r3, #1
 800bacc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	657b      	str	r3, [r7, #84]	; 0x54
 800bad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <f_open+0x30c>
 800bae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d8e0      	bhi.n	800baaa <f_open+0x2ce>
				}
				fp->clust = clst;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800baec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800baee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d131      	bne.n	800bb5a <f_open+0x37e>
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	899b      	ldrh	r3, [r3, #12]
 800bafa:	461a      	mov	r2, r3
 800bafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bafe:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb02:	fb01 f202 	mul.w	r2, r1, r2
 800bb06:	1a9b      	subs	r3, r3, r2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d026      	beq.n	800bb5a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe fbdb 	bl	800a2cc <clust2sect>
 800bb16:	6478      	str	r0, [r7, #68]	; 0x44
 800bb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <f_open+0x34a>
						res = FR_INT_ERR;
 800bb1e:	2302      	movs	r3, #2
 800bb20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb24:	e019      	b.n	800bb5a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	899b      	ldrh	r3, [r3, #12]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb34:	441a      	add	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	7858      	ldrb	r0, [r3, #1]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a1a      	ldr	r2, [r3, #32]
 800bb48:	2301      	movs	r3, #1
 800bb4a:	f7fd ffe1 	bl	8009b10 <disk_read>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <f_open+0x37e>
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <f_open+0x38c>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bb6e:	4611      	mov	r1, r2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe f941 	bl	8009df8 <unlock_fs>
 800bb76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3760      	adds	r7, #96	; 0x60
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b08c      	sub	sp, #48	; 0x30
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f107 0210 	add.w	r2, r7, #16
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fd6e 	bl	800b684 <validate>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d107      	bne.n	800bbc6 <f_write+0x44>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	7d5b      	ldrb	r3, [r3, #21]
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d009      	beq.n	800bbda <f_write+0x58>
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe f912 	bl	8009df8 <unlock_fs>
 800bbd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd8:	e192      	b.n	800bf00 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	7d1b      	ldrb	r3, [r3, #20]
 800bbde:	f003 0302 	and.w	r3, r3, #2
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <f_write+0x72>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2107      	movs	r1, #7
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe f904 	bl	8009df8 <unlock_fs>
 800bbf0:	2307      	movs	r3, #7
 800bbf2:	e185      	b.n	800bf00 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	699a      	ldr	r2, [r3, #24]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	f080 816a 	bcs.w	800beda <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	43db      	mvns	r3, r3
 800bc0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc0e:	e164      	b.n	800beda <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	8992      	ldrh	r2, [r2, #12]
 800bc18:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc1c:	fb01 f202 	mul.w	r2, r1, r2
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 810f 	bne.w	800be46 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	8992      	ldrh	r2, [r2, #12]
 800bc30:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	8952      	ldrh	r2, [r2, #10]
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d14d      	bne.n	800bce0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10c      	bne.n	800bc66 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11a      	bne.n	800bc8e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fda9 	bl	800a7b4 <create_chain>
 800bc62:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc64:	e013      	b.n	800bc8e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d007      	beq.n	800bc7e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	4619      	mov	r1, r3
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7fe fe35 	bl	800a8e4 <clmt_clust>
 800bc7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc7c:	e007      	b.n	800bc8e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f7fe fd94 	bl	800a7b4 <create_chain>
 800bc8c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 8127 	beq.w	800bee4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d109      	bne.n	800bcb0 <f_write+0x12e>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	755a      	strb	r2, [r3, #21]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2102      	movs	r1, #2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe f8a6 	bl	8009df8 <unlock_fs>
 800bcac:	2302      	movs	r3, #2
 800bcae:	e127      	b.n	800bf00 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d109      	bne.n	800bccc <f_write+0x14a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	755a      	strb	r2, [r3, #21]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe f898 	bl	8009df8 <unlock_fs>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e119      	b.n	800bf00 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcd0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <f_write+0x15e>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcde:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da1d      	bge.n	800bd26 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	7858      	ldrb	r0, [r3, #1]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6a1a      	ldr	r2, [r3, #32]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f7fd ff29 	bl	8009b50 <disk_write>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <f_write+0x196>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2201      	movs	r2, #1
 800bd08:	755a      	strb	r2, [r3, #21]
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe f872 	bl	8009df8 <unlock_fs>
 800bd14:	2301      	movs	r3, #1
 800bd16:	e0f3      	b.n	800bf00 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	7d1b      	ldrb	r3, [r3, #20]
 800bd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	4610      	mov	r0, r2
 800bd30:	f7fe facc 	bl	800a2cc <clust2sect>
 800bd34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d109      	bne.n	800bd50 <f_write+0x1ce>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	755a      	strb	r2, [r3, #21]
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	2102      	movs	r1, #2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe f856 	bl	8009df8 <unlock_fs>
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e0d7      	b.n	800bf00 <f_write+0x37e>
			sect += csect;
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	4413      	add	r3, r2
 800bd56:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	899b      	ldrh	r3, [r3, #12]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd64:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d048      	beq.n	800bdfe <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	4413      	add	r3, r2
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	8952      	ldrh	r2, [r2, #10]
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d905      	bls.n	800bd86 <f_write+0x204>
					cc = fs->csize - csect;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	895b      	ldrh	r3, [r3, #10]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	7858      	ldrb	r0, [r3, #1]
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	69f9      	ldr	r1, [r7, #28]
 800bd90:	f7fd fede 	bl	8009b50 <disk_write>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d009      	beq.n	800bdae <f_write+0x22c>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	755a      	strb	r2, [r3, #21]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	2101      	movs	r1, #1
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fe f827 	bl	8009df8 <unlock_fs>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e0a8      	b.n	800bf00 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a1a      	ldr	r2, [r3, #32]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	6a3a      	ldr	r2, [r7, #32]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d918      	bls.n	800bdee <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6a1a      	ldr	r2, [r3, #32]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	8992      	ldrh	r2, [r2, #12]
 800bdce:	fb02 f303 	mul.w	r3, r2, r3
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	18d1      	adds	r1, r2, r3
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	899b      	ldrh	r3, [r3, #12]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f7fd ff78 	bl	8009cd0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	7d1b      	ldrb	r3, [r3, #20]
 800bde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	899b      	ldrh	r3, [r3, #12]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	fb02 f303 	mul.w	r3, r2, r3
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bdfc:	e050      	b.n	800bea0 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	429a      	cmp	r2, r3
 800be06:	d01b      	beq.n	800be40 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	699a      	ldr	r2, [r3, #24]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be10:	429a      	cmp	r2, r3
 800be12:	d215      	bcs.n	800be40 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	7858      	ldrb	r0, [r3, #1]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be1e:	2301      	movs	r3, #1
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	f7fd fe75 	bl	8009b10 <disk_read>
 800be26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d009      	beq.n	800be40 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2201      	movs	r2, #1
 800be30:	755a      	strb	r2, [r3, #21]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2101      	movs	r1, #1
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd ffde 	bl	8009df8 <unlock_fs>
 800be3c:	2301      	movs	r3, #1
 800be3e:	e05f      	b.n	800bf00 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	899b      	ldrh	r3, [r3, #12]
 800be4a:	4618      	mov	r0, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	8992      	ldrh	r2, [r2, #12]
 800be54:	fbb3 f1f2 	udiv	r1, r3, r2
 800be58:	fb01 f202 	mul.w	r2, r1, r2
 800be5c:	1a9b      	subs	r3, r3, r2
 800be5e:	1ac3      	subs	r3, r0, r3
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	429a      	cmp	r2, r3
 800be68:	d901      	bls.n	800be6e <f_write+0x2ec>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	8992      	ldrh	r2, [r2, #12]
 800be7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800be80:	fb00 f202 	mul.w	r2, r0, r2
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	440b      	add	r3, r1
 800be88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8a:	69f9      	ldr	r1, [r7, #28]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fd ff1f 	bl	8009cd0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	7d1b      	ldrb	r3, [r3, #20]
 800be96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bea0:	69fa      	ldr	r2, [r7, #28]
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	4413      	add	r3, r2
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	699a      	ldr	r2, [r3, #24]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	441a      	add	r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	619a      	str	r2, [r3, #24]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68da      	ldr	r2, [r3, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	bf38      	it	cc
 800bec0:	461a      	movcc	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	60da      	str	r2, [r3, #12]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	441a      	add	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	601a      	str	r2, [r3, #0]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f47f ae97 	bne.w	800bc10 <f_write+0x8e>
 800bee2:	e000      	b.n	800bee6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bee4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	7d1b      	ldrb	r3, [r3, #20]
 800beea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2100      	movs	r1, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fd ff7d 	bl	8009df8 <unlock_fs>
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3730      	adds	r7, #48	; 0x30
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f107 0208 	add.w	r2, r7, #8
 800bf16:	4611      	mov	r1, r2
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fbb3 	bl	800b684 <validate>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d16d      	bne.n	800c004 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7d1b      	ldrb	r3, [r3, #20]
 800bf2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d067      	beq.n	800c004 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7d1b      	ldrb	r3, [r3, #20]
 800bf38:	b25b      	sxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	da1a      	bge.n	800bf74 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	7858      	ldrb	r0, [r3, #1]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a1a      	ldr	r2, [r3, #32]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	f7fd fdff 	bl	8009b50 <disk_write>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d006      	beq.n	800bf66 <f_sync+0x5e>
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fd ff4b 	bl	8009df8 <unlock_fs>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e055      	b.n	800c012 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7d1b      	ldrb	r3, [r3, #20]
 800bf6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf74:	f7fd fd2a 	bl	80099cc <get_fattime>
 800bf78:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	4619      	mov	r1, r3
 800bf82:	4610      	mov	r0, r2
 800bf84:	f7fe f904 	bl	800a190 <move_window>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf8c:	7dfb      	ldrb	r3, [r7, #23]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d138      	bne.n	800c004 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	330b      	adds	r3, #11
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	330b      	adds	r3, #11
 800bfa2:	f042 0220 	orr.w	r2, r2, #32
 800bfa6:	b2d2      	uxtb	r2, r2
 800bfa8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	f7fe fe92 	bl	800acde <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f103 021c 	add.w	r2, r3, #28
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	f7fd fe56 	bl	8009c78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3316      	adds	r3, #22
 800bfd0:	6939      	ldr	r1, [r7, #16]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd fe50 	bl	8009c78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3312      	adds	r3, #18
 800bfdc:	2100      	movs	r1, #0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fd fe2f 	bl	8009c42 <st_word>
					fs->wflag = 1;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fe f8fd 	bl	800a1ec <sync_fs>
 800bff2:	4603      	mov	r3, r0
 800bff4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	7dfa      	ldrb	r2, [r7, #23]
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fd fef4 	bl	8009df8 <unlock_fs>
 800c010:	7dfb      	ldrb	r3, [r7, #23]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff ff70 	bl	800bf08 <f_sync>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d11d      	bne.n	800c06e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f107 0208 	add.w	r2, r7, #8
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff fb22 	bl	800b684 <validate>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d111      	bne.n	800c06e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fd fffa 	bl	800a048 <dec_lock>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	2100      	movs	r1, #0
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fd fec5 	bl	8009df8 <unlock_fs>
#endif
		}
	}
	return res;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b090      	sub	sp, #64	; 0x40
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f107 0208 	add.w	r2, r7, #8
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fafa 	bl	800b684 <validate>
 800c090:	4603      	mov	r3, r0
 800c092:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <f_lseek+0x2e>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	7d5b      	ldrb	r3, [r3, #21]
 800c0a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c0a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <f_lseek+0x4a>
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd fe9e 	bl	8009df8 <unlock_fs>
 800c0bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c0c0:	e244      	b.n	800c54c <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 80f2 	beq.w	800c2b0 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d164      	bne.n	800c19e <f_lseek+0x126>
			tbl = fp->cltbl;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	1d1a      	adds	r2, r3, #4
 800c0de:	627a      	str	r2, [r7, #36]	; 0x24
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d044      	beq.n	800c17e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	3302      	adds	r3, #2
 800c100:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	3301      	adds	r3, #1
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe f8fa 	bl	800a30a <get_fat>
 800c116:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d809      	bhi.n	800c132 <f_lseek+0xba>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2202      	movs	r2, #2
 800c122:	755a      	strb	r2, [r3, #21]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2102      	movs	r1, #2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd fe65 	bl	8009df8 <unlock_fs>
 800c12e:	2302      	movs	r3, #2
 800c130:	e20c      	b.n	800c54c <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c138:	d109      	bne.n	800c14e <f_lseek+0xd6>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	755a      	strb	r2, [r3, #21]
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2101      	movs	r1, #1
 800c144:	4618      	mov	r0, r3
 800c146:	f7fd fe57 	bl	8009df8 <unlock_fs>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e1fe      	b.n	800c54c <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c154:	429a      	cmp	r2, r3
 800c156:	d0d4      	beq.n	800c102 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d809      	bhi.n	800c174 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	1d1a      	adds	r2, r3, #4
 800c164:	627a      	str	r2, [r7, #36]	; 0x24
 800c166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	1d1a      	adds	r2, r3, #4
 800c16e:	627a      	str	r2, [r7, #36]	; 0x24
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d3ba      	bcc.n	800c0f4 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c184:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d803      	bhi.n	800c196 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	e1d1      	b.n	800c53a <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c196:	2311      	movs	r3, #17
 800c198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c19c:	e1cd      	b.n	800c53a <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d902      	bls.n	800c1ae <f_lseek+0x136>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 81bf 	beq.w	800c53a <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7fe fb8e 	bl	800a8e4 <clmt_clust>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f7fe f878 	bl	800a2cc <clust2sect>
 800c1dc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d109      	bne.n	800c1f8 <f_lseek+0x180>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	755a      	strb	r2, [r3, #21]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd fe02 	bl	8009df8 <unlock_fs>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e1a9      	b.n	800c54c <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	8992      	ldrh	r2, [r2, #12]
 800c200:	fbb3 f3f2 	udiv	r3, r3, r2
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	8952      	ldrh	r2, [r2, #10]
 800c208:	3a01      	subs	r2, #1
 800c20a:	4013      	ands	r3, r2
 800c20c:	69ba      	ldr	r2, [r7, #24]
 800c20e:	4413      	add	r3, r2
 800c210:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	8992      	ldrh	r2, [r2, #12]
 800c21a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c21e:	fb01 f202 	mul.w	r2, r1, r2
 800c222:	1a9b      	subs	r3, r3, r2
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 8188 	beq.w	800c53a <f_lseek+0x4c2>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	f000 8182 	beq.w	800c53a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7d1b      	ldrb	r3, [r3, #20]
 800c23a:	b25b      	sxtb	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	da1d      	bge.n	800c27c <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	7858      	ldrb	r0, [r3, #1]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1a      	ldr	r2, [r3, #32]
 800c24e:	2301      	movs	r3, #1
 800c250:	f7fd fc7e 	bl	8009b50 <disk_write>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <f_lseek+0x1f6>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	755a      	strb	r2, [r3, #21]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2101      	movs	r1, #1
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd fdc7 	bl	8009df8 <unlock_fs>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e16e      	b.n	800c54c <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	7d1b      	ldrb	r3, [r3, #20]
 800c272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c276:	b2da      	uxtb	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	7858      	ldrb	r0, [r3, #1]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c286:	2301      	movs	r3, #1
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	f7fd fc41 	bl	8009b10 <disk_read>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d009      	beq.n	800c2a8 <f_lseek+0x230>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	755a      	strb	r2, [r3, #21]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2101      	movs	r1, #1
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fd fdaa 	bl	8009df8 <unlock_fs>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e151      	b.n	800c54c <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	621a      	str	r2, [r3, #32]
 800c2ae:	e144      	b.n	800c53a <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d908      	bls.n	800c2cc <f_lseek+0x254>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	7d1b      	ldrb	r3, [r3, #20]
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <f_lseek+0x254>
			ofs = fp->obj.objsize;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2da:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 80ce 	beq.w	800c480 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	895b      	ldrh	r3, [r3, #10]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	899b      	ldrh	r3, [r3, #12]
 800c2ee:	fb02 f303 	mul.w	r3, r2, r3
 800c2f2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01b      	beq.n	800c332 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	1e5a      	subs	r2, r3, #1
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	fbb2 f2f3 	udiv	r2, r2, r3
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	1e59      	subs	r1, r3, #1
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c30e:	429a      	cmp	r2, r3
 800c310:	d30f      	bcc.n	800c332 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	1e5a      	subs	r2, r3, #1
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	425b      	negs	r3, r3
 800c31a:	401a      	ands	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c330:	e02c      	b.n	800c38c <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d123      	bne.n	800c386 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fa36 	bl	800a7b4 <create_chain>
 800c348:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d109      	bne.n	800c364 <f_lseek+0x2ec>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2202      	movs	r2, #2
 800c354:	755a      	strb	r2, [r3, #21]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2102      	movs	r1, #2
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd fd4c 	bl	8009df8 <unlock_fs>
 800c360:	2302      	movs	r3, #2
 800c362:	e0f3      	b.n	800c54c <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36a:	d109      	bne.n	800c380 <f_lseek+0x308>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	755a      	strb	r2, [r3, #21]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2101      	movs	r1, #1
 800c376:	4618      	mov	r0, r3
 800c378:	f7fd fd3e 	bl	8009df8 <unlock_fs>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e0e5      	b.n	800c54c <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c384:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c38a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d076      	beq.n	800c480 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800c392:	e044      	b.n	800c41e <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	699a      	ldr	r2, [r3, #24]
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	441a      	add	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7d1b      	ldrb	r3, [r3, #20]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00b      	beq.n	800c3cc <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe f9fb 	bl	800a7b4 <create_chain>
 800c3be:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <f_lseek+0x360>
							ofs = 0; break;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	603b      	str	r3, [r7, #0]
 800c3ca:	e02c      	b.n	800c426 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fd ff9a 	bl	800a30a <get_fat>
 800c3d6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d109      	bne.n	800c3f4 <f_lseek+0x37c>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	755a      	strb	r2, [r3, #21]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fd fd04 	bl	8009df8 <unlock_fs>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e0ab      	b.n	800c54c <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d904      	bls.n	800c404 <f_lseek+0x38c>
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c400:	429a      	cmp	r2, r3
 800c402:	d309      	bcc.n	800c418 <f_lseek+0x3a0>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	755a      	strb	r2, [r3, #21]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2102      	movs	r1, #2
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fd fcf2 	bl	8009df8 <unlock_fs>
 800c414:	2302      	movs	r3, #2
 800c416:	e099      	b.n	800c54c <f_lseek+0x4d4>
					fp->clust = clst;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c41c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	429a      	cmp	r2, r3
 800c424:	d8b6      	bhi.n	800c394 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	699a      	ldr	r2, [r3, #24]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	441a      	add	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	899b      	ldrh	r3, [r3, #12]
 800c436:	461a      	mov	r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c43e:	fb01 f202 	mul.w	r2, r1, r2
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01b      	beq.n	800c480 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fd ff3d 	bl	800a2cc <clust2sect>
 800c452:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c456:	2b00      	cmp	r3, #0
 800c458:	d109      	bne.n	800c46e <f_lseek+0x3f6>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2202      	movs	r2, #2
 800c45e:	755a      	strb	r2, [r3, #21]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2102      	movs	r1, #2
 800c464:	4618      	mov	r0, r3
 800c466:	f7fd fcc7 	bl	8009df8 <unlock_fs>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e06e      	b.n	800c54c <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	899b      	ldrh	r3, [r3, #12]
 800c472:	461a      	mov	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	fbb3 f3f2 	udiv	r3, r3, r2
 800c47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47c:	4413      	add	r3, r2
 800c47e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	699a      	ldr	r2, [r3, #24]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d90a      	bls.n	800c4a2 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	699a      	ldr	r2, [r3, #24]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7d1b      	ldrb	r3, [r3, #20]
 800c498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	8992      	ldrh	r2, [r2, #12]
 800c4aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4ae:	fb01 f202 	mul.w	r2, r1, r2
 800c4b2:	1a9b      	subs	r3, r3, r2
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d040      	beq.n	800c53a <f_lseek+0x4c2>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d03b      	beq.n	800c53a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	7d1b      	ldrb	r3, [r3, #20]
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da1d      	bge.n	800c508 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	7858      	ldrb	r0, [r3, #1]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a1a      	ldr	r2, [r3, #32]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	f7fd fb38 	bl	8009b50 <disk_write>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d009      	beq.n	800c4fa <f_lseek+0x482>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	755a      	strb	r2, [r3, #21]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fd fc81 	bl	8009df8 <unlock_fs>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e028      	b.n	800c54c <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7d1b      	ldrb	r3, [r3, #20]
 800c4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c502:	b2da      	uxtb	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	7858      	ldrb	r0, [r3, #1]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c512:	2301      	movs	r3, #1
 800c514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c516:	f7fd fafb 	bl	8009b10 <disk_read>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d009      	beq.n	800c534 <f_lseek+0x4bc>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	755a      	strb	r2, [r3, #21]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2101      	movs	r1, #1
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fd fc64 	bl	8009df8 <unlock_fs>
 800c530:	2301      	movs	r3, #1
 800c532:	e00b      	b.n	800c54c <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c538:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd fc58 	bl	8009df8 <unlock_fs>
 800c548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3740      	adds	r7, #64	; 0x40
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	2b0a      	cmp	r3, #10
 800c564:	d103      	bne.n	800c56e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c566:	210d      	movs	r1, #13
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff fff3 	bl	800c554 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	db25      	blt.n	800c5c6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	60fa      	str	r2, [r7, #12]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	4413      	add	r3, r2
 800c584:	78fa      	ldrb	r2, [r7, #3]
 800c586:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b3c      	cmp	r3, #60	; 0x3c
 800c58c:	dd12      	ble.n	800c5b4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f103 010c 	add.w	r1, r3, #12
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	f7ff faf0 	bl	800bb82 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d101      	bne.n	800c5ae <putc_bfd+0x5a>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e001      	b.n	800c5b2 <putc_bfd+0x5e>
 800c5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	609a      	str	r2, [r3, #8]
 800c5c4:	e000      	b.n	800c5c8 <putc_bfd+0x74>
	if (i < 0) return;
 800c5c6:	bf00      	nop
}
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	db16      	blt.n	800c60c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6818      	ldr	r0, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f103 010c 	add.w	r1, r3, #12
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	f107 030c 	add.w	r3, r7, #12
 800c5f2:	f7ff fac6 	bl	800bb82 <f_write>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d107      	bne.n	800c60c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4293      	cmp	r3, r2
 800c604:	d102      	bne.n	800c60c <putc_flush+0x3e>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	e001      	b.n	800c610 <putc_flush+0x42>
	return EOF;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	605a      	str	r2, [r3, #4]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	609a      	str	r2, [r3, #8]
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b096      	sub	sp, #88	; 0x58
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c64c:	f107 030c 	add.w	r3, r7, #12
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff ffe0 	bl	800c618 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c658:	e009      	b.n	800c66e <f_puts+0x2c>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	f107 030c 	add.w	r3, r7, #12
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff ff73 	bl	800c554 <putc_bfd>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f1      	bne.n	800c65a <f_puts+0x18>
	return putc_flush(&pb);
 800c676:	f107 030c 	add.w	r3, r7, #12
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff ffa7 	bl	800c5ce <putc_flush>
 800c680:	4603      	mov	r3, r0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3758      	adds	r7, #88	; 0x58
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	4613      	mov	r3, r2
 800c698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c69a:	2301      	movs	r3, #1
 800c69c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c6a2:	4b1f      	ldr	r3, [pc, #124]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6a4:	7a5b      	ldrb	r3, [r3, #9]
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d131      	bne.n	800c710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6ac:	4b1c      	ldr	r3, [pc, #112]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6ae:	7a5b      	ldrb	r3, [r3, #9]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b1a      	ldr	r3, [pc, #104]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c6ba:	4b19      	ldr	r3, [pc, #100]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6bc:	7a5b      	ldrb	r3, [r3, #9]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	4a17      	ldr	r2, [pc, #92]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c6ca:	4b15      	ldr	r3, [pc, #84]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6cc:	7a5b      	ldrb	r3, [r3, #9]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4b13      	ldr	r3, [pc, #76]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6d4:	4413      	add	r3, r2
 800c6d6:	79fa      	ldrb	r2, [r7, #7]
 800c6d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6dc:	7a5b      	ldrb	r3, [r3, #9]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	b2d1      	uxtb	r1, r2
 800c6e4:	4a0e      	ldr	r2, [pc, #56]	; (800c720 <FATFS_LinkDriverEx+0x94>)
 800c6e6:	7251      	strb	r1, [r2, #9]
 800c6e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6ea:	7dbb      	ldrb	r3, [r7, #22]
 800c6ec:	3330      	adds	r3, #48	; 0x30
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	223a      	movs	r2, #58	; 0x3a
 800c6fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3302      	adds	r3, #2
 800c700:	222f      	movs	r2, #47	; 0x2f
 800c702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	3303      	adds	r3, #3
 800c708:	2200      	movs	r2, #0
 800c70a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c710:	7dfb      	ldrb	r3, [r7, #23]
}
 800c712:	4618      	mov	r0, r3
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	200034c8 	.word	0x200034c8

0800c724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c72e:	2200      	movs	r2, #0
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff ffaa 	bl	800c68c <FATFS_LinkDriverEx>
 800c738:	4603      	mov	r3, r0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b086      	sub	sp, #24
 800c746:	af00      	add	r7, sp, #0
 800c748:	4603      	mov	r3, r0
 800c74a:	6039      	str	r1, [r7, #0]
 800c74c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c74e:	2300      	movs	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	2300      	movs	r3, #0
 800c754:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c756:	f107 030c 	add.w	r3, r7, #12
 800c75a:	2101      	movs	r1, #1
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 f8cd 	bl	800c8fc <osSemaphoreCreate>
 800c762:	4602      	mov	r2, r0
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bf14      	ite	ne
 800c770:	2301      	movne	r3, #1
 800c772:	2300      	moveq	r3, #0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	617b      	str	r3, [r7, #20]

    return ret;
 800c778:	697b      	ldr	r3, [r7, #20]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b082      	sub	sp, #8
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f96c 	bl	800ca68 <osSemaphoreDelete>
#endif
    return 1;
 800c790:	2301      	movs	r3, #1
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c7a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f8d8 	bl	800c960 <osSemaphoreWait>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f915 	bl	800c9fc <osSemaphoreRelease>
#endif
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ec:	2b84      	cmp	r3, #132	; 0x84
 800c7ee:	d005      	beq.n	800c7fc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c810:	f3ef 8305 	mrs	r3, IPSR
 800c814:	607b      	str	r3, [r7, #4]
  return(result);
 800c816:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c818:	2b00      	cmp	r3, #0
 800c81a:	bf14      	ite	ne
 800c81c:	2301      	movne	r3, #1
 800c81e:	2300      	moveq	r3, #0
 800c820:	b2db      	uxtb	r3, r3
}
 800c822:	4618      	mov	r0, r3
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c832:	f001 f9af 	bl	800db94 <vTaskStartScheduler>
  
  return osOK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83e:	b089      	sub	sp, #36	; 0x24
 800c840:	af04      	add	r7, sp, #16
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d020      	beq.n	800c890 <osThreadCreate+0x54>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01c      	beq.n	800c890 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685c      	ldr	r4, [r3, #4]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681d      	ldr	r5, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	691e      	ldr	r6, [r3, #16]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff ffb6 	bl	800c7da <makeFreeRtosPriority>
 800c86e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c878:	9202      	str	r2, [sp, #8]
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	9100      	str	r1, [sp, #0]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	4632      	mov	r2, r6
 800c882:	4629      	mov	r1, r5
 800c884:	4620      	mov	r0, r4
 800c886:	f000 ffa7 	bl	800d7d8 <xTaskCreateStatic>
 800c88a:	4603      	mov	r3, r0
 800c88c:	60fb      	str	r3, [r7, #12]
 800c88e:	e01c      	b.n	800c8ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685c      	ldr	r4, [r3, #4]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c89c:	b29e      	uxth	r6, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7ff ff98 	bl	800c7da <makeFreeRtosPriority>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	f107 030c 	add.w	r3, r7, #12
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	9200      	str	r2, [sp, #0]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	4632      	mov	r2, r6
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 ffe9 	bl	800d892 <xTaskCreate>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	e000      	b.n	800c8cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <osDelay+0x16>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	e000      	b.n	800c8ec <osDelay+0x18>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f001 f91d 	bl	800db2c <vTaskDelay>
  
  return osOK;
 800c8f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af02      	add	r7, sp, #8
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00f      	beq.n	800c92e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d10a      	bne.n	800c92a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2203      	movs	r2, #3
 800c91a:	9200      	str	r2, [sp, #0]
 800c91c:	2200      	movs	r2, #0
 800c91e:	2100      	movs	r1, #0
 800c920:	2001      	movs	r0, #1
 800c922:	f000 f9f9 	bl	800cd18 <xQueueGenericCreateStatic>
 800c926:	4603      	mov	r3, r0
 800c928:	e016      	b.n	800c958 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	e014      	b.n	800c958 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d110      	bne.n	800c956 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c934:	2203      	movs	r2, #3
 800c936:	2100      	movs	r1, #0
 800c938:	2001      	movs	r0, #1
 800c93a:	f000 fa65 	bl	800ce08 <xQueueGenericCreate>
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <osSemaphoreCreate+0x56>
 800c946:	2300      	movs	r3, #0
 800c948:	2200      	movs	r2, #0
 800c94a:	2100      	movs	r1, #0
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 fab5 	bl	800cebc <xQueueGenericSend>
      return sema;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	e000      	b.n	800c958 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c956:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c96a:	2300      	movs	r3, #0
 800c96c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c974:	2380      	movs	r3, #128	; 0x80
 800c976:	e03a      	b.n	800c9ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c982:	d103      	bne.n	800c98c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c984:	f04f 33ff 	mov.w	r3, #4294967295
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	e009      	b.n	800c9a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d006      	beq.n	800c9a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c99c:	2301      	movs	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c9a0:	f7ff ff33 	bl	800c80a <inHandlerMode>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d017      	beq.n	800c9da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fd1a 	bl	800d3ec <xQueueReceiveFromISR>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d001      	beq.n	800c9c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c9be:	23ff      	movs	r3, #255	; 0xff
 800c9c0:	e015      	b.n	800c9ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d011      	beq.n	800c9ec <osSemaphoreWait+0x8c>
 800c9c8:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <osSemaphoreWait+0x98>)
 800c9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	e008      	b.n	800c9ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fbf9 	bl	800d1d4 <xQueueSemaphoreTake>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d001      	beq.n	800c9ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c9e8:	23ff      	movs	r3, #255	; 0xff
 800c9ea:	e000      	b.n	800c9ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	e000ed04 	.word	0xe000ed04

0800c9fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca0c:	f7ff fefd 	bl	800c80a <inHandlerMode>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d016      	beq.n	800ca44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca16:	f107 0308 	add.w	r3, r7, #8
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fb4b 	bl	800d0b8 <xQueueGiveFromISR>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d001      	beq.n	800ca2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca28:	23ff      	movs	r3, #255	; 0xff
 800ca2a:	e017      	b.n	800ca5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d013      	beq.n	800ca5a <osSemaphoreRelease+0x5e>
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <osSemaphoreRelease+0x68>)
 800ca34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	e00a      	b.n	800ca5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca44:	2300      	movs	r3, #0
 800ca46:	2200      	movs	r2, #0
 800ca48:	2100      	movs	r1, #0
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa36 	bl	800cebc <xQueueGenericSend>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d001      	beq.n	800ca5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca56:	23ff      	movs	r3, #255	; 0xff
 800ca58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	e000ed04 	.word	0xe000ed04

0800ca68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ca70:	f7ff fecb 	bl	800c80a <inHandlerMode>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ca7a:	2382      	movs	r3, #130	; 0x82
 800ca7c:	e003      	b.n	800ca86 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fd34 	bl	800d4ec <vQueueDelete>

  return osOK; 
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ca8e:	b590      	push	{r4, r7, lr}
 800ca90:	b085      	sub	sp, #20
 800ca92:	af02      	add	r7, sp, #8
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d011      	beq.n	800cac4 <osMessageCreate+0x36>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00d      	beq.n	800cac4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2400      	movs	r4, #0
 800caba:	9400      	str	r4, [sp, #0]
 800cabc:	f000 f92c 	bl	800cd18 <xQueueGenericCreateStatic>
 800cac0:	4603      	mov	r3, r0
 800cac2:	e008      	b.n	800cad6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	4619      	mov	r1, r3
 800cad0:	f000 f99a 	bl	800ce08 <xQueueGenericCreate>
 800cad4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd90      	pop	{r4, r7, pc}

0800cade <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f103 0208 	add.w	r2, r3, #8
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f04f 32ff 	mov.w	r2, #4294967295
 800caf6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f103 0208 	add.w	r2, r3, #8
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f103 0208 	add.w	r2, r3, #8
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb12:	bf00      	nop
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689a      	ldr	r2, [r3, #8]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	601a      	str	r2, [r3, #0]
}
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb96:	d103      	bne.n	800cba0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e00c      	b.n	800cbba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3308      	adds	r3, #8
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	e002      	b.n	800cbae <vListInsert+0x2e>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d2f6      	bcs.n	800cba8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	601a      	str	r2, [r3, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b085      	sub	sp, #20
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	6892      	ldr	r2, [r2, #8]
 800cc08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	6852      	ldr	r2, [r2, #4]
 800cc12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d103      	bne.n	800cc26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689a      	ldr	r2, [r3, #8]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	1e5a      	subs	r2, r3, #1
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
	...

0800cc48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10a      	bne.n	800cc72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc72:	f001 feef 	bl	800ea54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7e:	68f9      	ldr	r1, [r7, #12]
 800cc80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc82:	fb01 f303 	mul.w	r3, r1, r3
 800cc86:	441a      	add	r2, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca2:	3b01      	subs	r3, #1
 800cca4:	68f9      	ldr	r1, [r7, #12]
 800cca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cca8:	fb01 f303 	mul.w	r3, r1, r3
 800ccac:	441a      	add	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	22ff      	movs	r2, #255	; 0xff
 800ccb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	22ff      	movs	r2, #255	; 0xff
 800ccbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d114      	bne.n	800ccf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01a      	beq.n	800cd06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3310      	adds	r3, #16
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f001 f9af 	bl	800e038 <xTaskRemoveFromEventList>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d012      	beq.n	800cd06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cce0:	4b0c      	ldr	r3, [pc, #48]	; (800cd14 <xQueueGenericReset+0xcc>)
 800cce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	e009      	b.n	800cd06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3310      	adds	r3, #16
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fef1 	bl	800cade <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	3324      	adds	r3, #36	; 0x24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff feec 	bl	800cade <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd06:	f001 fed5 	bl	800eab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd0a:	2301      	movs	r3, #1
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	e000ed04 	.word	0xe000ed04

0800cd18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08e      	sub	sp, #56	; 0x38
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <xQueueGenericCreateStatic+0x52>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d001      	beq.n	800cd6e <xQueueGenericCreateStatic+0x56>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e000      	b.n	800cd70 <xQueueGenericCreateStatic+0x58>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	623b      	str	r3, [r7, #32]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <xQueueGenericCreateStatic+0x7e>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <xQueueGenericCreateStatic+0x82>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <xQueueGenericCreateStatic+0x84>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	61fb      	str	r3, [r7, #28]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdb6:	2348      	movs	r3, #72	; 0x48
 800cdb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b48      	cmp	r3, #72	; 0x48
 800cdbe:	d00a      	beq.n	800cdd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	61bb      	str	r3, [r7, #24]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00d      	beq.n	800cdfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	68b9      	ldr	r1, [r7, #8]
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f83f 	bl	800ce7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3730      	adds	r7, #48	; 0x30
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	4613      	mov	r3, r2
 800ce14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10a      	bne.n	800ce32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ce1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	613b      	str	r3, [r7, #16]
}
 800ce2e:	bf00      	nop
 800ce30:	e7fe      	b.n	800ce30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	fb02 f303 	mul.w	r3, r2, r3
 800ce3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	3348      	adds	r3, #72	; 0x48
 800ce40:	4618      	mov	r0, r3
 800ce42:	f001 ff29 	bl	800ec98 <pvPortMalloc>
 800ce46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d011      	beq.n	800ce72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	3348      	adds	r3, #72	; 0x48
 800ce56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce60:	79fa      	ldrb	r2, [r7, #7]
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	4613      	mov	r3, r2
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f805 	bl	800ce7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce72:	69bb      	ldr	r3, [r7, #24]
	}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3720      	adds	r7, #32
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d103      	bne.n	800ce98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	e002      	b.n	800ce9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ceaa:	2101      	movs	r1, #1
 800ceac:	69b8      	ldr	r0, [r7, #24]
 800ceae:	f7ff fecb 	bl	800cc48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ceb2:	bf00      	nop
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08e      	sub	sp, #56	; 0x38
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ceca:	2300      	movs	r3, #0
 800cecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <xQueueGenericSend+0x32>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d103      	bne.n	800cefc <xQueueGenericSend+0x40>
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <xQueueGenericSend+0x44>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <xQueueGenericSend+0x46>
 800cf00:	2300      	movs	r3, #0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <xQueueGenericSend+0x60>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d103      	bne.n	800cf2a <xQueueGenericSend+0x6e>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d101      	bne.n	800cf2e <xQueueGenericSend+0x72>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e000      	b.n	800cf30 <xQueueGenericSend+0x74>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10a      	bne.n	800cf4a <xQueueGenericSend+0x8e>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	623b      	str	r3, [r7, #32]
}
 800cf46:	bf00      	nop
 800cf48:	e7fe      	b.n	800cf48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf4a:	f001 fa35 	bl	800e3b8 <xTaskGetSchedulerState>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <xQueueGenericSend+0x9e>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <xQueueGenericSend+0xa2>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <xQueueGenericSend+0xa4>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10a      	bne.n	800cf7a <xQueueGenericSend+0xbe>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	61fb      	str	r3, [r7, #28]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf7a:	f001 fd6b 	bl	800ea54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d302      	bcc.n	800cf90 <xQueueGenericSend+0xd4>
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d129      	bne.n	800cfe4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	68b9      	ldr	r1, [r7, #8]
 800cf94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf96:	f000 fae4 	bl	800d562 <prvCopyDataToQueue>
 800cf9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d010      	beq.n	800cfc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	3324      	adds	r3, #36	; 0x24
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f001 f845 	bl	800e038 <xTaskRemoveFromEventList>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d013      	beq.n	800cfdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cfb4:	4b3f      	ldr	r3, [pc, #252]	; (800d0b4 <xQueueGenericSend+0x1f8>)
 800cfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	f3bf 8f4f 	dsb	sy
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	e00a      	b.n	800cfdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d007      	beq.n	800cfdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cfcc:	4b39      	ldr	r3, [pc, #228]	; (800d0b4 <xQueueGenericSend+0x1f8>)
 800cfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfdc:	f001 fd6a 	bl	800eab4 <vPortExitCritical>
				return pdPASS;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e063      	b.n	800d0ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d103      	bne.n	800cff2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfea:	f001 fd63 	bl	800eab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	e05c      	b.n	800d0ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d106      	bne.n	800d006 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cff8:	f107 0314 	add.w	r3, r7, #20
 800cffc:	4618      	mov	r0, r3
 800cffe:	f001 f87d 	bl	800e0fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d002:	2301      	movs	r3, #1
 800d004:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d006:	f001 fd55 	bl	800eab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d00a:	f000 fe2d 	bl	800dc68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d00e:	f001 fd21 	bl	800ea54 <vPortEnterCritical>
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d018:	b25b      	sxtb	r3, r3
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d103      	bne.n	800d028 <xQueueGenericSend+0x16c>
 800d020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d022:	2200      	movs	r2, #0
 800d024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d02e:	b25b      	sxtb	r3, r3
 800d030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d034:	d103      	bne.n	800d03e <xQueueGenericSend+0x182>
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d03e:	f001 fd39 	bl	800eab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d042:	1d3a      	adds	r2, r7, #4
 800d044:	f107 0314 	add.w	r3, r7, #20
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f001 f86c 	bl	800e128 <xTaskCheckForTimeOut>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d124      	bne.n	800d0a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d058:	f000 fb7b 	bl	800d752 <prvIsQueueFull>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d018      	beq.n	800d094 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	3310      	adds	r3, #16
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	4611      	mov	r1, r2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 ffc0 	bl	800dff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d072:	f000 fb06 	bl	800d682 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d076:	f000 fe05 	bl	800dc84 <xTaskResumeAll>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f47f af7c 	bne.w	800cf7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <xQueueGenericSend+0x1f8>)
 800d084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	e772      	b.n	800cf7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d096:	f000 faf4 	bl	800d682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d09a:	f000 fdf3 	bl	800dc84 <xTaskResumeAll>
 800d09e:	e76c      	b.n	800cf7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0a2:	f000 faee 	bl	800d682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0a6:	f000 fded 	bl	800dc84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3738      	adds	r7, #56	; 0x38
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	e000ed04 	.word	0xe000ed04

0800d0b8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08e      	sub	sp, #56	; 0x38
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10a      	bne.n	800d0e2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	623b      	str	r3, [r7, #32]
}
 800d0de:	bf00      	nop
 800d0e0:	e7fe      	b.n	800d0e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	61fb      	str	r3, [r7, #28]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <xQueueGiveFromISR+0x58>
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <xQueueGiveFromISR+0x5c>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <xQueueGiveFromISR+0x5e>
 800d114:	2300      	movs	r3, #0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	61bb      	str	r3, [r7, #24]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d130:	f001 fd72 	bl	800ec18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d134:	f3ef 8211 	mrs	r2, BASEPRI
 800d138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	617a      	str	r2, [r7, #20]
 800d14a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d14c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d14e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d22b      	bcs.n	800d1b8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17a:	d112      	bne.n	800d1a2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d180:	2b00      	cmp	r3, #0
 800d182:	d016      	beq.n	800d1b2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	3324      	adds	r3, #36	; 0x24
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 ff55 	bl	800e038 <xTaskRemoveFromEventList>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00e      	beq.n	800d1b2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2201      	movs	r2, #1
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	e007      	b.n	800d1b2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	b25a      	sxtb	r2, r3
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b6:	e001      	b.n	800d1bc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d1c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3738      	adds	r7, #56	; 0x38
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08e      	sub	sp, #56	; 0x38
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10a      	bne.n	800d206 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	623b      	str	r3, [r7, #32]
}
 800d202:	bf00      	nop
 800d204:	e7fe      	b.n	800d204 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	61fb      	str	r3, [r7, #28]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d224:	f001 f8c8 	bl	800e3b8 <xTaskGetSchedulerState>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <xQueueSemaphoreTake+0x60>
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d101      	bne.n	800d238 <xQueueSemaphoreTake+0x64>
 800d234:	2301      	movs	r3, #1
 800d236:	e000      	b.n	800d23a <xQueueSemaphoreTake+0x66>
 800d238:	2300      	movs	r3, #0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	61bb      	str	r3, [r7, #24]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d254:	f001 fbfe 	bl	800ea54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	2b00      	cmp	r3, #0
 800d262:	d024      	beq.n	800d2ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d104      	bne.n	800d27e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d274:	f001 fa48 	bl	800e708 <pvTaskIncrementMutexHeldCount>
 800d278:	4602      	mov	r2, r0
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00f      	beq.n	800d2a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	3310      	adds	r3, #16
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 fed4 	bl	800e038 <xTaskRemoveFromEventList>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d007      	beq.n	800d2a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d296:	4b54      	ldr	r3, [pc, #336]	; (800d3e8 <xQueueSemaphoreTake+0x214>)
 800d298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2a6:	f001 fc05 	bl	800eab4 <vPortExitCritical>
				return pdPASS;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e097      	b.n	800d3de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d111      	bne.n	800d2d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	617b      	str	r3, [r7, #20]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2d0:	f001 fbf0 	bl	800eab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e082      	b.n	800d3de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2de:	f107 030c 	add.w	r3, r7, #12
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 ff0a 	bl	800e0fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2ec:	f001 fbe2 	bl	800eab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2f0:	f000 fcba 	bl	800dc68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2f4:	f001 fbae 	bl	800ea54 <vPortEnterCritical>
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2fe:	b25b      	sxtb	r3, r3
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d304:	d103      	bne.n	800d30e <xQueueSemaphoreTake+0x13a>
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d314:	b25b      	sxtb	r3, r3
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31a:	d103      	bne.n	800d324 <xQueueSemaphoreTake+0x150>
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d324:	f001 fbc6 	bl	800eab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d328:	463a      	mov	r2, r7
 800d32a:	f107 030c 	add.w	r3, r7, #12
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f000 fef9 	bl	800e128 <xTaskCheckForTimeOut>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d132      	bne.n	800d3a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d33e:	f000 f9f2 	bl	800d726 <prvIsQueueEmpty>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d026      	beq.n	800d396 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d109      	bne.n	800d364 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d350:	f001 fb80 	bl	800ea54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 f84b 	bl	800e3f4 <xTaskPriorityInherit>
 800d35e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d360:	f001 fba8 	bl	800eab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	3324      	adds	r3, #36	; 0x24
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	4611      	mov	r1, r2
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 fe3f 	bl	800dff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d374:	f000 f985 	bl	800d682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d378:	f000 fc84 	bl	800dc84 <xTaskResumeAll>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f47f af68 	bne.w	800d254 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d384:	4b18      	ldr	r3, [pc, #96]	; (800d3e8 <xQueueSemaphoreTake+0x214>)
 800d386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38a:	601a      	str	r2, [r3, #0]
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	e75e      	b.n	800d254 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d398:	f000 f973 	bl	800d682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d39c:	f000 fc72 	bl	800dc84 <xTaskResumeAll>
 800d3a0:	e758      	b.n	800d254 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a4:	f000 f96d 	bl	800d682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3a8:	f000 fc6c 	bl	800dc84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ae:	f000 f9ba 	bl	800d726 <prvIsQueueEmpty>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f43f af4d 	beq.w	800d254 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00d      	beq.n	800d3dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d3c0:	f001 fb48 	bl	800ea54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c6:	f000 f8b4 	bl	800d532 <prvGetDisinheritPriorityAfterTimeout>
 800d3ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 f90a 	bl	800e5ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3d8:	f001 fb6c 	bl	800eab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3738      	adds	r7, #56	; 0x38
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08e      	sub	sp, #56	; 0x38
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10a      	bne.n	800d418 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	623b      	str	r3, [r7, #32]
}
 800d414:	bf00      	nop
 800d416:	e7fe      	b.n	800d416 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d103      	bne.n	800d426 <xQueueReceiveFromISR+0x3a>
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <xQueueReceiveFromISR+0x3e>
 800d426:	2301      	movs	r3, #1
 800d428:	e000      	b.n	800d42c <xQueueReceiveFromISR+0x40>
 800d42a:	2300      	movs	r3, #0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10a      	bne.n	800d446 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	61fb      	str	r3, [r7, #28]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d446:	f001 fbe7 	bl	800ec18 <vPortValidateInterruptPriority>
	__asm volatile
 800d44a:	f3ef 8211 	mrs	r2, BASEPRI
 800d44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	61ba      	str	r2, [r7, #24]
 800d460:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d462:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d02f      	beq.n	800d4d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d47c:	68b9      	ldr	r1, [r7, #8]
 800d47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d480:	f000 f8d9 	bl	800d636 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	1e5a      	subs	r2, r3, #1
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d48c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d112      	bne.n	800d4bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d016      	beq.n	800d4cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a0:	3310      	adds	r3, #16
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fdc8 	bl	800e038 <xTaskRemoveFromEventList>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00e      	beq.n	800d4cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00b      	beq.n	800d4cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	e007      	b.n	800d4cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	b25a      	sxtb	r2, r3
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d4d0:	e001      	b.n	800d4d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f383 8811 	msr	BASEPRI, r3
}
 800d4e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3738      	adds	r7, #56	; 0x38
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <vQueueDelete+0x28>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	60bb      	str	r3, [r7, #8]
}
 800d510:	bf00      	nop
 800d512:	e7fe      	b.n	800d512 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f935 	bl	800d784 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d520:	2b00      	cmp	r3, #0
 800d522:	d102      	bne.n	800d52a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f001 fc83 	bl	800ee30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d532:	b480      	push	{r7}
 800d534:	b085      	sub	sp, #20
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d006      	beq.n	800d550 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f1c3 0307 	rsb	r3, r3, #7
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	e001      	b.n	800d554 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d554:	68fb      	ldr	r3, [r7, #12]
	}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b086      	sub	sp, #24
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	60b9      	str	r1, [r7, #8]
 800d56c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d56e:	2300      	movs	r3, #0
 800d570:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10d      	bne.n	800d59c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d14d      	bne.n	800d624 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 ffa7 	bl	800e4e0 <xTaskPriorityDisinherit>
 800d592:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	609a      	str	r2, [r3, #8]
 800d59a:	e043      	b.n	800d624 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d119      	bne.n	800d5d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6858      	ldr	r0, [r3, #4]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	68b9      	ldr	r1, [r7, #8]
 800d5ae:	f001 fd89 	bl	800f0c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ba:	441a      	add	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d32b      	bcc.n	800d624 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	605a      	str	r2, [r3, #4]
 800d5d4:	e026      	b.n	800d624 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68d8      	ldr	r0, [r3, #12]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	461a      	mov	r2, r3
 800d5e0:	68b9      	ldr	r1, [r7, #8]
 800d5e2:	f001 fd6f 	bl	800f0c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	425b      	negs	r3, r3
 800d5f0:	441a      	add	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	68da      	ldr	r2, [r3, #12]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d207      	bcs.n	800d612 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60a:	425b      	negs	r3, r3
 800d60c:	441a      	add	r2, r3
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b02      	cmp	r3, #2
 800d616:	d105      	bne.n	800d624 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	3b01      	subs	r3, #1
 800d622:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d62c:	697b      	ldr	r3, [r7, #20]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b082      	sub	sp, #8
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d018      	beq.n	800d67a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68da      	ldr	r2, [r3, #12]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d650:	441a      	add	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d303      	bcc.n	800d66a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68d9      	ldr	r1, [r3, #12]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d672:	461a      	mov	r2, r3
 800d674:	6838      	ldr	r0, [r7, #0]
 800d676:	f001 fd25 	bl	800f0c4 <memcpy>
	}
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b084      	sub	sp, #16
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d68a:	f001 f9e3 	bl	800ea54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d694:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d696:	e011      	b.n	800d6bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d012      	beq.n	800d6c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3324      	adds	r3, #36	; 0x24
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f000 fcc7 	bl	800e038 <xTaskRemoveFromEventList>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6b0:	f000 fd9c 	bl	800e1ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	dce9      	bgt.n	800d698 <prvUnlockQueue+0x16>
 800d6c4:	e000      	b.n	800d6c8 <prvUnlockQueue+0x46>
					break;
 800d6c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	22ff      	movs	r2, #255	; 0xff
 800d6cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6d0:	f001 f9f0 	bl	800eab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6d4:	f001 f9be 	bl	800ea54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6e0:	e011      	b.n	800d706 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d012      	beq.n	800d710 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	3310      	adds	r3, #16
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 fca2 	bl	800e038 <xTaskRemoveFromEventList>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6fa:	f000 fd77 	bl	800e1ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6fe:	7bbb      	ldrb	r3, [r7, #14]
 800d700:	3b01      	subs	r3, #1
 800d702:	b2db      	uxtb	r3, r3
 800d704:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dce9      	bgt.n	800d6e2 <prvUnlockQueue+0x60>
 800d70e:	e000      	b.n	800d712 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d710:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	22ff      	movs	r2, #255	; 0xff
 800d716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d71a:	f001 f9cb 	bl	800eab4 <vPortExitCritical>
}
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d72e:	f001 f991 	bl	800ea54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d736:	2b00      	cmp	r3, #0
 800d738:	d102      	bne.n	800d740 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d73a:	2301      	movs	r3, #1
 800d73c:	60fb      	str	r3, [r7, #12]
 800d73e:	e001      	b.n	800d744 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d740:	2300      	movs	r3, #0
 800d742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d744:	f001 f9b6 	bl	800eab4 <vPortExitCritical>

	return xReturn;
 800d748:	68fb      	ldr	r3, [r7, #12]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b084      	sub	sp, #16
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d75a:	f001 f97b 	bl	800ea54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d766:	429a      	cmp	r2, r3
 800d768:	d102      	bne.n	800d770 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d76a:	2301      	movs	r3, #1
 800d76c:	60fb      	str	r3, [r7, #12]
 800d76e:	e001      	b.n	800d774 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d770:	2300      	movs	r3, #0
 800d772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d774:	f001 f99e 	bl	800eab4 <vPortExitCritical>

	return xReturn;
 800d778:	68fb      	ldr	r3, [r7, #12]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d784:	b480      	push	{r7}
 800d786:	b085      	sub	sp, #20
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d78c:	2300      	movs	r3, #0
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	e016      	b.n	800d7c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d792:	4a10      	ldr	r2, [pc, #64]	; (800d7d4 <vQueueUnregisterQueue+0x50>)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	4413      	add	r3, r2
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d10b      	bne.n	800d7ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7a2:	4a0c      	ldr	r2, [pc, #48]	; (800d7d4 <vQueueUnregisterQueue+0x50>)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d7ac:	4a09      	ldr	r2, [pc, #36]	; (800d7d4 <vQueueUnregisterQueue+0x50>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	605a      	str	r2, [r3, #4]
				break;
 800d7b8:	e006      	b.n	800d7c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	60fb      	str	r3, [r7, #12]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b07      	cmp	r3, #7
 800d7c4:	d9e5      	bls.n	800d792 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d7c6:	bf00      	nop
 800d7c8:	bf00      	nop
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	200034d4 	.word	0x200034d4

0800d7d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b08e      	sub	sp, #56	; 0x38
 800d7dc:	af04      	add	r7, sp, #16
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10a      	bne.n	800d802 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	623b      	str	r3, [r7, #32]
}
 800d7fe:	bf00      	nop
 800d800:	e7fe      	b.n	800d800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <xTaskCreateStatic+0x46>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	61fb      	str	r3, [r7, #28]
}
 800d81a:	bf00      	nop
 800d81c:	e7fe      	b.n	800d81c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d81e:	23b4      	movs	r3, #180	; 0xb4
 800d820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	2bb4      	cmp	r3, #180	; 0xb4
 800d826:	d00a      	beq.n	800d83e <xTaskCreateStatic+0x66>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	61bb      	str	r3, [r7, #24]
}
 800d83a:	bf00      	nop
 800d83c:	e7fe      	b.n	800d83c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d83e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	2b00      	cmp	r3, #0
 800d844:	d01e      	beq.n	800d884 <xTaskCreateStatic+0xac>
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d01b      	beq.n	800d884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	2202      	movs	r2, #2
 800d85a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d85e:	2300      	movs	r3, #0
 800d860:	9303      	str	r3, [sp, #12]
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	9302      	str	r3, [sp, #8]
 800d866:	f107 0314 	add.w	r3, r7, #20
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	68b9      	ldr	r1, [r7, #8]
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f000 f850 	bl	800d91c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d87c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d87e:	f000 f8eb 	bl	800da58 <prvAddNewTaskToReadyList>
 800d882:	e001      	b.n	800d888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d888:	697b      	ldr	r3, [r7, #20]
	}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3728      	adds	r7, #40	; 0x28
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d892:	b580      	push	{r7, lr}
 800d894:	b08c      	sub	sp, #48	; 0x30
 800d896:	af04      	add	r7, sp, #16
 800d898:	60f8      	str	r0, [r7, #12]
 800d89a:	60b9      	str	r1, [r7, #8]
 800d89c:	603b      	str	r3, [r7, #0]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8a2:	88fb      	ldrh	r3, [r7, #6]
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f001 f9f6 	bl	800ec98 <pvPortMalloc>
 800d8ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00e      	beq.n	800d8d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8b4:	20b4      	movs	r0, #180	; 0xb4
 800d8b6:	f001 f9ef 	bl	800ec98 <pvPortMalloc>
 800d8ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d003      	beq.n	800d8ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	631a      	str	r2, [r3, #48]	; 0x30
 800d8c8:	e005      	b.n	800d8d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8ca:	6978      	ldr	r0, [r7, #20]
 800d8cc:	f001 fab0 	bl	800ee30 <vPortFree>
 800d8d0:	e001      	b.n	800d8d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d017      	beq.n	800d90c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8e4:	88fa      	ldrh	r2, [r7, #6]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9303      	str	r3, [sp, #12]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	9302      	str	r3, [sp, #8]
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 f80e 	bl	800d91c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d900:	69f8      	ldr	r0, [r7, #28]
 800d902:	f000 f8a9 	bl	800da58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d906:	2301      	movs	r3, #1
 800d908:	61bb      	str	r3, [r7, #24]
 800d90a:	e002      	b.n	800d912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d912:	69bb      	ldr	r3, [r7, #24]
	}
 800d914:	4618      	mov	r0, r3
 800d916:	3720      	adds	r7, #32
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b088      	sub	sp, #32
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d934:	3b01      	subs	r3, #1
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	f023 0307 	bic.w	r3, r3, #7
 800d942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00a      	beq.n	800d964 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	617b      	str	r3, [r7, #20]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01f      	beq.n	800d9aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d96a:	2300      	movs	r3, #0
 800d96c:	61fb      	str	r3, [r7, #28]
 800d96e:	e012      	b.n	800d996 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	4413      	add	r3, r2
 800d976:	7819      	ldrb	r1, [r3, #0]
 800d978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	4413      	add	r3, r2
 800d97e:	3334      	adds	r3, #52	; 0x34
 800d980:	460a      	mov	r2, r1
 800d982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4413      	add	r3, r2
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	3301      	adds	r3, #1
 800d994:	61fb      	str	r3, [r7, #28]
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	2b0f      	cmp	r3, #15
 800d99a:	d9e9      	bls.n	800d970 <prvInitialiseNewTask+0x54>
 800d99c:	e000      	b.n	800d9a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800d99e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9a8:	e003      	b.n	800d9b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	2b06      	cmp	r3, #6
 800d9b6:	d901      	bls.n	800d9bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9b8:	2306      	movs	r3, #6
 800d9ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff f8a3 	bl	800cb1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	3318      	adds	r3, #24
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff f89e 	bl	800cb1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	f1c3 0207 	rsb	r2, r3, #7
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	2200      	movs	r2, #0
 800da04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0a:	334c      	adds	r3, #76	; 0x4c
 800da0c:	2260      	movs	r2, #96	; 0x60
 800da0e:	2100      	movs	r1, #0
 800da10:	4618      	mov	r0, r3
 800da12:	f001 fb65 	bl	800f0e0 <memset>
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	4a0c      	ldr	r2, [pc, #48]	; (800da4c <prvInitialiseNewTask+0x130>)
 800da1a:	651a      	str	r2, [r3, #80]	; 0x50
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	4a0c      	ldr	r2, [pc, #48]	; (800da50 <prvInitialiseNewTask+0x134>)
 800da20:	655a      	str	r2, [r3, #84]	; 0x54
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	4a0b      	ldr	r2, [pc, #44]	; (800da54 <prvInitialiseNewTask+0x138>)
 800da26:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	68f9      	ldr	r1, [r7, #12]
 800da2c:	69b8      	ldr	r0, [r7, #24]
 800da2e:	f000 fee5 	bl	800e7fc <pxPortInitialiseStack>
 800da32:	4602      	mov	r2, r0
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da44:	bf00      	nop
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	0800fcec 	.word	0x0800fcec
 800da50:	0800fd0c 	.word	0x0800fd0c
 800da54:	0800fccc 	.word	0x0800fccc

0800da58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da60:	f000 fff8 	bl	800ea54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da64:	4b2a      	ldr	r3, [pc, #168]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	4a29      	ldr	r2, [pc, #164]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da6e:	4b29      	ldr	r3, [pc, #164]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d109      	bne.n	800da8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da76:	4a27      	ldr	r2, [pc, #156]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d110      	bne.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da84:	f000 fbd6 	bl	800e234 <prvInitialiseTaskLists>
 800da88:	e00d      	b.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da8a:	4b23      	ldr	r3, [pc, #140]	; (800db18 <prvAddNewTaskToReadyList+0xc0>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d109      	bne.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da92:	4b20      	ldr	r3, [pc, #128]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d802      	bhi.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800daa0:	4a1c      	ldr	r2, [pc, #112]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daa6:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <prvAddNewTaskToReadyList+0xc4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	4a1b      	ldr	r2, [pc, #108]	; (800db1c <prvAddNewTaskToReadyList+0xc4>)
 800daae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	2201      	movs	r2, #1
 800dab6:	409a      	lsls	r2, r3
 800dab8:	4b19      	ldr	r3, [pc, #100]	; (800db20 <prvAddNewTaskToReadyList+0xc8>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	4a18      	ldr	r2, [pc, #96]	; (800db20 <prvAddNewTaskToReadyList+0xc8>)
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4a15      	ldr	r2, [pc, #84]	; (800db24 <prvAddNewTaskToReadyList+0xcc>)
 800dad0:	441a      	add	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7ff f82d 	bl	800cb38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dade:	f000 ffe9 	bl	800eab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dae2:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <prvAddNewTaskToReadyList+0xc0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800daea:	4b0a      	ldr	r3, [pc, #40]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d207      	bcs.n	800db08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800daf8:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <prvAddNewTaskToReadyList+0xd0>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20003614 	.word	0x20003614
 800db14:	20003514 	.word	0x20003514
 800db18:	20003620 	.word	0x20003620
 800db1c:	20003630 	.word	0x20003630
 800db20:	2000361c 	.word	0x2000361c
 800db24:	20003518 	.word	0x20003518
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d017      	beq.n	800db6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db3e:	4b13      	ldr	r3, [pc, #76]	; (800db8c <vTaskDelay+0x60>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <vTaskDelay+0x30>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	60bb      	str	r3, [r7, #8]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db5c:	f000 f884 	bl	800dc68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fde4 	bl	800e730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db68:	f000 f88c 	bl	800dc84 <xTaskResumeAll>
 800db6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d107      	bne.n	800db84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <vTaskDelay+0x64>)
 800db76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	2000363c 	.word	0x2000363c
 800db90:	e000ed04 	.word	0xe000ed04

0800db94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dba2:	463a      	mov	r2, r7
 800dba4:	1d39      	adds	r1, r7, #4
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f3 f9d4 	bl	8000f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	9202      	str	r2, [sp, #8]
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	460a      	mov	r2, r1
 800dbc2:	4921      	ldr	r1, [pc, #132]	; (800dc48 <vTaskStartScheduler+0xb4>)
 800dbc4:	4821      	ldr	r0, [pc, #132]	; (800dc4c <vTaskStartScheduler+0xb8>)
 800dbc6:	f7ff fe07 	bl	800d7d8 <xTaskCreateStatic>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a20      	ldr	r2, [pc, #128]	; (800dc50 <vTaskStartScheduler+0xbc>)
 800dbce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbd0:	4b1f      	ldr	r3, [pc, #124]	; (800dc50 <vTaskStartScheduler+0xbc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	e001      	b.n	800dbe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d11b      	bne.n	800dc20 <vTaskStartScheduler+0x8c>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	613b      	str	r3, [r7, #16]
}
 800dbfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dbfc:	4b15      	ldr	r3, [pc, #84]	; (800dc54 <vTaskStartScheduler+0xc0>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	334c      	adds	r3, #76	; 0x4c
 800dc02:	4a15      	ldr	r2, [pc, #84]	; (800dc58 <vTaskStartScheduler+0xc4>)
 800dc04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc06:	4b15      	ldr	r3, [pc, #84]	; (800dc5c <vTaskStartScheduler+0xc8>)
 800dc08:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc0e:	4b14      	ldr	r3, [pc, #80]	; (800dc60 <vTaskStartScheduler+0xcc>)
 800dc10:	2201      	movs	r2, #1
 800dc12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc14:	4b13      	ldr	r3, [pc, #76]	; (800dc64 <vTaskStartScheduler+0xd0>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc1a:	f000 fe79 	bl	800e910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc1e:	e00e      	b.n	800dc3e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d10a      	bne.n	800dc3e <vTaskStartScheduler+0xaa>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	60fb      	str	r3, [r7, #12]
}
 800dc3a:	bf00      	nop
 800dc3c:	e7fe      	b.n	800dc3c <vTaskStartScheduler+0xa8>
}
 800dc3e:	bf00      	nop
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	0800fc24 	.word	0x0800fc24
 800dc4c:	0800e205 	.word	0x0800e205
 800dc50:	20003638 	.word	0x20003638
 800dc54:	20003514 	.word	0x20003514
 800dc58:	200000a8 	.word	0x200000a8
 800dc5c:	20003634 	.word	0x20003634
 800dc60:	20003620 	.word	0x20003620
 800dc64:	20003618 	.word	0x20003618

0800dc68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc68:	b480      	push	{r7}
 800dc6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc6c:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <vTaskSuspendAll+0x18>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3301      	adds	r3, #1
 800dc72:	4a03      	ldr	r2, [pc, #12]	; (800dc80 <vTaskSuspendAll+0x18>)
 800dc74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc76:	bf00      	nop
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	2000363c 	.word	0x2000363c

0800dc84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc92:	4b41      	ldr	r3, [pc, #260]	; (800dd98 <xTaskResumeAll+0x114>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	603b      	str	r3, [r7, #0]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcb0:	f000 fed0 	bl	800ea54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dcb4:	4b38      	ldr	r3, [pc, #224]	; (800dd98 <xTaskResumeAll+0x114>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	4a37      	ldr	r2, [pc, #220]	; (800dd98 <xTaskResumeAll+0x114>)
 800dcbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcbe:	4b36      	ldr	r3, [pc, #216]	; (800dd98 <xTaskResumeAll+0x114>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d161      	bne.n	800dd8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcc6:	4b35      	ldr	r3, [pc, #212]	; (800dd9c <xTaskResumeAll+0x118>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d05d      	beq.n	800dd8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcce:	e02e      	b.n	800dd2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd0:	4b33      	ldr	r3, [pc, #204]	; (800dda0 <xTaskResumeAll+0x11c>)
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3318      	adds	r3, #24
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fe ff88 	bl	800cbf2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3304      	adds	r3, #4
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fe ff83 	bl	800cbf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	409a      	lsls	r2, r3
 800dcf4:	4b2b      	ldr	r3, [pc, #172]	; (800dda4 <xTaskResumeAll+0x120>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	4a2a      	ldr	r2, [pc, #168]	; (800dda4 <xTaskResumeAll+0x120>)
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4a27      	ldr	r2, [pc, #156]	; (800dda8 <xTaskResumeAll+0x124>)
 800dd0c:	441a      	add	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7fe ff0f 	bl	800cb38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1e:	4b23      	ldr	r3, [pc, #140]	; (800ddac <xTaskResumeAll+0x128>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d302      	bcc.n	800dd2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dd28:	4b21      	ldr	r3, [pc, #132]	; (800ddb0 <xTaskResumeAll+0x12c>)
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	; (800dda0 <xTaskResumeAll+0x11c>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1cc      	bne.n	800dcd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d001      	beq.n	800dd40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd3c:	f000 fb1c 	bl	800e378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd40:	4b1c      	ldr	r3, [pc, #112]	; (800ddb4 <xTaskResumeAll+0x130>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d010      	beq.n	800dd6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd4c:	f000 f836 	bl	800ddbc <xTaskIncrementTick>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dd56:	4b16      	ldr	r3, [pc, #88]	; (800ddb0 <xTaskResumeAll+0x12c>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1f1      	bne.n	800dd4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800dd68:	4b12      	ldr	r3, [pc, #72]	; (800ddb4 <xTaskResumeAll+0x130>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd6e:	4b10      	ldr	r3, [pc, #64]	; (800ddb0 <xTaskResumeAll+0x12c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d009      	beq.n	800dd8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd76:	2301      	movs	r3, #1
 800dd78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd7a:	4b0f      	ldr	r3, [pc, #60]	; (800ddb8 <xTaskResumeAll+0x134>)
 800dd7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd8a:	f000 fe93 	bl	800eab4 <vPortExitCritical>

	return xAlreadyYielded;
 800dd8e:	68bb      	ldr	r3, [r7, #8]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	2000363c 	.word	0x2000363c
 800dd9c:	20003614 	.word	0x20003614
 800dda0:	200035d4 	.word	0x200035d4
 800dda4:	2000361c 	.word	0x2000361c
 800dda8:	20003518 	.word	0x20003518
 800ddac:	20003514 	.word	0x20003514
 800ddb0:	20003628 	.word	0x20003628
 800ddb4:	20003624 	.word	0x20003624
 800ddb8:	e000ed04 	.word	0xe000ed04

0800ddbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc6:	4b4e      	ldr	r3, [pc, #312]	; (800df00 <xTaskIncrementTick+0x144>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f040 808e 	bne.w	800deec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ddd0:	4b4c      	ldr	r3, [pc, #304]	; (800df04 <xTaskIncrementTick+0x148>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddd8:	4a4a      	ldr	r2, [pc, #296]	; (800df04 <xTaskIncrementTick+0x148>)
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d120      	bne.n	800de26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dde4:	4b48      	ldr	r3, [pc, #288]	; (800df08 <xTaskIncrementTick+0x14c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00a      	beq.n	800de04 <xTaskIncrementTick+0x48>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	603b      	str	r3, [r7, #0]
}
 800de00:	bf00      	nop
 800de02:	e7fe      	b.n	800de02 <xTaskIncrementTick+0x46>
 800de04:	4b40      	ldr	r3, [pc, #256]	; (800df08 <xTaskIncrementTick+0x14c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	60fb      	str	r3, [r7, #12]
 800de0a:	4b40      	ldr	r3, [pc, #256]	; (800df0c <xTaskIncrementTick+0x150>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a3e      	ldr	r2, [pc, #248]	; (800df08 <xTaskIncrementTick+0x14c>)
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	4a3e      	ldr	r2, [pc, #248]	; (800df0c <xTaskIncrementTick+0x150>)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	4b3d      	ldr	r3, [pc, #244]	; (800df10 <xTaskIncrementTick+0x154>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	4a3c      	ldr	r2, [pc, #240]	; (800df10 <xTaskIncrementTick+0x154>)
 800de20:	6013      	str	r3, [r2, #0]
 800de22:	f000 faa9 	bl	800e378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de26:	4b3b      	ldr	r3, [pc, #236]	; (800df14 <xTaskIncrementTick+0x158>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	693a      	ldr	r2, [r7, #16]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d348      	bcc.n	800dec2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de30:	4b35      	ldr	r3, [pc, #212]	; (800df08 <xTaskIncrementTick+0x14c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d104      	bne.n	800de44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de3a:	4b36      	ldr	r3, [pc, #216]	; (800df14 <xTaskIncrementTick+0x158>)
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	601a      	str	r2, [r3, #0]
					break;
 800de42:	e03e      	b.n	800dec2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de44:	4b30      	ldr	r3, [pc, #192]	; (800df08 <xTaskIncrementTick+0x14c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d203      	bcs.n	800de64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de5c:	4a2d      	ldr	r2, [pc, #180]	; (800df14 <xTaskIncrementTick+0x158>)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de62:	e02e      	b.n	800dec2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	3304      	adds	r3, #4
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fe fec2 	bl	800cbf2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de72:	2b00      	cmp	r3, #0
 800de74:	d004      	beq.n	800de80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	3318      	adds	r3, #24
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe feb9 	bl	800cbf2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de84:	2201      	movs	r2, #1
 800de86:	409a      	lsls	r2, r3
 800de88:	4b23      	ldr	r3, [pc, #140]	; (800df18 <xTaskIncrementTick+0x15c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	4a22      	ldr	r2, [pc, #136]	; (800df18 <xTaskIncrementTick+0x15c>)
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4a1f      	ldr	r2, [pc, #124]	; (800df1c <xTaskIncrementTick+0x160>)
 800dea0:	441a      	add	r2, r3
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	f7fe fe45 	bl	800cb38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb2:	4b1b      	ldr	r3, [pc, #108]	; (800df20 <xTaskIncrementTick+0x164>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb8:	429a      	cmp	r2, r3
 800deba:	d3b9      	bcc.n	800de30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800debc:	2301      	movs	r3, #1
 800debe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dec0:	e7b6      	b.n	800de30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dec2:	4b17      	ldr	r3, [pc, #92]	; (800df20 <xTaskIncrementTick+0x164>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4914      	ldr	r1, [pc, #80]	; (800df1c <xTaskIncrementTick+0x160>)
 800deca:	4613      	mov	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	440b      	add	r3, r1
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d901      	bls.n	800dede <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800deda:	2301      	movs	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <xTaskIncrementTick+0x168>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dee6:	2301      	movs	r3, #1
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	e004      	b.n	800def6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800deec:	4b0e      	ldr	r3, [pc, #56]	; (800df28 <xTaskIncrementTick+0x16c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	4a0d      	ldr	r2, [pc, #52]	; (800df28 <xTaskIncrementTick+0x16c>)
 800def4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800def6:	697b      	ldr	r3, [r7, #20]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	2000363c 	.word	0x2000363c
 800df04:	20003618 	.word	0x20003618
 800df08:	200035cc 	.word	0x200035cc
 800df0c:	200035d0 	.word	0x200035d0
 800df10:	2000362c 	.word	0x2000362c
 800df14:	20003634 	.word	0x20003634
 800df18:	2000361c 	.word	0x2000361c
 800df1c:	20003518 	.word	0x20003518
 800df20:	20003514 	.word	0x20003514
 800df24:	20003628 	.word	0x20003628
 800df28:	20003624 	.word	0x20003624

0800df2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df32:	4b29      	ldr	r3, [pc, #164]	; (800dfd8 <vTaskSwitchContext+0xac>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df3a:	4b28      	ldr	r3, [pc, #160]	; (800dfdc <vTaskSwitchContext+0xb0>)
 800df3c:	2201      	movs	r2, #1
 800df3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df40:	e044      	b.n	800dfcc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800df42:	4b26      	ldr	r3, [pc, #152]	; (800dfdc <vTaskSwitchContext+0xb0>)
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df48:	4b25      	ldr	r3, [pc, #148]	; (800dfe0 <vTaskSwitchContext+0xb4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	fab3 f383 	clz	r3, r3
 800df54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	f1c3 031f 	rsb	r3, r3, #31
 800df5c:	617b      	str	r3, [r7, #20]
 800df5e:	4921      	ldr	r1, [pc, #132]	; (800dfe4 <vTaskSwitchContext+0xb8>)
 800df60:	697a      	ldr	r2, [r7, #20]
 800df62:	4613      	mov	r3, r2
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	4413      	add	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	440b      	add	r3, r1
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10a      	bne.n	800df88 <vTaskSwitchContext+0x5c>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	607b      	str	r3, [r7, #4]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <vTaskSwitchContext+0x5a>
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4a14      	ldr	r2, [pc, #80]	; (800dfe4 <vTaskSwitchContext+0xb8>)
 800df94:	4413      	add	r3, r2
 800df96:	613b      	str	r3, [r7, #16]
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	605a      	str	r2, [r3, #4]
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d104      	bne.n	800dfb8 <vTaskSwitchContext+0x8c>
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	605a      	str	r2, [r3, #4]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	4a0a      	ldr	r2, [pc, #40]	; (800dfe8 <vTaskSwitchContext+0xbc>)
 800dfc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfc2:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <vTaskSwitchContext+0xbc>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	334c      	adds	r3, #76	; 0x4c
 800dfc8:	4a08      	ldr	r2, [pc, #32]	; (800dfec <vTaskSwitchContext+0xc0>)
 800dfca:	6013      	str	r3, [r2, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	371c      	adds	r7, #28
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	2000363c 	.word	0x2000363c
 800dfdc:	20003628 	.word	0x20003628
 800dfe0:	2000361c 	.word	0x2000361c
 800dfe4:	20003518 	.word	0x20003518
 800dfe8:	20003514 	.word	0x20003514
 800dfec:	200000a8 	.word	0x200000a8

0800dff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10a      	bne.n	800e016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	60fb      	str	r3, [r7, #12]
}
 800e012:	bf00      	nop
 800e014:	e7fe      	b.n	800e014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e016:	4b07      	ldr	r3, [pc, #28]	; (800e034 <vTaskPlaceOnEventList+0x44>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3318      	adds	r3, #24
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7fe fdae 	bl	800cb80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e024:	2101      	movs	r1, #1
 800e026:	6838      	ldr	r0, [r7, #0]
 800e028:	f000 fb82 	bl	800e730 <prvAddCurrentTaskToDelayedList>
}
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20003514 	.word	0x20003514

0800e038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b086      	sub	sp, #24
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10a      	bne.n	800e064 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	60fb      	str	r3, [r7, #12]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3318      	adds	r3, #24
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fe fdc2 	bl	800cbf2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e06e:	4b1d      	ldr	r3, [pc, #116]	; (800e0e4 <xTaskRemoveFromEventList+0xac>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d11c      	bne.n	800e0b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	3304      	adds	r3, #4
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fdb9 	bl	800cbf2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e084:	2201      	movs	r2, #1
 800e086:	409a      	lsls	r2, r3
 800e088:	4b17      	ldr	r3, [pc, #92]	; (800e0e8 <xTaskRemoveFromEventList+0xb0>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4313      	orrs	r3, r2
 800e08e:	4a16      	ldr	r2, [pc, #88]	; (800e0e8 <xTaskRemoveFromEventList+0xb0>)
 800e090:	6013      	str	r3, [r2, #0]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4a13      	ldr	r2, [pc, #76]	; (800e0ec <xTaskRemoveFromEventList+0xb4>)
 800e0a0:	441a      	add	r2, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	f7fe fd45 	bl	800cb38 <vListInsertEnd>
 800e0ae:	e005      	b.n	800e0bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	3318      	adds	r3, #24
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	480e      	ldr	r0, [pc, #56]	; (800e0f0 <xTaskRemoveFromEventList+0xb8>)
 800e0b8:	f7fe fd3e 	bl	800cb38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <xTaskRemoveFromEventList+0xbc>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d905      	bls.n	800e0d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0ce:	4b0a      	ldr	r3, [pc, #40]	; (800e0f8 <xTaskRemoveFromEventList+0xc0>)
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	e001      	b.n	800e0da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0da:	697b      	ldr	r3, [r7, #20]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	2000363c 	.word	0x2000363c
 800e0e8:	2000361c 	.word	0x2000361c
 800e0ec:	20003518 	.word	0x20003518
 800e0f0:	200035d4 	.word	0x200035d4
 800e0f4:	20003514 	.word	0x20003514
 800e0f8:	20003628 	.word	0x20003628

0800e0fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e104:	4b06      	ldr	r3, [pc, #24]	; (800e120 <vTaskInternalSetTimeOutState+0x24>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e10c:	4b05      	ldr	r3, [pc, #20]	; (800e124 <vTaskInternalSetTimeOutState+0x28>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	605a      	str	r2, [r3, #4]
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	2000362c 	.word	0x2000362c
 800e124:	20003618 	.word	0x20003618

0800e128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	613b      	str	r3, [r7, #16]
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10a      	bne.n	800e16a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	60fb      	str	r3, [r7, #12]
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e16a:	f000 fc73 	bl	800ea54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e16e:	4b1d      	ldr	r3, [pc, #116]	; (800e1e4 <xTaskCheckForTimeOut+0xbc>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e186:	d102      	bne.n	800e18e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e188:	2300      	movs	r3, #0
 800e18a:	61fb      	str	r3, [r7, #28]
 800e18c:	e023      	b.n	800e1d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <xTaskCheckForTimeOut+0xc0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d007      	beq.n	800e1aa <xTaskCheckForTimeOut+0x82>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	69ba      	ldr	r2, [r7, #24]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d302      	bcc.n	800e1aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	61fb      	str	r3, [r7, #28]
 800e1a8:	e015      	b.n	800e1d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d20b      	bcs.n	800e1cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	1ad2      	subs	r2, r2, r3
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff ff9b 	bl	800e0fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	61fb      	str	r3, [r7, #28]
 800e1ca:	e004      	b.n	800e1d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1d6:	f000 fc6d 	bl	800eab4 <vPortExitCritical>

	return xReturn;
 800e1da:	69fb      	ldr	r3, [r7, #28]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3720      	adds	r7, #32
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	20003618 	.word	0x20003618
 800e1e8:	2000362c 	.word	0x2000362c

0800e1ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1f0:	4b03      	ldr	r3, [pc, #12]	; (800e200 <vTaskMissedYield+0x14>)
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	601a      	str	r2, [r3, #0]
}
 800e1f6:	bf00      	nop
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr
 800e200:	20003628 	.word	0x20003628

0800e204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e20c:	f000 f852 	bl	800e2b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e210:	4b06      	ldr	r3, [pc, #24]	; (800e22c <prvIdleTask+0x28>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d9f9      	bls.n	800e20c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e218:	4b05      	ldr	r3, [pc, #20]	; (800e230 <prvIdleTask+0x2c>)
 800e21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e228:	e7f0      	b.n	800e20c <prvIdleTask+0x8>
 800e22a:	bf00      	nop
 800e22c:	20003518 	.word	0x20003518
 800e230:	e000ed04 	.word	0xe000ed04

0800e234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e23a:	2300      	movs	r3, #0
 800e23c:	607b      	str	r3, [r7, #4]
 800e23e:	e00c      	b.n	800e25a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	4613      	mov	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4a12      	ldr	r2, [pc, #72]	; (800e294 <prvInitialiseTaskLists+0x60>)
 800e24c:	4413      	add	r3, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe fc45 	bl	800cade <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3301      	adds	r3, #1
 800e258:	607b      	str	r3, [r7, #4]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b06      	cmp	r3, #6
 800e25e:	d9ef      	bls.n	800e240 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e260:	480d      	ldr	r0, [pc, #52]	; (800e298 <prvInitialiseTaskLists+0x64>)
 800e262:	f7fe fc3c 	bl	800cade <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e266:	480d      	ldr	r0, [pc, #52]	; (800e29c <prvInitialiseTaskLists+0x68>)
 800e268:	f7fe fc39 	bl	800cade <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e26c:	480c      	ldr	r0, [pc, #48]	; (800e2a0 <prvInitialiseTaskLists+0x6c>)
 800e26e:	f7fe fc36 	bl	800cade <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e272:	480c      	ldr	r0, [pc, #48]	; (800e2a4 <prvInitialiseTaskLists+0x70>)
 800e274:	f7fe fc33 	bl	800cade <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e278:	480b      	ldr	r0, [pc, #44]	; (800e2a8 <prvInitialiseTaskLists+0x74>)
 800e27a:	f7fe fc30 	bl	800cade <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e27e:	4b0b      	ldr	r3, [pc, #44]	; (800e2ac <prvInitialiseTaskLists+0x78>)
 800e280:	4a05      	ldr	r2, [pc, #20]	; (800e298 <prvInitialiseTaskLists+0x64>)
 800e282:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e284:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <prvInitialiseTaskLists+0x7c>)
 800e286:	4a05      	ldr	r2, [pc, #20]	; (800e29c <prvInitialiseTaskLists+0x68>)
 800e288:	601a      	str	r2, [r3, #0]
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20003518 	.word	0x20003518
 800e298:	200035a4 	.word	0x200035a4
 800e29c:	200035b8 	.word	0x200035b8
 800e2a0:	200035d4 	.word	0x200035d4
 800e2a4:	200035e8 	.word	0x200035e8
 800e2a8:	20003600 	.word	0x20003600
 800e2ac:	200035cc 	.word	0x200035cc
 800e2b0:	200035d0 	.word	0x200035d0

0800e2b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2ba:	e019      	b.n	800e2f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2bc:	f000 fbca 	bl	800ea54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c0:	4b10      	ldr	r3, [pc, #64]	; (800e304 <prvCheckTasksWaitingTermination+0x50>)
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fe fc90 	bl	800cbf2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <prvCheckTasksWaitingTermination+0x54>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	4a0b      	ldr	r2, [pc, #44]	; (800e308 <prvCheckTasksWaitingTermination+0x54>)
 800e2da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2dc:	4b0b      	ldr	r3, [pc, #44]	; (800e30c <prvCheckTasksWaitingTermination+0x58>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	4a0a      	ldr	r2, [pc, #40]	; (800e30c <prvCheckTasksWaitingTermination+0x58>)
 800e2e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2e6:	f000 fbe5 	bl	800eab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f810 	bl	800e310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2f0:	4b06      	ldr	r3, [pc, #24]	; (800e30c <prvCheckTasksWaitingTermination+0x58>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1e1      	bne.n	800e2bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200035e8 	.word	0x200035e8
 800e308:	20003614 	.word	0x20003614
 800e30c:	200035fc 	.word	0x200035fc

0800e310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	334c      	adds	r3, #76	; 0x4c
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 ffd5 	bl	800f2cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d108      	bne.n	800e33e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	4618      	mov	r0, r3
 800e332:	f000 fd7d 	bl	800ee30 <vPortFree>
				vPortFree( pxTCB );
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fd7a 	bl	800ee30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e33c:	e018      	b.n	800e370 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e344:	2b01      	cmp	r3, #1
 800e346:	d103      	bne.n	800e350 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fd71 	bl	800ee30 <vPortFree>
	}
 800e34e:	e00f      	b.n	800e370 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e356:	2b02      	cmp	r3, #2
 800e358:	d00a      	beq.n	800e370 <prvDeleteTCB+0x60>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	60fb      	str	r3, [r7, #12]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <prvDeleteTCB+0x5e>
	}
 800e370:	bf00      	nop
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e37e:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <prvResetNextTaskUnblockTime+0x38>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d104      	bne.n	800e392 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <prvResetNextTaskUnblockTime+0x3c>)
 800e38a:	f04f 32ff 	mov.w	r2, #4294967295
 800e38e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e390:	e008      	b.n	800e3a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e392:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <prvResetNextTaskUnblockTime+0x38>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	4a04      	ldr	r2, [pc, #16]	; (800e3b4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3a2:	6013      	str	r3, [r2, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	200035cc 	.word	0x200035cc
 800e3b4:	20003634 	.word	0x20003634

0800e3b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3be:	4b0b      	ldr	r3, [pc, #44]	; (800e3ec <xTaskGetSchedulerState+0x34>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	607b      	str	r3, [r7, #4]
 800e3ca:	e008      	b.n	800e3de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3cc:	4b08      	ldr	r3, [pc, #32]	; (800e3f0 <xTaskGetSchedulerState+0x38>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d102      	bne.n	800e3da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	e001      	b.n	800e3de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3de:	687b      	ldr	r3, [r7, #4]
	}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	20003620 	.word	0x20003620
 800e3f0:	2000363c 	.word	0x2000363c

0800e3f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e400:	2300      	movs	r3, #0
 800e402:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d05e      	beq.n	800e4c8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e40e:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <xTaskPriorityInherit+0xe0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e414:	429a      	cmp	r2, r3
 800e416:	d24e      	bcs.n	800e4b6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	699b      	ldr	r3, [r3, #24]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	db06      	blt.n	800e42e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e420:	4b2c      	ldr	r3, [pc, #176]	; (800e4d4 <xTaskPriorityInherit+0xe0>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e426:	f1c3 0207 	rsb	r2, r3, #7
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	6959      	ldr	r1, [r3, #20]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4a26      	ldr	r2, [pc, #152]	; (800e4d8 <xTaskPriorityInherit+0xe4>)
 800e440:	4413      	add	r3, r2
 800e442:	4299      	cmp	r1, r3
 800e444:	d12f      	bne.n	800e4a6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	3304      	adds	r3, #4
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fbd1 	bl	800cbf2 <uxListRemove>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45a:	2201      	movs	r2, #1
 800e45c:	fa02 f303 	lsl.w	r3, r2, r3
 800e460:	43da      	mvns	r2, r3
 800e462:	4b1e      	ldr	r3, [pc, #120]	; (800e4dc <xTaskPriorityInherit+0xe8>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4013      	ands	r3, r2
 800e468:	4a1c      	ldr	r2, [pc, #112]	; (800e4dc <xTaskPriorityInherit+0xe8>)
 800e46a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e46c:	4b19      	ldr	r3, [pc, #100]	; (800e4d4 <xTaskPriorityInherit+0xe0>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47a:	2201      	movs	r2, #1
 800e47c:	409a      	lsls	r2, r3
 800e47e:	4b17      	ldr	r3, [pc, #92]	; (800e4dc <xTaskPriorityInherit+0xe8>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4313      	orrs	r3, r2
 800e484:	4a15      	ldr	r2, [pc, #84]	; (800e4dc <xTaskPriorityInherit+0xe8>)
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4a10      	ldr	r2, [pc, #64]	; (800e4d8 <xTaskPriorityInherit+0xe4>)
 800e496:	441a      	add	r2, r3
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3304      	adds	r3, #4
 800e49c:	4619      	mov	r1, r3
 800e49e:	4610      	mov	r0, r2
 800e4a0:	f7fe fb4a 	bl	800cb38 <vListInsertEnd>
 800e4a4:	e004      	b.n	800e4b0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <xTaskPriorityInherit+0xe0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	e008      	b.n	800e4c8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ba:	4b06      	ldr	r3, [pc, #24]	; (800e4d4 <xTaskPriorityInherit+0xe0>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d201      	bcs.n	800e4c8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
	}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20003514 	.word	0x20003514
 800e4d8:	20003518 	.word	0x20003518
 800e4dc:	2000361c 	.word	0x2000361c

0800e4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d06e      	beq.n	800e5d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4f6:	4b3a      	ldr	r3, [pc, #232]	; (800e5e0 <xTaskPriorityDisinherit+0x100>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	693a      	ldr	r2, [r7, #16]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d00a      	beq.n	800e516 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	60fb      	str	r3, [r7, #12]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60bb      	str	r3, [r7, #8]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e538:	1e5a      	subs	r2, r3, #1
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e546:	429a      	cmp	r2, r3
 800e548:	d044      	beq.n	800e5d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d140      	bne.n	800e5d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	3304      	adds	r3, #4
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fb4b 	bl	800cbf2 <uxListRemove>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d115      	bne.n	800e58e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e566:	491f      	ldr	r1, [pc, #124]	; (800e5e4 <xTaskPriorityDisinherit+0x104>)
 800e568:	4613      	mov	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10a      	bne.n	800e58e <xTaskPriorityDisinherit+0xae>
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57c:	2201      	movs	r2, #1
 800e57e:	fa02 f303 	lsl.w	r3, r2, r3
 800e582:	43da      	mvns	r2, r3
 800e584:	4b18      	ldr	r3, [pc, #96]	; (800e5e8 <xTaskPriorityDisinherit+0x108>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4013      	ands	r3, r2
 800e58a:	4a17      	ldr	r2, [pc, #92]	; (800e5e8 <xTaskPriorityDisinherit+0x108>)
 800e58c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59a:	f1c3 0207 	rsb	r2, r3, #7
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	409a      	lsls	r2, r3
 800e5aa:	4b0f      	ldr	r3, [pc, #60]	; (800e5e8 <xTaskPriorityDisinherit+0x108>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	4a0d      	ldr	r2, [pc, #52]	; (800e5e8 <xTaskPriorityDisinherit+0x108>)
 800e5b2:	6013      	str	r3, [r2, #0]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	4413      	add	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <xTaskPriorityDisinherit+0x104>)
 800e5c2:	441a      	add	r2, r3
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	f7fe fab4 	bl	800cb38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5d4:	697b      	ldr	r3, [r7, #20]
	}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	20003514 	.word	0x20003514
 800e5e4:	20003518 	.word	0x20003518
 800e5e8:	2000361c 	.word	0x2000361c

0800e5ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b088      	sub	sp, #32
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d077      	beq.n	800e6f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	60fb      	str	r3, [r7, #12]
}
 800e61e:	bf00      	nop
 800e620:	e7fe      	b.n	800e620 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d902      	bls.n	800e632 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	e002      	b.n	800e638 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e636:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	69fa      	ldr	r2, [r7, #28]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d058      	beq.n	800e6f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d153      	bne.n	800e6f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e64c:	4b2b      	ldr	r3, [pc, #172]	; (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	69ba      	ldr	r2, [r7, #24]
 800e652:	429a      	cmp	r2, r3
 800e654:	d10a      	bne.n	800e66c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	60bb      	str	r3, [r7, #8]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	69fa      	ldr	r2, [r7, #28]
 800e676:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	db04      	blt.n	800e68a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	f1c3 0207 	rsb	r2, r3, #7
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	6959      	ldr	r1, [r3, #20]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4a19      	ldr	r2, [pc, #100]	; (800e700 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e69a:	4413      	add	r3, r2
 800e69c:	4299      	cmp	r1, r3
 800e69e:	d129      	bne.n	800e6f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fe faa4 	bl	800cbf2 <uxListRemove>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10a      	bne.n	800e6c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ba:	43da      	mvns	r2, r3
 800e6bc:	4b11      	ldr	r3, [pc, #68]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	4a10      	ldr	r2, [pc, #64]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e6c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	409a      	lsls	r2, r3
 800e6ce:	4b0d      	ldr	r3, [pc, #52]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	4a0b      	ldr	r2, [pc, #44]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6dc:	4613      	mov	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4413      	add	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4a06      	ldr	r2, [pc, #24]	; (800e700 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e6e6:	441a      	add	r2, r3
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	f7fe fa22 	bl	800cb38 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6f4:	bf00      	nop
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20003514 	.word	0x20003514
 800e700:	20003518 	.word	0x20003518
 800e704:	2000361c 	.word	0x2000361c

0800e708 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e708:	b480      	push	{r7}
 800e70a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e70c:	4b07      	ldr	r3, [pc, #28]	; (800e72c <pvTaskIncrementMutexHeldCount+0x24>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d004      	beq.n	800e71e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e714:	4b05      	ldr	r3, [pc, #20]	; (800e72c <pvTaskIncrementMutexHeldCount+0x24>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e71a:	3201      	adds	r2, #1
 800e71c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e71e:	4b03      	ldr	r3, [pc, #12]	; (800e72c <pvTaskIncrementMutexHeldCount+0x24>)
 800e720:	681b      	ldr	r3, [r3, #0]
	}
 800e722:	4618      	mov	r0, r3
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	20003514 	.word	0x20003514

0800e730 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e73a:	4b29      	ldr	r3, [pc, #164]	; (800e7e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e740:	4b28      	ldr	r3, [pc, #160]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3304      	adds	r3, #4
 800e746:	4618      	mov	r0, r3
 800e748:	f7fe fa53 	bl	800cbf2 <uxListRemove>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10b      	bne.n	800e76a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e752:	4b24      	ldr	r3, [pc, #144]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e758:	2201      	movs	r2, #1
 800e75a:	fa02 f303 	lsl.w	r3, r2, r3
 800e75e:	43da      	mvns	r2, r3
 800e760:	4b21      	ldr	r3, [pc, #132]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4013      	ands	r3, r2
 800e766:	4a20      	ldr	r2, [pc, #128]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e768:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e770:	d10a      	bne.n	800e788 <prvAddCurrentTaskToDelayedList+0x58>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d007      	beq.n	800e788 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e778:	4b1a      	ldr	r3, [pc, #104]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3304      	adds	r3, #4
 800e77e:	4619      	mov	r1, r3
 800e780:	481a      	ldr	r0, [pc, #104]	; (800e7ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800e782:	f7fe f9d9 	bl	800cb38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e786:	e026      	b.n	800e7d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e790:	4b14      	ldr	r3, [pc, #80]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d209      	bcs.n	800e7b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7a0:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7fe f9e7 	bl	800cb80 <vListInsert>
}
 800e7b2:	e010      	b.n	800e7d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7b4:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f7fe f9dd 	bl	800cb80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e7c6:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d202      	bcs.n	800e7d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e7d0:	4a09      	ldr	r2, [pc, #36]	; (800e7f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	6013      	str	r3, [r2, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20003618 	.word	0x20003618
 800e7e4:	20003514 	.word	0x20003514
 800e7e8:	2000361c 	.word	0x2000361c
 800e7ec:	20003600 	.word	0x20003600
 800e7f0:	200035d0 	.word	0x200035d0
 800e7f4:	200035cc 	.word	0x200035cc
 800e7f8:	20003634 	.word	0x20003634

0800e7fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	3b04      	subs	r3, #4
 800e80c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3b04      	subs	r3, #4
 800e81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	f023 0201 	bic.w	r2, r3, #1
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	3b04      	subs	r3, #4
 800e82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e82c:	4a0c      	ldr	r2, [pc, #48]	; (800e860 <pxPortInitialiseStack+0x64>)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3b14      	subs	r3, #20
 800e836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3b04      	subs	r3, #4
 800e842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f06f 0202 	mvn.w	r2, #2
 800e84a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	3b20      	subs	r3, #32
 800e850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e852:	68fb      	ldr	r3, [r7, #12]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3714      	adds	r7, #20
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr
 800e860:	0800e865 	.word	0x0800e865

0800e864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e86a:	2300      	movs	r3, #0
 800e86c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e86e:	4b12      	ldr	r3, [pc, #72]	; (800e8b8 <prvTaskExitError+0x54>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e876:	d00a      	beq.n	800e88e <prvTaskExitError+0x2a>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	60fb      	str	r3, [r7, #12]
}
 800e88a:	bf00      	nop
 800e88c:	e7fe      	b.n	800e88c <prvTaskExitError+0x28>
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	60bb      	str	r3, [r7, #8]
}
 800e8a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8a2:	bf00      	nop
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0fc      	beq.n	800e8a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	200000a4 	.word	0x200000a4
 800e8bc:	00000000 	.word	0x00000000

0800e8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <pxCurrentTCBConst2>)
 800e8c2:	6819      	ldr	r1, [r3, #0]
 800e8c4:	6808      	ldr	r0, [r1, #0]
 800e8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ca:	f380 8809 	msr	PSP, r0
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f04f 0000 	mov.w	r0, #0
 800e8d6:	f380 8811 	msr	BASEPRI, r0
 800e8da:	4770      	bx	lr
 800e8dc:	f3af 8000 	nop.w

0800e8e0 <pxCurrentTCBConst2>:
 800e8e0:	20003514 	.word	0x20003514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8e4:	bf00      	nop
 800e8e6:	bf00      	nop

0800e8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8e8:	4808      	ldr	r0, [pc, #32]	; (800e90c <prvPortStartFirstTask+0x24>)
 800e8ea:	6800      	ldr	r0, [r0, #0]
 800e8ec:	6800      	ldr	r0, [r0, #0]
 800e8ee:	f380 8808 	msr	MSP, r0
 800e8f2:	f04f 0000 	mov.w	r0, #0
 800e8f6:	f380 8814 	msr	CONTROL, r0
 800e8fa:	b662      	cpsie	i
 800e8fc:	b661      	cpsie	f
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	df00      	svc	0
 800e908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e90a:	bf00      	nop
 800e90c:	e000ed08 	.word	0xe000ed08

0800e910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b086      	sub	sp, #24
 800e914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e916:	4b46      	ldr	r3, [pc, #280]	; (800ea30 <xPortStartScheduler+0x120>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a46      	ldr	r2, [pc, #280]	; (800ea34 <xPortStartScheduler+0x124>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d10a      	bne.n	800e936 <xPortStartScheduler+0x26>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	613b      	str	r3, [r7, #16]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e936:	4b3e      	ldr	r3, [pc, #248]	; (800ea30 <xPortStartScheduler+0x120>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a3f      	ldr	r2, [pc, #252]	; (800ea38 <xPortStartScheduler+0x128>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d10a      	bne.n	800e956 <xPortStartScheduler+0x46>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	60fb      	str	r3, [r7, #12]
}
 800e952:	bf00      	nop
 800e954:	e7fe      	b.n	800e954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e956:	4b39      	ldr	r3, [pc, #228]	; (800ea3c <xPortStartScheduler+0x12c>)
 800e958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	22ff      	movs	r2, #255	; 0xff
 800e966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e970:	78fb      	ldrb	r3, [r7, #3]
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	4b31      	ldr	r3, [pc, #196]	; (800ea40 <xPortStartScheduler+0x130>)
 800e97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e97e:	4b31      	ldr	r3, [pc, #196]	; (800ea44 <xPortStartScheduler+0x134>)
 800e980:	2207      	movs	r2, #7
 800e982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e984:	e009      	b.n	800e99a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e986:	4b2f      	ldr	r3, [pc, #188]	; (800ea44 <xPortStartScheduler+0x134>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	4a2d      	ldr	r2, [pc, #180]	; (800ea44 <xPortStartScheduler+0x134>)
 800e98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	005b      	lsls	r3, r3, #1
 800e996:	b2db      	uxtb	r3, r3
 800e998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e99a:	78fb      	ldrb	r3, [r7, #3]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a2:	2b80      	cmp	r3, #128	; 0x80
 800e9a4:	d0ef      	beq.n	800e986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9a6:	4b27      	ldr	r3, [pc, #156]	; (800ea44 <xPortStartScheduler+0x134>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f1c3 0307 	rsb	r3, r3, #7
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	d00a      	beq.n	800e9c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	60bb      	str	r3, [r7, #8]
}
 800e9c4:	bf00      	nop
 800e9c6:	e7fe      	b.n	800e9c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ea44 <xPortStartScheduler+0x134>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	021b      	lsls	r3, r3, #8
 800e9ce:	4a1d      	ldr	r2, [pc, #116]	; (800ea44 <xPortStartScheduler+0x134>)
 800e9d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ea44 <xPortStartScheduler+0x134>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9da:	4a1a      	ldr	r2, [pc, #104]	; (800ea44 <xPortStartScheduler+0x134>)
 800e9dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9e6:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <xPortStartScheduler+0x138>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <xPortStartScheduler+0x138>)
 800e9ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9f2:	4b15      	ldr	r3, [pc, #84]	; (800ea48 <xPortStartScheduler+0x138>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a14      	ldr	r2, [pc, #80]	; (800ea48 <xPortStartScheduler+0x138>)
 800e9f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9fe:	f000 f8dd 	bl	800ebbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <xPortStartScheduler+0x13c>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea08:	f000 f8fc 	bl	800ec04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea0c:	4b10      	ldr	r3, [pc, #64]	; (800ea50 <xPortStartScheduler+0x140>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a0f      	ldr	r2, [pc, #60]	; (800ea50 <xPortStartScheduler+0x140>)
 800ea12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea18:	f7ff ff66 	bl	800e8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea1c:	f7ff fa86 	bl	800df2c <vTaskSwitchContext>
	prvTaskExitError();
 800ea20:	f7ff ff20 	bl	800e864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	e000ed00 	.word	0xe000ed00
 800ea34:	410fc271 	.word	0x410fc271
 800ea38:	410fc270 	.word	0x410fc270
 800ea3c:	e000e400 	.word	0xe000e400
 800ea40:	20003640 	.word	0x20003640
 800ea44:	20003644 	.word	0x20003644
 800ea48:	e000ed20 	.word	0xe000ed20
 800ea4c:	200000a4 	.word	0x200000a4
 800ea50:	e000ef34 	.word	0xe000ef34

0800ea54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	607b      	str	r3, [r7, #4]
}
 800ea6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea6e:	4b0f      	ldr	r3, [pc, #60]	; (800eaac <vPortEnterCritical+0x58>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3301      	adds	r3, #1
 800ea74:	4a0d      	ldr	r2, [pc, #52]	; (800eaac <vPortEnterCritical+0x58>)
 800ea76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea78:	4b0c      	ldr	r3, [pc, #48]	; (800eaac <vPortEnterCritical+0x58>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d10f      	bne.n	800eaa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea80:	4b0b      	ldr	r3, [pc, #44]	; (800eab0 <vPortEnterCritical+0x5c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00a      	beq.n	800eaa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	603b      	str	r3, [r7, #0]
}
 800ea9c:	bf00      	nop
 800ea9e:	e7fe      	b.n	800ea9e <vPortEnterCritical+0x4a>
	}
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	200000a4 	.word	0x200000a4
 800eab0:	e000ed04 	.word	0xe000ed04

0800eab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaba:	4b12      	ldr	r3, [pc, #72]	; (800eb04 <vPortExitCritical+0x50>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10a      	bne.n	800ead8 <vPortExitCritical+0x24>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	607b      	str	r3, [r7, #4]
}
 800ead4:	bf00      	nop
 800ead6:	e7fe      	b.n	800ead6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ead8:	4b0a      	ldr	r3, [pc, #40]	; (800eb04 <vPortExitCritical+0x50>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3b01      	subs	r3, #1
 800eade:	4a09      	ldr	r2, [pc, #36]	; (800eb04 <vPortExitCritical+0x50>)
 800eae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eae2:	4b08      	ldr	r3, [pc, #32]	; (800eb04 <vPortExitCritical+0x50>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d105      	bne.n	800eaf6 <vPortExitCritical+0x42>
 800eaea:	2300      	movs	r3, #0
 800eaec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	f383 8811 	msr	BASEPRI, r3
}
 800eaf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	200000a4 	.word	0x200000a4
	...

0800eb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb10:	f3ef 8009 	mrs	r0, PSP
 800eb14:	f3bf 8f6f 	isb	sy
 800eb18:	4b15      	ldr	r3, [pc, #84]	; (800eb70 <pxCurrentTCBConst>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	f01e 0f10 	tst.w	lr, #16
 800eb20:	bf08      	it	eq
 800eb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2a:	6010      	str	r0, [r2, #0]
 800eb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb34:	f380 8811 	msr	BASEPRI, r0
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f7ff f9f4 	bl	800df2c <vTaskSwitchContext>
 800eb44:	f04f 0000 	mov.w	r0, #0
 800eb48:	f380 8811 	msr	BASEPRI, r0
 800eb4c:	bc09      	pop	{r0, r3}
 800eb4e:	6819      	ldr	r1, [r3, #0]
 800eb50:	6808      	ldr	r0, [r1, #0]
 800eb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb56:	f01e 0f10 	tst.w	lr, #16
 800eb5a:	bf08      	it	eq
 800eb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb60:	f380 8809 	msr	PSP, r0
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	f3af 8000 	nop.w

0800eb70 <pxCurrentTCBConst>:
 800eb70:	20003514 	.word	0x20003514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop

0800eb78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb82:	f383 8811 	msr	BASEPRI, r3
 800eb86:	f3bf 8f6f 	isb	sy
 800eb8a:	f3bf 8f4f 	dsb	sy
 800eb8e:	607b      	str	r3, [r7, #4]
}
 800eb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb92:	f7ff f913 	bl	800ddbc <xTaskIncrementTick>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb9c:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <SysTick_Handler+0x40>)
 800eb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	2300      	movs	r3, #0
 800eba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	f383 8811 	msr	BASEPRI, r3
}
 800ebae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	e000ed04 	.word	0xe000ed04

0800ebbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebc0:	4b0b      	ldr	r3, [pc, #44]	; (800ebf0 <vPortSetupTimerInterrupt+0x34>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebc6:	4b0b      	ldr	r3, [pc, #44]	; (800ebf4 <vPortSetupTimerInterrupt+0x38>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebcc:	4b0a      	ldr	r3, [pc, #40]	; (800ebf8 <vPortSetupTimerInterrupt+0x3c>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a0a      	ldr	r2, [pc, #40]	; (800ebfc <vPortSetupTimerInterrupt+0x40>)
 800ebd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebd6:	099b      	lsrs	r3, r3, #6
 800ebd8:	4a09      	ldr	r2, [pc, #36]	; (800ec00 <vPortSetupTimerInterrupt+0x44>)
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebde:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <vPortSetupTimerInterrupt+0x34>)
 800ebe0:	2207      	movs	r2, #7
 800ebe2:	601a      	str	r2, [r3, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	e000e010 	.word	0xe000e010
 800ebf4:	e000e018 	.word	0xe000e018
 800ebf8:	20000088 	.word	0x20000088
 800ebfc:	10624dd3 	.word	0x10624dd3
 800ec00:	e000e014 	.word	0xe000e014

0800ec04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec14 <vPortEnableVFP+0x10>
 800ec08:	6801      	ldr	r1, [r0, #0]
 800ec0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec0e:	6001      	str	r1, [r0, #0]
 800ec10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec12:	bf00      	nop
 800ec14:	e000ed88 	.word	0xe000ed88

0800ec18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec1e:	f3ef 8305 	mrs	r3, IPSR
 800ec22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b0f      	cmp	r3, #15
 800ec28:	d914      	bls.n	800ec54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec2a:	4a17      	ldr	r2, [pc, #92]	; (800ec88 <vPortValidateInterruptPriority+0x70>)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	4413      	add	r3, r2
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec34:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <vPortValidateInterruptPriority+0x74>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	7afa      	ldrb	r2, [r7, #11]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d20a      	bcs.n	800ec54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	607b      	str	r3, [r7, #4]
}
 800ec50:	bf00      	nop
 800ec52:	e7fe      	b.n	800ec52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec54:	4b0e      	ldr	r3, [pc, #56]	; (800ec90 <vPortValidateInterruptPriority+0x78>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec5c:	4b0d      	ldr	r3, [pc, #52]	; (800ec94 <vPortValidateInterruptPriority+0x7c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d90a      	bls.n	800ec7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	603b      	str	r3, [r7, #0]
}
 800ec76:	bf00      	nop
 800ec78:	e7fe      	b.n	800ec78 <vPortValidateInterruptPriority+0x60>
	}
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	e000e3f0 	.word	0xe000e3f0
 800ec8c:	20003640 	.word	0x20003640
 800ec90:	e000ed0c 	.word	0xe000ed0c
 800ec94:	20003644 	.word	0x20003644

0800ec98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08a      	sub	sp, #40	; 0x28
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eca4:	f7fe ffe0 	bl	800dc68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eca8:	4b5b      	ldr	r3, [pc, #364]	; (800ee18 <pvPortMalloc+0x180>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecb0:	f000 f920 	bl	800eef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecb4:	4b59      	ldr	r3, [pc, #356]	; (800ee1c <pvPortMalloc+0x184>)
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f040 8093 	bne.w	800ede8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d01d      	beq.n	800ed04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ecc8:	2208      	movs	r2, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4413      	add	r3, r2
 800ecce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d014      	beq.n	800ed04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f023 0307 	bic.w	r3, r3, #7
 800ece0:	3308      	adds	r3, #8
 800ece2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f003 0307 	and.w	r3, r3, #7
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00a      	beq.n	800ed04 <pvPortMalloc+0x6c>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	617b      	str	r3, [r7, #20]
}
 800ed00:	bf00      	nop
 800ed02:	e7fe      	b.n	800ed02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d06e      	beq.n	800ede8 <pvPortMalloc+0x150>
 800ed0a:	4b45      	ldr	r3, [pc, #276]	; (800ee20 <pvPortMalloc+0x188>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d869      	bhi.n	800ede8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed14:	4b43      	ldr	r3, [pc, #268]	; (800ee24 <pvPortMalloc+0x18c>)
 800ed16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed18:	4b42      	ldr	r3, [pc, #264]	; (800ee24 <pvPortMalloc+0x18c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed1e:	e004      	b.n	800ed2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d903      	bls.n	800ed3c <pvPortMalloc+0xa4>
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1f1      	bne.n	800ed20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed3c:	4b36      	ldr	r3, [pc, #216]	; (800ee18 <pvPortMalloc+0x180>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d050      	beq.n	800ede8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed46:	6a3b      	ldr	r3, [r7, #32]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2208      	movs	r2, #8
 800ed4c:	4413      	add	r3, r2
 800ed4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	1ad2      	subs	r2, r2, r3
 800ed60:	2308      	movs	r3, #8
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d91f      	bls.n	800eda8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <pvPortMalloc+0xf8>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	613b      	str	r3, [r7, #16]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	1ad2      	subs	r2, r2, r3
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eda2:	69b8      	ldr	r0, [r7, #24]
 800eda4:	f000 f908 	bl	800efb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eda8:	4b1d      	ldr	r3, [pc, #116]	; (800ee20 <pvPortMalloc+0x188>)
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	4a1b      	ldr	r2, [pc, #108]	; (800ee20 <pvPortMalloc+0x188>)
 800edb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edb6:	4b1a      	ldr	r3, [pc, #104]	; (800ee20 <pvPortMalloc+0x188>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	4b1b      	ldr	r3, [pc, #108]	; (800ee28 <pvPortMalloc+0x190>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d203      	bcs.n	800edca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edc2:	4b17      	ldr	r3, [pc, #92]	; (800ee20 <pvPortMalloc+0x188>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a18      	ldr	r2, [pc, #96]	; (800ee28 <pvPortMalloc+0x190>)
 800edc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	4b13      	ldr	r3, [pc, #76]	; (800ee1c <pvPortMalloc+0x184>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	431a      	orrs	r2, r3
 800edd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	2200      	movs	r2, #0
 800eddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800edde:	4b13      	ldr	r3, [pc, #76]	; (800ee2c <pvPortMalloc+0x194>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	4a11      	ldr	r2, [pc, #68]	; (800ee2c <pvPortMalloc+0x194>)
 800ede6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ede8:	f7fe ff4c 	bl	800dc84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	f003 0307 	and.w	r3, r3, #7
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00a      	beq.n	800ee0c <pvPortMalloc+0x174>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	60fb      	str	r3, [r7, #12]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <pvPortMalloc+0x172>
	return pvReturn;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3728      	adds	r7, #40	; 0x28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	20007250 	.word	0x20007250
 800ee1c:	20007264 	.word	0x20007264
 800ee20:	20007254 	.word	0x20007254
 800ee24:	20007248 	.word	0x20007248
 800ee28:	20007258 	.word	0x20007258
 800ee2c:	2000725c 	.word	0x2000725c

0800ee30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d04d      	beq.n	800eede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee42:	2308      	movs	r3, #8
 800ee44:	425b      	negs	r3, r3
 800ee46:	697a      	ldr	r2, [r7, #20]
 800ee48:	4413      	add	r3, r2
 800ee4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	685a      	ldr	r2, [r3, #4]
 800ee54:	4b24      	ldr	r3, [pc, #144]	; (800eee8 <vPortFree+0xb8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4013      	ands	r3, r2
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10a      	bne.n	800ee74 <vPortFree+0x44>
	__asm volatile
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	60fb      	str	r3, [r7, #12]
}
 800ee70:	bf00      	nop
 800ee72:	e7fe      	b.n	800ee72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00a      	beq.n	800ee92 <vPortFree+0x62>
	__asm volatile
 800ee7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	60bb      	str	r3, [r7, #8]
}
 800ee8e:	bf00      	nop
 800ee90:	e7fe      	b.n	800ee90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <vPortFree+0xb8>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d01e      	beq.n	800eede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d11a      	bne.n	800eede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	4b0e      	ldr	r3, [pc, #56]	; (800eee8 <vPortFree+0xb8>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	43db      	mvns	r3, r3
 800eeb2:	401a      	ands	r2, r3
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eeb8:	f7fe fed6 	bl	800dc68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	4b0a      	ldr	r3, [pc, #40]	; (800eeec <vPortFree+0xbc>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4413      	add	r3, r2
 800eec6:	4a09      	ldr	r2, [pc, #36]	; (800eeec <vPortFree+0xbc>)
 800eec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eeca:	6938      	ldr	r0, [r7, #16]
 800eecc:	f000 f874 	bl	800efb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eed0:	4b07      	ldr	r3, [pc, #28]	; (800eef0 <vPortFree+0xc0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3301      	adds	r3, #1
 800eed6:	4a06      	ldr	r2, [pc, #24]	; (800eef0 <vPortFree+0xc0>)
 800eed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eeda:	f7fe fed3 	bl	800dc84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eede:	bf00      	nop
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20007264 	.word	0x20007264
 800eeec:	20007254 	.word	0x20007254
 800eef0:	20007260 	.word	0x20007260

0800eef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eefa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eefe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef00:	4b27      	ldr	r3, [pc, #156]	; (800efa0 <prvHeapInit+0xac>)
 800ef02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f003 0307 	and.w	r3, r3, #7
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00c      	beq.n	800ef28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3307      	adds	r3, #7
 800ef12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f023 0307 	bic.w	r3, r3, #7
 800ef1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	1ad3      	subs	r3, r2, r3
 800ef22:	4a1f      	ldr	r2, [pc, #124]	; (800efa0 <prvHeapInit+0xac>)
 800ef24:	4413      	add	r3, r2
 800ef26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef2c:	4a1d      	ldr	r2, [pc, #116]	; (800efa4 <prvHeapInit+0xb0>)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef32:	4b1c      	ldr	r3, [pc, #112]	; (800efa4 <prvHeapInit+0xb0>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef40:	2208      	movs	r2, #8
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	1a9b      	subs	r3, r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f023 0307 	bic.w	r3, r3, #7
 800ef4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4a15      	ldr	r2, [pc, #84]	; (800efa8 <prvHeapInit+0xb4>)
 800ef54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef56:	4b14      	ldr	r3, [pc, #80]	; (800efa8 <prvHeapInit+0xb4>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef5e:	4b12      	ldr	r3, [pc, #72]	; (800efa8 <prvHeapInit+0xb4>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	1ad2      	subs	r2, r2, r3
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef74:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <prvHeapInit+0xb4>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	4a0a      	ldr	r2, [pc, #40]	; (800efac <prvHeapInit+0xb8>)
 800ef82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	4a09      	ldr	r2, [pc, #36]	; (800efb0 <prvHeapInit+0xbc>)
 800ef8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef8c:	4b09      	ldr	r3, [pc, #36]	; (800efb4 <prvHeapInit+0xc0>)
 800ef8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	20003648 	.word	0x20003648
 800efa4:	20007248 	.word	0x20007248
 800efa8:	20007250 	.word	0x20007250
 800efac:	20007258 	.word	0x20007258
 800efb0:	20007254 	.word	0x20007254
 800efb4:	20007264 	.word	0x20007264

0800efb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efc0:	4b28      	ldr	r3, [pc, #160]	; (800f064 <prvInsertBlockIntoFreeList+0xac>)
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	e002      	b.n	800efcc <prvInsertBlockIntoFreeList+0x14>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d8f7      	bhi.n	800efc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	4413      	add	r3, r2
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d108      	bne.n	800effa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	685a      	ldr	r2, [r3, #4]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	441a      	add	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	441a      	add	r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d118      	bne.n	800f040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <prvInsertBlockIntoFreeList+0xb0>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	429a      	cmp	r2, r3
 800f018:	d00d      	beq.n	800f036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	441a      	add	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	e008      	b.n	800f048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f036:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <prvInsertBlockIntoFreeList+0xb0>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	e003      	b.n	800f048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d002      	beq.n	800f056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f056:	bf00      	nop
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	20007248 	.word	0x20007248
 800f068:	20007250 	.word	0x20007250

0800f06c <__errno>:
 800f06c:	4b01      	ldr	r3, [pc, #4]	; (800f074 <__errno+0x8>)
 800f06e:	6818      	ldr	r0, [r3, #0]
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	200000a8 	.word	0x200000a8

0800f078 <__libc_init_array>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	4d0d      	ldr	r5, [pc, #52]	; (800f0b0 <__libc_init_array+0x38>)
 800f07c:	4c0d      	ldr	r4, [pc, #52]	; (800f0b4 <__libc_init_array+0x3c>)
 800f07e:	1b64      	subs	r4, r4, r5
 800f080:	10a4      	asrs	r4, r4, #2
 800f082:	2600      	movs	r6, #0
 800f084:	42a6      	cmp	r6, r4
 800f086:	d109      	bne.n	800f09c <__libc_init_array+0x24>
 800f088:	4d0b      	ldr	r5, [pc, #44]	; (800f0b8 <__libc_init_array+0x40>)
 800f08a:	4c0c      	ldr	r4, [pc, #48]	; (800f0bc <__libc_init_array+0x44>)
 800f08c:	f000 fcf8 	bl	800fa80 <_init>
 800f090:	1b64      	subs	r4, r4, r5
 800f092:	10a4      	asrs	r4, r4, #2
 800f094:	2600      	movs	r6, #0
 800f096:	42a6      	cmp	r6, r4
 800f098:	d105      	bne.n	800f0a6 <__libc_init_array+0x2e>
 800f09a:	bd70      	pop	{r4, r5, r6, pc}
 800f09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0a0:	4798      	blx	r3
 800f0a2:	3601      	adds	r6, #1
 800f0a4:	e7ee      	b.n	800f084 <__libc_init_array+0xc>
 800f0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0aa:	4798      	blx	r3
 800f0ac:	3601      	adds	r6, #1
 800f0ae:	e7f2      	b.n	800f096 <__libc_init_array+0x1e>
 800f0b0:	0800fd68 	.word	0x0800fd68
 800f0b4:	0800fd68 	.word	0x0800fd68
 800f0b8:	0800fd68 	.word	0x0800fd68
 800f0bc:	0800fd6c 	.word	0x0800fd6c

0800f0c0 <__retarget_lock_acquire_recursive>:
 800f0c0:	4770      	bx	lr

0800f0c2 <__retarget_lock_release_recursive>:
 800f0c2:	4770      	bx	lr

0800f0c4 <memcpy>:
 800f0c4:	440a      	add	r2, r1
 800f0c6:	4291      	cmp	r1, r2
 800f0c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0cc:	d100      	bne.n	800f0d0 <memcpy+0xc>
 800f0ce:	4770      	bx	lr
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0da:	4291      	cmp	r1, r2
 800f0dc:	d1f9      	bne.n	800f0d2 <memcpy+0xe>
 800f0de:	bd10      	pop	{r4, pc}

0800f0e0 <memset>:
 800f0e0:	4402      	add	r2, r0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d100      	bne.n	800f0ea <memset+0xa>
 800f0e8:	4770      	bx	lr
 800f0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800f0ee:	e7f9      	b.n	800f0e4 <memset+0x4>

0800f0f0 <_free_r>:
 800f0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0f2:	2900      	cmp	r1, #0
 800f0f4:	d044      	beq.n	800f180 <_free_r+0x90>
 800f0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0fa:	9001      	str	r0, [sp, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800f102:	bfb8      	it	lt
 800f104:	18e4      	addlt	r4, r4, r3
 800f106:	f000 f96d 	bl	800f3e4 <__malloc_lock>
 800f10a:	4a1e      	ldr	r2, [pc, #120]	; (800f184 <_free_r+0x94>)
 800f10c:	9801      	ldr	r0, [sp, #4]
 800f10e:	6813      	ldr	r3, [r2, #0]
 800f110:	b933      	cbnz	r3, 800f120 <_free_r+0x30>
 800f112:	6063      	str	r3, [r4, #4]
 800f114:	6014      	str	r4, [r2, #0]
 800f116:	b003      	add	sp, #12
 800f118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f11c:	f000 b968 	b.w	800f3f0 <__malloc_unlock>
 800f120:	42a3      	cmp	r3, r4
 800f122:	d908      	bls.n	800f136 <_free_r+0x46>
 800f124:	6825      	ldr	r5, [r4, #0]
 800f126:	1961      	adds	r1, r4, r5
 800f128:	428b      	cmp	r3, r1
 800f12a:	bf01      	itttt	eq
 800f12c:	6819      	ldreq	r1, [r3, #0]
 800f12e:	685b      	ldreq	r3, [r3, #4]
 800f130:	1949      	addeq	r1, r1, r5
 800f132:	6021      	streq	r1, [r4, #0]
 800f134:	e7ed      	b.n	800f112 <_free_r+0x22>
 800f136:	461a      	mov	r2, r3
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	b10b      	cbz	r3, 800f140 <_free_r+0x50>
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	d9fa      	bls.n	800f136 <_free_r+0x46>
 800f140:	6811      	ldr	r1, [r2, #0]
 800f142:	1855      	adds	r5, r2, r1
 800f144:	42a5      	cmp	r5, r4
 800f146:	d10b      	bne.n	800f160 <_free_r+0x70>
 800f148:	6824      	ldr	r4, [r4, #0]
 800f14a:	4421      	add	r1, r4
 800f14c:	1854      	adds	r4, r2, r1
 800f14e:	42a3      	cmp	r3, r4
 800f150:	6011      	str	r1, [r2, #0]
 800f152:	d1e0      	bne.n	800f116 <_free_r+0x26>
 800f154:	681c      	ldr	r4, [r3, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	6053      	str	r3, [r2, #4]
 800f15a:	4421      	add	r1, r4
 800f15c:	6011      	str	r1, [r2, #0]
 800f15e:	e7da      	b.n	800f116 <_free_r+0x26>
 800f160:	d902      	bls.n	800f168 <_free_r+0x78>
 800f162:	230c      	movs	r3, #12
 800f164:	6003      	str	r3, [r0, #0]
 800f166:	e7d6      	b.n	800f116 <_free_r+0x26>
 800f168:	6825      	ldr	r5, [r4, #0]
 800f16a:	1961      	adds	r1, r4, r5
 800f16c:	428b      	cmp	r3, r1
 800f16e:	bf04      	itt	eq
 800f170:	6819      	ldreq	r1, [r3, #0]
 800f172:	685b      	ldreq	r3, [r3, #4]
 800f174:	6063      	str	r3, [r4, #4]
 800f176:	bf04      	itt	eq
 800f178:	1949      	addeq	r1, r1, r5
 800f17a:	6021      	streq	r1, [r4, #0]
 800f17c:	6054      	str	r4, [r2, #4]
 800f17e:	e7ca      	b.n	800f116 <_free_r+0x26>
 800f180:	b003      	add	sp, #12
 800f182:	bd30      	pop	{r4, r5, pc}
 800f184:	2000726c 	.word	0x2000726c

0800f188 <sbrk_aligned>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	4e0e      	ldr	r6, [pc, #56]	; (800f1c4 <sbrk_aligned+0x3c>)
 800f18c:	460c      	mov	r4, r1
 800f18e:	6831      	ldr	r1, [r6, #0]
 800f190:	4605      	mov	r5, r0
 800f192:	b911      	cbnz	r1, 800f19a <sbrk_aligned+0x12>
 800f194:	f000 f8f6 	bl	800f384 <_sbrk_r>
 800f198:	6030      	str	r0, [r6, #0]
 800f19a:	4621      	mov	r1, r4
 800f19c:	4628      	mov	r0, r5
 800f19e:	f000 f8f1 	bl	800f384 <_sbrk_r>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	d00a      	beq.n	800f1bc <sbrk_aligned+0x34>
 800f1a6:	1cc4      	adds	r4, r0, #3
 800f1a8:	f024 0403 	bic.w	r4, r4, #3
 800f1ac:	42a0      	cmp	r0, r4
 800f1ae:	d007      	beq.n	800f1c0 <sbrk_aligned+0x38>
 800f1b0:	1a21      	subs	r1, r4, r0
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f000 f8e6 	bl	800f384 <_sbrk_r>
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d101      	bne.n	800f1c0 <sbrk_aligned+0x38>
 800f1bc:	f04f 34ff 	mov.w	r4, #4294967295
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}
 800f1c4:	20007270 	.word	0x20007270

0800f1c8 <_malloc_r>:
 800f1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1cc:	1ccd      	adds	r5, r1, #3
 800f1ce:	f025 0503 	bic.w	r5, r5, #3
 800f1d2:	3508      	adds	r5, #8
 800f1d4:	2d0c      	cmp	r5, #12
 800f1d6:	bf38      	it	cc
 800f1d8:	250c      	movcc	r5, #12
 800f1da:	2d00      	cmp	r5, #0
 800f1dc:	4607      	mov	r7, r0
 800f1de:	db01      	blt.n	800f1e4 <_malloc_r+0x1c>
 800f1e0:	42a9      	cmp	r1, r5
 800f1e2:	d905      	bls.n	800f1f0 <_malloc_r+0x28>
 800f1e4:	230c      	movs	r3, #12
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	2600      	movs	r6, #0
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f0:	4e2e      	ldr	r6, [pc, #184]	; (800f2ac <_malloc_r+0xe4>)
 800f1f2:	f000 f8f7 	bl	800f3e4 <__malloc_lock>
 800f1f6:	6833      	ldr	r3, [r6, #0]
 800f1f8:	461c      	mov	r4, r3
 800f1fa:	bb34      	cbnz	r4, 800f24a <_malloc_r+0x82>
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4638      	mov	r0, r7
 800f200:	f7ff ffc2 	bl	800f188 <sbrk_aligned>
 800f204:	1c43      	adds	r3, r0, #1
 800f206:	4604      	mov	r4, r0
 800f208:	d14d      	bne.n	800f2a6 <_malloc_r+0xde>
 800f20a:	6834      	ldr	r4, [r6, #0]
 800f20c:	4626      	mov	r6, r4
 800f20e:	2e00      	cmp	r6, #0
 800f210:	d140      	bne.n	800f294 <_malloc_r+0xcc>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	4631      	mov	r1, r6
 800f216:	4638      	mov	r0, r7
 800f218:	eb04 0803 	add.w	r8, r4, r3
 800f21c:	f000 f8b2 	bl	800f384 <_sbrk_r>
 800f220:	4580      	cmp	r8, r0
 800f222:	d13a      	bne.n	800f29a <_malloc_r+0xd2>
 800f224:	6821      	ldr	r1, [r4, #0]
 800f226:	3503      	adds	r5, #3
 800f228:	1a6d      	subs	r5, r5, r1
 800f22a:	f025 0503 	bic.w	r5, r5, #3
 800f22e:	3508      	adds	r5, #8
 800f230:	2d0c      	cmp	r5, #12
 800f232:	bf38      	it	cc
 800f234:	250c      	movcc	r5, #12
 800f236:	4629      	mov	r1, r5
 800f238:	4638      	mov	r0, r7
 800f23a:	f7ff ffa5 	bl	800f188 <sbrk_aligned>
 800f23e:	3001      	adds	r0, #1
 800f240:	d02b      	beq.n	800f29a <_malloc_r+0xd2>
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	442b      	add	r3, r5
 800f246:	6023      	str	r3, [r4, #0]
 800f248:	e00e      	b.n	800f268 <_malloc_r+0xa0>
 800f24a:	6822      	ldr	r2, [r4, #0]
 800f24c:	1b52      	subs	r2, r2, r5
 800f24e:	d41e      	bmi.n	800f28e <_malloc_r+0xc6>
 800f250:	2a0b      	cmp	r2, #11
 800f252:	d916      	bls.n	800f282 <_malloc_r+0xba>
 800f254:	1961      	adds	r1, r4, r5
 800f256:	42a3      	cmp	r3, r4
 800f258:	6025      	str	r5, [r4, #0]
 800f25a:	bf18      	it	ne
 800f25c:	6059      	strne	r1, [r3, #4]
 800f25e:	6863      	ldr	r3, [r4, #4]
 800f260:	bf08      	it	eq
 800f262:	6031      	streq	r1, [r6, #0]
 800f264:	5162      	str	r2, [r4, r5]
 800f266:	604b      	str	r3, [r1, #4]
 800f268:	4638      	mov	r0, r7
 800f26a:	f104 060b 	add.w	r6, r4, #11
 800f26e:	f000 f8bf 	bl	800f3f0 <__malloc_unlock>
 800f272:	f026 0607 	bic.w	r6, r6, #7
 800f276:	1d23      	adds	r3, r4, #4
 800f278:	1af2      	subs	r2, r6, r3
 800f27a:	d0b6      	beq.n	800f1ea <_malloc_r+0x22>
 800f27c:	1b9b      	subs	r3, r3, r6
 800f27e:	50a3      	str	r3, [r4, r2]
 800f280:	e7b3      	b.n	800f1ea <_malloc_r+0x22>
 800f282:	6862      	ldr	r2, [r4, #4]
 800f284:	42a3      	cmp	r3, r4
 800f286:	bf0c      	ite	eq
 800f288:	6032      	streq	r2, [r6, #0]
 800f28a:	605a      	strne	r2, [r3, #4]
 800f28c:	e7ec      	b.n	800f268 <_malloc_r+0xa0>
 800f28e:	4623      	mov	r3, r4
 800f290:	6864      	ldr	r4, [r4, #4]
 800f292:	e7b2      	b.n	800f1fa <_malloc_r+0x32>
 800f294:	4634      	mov	r4, r6
 800f296:	6876      	ldr	r6, [r6, #4]
 800f298:	e7b9      	b.n	800f20e <_malloc_r+0x46>
 800f29a:	230c      	movs	r3, #12
 800f29c:	603b      	str	r3, [r7, #0]
 800f29e:	4638      	mov	r0, r7
 800f2a0:	f000 f8a6 	bl	800f3f0 <__malloc_unlock>
 800f2a4:	e7a1      	b.n	800f1ea <_malloc_r+0x22>
 800f2a6:	6025      	str	r5, [r4, #0]
 800f2a8:	e7de      	b.n	800f268 <_malloc_r+0xa0>
 800f2aa:	bf00      	nop
 800f2ac:	2000726c 	.word	0x2000726c

0800f2b0 <cleanup_glue>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	6809      	ldr	r1, [r1, #0]
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	b109      	cbz	r1, 800f2be <cleanup_glue+0xe>
 800f2ba:	f7ff fff9 	bl	800f2b0 <cleanup_glue>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2c6:	f7ff bf13 	b.w	800f0f0 <_free_r>
	...

0800f2cc <_reclaim_reent>:
 800f2cc:	4b2c      	ldr	r3, [pc, #176]	; (800f380 <_reclaim_reent+0xb4>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4283      	cmp	r3, r0
 800f2d2:	b570      	push	{r4, r5, r6, lr}
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	d051      	beq.n	800f37c <_reclaim_reent+0xb0>
 800f2d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f2da:	b143      	cbz	r3, 800f2ee <_reclaim_reent+0x22>
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d14a      	bne.n	800f378 <_reclaim_reent+0xac>
 800f2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2e4:	6819      	ldr	r1, [r3, #0]
 800f2e6:	b111      	cbz	r1, 800f2ee <_reclaim_reent+0x22>
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7ff ff01 	bl	800f0f0 <_free_r>
 800f2ee:	6961      	ldr	r1, [r4, #20]
 800f2f0:	b111      	cbz	r1, 800f2f8 <_reclaim_reent+0x2c>
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7ff fefc 	bl	800f0f0 <_free_r>
 800f2f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f2fa:	b111      	cbz	r1, 800f302 <_reclaim_reent+0x36>
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	f7ff fef7 	bl	800f0f0 <_free_r>
 800f302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f304:	b111      	cbz	r1, 800f30c <_reclaim_reent+0x40>
 800f306:	4620      	mov	r0, r4
 800f308:	f7ff fef2 	bl	800f0f0 <_free_r>
 800f30c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f30e:	b111      	cbz	r1, 800f316 <_reclaim_reent+0x4a>
 800f310:	4620      	mov	r0, r4
 800f312:	f7ff feed 	bl	800f0f0 <_free_r>
 800f316:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f318:	b111      	cbz	r1, 800f320 <_reclaim_reent+0x54>
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7ff fee8 	bl	800f0f0 <_free_r>
 800f320:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f322:	b111      	cbz	r1, 800f32a <_reclaim_reent+0x5e>
 800f324:	4620      	mov	r0, r4
 800f326:	f7ff fee3 	bl	800f0f0 <_free_r>
 800f32a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f32c:	b111      	cbz	r1, 800f334 <_reclaim_reent+0x68>
 800f32e:	4620      	mov	r0, r4
 800f330:	f7ff fede 	bl	800f0f0 <_free_r>
 800f334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f336:	b111      	cbz	r1, 800f33e <_reclaim_reent+0x72>
 800f338:	4620      	mov	r0, r4
 800f33a:	f7ff fed9 	bl	800f0f0 <_free_r>
 800f33e:	69a3      	ldr	r3, [r4, #24]
 800f340:	b1e3      	cbz	r3, 800f37c <_reclaim_reent+0xb0>
 800f342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f344:	4620      	mov	r0, r4
 800f346:	4798      	blx	r3
 800f348:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f34a:	b1b9      	cbz	r1, 800f37c <_reclaim_reent+0xb0>
 800f34c:	4620      	mov	r0, r4
 800f34e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f352:	f7ff bfad 	b.w	800f2b0 <cleanup_glue>
 800f356:	5949      	ldr	r1, [r1, r5]
 800f358:	b941      	cbnz	r1, 800f36c <_reclaim_reent+0xa0>
 800f35a:	3504      	adds	r5, #4
 800f35c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f35e:	2d80      	cmp	r5, #128	; 0x80
 800f360:	68d9      	ldr	r1, [r3, #12]
 800f362:	d1f8      	bne.n	800f356 <_reclaim_reent+0x8a>
 800f364:	4620      	mov	r0, r4
 800f366:	f7ff fec3 	bl	800f0f0 <_free_r>
 800f36a:	e7ba      	b.n	800f2e2 <_reclaim_reent+0x16>
 800f36c:	680e      	ldr	r6, [r1, #0]
 800f36e:	4620      	mov	r0, r4
 800f370:	f7ff febe 	bl	800f0f0 <_free_r>
 800f374:	4631      	mov	r1, r6
 800f376:	e7ef      	b.n	800f358 <_reclaim_reent+0x8c>
 800f378:	2500      	movs	r5, #0
 800f37a:	e7ef      	b.n	800f35c <_reclaim_reent+0x90>
 800f37c:	bd70      	pop	{r4, r5, r6, pc}
 800f37e:	bf00      	nop
 800f380:	200000a8 	.word	0x200000a8

0800f384 <_sbrk_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4d06      	ldr	r5, [pc, #24]	; (800f3a0 <_sbrk_r+0x1c>)
 800f388:	2300      	movs	r3, #0
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	602b      	str	r3, [r5, #0]
 800f390:	f7f3 fa08 	bl	80027a4 <_sbrk>
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	d102      	bne.n	800f39e <_sbrk_r+0x1a>
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	b103      	cbz	r3, 800f39e <_sbrk_r+0x1a>
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	20007274 	.word	0x20007274

0800f3a4 <siprintf>:
 800f3a4:	b40e      	push	{r1, r2, r3}
 800f3a6:	b500      	push	{lr}
 800f3a8:	b09c      	sub	sp, #112	; 0x70
 800f3aa:	ab1d      	add	r3, sp, #116	; 0x74
 800f3ac:	9002      	str	r0, [sp, #8]
 800f3ae:	9006      	str	r0, [sp, #24]
 800f3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3b4:	4809      	ldr	r0, [pc, #36]	; (800f3dc <siprintf+0x38>)
 800f3b6:	9107      	str	r1, [sp, #28]
 800f3b8:	9104      	str	r1, [sp, #16]
 800f3ba:	4909      	ldr	r1, [pc, #36]	; (800f3e0 <siprintf+0x3c>)
 800f3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c0:	9105      	str	r1, [sp, #20]
 800f3c2:	6800      	ldr	r0, [r0, #0]
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	a902      	add	r1, sp, #8
 800f3c8:	f000 f874 	bl	800f4b4 <_svfiprintf_r>
 800f3cc:	9b02      	ldr	r3, [sp, #8]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	b01c      	add	sp, #112	; 0x70
 800f3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d8:	b003      	add	sp, #12
 800f3da:	4770      	bx	lr
 800f3dc:	200000a8 	.word	0x200000a8
 800f3e0:	ffff0208 	.word	0xffff0208

0800f3e4 <__malloc_lock>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__malloc_lock+0x8>)
 800f3e6:	f7ff be6b 	b.w	800f0c0 <__retarget_lock_acquire_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	20007268 	.word	0x20007268

0800f3f0 <__malloc_unlock>:
 800f3f0:	4801      	ldr	r0, [pc, #4]	; (800f3f8 <__malloc_unlock+0x8>)
 800f3f2:	f7ff be66 	b.w	800f0c2 <__retarget_lock_release_recursive>
 800f3f6:	bf00      	nop
 800f3f8:	20007268 	.word	0x20007268

0800f3fc <__ssputs_r>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	688e      	ldr	r6, [r1, #8]
 800f402:	429e      	cmp	r6, r3
 800f404:	4682      	mov	sl, r0
 800f406:	460c      	mov	r4, r1
 800f408:	4690      	mov	r8, r2
 800f40a:	461f      	mov	r7, r3
 800f40c:	d838      	bhi.n	800f480 <__ssputs_r+0x84>
 800f40e:	898a      	ldrh	r2, [r1, #12]
 800f410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f414:	d032      	beq.n	800f47c <__ssputs_r+0x80>
 800f416:	6825      	ldr	r5, [r4, #0]
 800f418:	6909      	ldr	r1, [r1, #16]
 800f41a:	eba5 0901 	sub.w	r9, r5, r1
 800f41e:	6965      	ldr	r5, [r4, #20]
 800f420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f428:	3301      	adds	r3, #1
 800f42a:	444b      	add	r3, r9
 800f42c:	106d      	asrs	r5, r5, #1
 800f42e:	429d      	cmp	r5, r3
 800f430:	bf38      	it	cc
 800f432:	461d      	movcc	r5, r3
 800f434:	0553      	lsls	r3, r2, #21
 800f436:	d531      	bpl.n	800f49c <__ssputs_r+0xa0>
 800f438:	4629      	mov	r1, r5
 800f43a:	f7ff fec5 	bl	800f1c8 <_malloc_r>
 800f43e:	4606      	mov	r6, r0
 800f440:	b950      	cbnz	r0, 800f458 <__ssputs_r+0x5c>
 800f442:	230c      	movs	r3, #12
 800f444:	f8ca 3000 	str.w	r3, [sl]
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44e:	81a3      	strh	r3, [r4, #12]
 800f450:	f04f 30ff 	mov.w	r0, #4294967295
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	6921      	ldr	r1, [r4, #16]
 800f45a:	464a      	mov	r2, r9
 800f45c:	f7ff fe32 	bl	800f0c4 <memcpy>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	6126      	str	r6, [r4, #16]
 800f46e:	6165      	str	r5, [r4, #20]
 800f470:	444e      	add	r6, r9
 800f472:	eba5 0509 	sub.w	r5, r5, r9
 800f476:	6026      	str	r6, [r4, #0]
 800f478:	60a5      	str	r5, [r4, #8]
 800f47a:	463e      	mov	r6, r7
 800f47c:	42be      	cmp	r6, r7
 800f47e:	d900      	bls.n	800f482 <__ssputs_r+0x86>
 800f480:	463e      	mov	r6, r7
 800f482:	6820      	ldr	r0, [r4, #0]
 800f484:	4632      	mov	r2, r6
 800f486:	4641      	mov	r1, r8
 800f488:	f000 faa8 	bl	800f9dc <memmove>
 800f48c:	68a3      	ldr	r3, [r4, #8]
 800f48e:	1b9b      	subs	r3, r3, r6
 800f490:	60a3      	str	r3, [r4, #8]
 800f492:	6823      	ldr	r3, [r4, #0]
 800f494:	4433      	add	r3, r6
 800f496:	6023      	str	r3, [r4, #0]
 800f498:	2000      	movs	r0, #0
 800f49a:	e7db      	b.n	800f454 <__ssputs_r+0x58>
 800f49c:	462a      	mov	r2, r5
 800f49e:	f000 fab7 	bl	800fa10 <_realloc_r>
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d1e1      	bne.n	800f46c <__ssputs_r+0x70>
 800f4a8:	6921      	ldr	r1, [r4, #16]
 800f4aa:	4650      	mov	r0, sl
 800f4ac:	f7ff fe20 	bl	800f0f0 <_free_r>
 800f4b0:	e7c7      	b.n	800f442 <__ssputs_r+0x46>
	...

0800f4b4 <_svfiprintf_r>:
 800f4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b8:	4698      	mov	r8, r3
 800f4ba:	898b      	ldrh	r3, [r1, #12]
 800f4bc:	061b      	lsls	r3, r3, #24
 800f4be:	b09d      	sub	sp, #116	; 0x74
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	460d      	mov	r5, r1
 800f4c4:	4614      	mov	r4, r2
 800f4c6:	d50e      	bpl.n	800f4e6 <_svfiprintf_r+0x32>
 800f4c8:	690b      	ldr	r3, [r1, #16]
 800f4ca:	b963      	cbnz	r3, 800f4e6 <_svfiprintf_r+0x32>
 800f4cc:	2140      	movs	r1, #64	; 0x40
 800f4ce:	f7ff fe7b 	bl	800f1c8 <_malloc_r>
 800f4d2:	6028      	str	r0, [r5, #0]
 800f4d4:	6128      	str	r0, [r5, #16]
 800f4d6:	b920      	cbnz	r0, 800f4e2 <_svfiprintf_r+0x2e>
 800f4d8:	230c      	movs	r3, #12
 800f4da:	603b      	str	r3, [r7, #0]
 800f4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e0:	e0d1      	b.n	800f686 <_svfiprintf_r+0x1d2>
 800f4e2:	2340      	movs	r3, #64	; 0x40
 800f4e4:	616b      	str	r3, [r5, #20]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ea:	2320      	movs	r3, #32
 800f4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4f4:	2330      	movs	r3, #48	; 0x30
 800f4f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f6a0 <_svfiprintf_r+0x1ec>
 800f4fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4fe:	f04f 0901 	mov.w	r9, #1
 800f502:	4623      	mov	r3, r4
 800f504:	469a      	mov	sl, r3
 800f506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f50a:	b10a      	cbz	r2, 800f510 <_svfiprintf_r+0x5c>
 800f50c:	2a25      	cmp	r2, #37	; 0x25
 800f50e:	d1f9      	bne.n	800f504 <_svfiprintf_r+0x50>
 800f510:	ebba 0b04 	subs.w	fp, sl, r4
 800f514:	d00b      	beq.n	800f52e <_svfiprintf_r+0x7a>
 800f516:	465b      	mov	r3, fp
 800f518:	4622      	mov	r2, r4
 800f51a:	4629      	mov	r1, r5
 800f51c:	4638      	mov	r0, r7
 800f51e:	f7ff ff6d 	bl	800f3fc <__ssputs_r>
 800f522:	3001      	adds	r0, #1
 800f524:	f000 80aa 	beq.w	800f67c <_svfiprintf_r+0x1c8>
 800f528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f52a:	445a      	add	r2, fp
 800f52c:	9209      	str	r2, [sp, #36]	; 0x24
 800f52e:	f89a 3000 	ldrb.w	r3, [sl]
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 80a2 	beq.w	800f67c <_svfiprintf_r+0x1c8>
 800f538:	2300      	movs	r3, #0
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f542:	f10a 0a01 	add.w	sl, sl, #1
 800f546:	9304      	str	r3, [sp, #16]
 800f548:	9307      	str	r3, [sp, #28]
 800f54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f54e:	931a      	str	r3, [sp, #104]	; 0x68
 800f550:	4654      	mov	r4, sl
 800f552:	2205      	movs	r2, #5
 800f554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f558:	4851      	ldr	r0, [pc, #324]	; (800f6a0 <_svfiprintf_r+0x1ec>)
 800f55a:	f7f0 fe51 	bl	8000200 <memchr>
 800f55e:	9a04      	ldr	r2, [sp, #16]
 800f560:	b9d8      	cbnz	r0, 800f59a <_svfiprintf_r+0xe6>
 800f562:	06d0      	lsls	r0, r2, #27
 800f564:	bf44      	itt	mi
 800f566:	2320      	movmi	r3, #32
 800f568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f56c:	0711      	lsls	r1, r2, #28
 800f56e:	bf44      	itt	mi
 800f570:	232b      	movmi	r3, #43	; 0x2b
 800f572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f576:	f89a 3000 	ldrb.w	r3, [sl]
 800f57a:	2b2a      	cmp	r3, #42	; 0x2a
 800f57c:	d015      	beq.n	800f5aa <_svfiprintf_r+0xf6>
 800f57e:	9a07      	ldr	r2, [sp, #28]
 800f580:	4654      	mov	r4, sl
 800f582:	2000      	movs	r0, #0
 800f584:	f04f 0c0a 	mov.w	ip, #10
 800f588:	4621      	mov	r1, r4
 800f58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f58e:	3b30      	subs	r3, #48	; 0x30
 800f590:	2b09      	cmp	r3, #9
 800f592:	d94e      	bls.n	800f632 <_svfiprintf_r+0x17e>
 800f594:	b1b0      	cbz	r0, 800f5c4 <_svfiprintf_r+0x110>
 800f596:	9207      	str	r2, [sp, #28]
 800f598:	e014      	b.n	800f5c4 <_svfiprintf_r+0x110>
 800f59a:	eba0 0308 	sub.w	r3, r0, r8
 800f59e:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	46a2      	mov	sl, r4
 800f5a8:	e7d2      	b.n	800f550 <_svfiprintf_r+0x9c>
 800f5aa:	9b03      	ldr	r3, [sp, #12]
 800f5ac:	1d19      	adds	r1, r3, #4
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	9103      	str	r1, [sp, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	bfbb      	ittet	lt
 800f5b6:	425b      	neglt	r3, r3
 800f5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800f5bc:	9307      	strge	r3, [sp, #28]
 800f5be:	9307      	strlt	r3, [sp, #28]
 800f5c0:	bfb8      	it	lt
 800f5c2:	9204      	strlt	r2, [sp, #16]
 800f5c4:	7823      	ldrb	r3, [r4, #0]
 800f5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f5c8:	d10c      	bne.n	800f5e4 <_svfiprintf_r+0x130>
 800f5ca:	7863      	ldrb	r3, [r4, #1]
 800f5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f5ce:	d135      	bne.n	800f63c <_svfiprintf_r+0x188>
 800f5d0:	9b03      	ldr	r3, [sp, #12]
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	9203      	str	r2, [sp, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	bfb8      	it	lt
 800f5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5e0:	3402      	adds	r4, #2
 800f5e2:	9305      	str	r3, [sp, #20]
 800f5e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f6b0 <_svfiprintf_r+0x1fc>
 800f5e8:	7821      	ldrb	r1, [r4, #0]
 800f5ea:	2203      	movs	r2, #3
 800f5ec:	4650      	mov	r0, sl
 800f5ee:	f7f0 fe07 	bl	8000200 <memchr>
 800f5f2:	b140      	cbz	r0, 800f606 <_svfiprintf_r+0x152>
 800f5f4:	2340      	movs	r3, #64	; 0x40
 800f5f6:	eba0 000a 	sub.w	r0, r0, sl
 800f5fa:	fa03 f000 	lsl.w	r0, r3, r0
 800f5fe:	9b04      	ldr	r3, [sp, #16]
 800f600:	4303      	orrs	r3, r0
 800f602:	3401      	adds	r4, #1
 800f604:	9304      	str	r3, [sp, #16]
 800f606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f60a:	4826      	ldr	r0, [pc, #152]	; (800f6a4 <_svfiprintf_r+0x1f0>)
 800f60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f610:	2206      	movs	r2, #6
 800f612:	f7f0 fdf5 	bl	8000200 <memchr>
 800f616:	2800      	cmp	r0, #0
 800f618:	d038      	beq.n	800f68c <_svfiprintf_r+0x1d8>
 800f61a:	4b23      	ldr	r3, [pc, #140]	; (800f6a8 <_svfiprintf_r+0x1f4>)
 800f61c:	bb1b      	cbnz	r3, 800f666 <_svfiprintf_r+0x1b2>
 800f61e:	9b03      	ldr	r3, [sp, #12]
 800f620:	3307      	adds	r3, #7
 800f622:	f023 0307 	bic.w	r3, r3, #7
 800f626:	3308      	adds	r3, #8
 800f628:	9303      	str	r3, [sp, #12]
 800f62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f62c:	4433      	add	r3, r6
 800f62e:	9309      	str	r3, [sp, #36]	; 0x24
 800f630:	e767      	b.n	800f502 <_svfiprintf_r+0x4e>
 800f632:	fb0c 3202 	mla	r2, ip, r2, r3
 800f636:	460c      	mov	r4, r1
 800f638:	2001      	movs	r0, #1
 800f63a:	e7a5      	b.n	800f588 <_svfiprintf_r+0xd4>
 800f63c:	2300      	movs	r3, #0
 800f63e:	3401      	adds	r4, #1
 800f640:	9305      	str	r3, [sp, #20]
 800f642:	4619      	mov	r1, r3
 800f644:	f04f 0c0a 	mov.w	ip, #10
 800f648:	4620      	mov	r0, r4
 800f64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f64e:	3a30      	subs	r2, #48	; 0x30
 800f650:	2a09      	cmp	r2, #9
 800f652:	d903      	bls.n	800f65c <_svfiprintf_r+0x1a8>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0c5      	beq.n	800f5e4 <_svfiprintf_r+0x130>
 800f658:	9105      	str	r1, [sp, #20]
 800f65a:	e7c3      	b.n	800f5e4 <_svfiprintf_r+0x130>
 800f65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f660:	4604      	mov	r4, r0
 800f662:	2301      	movs	r3, #1
 800f664:	e7f0      	b.n	800f648 <_svfiprintf_r+0x194>
 800f666:	ab03      	add	r3, sp, #12
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	462a      	mov	r2, r5
 800f66c:	4b0f      	ldr	r3, [pc, #60]	; (800f6ac <_svfiprintf_r+0x1f8>)
 800f66e:	a904      	add	r1, sp, #16
 800f670:	4638      	mov	r0, r7
 800f672:	f3af 8000 	nop.w
 800f676:	1c42      	adds	r2, r0, #1
 800f678:	4606      	mov	r6, r0
 800f67a:	d1d6      	bne.n	800f62a <_svfiprintf_r+0x176>
 800f67c:	89ab      	ldrh	r3, [r5, #12]
 800f67e:	065b      	lsls	r3, r3, #25
 800f680:	f53f af2c 	bmi.w	800f4dc <_svfiprintf_r+0x28>
 800f684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f686:	b01d      	add	sp, #116	; 0x74
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	ab03      	add	r3, sp, #12
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	462a      	mov	r2, r5
 800f692:	4b06      	ldr	r3, [pc, #24]	; (800f6ac <_svfiprintf_r+0x1f8>)
 800f694:	a904      	add	r1, sp, #16
 800f696:	4638      	mov	r0, r7
 800f698:	f000 f87a 	bl	800f790 <_printf_i>
 800f69c:	e7eb      	b.n	800f676 <_svfiprintf_r+0x1c2>
 800f69e:	bf00      	nop
 800f6a0:	0800fd2c 	.word	0x0800fd2c
 800f6a4:	0800fd36 	.word	0x0800fd36
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	0800f3fd 	.word	0x0800f3fd
 800f6b0:	0800fd32 	.word	0x0800fd32

0800f6b4 <_printf_common>:
 800f6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	4699      	mov	r9, r3
 800f6bc:	688a      	ldr	r2, [r1, #8]
 800f6be:	690b      	ldr	r3, [r1, #16]
 800f6c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	bfb8      	it	lt
 800f6c8:	4613      	movlt	r3, r2
 800f6ca:	6033      	str	r3, [r6, #0]
 800f6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	b10a      	cbz	r2, 800f6da <_printf_common+0x26>
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	6033      	str	r3, [r6, #0]
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	0699      	lsls	r1, r3, #26
 800f6de:	bf42      	ittt	mi
 800f6e0:	6833      	ldrmi	r3, [r6, #0]
 800f6e2:	3302      	addmi	r3, #2
 800f6e4:	6033      	strmi	r3, [r6, #0]
 800f6e6:	6825      	ldr	r5, [r4, #0]
 800f6e8:	f015 0506 	ands.w	r5, r5, #6
 800f6ec:	d106      	bne.n	800f6fc <_printf_common+0x48>
 800f6ee:	f104 0a19 	add.w	sl, r4, #25
 800f6f2:	68e3      	ldr	r3, [r4, #12]
 800f6f4:	6832      	ldr	r2, [r6, #0]
 800f6f6:	1a9b      	subs	r3, r3, r2
 800f6f8:	42ab      	cmp	r3, r5
 800f6fa:	dc26      	bgt.n	800f74a <_printf_common+0x96>
 800f6fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f700:	1e13      	subs	r3, r2, #0
 800f702:	6822      	ldr	r2, [r4, #0]
 800f704:	bf18      	it	ne
 800f706:	2301      	movne	r3, #1
 800f708:	0692      	lsls	r2, r2, #26
 800f70a:	d42b      	bmi.n	800f764 <_printf_common+0xb0>
 800f70c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f710:	4649      	mov	r1, r9
 800f712:	4638      	mov	r0, r7
 800f714:	47c0      	blx	r8
 800f716:	3001      	adds	r0, #1
 800f718:	d01e      	beq.n	800f758 <_printf_common+0xa4>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	68e5      	ldr	r5, [r4, #12]
 800f71e:	6832      	ldr	r2, [r6, #0]
 800f720:	f003 0306 	and.w	r3, r3, #6
 800f724:	2b04      	cmp	r3, #4
 800f726:	bf08      	it	eq
 800f728:	1aad      	subeq	r5, r5, r2
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	6922      	ldr	r2, [r4, #16]
 800f72e:	bf0c      	ite	eq
 800f730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f734:	2500      	movne	r5, #0
 800f736:	4293      	cmp	r3, r2
 800f738:	bfc4      	itt	gt
 800f73a:	1a9b      	subgt	r3, r3, r2
 800f73c:	18ed      	addgt	r5, r5, r3
 800f73e:	2600      	movs	r6, #0
 800f740:	341a      	adds	r4, #26
 800f742:	42b5      	cmp	r5, r6
 800f744:	d11a      	bne.n	800f77c <_printf_common+0xc8>
 800f746:	2000      	movs	r0, #0
 800f748:	e008      	b.n	800f75c <_printf_common+0xa8>
 800f74a:	2301      	movs	r3, #1
 800f74c:	4652      	mov	r2, sl
 800f74e:	4649      	mov	r1, r9
 800f750:	4638      	mov	r0, r7
 800f752:	47c0      	blx	r8
 800f754:	3001      	adds	r0, #1
 800f756:	d103      	bne.n	800f760 <_printf_common+0xac>
 800f758:	f04f 30ff 	mov.w	r0, #4294967295
 800f75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f760:	3501      	adds	r5, #1
 800f762:	e7c6      	b.n	800f6f2 <_printf_common+0x3e>
 800f764:	18e1      	adds	r1, r4, r3
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	2030      	movs	r0, #48	; 0x30
 800f76a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f76e:	4422      	add	r2, r4
 800f770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f778:	3302      	adds	r3, #2
 800f77a:	e7c7      	b.n	800f70c <_printf_common+0x58>
 800f77c:	2301      	movs	r3, #1
 800f77e:	4622      	mov	r2, r4
 800f780:	4649      	mov	r1, r9
 800f782:	4638      	mov	r0, r7
 800f784:	47c0      	blx	r8
 800f786:	3001      	adds	r0, #1
 800f788:	d0e6      	beq.n	800f758 <_printf_common+0xa4>
 800f78a:	3601      	adds	r6, #1
 800f78c:	e7d9      	b.n	800f742 <_printf_common+0x8e>
	...

0800f790 <_printf_i>:
 800f790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	7e0f      	ldrb	r7, [r1, #24]
 800f796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f798:	2f78      	cmp	r7, #120	; 0x78
 800f79a:	4691      	mov	r9, r2
 800f79c:	4680      	mov	r8, r0
 800f79e:	460c      	mov	r4, r1
 800f7a0:	469a      	mov	sl, r3
 800f7a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7a6:	d807      	bhi.n	800f7b8 <_printf_i+0x28>
 800f7a8:	2f62      	cmp	r7, #98	; 0x62
 800f7aa:	d80a      	bhi.n	800f7c2 <_printf_i+0x32>
 800f7ac:	2f00      	cmp	r7, #0
 800f7ae:	f000 80d8 	beq.w	800f962 <_printf_i+0x1d2>
 800f7b2:	2f58      	cmp	r7, #88	; 0x58
 800f7b4:	f000 80a3 	beq.w	800f8fe <_printf_i+0x16e>
 800f7b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7c0:	e03a      	b.n	800f838 <_printf_i+0xa8>
 800f7c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7c6:	2b15      	cmp	r3, #21
 800f7c8:	d8f6      	bhi.n	800f7b8 <_printf_i+0x28>
 800f7ca:	a101      	add	r1, pc, #4	; (adr r1, 800f7d0 <_printf_i+0x40>)
 800f7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7d0:	0800f829 	.word	0x0800f829
 800f7d4:	0800f83d 	.word	0x0800f83d
 800f7d8:	0800f7b9 	.word	0x0800f7b9
 800f7dc:	0800f7b9 	.word	0x0800f7b9
 800f7e0:	0800f7b9 	.word	0x0800f7b9
 800f7e4:	0800f7b9 	.word	0x0800f7b9
 800f7e8:	0800f83d 	.word	0x0800f83d
 800f7ec:	0800f7b9 	.word	0x0800f7b9
 800f7f0:	0800f7b9 	.word	0x0800f7b9
 800f7f4:	0800f7b9 	.word	0x0800f7b9
 800f7f8:	0800f7b9 	.word	0x0800f7b9
 800f7fc:	0800f949 	.word	0x0800f949
 800f800:	0800f86d 	.word	0x0800f86d
 800f804:	0800f92b 	.word	0x0800f92b
 800f808:	0800f7b9 	.word	0x0800f7b9
 800f80c:	0800f7b9 	.word	0x0800f7b9
 800f810:	0800f96b 	.word	0x0800f96b
 800f814:	0800f7b9 	.word	0x0800f7b9
 800f818:	0800f86d 	.word	0x0800f86d
 800f81c:	0800f7b9 	.word	0x0800f7b9
 800f820:	0800f7b9 	.word	0x0800f7b9
 800f824:	0800f933 	.word	0x0800f933
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	1d1a      	adds	r2, r3, #4
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	602a      	str	r2, [r5, #0]
 800f830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f838:	2301      	movs	r3, #1
 800f83a:	e0a3      	b.n	800f984 <_printf_i+0x1f4>
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	6829      	ldr	r1, [r5, #0]
 800f840:	0606      	lsls	r6, r0, #24
 800f842:	f101 0304 	add.w	r3, r1, #4
 800f846:	d50a      	bpl.n	800f85e <_printf_i+0xce>
 800f848:	680e      	ldr	r6, [r1, #0]
 800f84a:	602b      	str	r3, [r5, #0]
 800f84c:	2e00      	cmp	r6, #0
 800f84e:	da03      	bge.n	800f858 <_printf_i+0xc8>
 800f850:	232d      	movs	r3, #45	; 0x2d
 800f852:	4276      	negs	r6, r6
 800f854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f858:	485e      	ldr	r0, [pc, #376]	; (800f9d4 <_printf_i+0x244>)
 800f85a:	230a      	movs	r3, #10
 800f85c:	e019      	b.n	800f892 <_printf_i+0x102>
 800f85e:	680e      	ldr	r6, [r1, #0]
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f866:	bf18      	it	ne
 800f868:	b236      	sxthne	r6, r6
 800f86a:	e7ef      	b.n	800f84c <_printf_i+0xbc>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	1d19      	adds	r1, r3, #4
 800f872:	6029      	str	r1, [r5, #0]
 800f874:	0601      	lsls	r1, r0, #24
 800f876:	d501      	bpl.n	800f87c <_printf_i+0xec>
 800f878:	681e      	ldr	r6, [r3, #0]
 800f87a:	e002      	b.n	800f882 <_printf_i+0xf2>
 800f87c:	0646      	lsls	r6, r0, #25
 800f87e:	d5fb      	bpl.n	800f878 <_printf_i+0xe8>
 800f880:	881e      	ldrh	r6, [r3, #0]
 800f882:	4854      	ldr	r0, [pc, #336]	; (800f9d4 <_printf_i+0x244>)
 800f884:	2f6f      	cmp	r7, #111	; 0x6f
 800f886:	bf0c      	ite	eq
 800f888:	2308      	moveq	r3, #8
 800f88a:	230a      	movne	r3, #10
 800f88c:	2100      	movs	r1, #0
 800f88e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f892:	6865      	ldr	r5, [r4, #4]
 800f894:	60a5      	str	r5, [r4, #8]
 800f896:	2d00      	cmp	r5, #0
 800f898:	bfa2      	ittt	ge
 800f89a:	6821      	ldrge	r1, [r4, #0]
 800f89c:	f021 0104 	bicge.w	r1, r1, #4
 800f8a0:	6021      	strge	r1, [r4, #0]
 800f8a2:	b90e      	cbnz	r6, 800f8a8 <_printf_i+0x118>
 800f8a4:	2d00      	cmp	r5, #0
 800f8a6:	d04d      	beq.n	800f944 <_printf_i+0x1b4>
 800f8a8:	4615      	mov	r5, r2
 800f8aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f8b2:	5dc7      	ldrb	r7, [r0, r7]
 800f8b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8b8:	4637      	mov	r7, r6
 800f8ba:	42bb      	cmp	r3, r7
 800f8bc:	460e      	mov	r6, r1
 800f8be:	d9f4      	bls.n	800f8aa <_printf_i+0x11a>
 800f8c0:	2b08      	cmp	r3, #8
 800f8c2:	d10b      	bne.n	800f8dc <_printf_i+0x14c>
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	07de      	lsls	r6, r3, #31
 800f8c8:	d508      	bpl.n	800f8dc <_printf_i+0x14c>
 800f8ca:	6923      	ldr	r3, [r4, #16]
 800f8cc:	6861      	ldr	r1, [r4, #4]
 800f8ce:	4299      	cmp	r1, r3
 800f8d0:	bfde      	ittt	le
 800f8d2:	2330      	movle	r3, #48	; 0x30
 800f8d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8dc:	1b52      	subs	r2, r2, r5
 800f8de:	6122      	str	r2, [r4, #16]
 800f8e0:	f8cd a000 	str.w	sl, [sp]
 800f8e4:	464b      	mov	r3, r9
 800f8e6:	aa03      	add	r2, sp, #12
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	f7ff fee2 	bl	800f6b4 <_printf_common>
 800f8f0:	3001      	adds	r0, #1
 800f8f2:	d14c      	bne.n	800f98e <_printf_i+0x1fe>
 800f8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f8:	b004      	add	sp, #16
 800f8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fe:	4835      	ldr	r0, [pc, #212]	; (800f9d4 <_printf_i+0x244>)
 800f900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f904:	6829      	ldr	r1, [r5, #0]
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	f851 6b04 	ldr.w	r6, [r1], #4
 800f90c:	6029      	str	r1, [r5, #0]
 800f90e:	061d      	lsls	r5, r3, #24
 800f910:	d514      	bpl.n	800f93c <_printf_i+0x1ac>
 800f912:	07df      	lsls	r7, r3, #31
 800f914:	bf44      	itt	mi
 800f916:	f043 0320 	orrmi.w	r3, r3, #32
 800f91a:	6023      	strmi	r3, [r4, #0]
 800f91c:	b91e      	cbnz	r6, 800f926 <_printf_i+0x196>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	f023 0320 	bic.w	r3, r3, #32
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	2310      	movs	r3, #16
 800f928:	e7b0      	b.n	800f88c <_printf_i+0xfc>
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	f043 0320 	orr.w	r3, r3, #32
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	2378      	movs	r3, #120	; 0x78
 800f934:	4828      	ldr	r0, [pc, #160]	; (800f9d8 <_printf_i+0x248>)
 800f936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f93a:	e7e3      	b.n	800f904 <_printf_i+0x174>
 800f93c:	0659      	lsls	r1, r3, #25
 800f93e:	bf48      	it	mi
 800f940:	b2b6      	uxthmi	r6, r6
 800f942:	e7e6      	b.n	800f912 <_printf_i+0x182>
 800f944:	4615      	mov	r5, r2
 800f946:	e7bb      	b.n	800f8c0 <_printf_i+0x130>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	6826      	ldr	r6, [r4, #0]
 800f94c:	6961      	ldr	r1, [r4, #20]
 800f94e:	1d18      	adds	r0, r3, #4
 800f950:	6028      	str	r0, [r5, #0]
 800f952:	0635      	lsls	r5, r6, #24
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	d501      	bpl.n	800f95c <_printf_i+0x1cc>
 800f958:	6019      	str	r1, [r3, #0]
 800f95a:	e002      	b.n	800f962 <_printf_i+0x1d2>
 800f95c:	0670      	lsls	r0, r6, #25
 800f95e:	d5fb      	bpl.n	800f958 <_printf_i+0x1c8>
 800f960:	8019      	strh	r1, [r3, #0]
 800f962:	2300      	movs	r3, #0
 800f964:	6123      	str	r3, [r4, #16]
 800f966:	4615      	mov	r5, r2
 800f968:	e7ba      	b.n	800f8e0 <_printf_i+0x150>
 800f96a:	682b      	ldr	r3, [r5, #0]
 800f96c:	1d1a      	adds	r2, r3, #4
 800f96e:	602a      	str	r2, [r5, #0]
 800f970:	681d      	ldr	r5, [r3, #0]
 800f972:	6862      	ldr	r2, [r4, #4]
 800f974:	2100      	movs	r1, #0
 800f976:	4628      	mov	r0, r5
 800f978:	f7f0 fc42 	bl	8000200 <memchr>
 800f97c:	b108      	cbz	r0, 800f982 <_printf_i+0x1f2>
 800f97e:	1b40      	subs	r0, r0, r5
 800f980:	6060      	str	r0, [r4, #4]
 800f982:	6863      	ldr	r3, [r4, #4]
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	2300      	movs	r3, #0
 800f988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f98c:	e7a8      	b.n	800f8e0 <_printf_i+0x150>
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	462a      	mov	r2, r5
 800f992:	4649      	mov	r1, r9
 800f994:	4640      	mov	r0, r8
 800f996:	47d0      	blx	sl
 800f998:	3001      	adds	r0, #1
 800f99a:	d0ab      	beq.n	800f8f4 <_printf_i+0x164>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	079b      	lsls	r3, r3, #30
 800f9a0:	d413      	bmi.n	800f9ca <_printf_i+0x23a>
 800f9a2:	68e0      	ldr	r0, [r4, #12]
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	4298      	cmp	r0, r3
 800f9a8:	bfb8      	it	lt
 800f9aa:	4618      	movlt	r0, r3
 800f9ac:	e7a4      	b.n	800f8f8 <_printf_i+0x168>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	4649      	mov	r1, r9
 800f9b4:	4640      	mov	r0, r8
 800f9b6:	47d0      	blx	sl
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	d09b      	beq.n	800f8f4 <_printf_i+0x164>
 800f9bc:	3501      	adds	r5, #1
 800f9be:	68e3      	ldr	r3, [r4, #12]
 800f9c0:	9903      	ldr	r1, [sp, #12]
 800f9c2:	1a5b      	subs	r3, r3, r1
 800f9c4:	42ab      	cmp	r3, r5
 800f9c6:	dcf2      	bgt.n	800f9ae <_printf_i+0x21e>
 800f9c8:	e7eb      	b.n	800f9a2 <_printf_i+0x212>
 800f9ca:	2500      	movs	r5, #0
 800f9cc:	f104 0619 	add.w	r6, r4, #25
 800f9d0:	e7f5      	b.n	800f9be <_printf_i+0x22e>
 800f9d2:	bf00      	nop
 800f9d4:	0800fd3d 	.word	0x0800fd3d
 800f9d8:	0800fd4e 	.word	0x0800fd4e

0800f9dc <memmove>:
 800f9dc:	4288      	cmp	r0, r1
 800f9de:	b510      	push	{r4, lr}
 800f9e0:	eb01 0402 	add.w	r4, r1, r2
 800f9e4:	d902      	bls.n	800f9ec <memmove+0x10>
 800f9e6:	4284      	cmp	r4, r0
 800f9e8:	4623      	mov	r3, r4
 800f9ea:	d807      	bhi.n	800f9fc <memmove+0x20>
 800f9ec:	1e43      	subs	r3, r0, #1
 800f9ee:	42a1      	cmp	r1, r4
 800f9f0:	d008      	beq.n	800fa04 <memmove+0x28>
 800f9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9fa:	e7f8      	b.n	800f9ee <memmove+0x12>
 800f9fc:	4402      	add	r2, r0
 800f9fe:	4601      	mov	r1, r0
 800fa00:	428a      	cmp	r2, r1
 800fa02:	d100      	bne.n	800fa06 <memmove+0x2a>
 800fa04:	bd10      	pop	{r4, pc}
 800fa06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa0e:	e7f7      	b.n	800fa00 <memmove+0x24>

0800fa10 <_realloc_r>:
 800fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa14:	4680      	mov	r8, r0
 800fa16:	4614      	mov	r4, r2
 800fa18:	460e      	mov	r6, r1
 800fa1a:	b921      	cbnz	r1, 800fa26 <_realloc_r+0x16>
 800fa1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	4611      	mov	r1, r2
 800fa22:	f7ff bbd1 	b.w	800f1c8 <_malloc_r>
 800fa26:	b92a      	cbnz	r2, 800fa34 <_realloc_r+0x24>
 800fa28:	f7ff fb62 	bl	800f0f0 <_free_r>
 800fa2c:	4625      	mov	r5, r4
 800fa2e:	4628      	mov	r0, r5
 800fa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa34:	f000 f81b 	bl	800fa6e <_malloc_usable_size_r>
 800fa38:	4284      	cmp	r4, r0
 800fa3a:	4607      	mov	r7, r0
 800fa3c:	d802      	bhi.n	800fa44 <_realloc_r+0x34>
 800fa3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa42:	d812      	bhi.n	800fa6a <_realloc_r+0x5a>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4640      	mov	r0, r8
 800fa48:	f7ff fbbe 	bl	800f1c8 <_malloc_r>
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d0ed      	beq.n	800fa2e <_realloc_r+0x1e>
 800fa52:	42bc      	cmp	r4, r7
 800fa54:	4622      	mov	r2, r4
 800fa56:	4631      	mov	r1, r6
 800fa58:	bf28      	it	cs
 800fa5a:	463a      	movcs	r2, r7
 800fa5c:	f7ff fb32 	bl	800f0c4 <memcpy>
 800fa60:	4631      	mov	r1, r6
 800fa62:	4640      	mov	r0, r8
 800fa64:	f7ff fb44 	bl	800f0f0 <_free_r>
 800fa68:	e7e1      	b.n	800fa2e <_realloc_r+0x1e>
 800fa6a:	4635      	mov	r5, r6
 800fa6c:	e7df      	b.n	800fa2e <_realloc_r+0x1e>

0800fa6e <_malloc_usable_size_r>:
 800fa6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa72:	1f18      	subs	r0, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	bfbc      	itt	lt
 800fa78:	580b      	ldrlt	r3, [r1, r0]
 800fa7a:	18c0      	addlt	r0, r0, r3
 800fa7c:	4770      	bx	lr
	...

0800fa80 <_init>:
 800fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa82:	bf00      	nop
 800fa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa86:	bc08      	pop	{r3}
 800fa88:	469e      	mov	lr, r3
 800fa8a:	4770      	bx	lr

0800fa8c <_fini>:
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8e:	bf00      	nop
 800fa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa92:	bc08      	pop	{r3}
 800fa94:	469e      	mov	lr, r3
 800fa96:	4770      	bx	lr
