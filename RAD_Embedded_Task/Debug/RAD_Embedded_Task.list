
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d4c  08008d4c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d54  08008d54  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00004a4c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fcff  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4c  00000000  00000000  0003fe2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  00043878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001828  00000000  00000000  000451f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b47  00000000  00000000  00046a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb3d  00000000  00000000  0006d55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed8e3  00000000  00000000  0008a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017797f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007288  00000000  00000000  001779d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b90 	.word	0x08008b90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000100 	.word	0x20000100
 80001ec:	08008b90 	.word	0x08008b90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000118 	.word	0x20000118
 80005d4:	200001cc 	.word	0x200001cc

080005d8 <decToBcd>:



 // Convert normal decimal numbers to binary coded decimal
 uint8_t decToBcd(int val)
 {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
   return (uint8_t)( (val/10*16) + (val%10) );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <decToBcd+0x48>)
 80005e4:	fb82 1203 	smull	r1, r2, r2, r3
 80005e8:	1092      	asrs	r2, r2, #2
 80005ea:	17db      	asrs	r3, r3, #31
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	b2d8      	uxtb	r0, r3
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <decToBcd+0x48>)
 80005f8:	fb83 1302 	smull	r1, r3, r3, r2
 80005fc:	1099      	asrs	r1, r3, #2
 80005fe:	17d3      	asrs	r3, r2, #31
 8000600:	1ac9      	subs	r1, r1, r3
 8000602:	460b      	mov	r3, r1
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1ad1      	subs	r1, r2, r3
 800060c:	b2cb      	uxtb	r3, r1
 800060e:	4403      	add	r3, r0
 8000610:	b2db      	uxtb	r3, r3
 }
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	66666667 	.word	0x66666667

08000624 <bcdToDec>:

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	461a      	mov	r2, r3
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	4413      	add	r3, r2
 }
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <Set_Time>:

 TIME time;

 /* function to set time */
 void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
 {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af04      	add	r7, sp, #16
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	4603      	mov	r3, r0
 8000668:	71bb      	strb	r3, [r7, #6]
 800066a:	460b      	mov	r3, r1
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	4613      	mov	r3, r2
 8000670:	713b      	strb	r3, [r7, #4]
 	uint8_t set_time[7];
 	set_time[0] = decToBcd(sec);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffaf 	bl	80005d8 <decToBcd>
 800067a:	4603      	mov	r3, r0
 800067c:	723b      	strb	r3, [r7, #8]
 	set_time[1] = decToBcd(min);
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffa9 	bl	80005d8 <decToBcd>
 8000686:	4603      	mov	r3, r0
 8000688:	727b      	strb	r3, [r7, #9]
 	set_time[2] = decToBcd(hour);
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffa3 	bl	80005d8 <decToBcd>
 8000692:	4603      	mov	r3, r0
 8000694:	72bb      	strb	r3, [r7, #10]
 	set_time[3] = decToBcd(dow);
 8000696:	793b      	ldrb	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff9d 	bl	80005d8 <decToBcd>
 800069e:	4603      	mov	r3, r0
 80006a0:	72fb      	strb	r3, [r7, #11]
 	set_time[4] = decToBcd(dom);
 80006a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff96 	bl	80005d8 <decToBcd>
 80006ac:	4603      	mov	r3, r0
 80006ae:	733b      	strb	r3, [r7, #12]
 	set_time[5] = decToBcd(month);
 80006b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff8f 	bl	80005d8 <decToBcd>
 80006ba:	4603      	mov	r3, r0
 80006bc:	737b      	strb	r3, [r7, #13]
 	set_time[6] = decToBcd(year);
 80006be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff88 	bl	80005d8 <decToBcd>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73bb      	strb	r3, [r7, #14]

 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
 80006cc:	23d0      	movs	r3, #208	; 0xd0
 80006ce:	b299      	uxth	r1, r3
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2307      	movs	r3, #7
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	2200      	movs	r2, #0
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <Set_Time+0xa0>)
 80006e6:	f002 fc2d 	bl	8002f44 <HAL_I2C_Mem_Write>
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200005f4 	.word	0x200005f4

080006f8 <Get_Time>:

 void Get_Time (void)
 {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af04      	add	r7, sp, #16
 	uint8_t get_time[7];
 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 80006fe:	23d0      	movs	r3, #208	; 0xd0
 8000700:	b299      	uxth	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2307      	movs	r3, #7
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	463b      	mov	r3, r7
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	2200      	movs	r2, #0
 8000714:	481f      	ldr	r0, [pc, #124]	; (8000794 <Get_Time+0x9c>)
 8000716:	f002 fd0f 	bl	8003138 <HAL_I2C_Mem_Read>
// 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 	time.seconds = bcdToDec(get_time[0]);
 800071a:	783b      	ldrb	r3, [r7, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff81 	bl	8000624 <bcdToDec>
 8000722:	4603      	mov	r3, r0
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <Get_Time+0xa0>)
 8000728:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 800072a:	787b      	ldrb	r3, [r7, #1]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff79 	bl	8000624 <bcdToDec>
 8000732:	4603      	mov	r3, r0
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <Get_Time+0xa0>)
 8000738:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 800073a:	78bb      	ldrb	r3, [r7, #2]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff71 	bl	8000624 <bcdToDec>
 8000742:	4603      	mov	r3, r0
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <Get_Time+0xa0>)
 8000748:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff69 	bl	8000624 <bcdToDec>
 8000752:	4603      	mov	r3, r0
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <Get_Time+0xa0>)
 8000758:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 800075a:	793b      	ldrb	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff61 	bl	8000624 <bcdToDec>
 8000762:	4603      	mov	r3, r0
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <Get_Time+0xa0>)
 8000768:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 800076a:	797b      	ldrb	r3, [r7, #5]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff59 	bl	8000624 <bcdToDec>
 8000772:	4603      	mov	r3, r0
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <Get_Time+0xa0>)
 8000778:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff51 	bl	8000624 <bcdToDec>
 8000782:	4603      	mov	r3, r0
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <Get_Time+0xa0>)
 8000788:	719a      	strb	r2, [r3, #6]
 }
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200005f4 	.word	0x200005f4
 8000798:	20000d78 	.word	0x20000d78

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b0a4      	sub	sp, #144	; 0x90
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f001 f839 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f88b 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 fa61 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ae:	f000 fa27 	bl	8000c00 <MX_DMA_Init>
  MX_ETH_Init();
 80007b2:	f000 f8ef 	bl	8000994 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007b6:	f000 f9cb 	bl	8000b50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ba:	f000 f9f3 	bl	8000ba4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80007be:	f000 f977 	bl	8000ab0 <MX_TIM1_Init>
  MX_I2C2_Init();
 80007c2:	f000 f935 	bl	8000a30 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80007c6:	4833      	ldr	r0, [pc, #204]	; (8000894 <main+0xf8>)
 80007c8:	f004 f8ea 	bl	80049a0 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityNormal, 0, 128);
 80007cc:	4b32      	ldr	r3, [pc, #200]	; (8000898 <main+0xfc>)
 80007ce:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80007d2:	461d      	mov	r5, r3
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 80007e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fa71 	bl	8006cce <osThreadCreate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a2b      	ldr	r2, [pc, #172]	; (800089c <main+0x100>)
 80007f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <main+0x104>)
 80007f4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007f8:	461d      	mov	r5, r3
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 8000806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fa5e 	bl	8006cce <osThreadCreate>
 8000812:	4603      	mov	r3, r0
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <main+0x108>)
 8000816:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <main+0x10c>)
 800081a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800081e:	461d      	mov	r5, r3
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000828:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 800082c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 fa4b 	bl	8006cce <osThreadCreate>
 8000838:	4603      	mov	r3, r0
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <main+0x110>)
 800083c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <main+0x114>)
 8000840:	f107 0420 	add.w	r4, r7, #32
 8000844:	461d      	mov	r5, r3
 8000846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800084e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f006 fa38 	bl	8006cce <osThreadCreate>
 800085e:	4603      	mov	r3, r0
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <main+0x118>)
 8000862:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityAboveNormal, 0, 128);
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <main+0x11c>)
 8000866:	1d3c      	adds	r4, r7, #4
 8000868:	461d      	mov	r5, r3
 800086a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fa27 	bl	8006cce <osThreadCreate>
 8000880:	4603      	mov	r3, r0
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <main+0x120>)
 8000884:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000886:	f006 fa1b 	bl	8006cc0 <osKernelStart>
//
//	  Temp_byte1 = DS18B20_Read();
//	  Temp_byte2 = DS18B20_Read();
//	  TEMP = (Temp_byte2<<8)|Temp_byte1;
//	  temperature = (float)TEMP/16;
	  HAL_Delay(500);
 800088a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088e:	f001 f805 	bl	800189c <HAL_Delay>
 8000892:	e7fa      	b.n	800088a <main+0xee>
 8000894:	20000708 	.word	0x20000708
 8000898:	08008bf4 	.word	0x08008bf4
 800089c:	20000d60 	.word	0x20000d60
 80008a0:	08008c10 	.word	0x08008c10
 80008a4:	20000d64 	.word	0x20000d64
 80008a8:	08008c2c 	.word	0x08008c2c
 80008ac:	20000d68 	.word	0x20000d68
 80008b0:	08008c48 	.word	0x08008c48
 80008b4:	20000d6c 	.word	0x20000d6c
 80008b8:	08008c64 	.word	0x08008c64
 80008bc:	20000d70 	.word	0x20000d70

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 fc8e 	bl	80081f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <SystemClock_Config+0xcc>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000934:	23a8      	movs	r3, #168	; 0xa8
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093c:	2307      	movs	r3, #7
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb11 	bl	8003f6c <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f000 fb4b 	bl	8000fea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2105      	movs	r1, #5
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fd72 	bl	800445c <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800097e:	f000 fb34 	bl	8000fea <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_ETH_Init+0x84>)
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <MX_ETH_Init+0x88>)
 800099c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009ac:	22e1      	movs	r2, #225	; 0xe1
 80009ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_ETH_Init+0x84>)
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_ETH_Init+0x8c>)
 80009c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_ETH_Init+0x84>)
 80009ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_ETH_Init+0x84>)
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <MX_ETH_Init+0x90>)
 80009d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_ETH_Init+0x84>)
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_ETH_Init+0x94>)
 80009da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_ETH_Init+0x84>)
 80009de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_ETH_Init+0x84>)
 80009e6:	f001 fc61 	bl	80022ac <HAL_ETH_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 fafb 	bl	8000fea <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009f4:	2238      	movs	r2, #56	; 0x38
 80009f6:	2100      	movs	r1, #0
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_ETH_Init+0x98>)
 80009fa:	f007 fbf9 	bl	80081f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_ETH_Init+0x98>)
 8000a00:	2221      	movs	r2, #33	; 0x21
 8000a02:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_ETH_Init+0x98>)
 8000a06:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a0a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_ETH_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000544 	.word	0x20000544
 8000a1c:	40028000 	.word	0x40028000
 8000a20:	20000d8c 	.word	0x20000d8c
 8000a24:	200004a4 	.word	0x200004a4
 8000a28:	20000404 	.word	0x20000404
 8000a2c:	200003cc 	.word	0x200003cc

08000a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_I2C2_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_I2C2_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a6e:	f002 f925 	bl	8002cbc <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 fab7 	bl	8000fea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a80:	f003 f8db 	bl	8003c3a <HAL_I2CEx_ConfigAnalogFilter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a8a:	f000 faae 	bl	8000fea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a92:	f003 f90e 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 faa5 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200005f4 	.word	0x200005f4
 8000aa8:	40005800 	.word	0x40005800
 8000aac:	000186a0 	.word	0x000186a0

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <MX_TIM1_Init+0x9c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ad4:	22a7      	movs	r2, #167	; 0xa7
 8000ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000afa:	f003 ff01 	bl	8004900 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 fa71 	bl	8000fea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b16:	f004 f923 	bl	8004d60 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 fa63 	bl	8000fea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b32:	f004 fb3f 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 fa55 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000708 	.word	0x20000708
 8000b4c:	40010000 	.word	0x40010000

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_USART3_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b88:	f004 fba4 	bl	80052d4 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 fa2a 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000750 	.word	0x20000750
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be8:	f003 f8a2 	bl	8003d30 <HAL_PCD_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f9fa 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000854 	.word	0x20000854

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_DMA_Init+0x6c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_DMA_Init+0x6c>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_DMA_Init+0x6c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	200c      	movs	r0, #12
 8000c28:	f000 ff14 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c2c:	200c      	movs	r0, #12
 8000c2e:	f000 ff2d 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	200d      	movs	r0, #13
 8000c38:	f000 ff0c 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c3c:	200d      	movs	r0, #13
 8000c3e:	f000 ff25 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2105      	movs	r1, #5
 8000c46:	200e      	movs	r0, #14
 8000c48:	f000 ff04 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c4c:	200e      	movs	r0, #14
 8000c4e:	f000 ff1d 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2105      	movs	r1, #5
 8000c56:	202f      	movs	r0, #47	; 0x2f
 8000c58:	f000 fefc 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c5c:	202f      	movs	r0, #47	; 0x2f
 8000c5e:	f000 ff15 	bl	8001a8c <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a58      	ldr	r2, [pc, #352]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a51      	ldr	r2, [pc, #324]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a43      	ldr	r2, [pc, #268]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a3c      	ldr	r2, [pc, #240]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a35      	ldr	r2, [pc, #212]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_GPIO_Init+0x180>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d50:	4828      	ldr	r0, [pc, #160]	; (8000df4 <MX_GPIO_Init+0x184>)
 8000d52:	f001 ff7f 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4827      	ldr	r0, [pc, #156]	; (8000df8 <MX_GPIO_Init+0x188>)
 8000d5c:	f001 ff7a 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4821      	ldr	r0, [pc, #132]	; (8000dfc <MX_GPIO_Init+0x18c>)
 8000d78:	f001 fdc0 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481c      	ldr	r0, [pc, #112]	; (8000e00 <MX_GPIO_Init+0x190>)
 8000d90:	f001 fdb4 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d94:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_GPIO_Init+0x184>)
 8000dae:	f001 fda5 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <MX_GPIO_Init+0x188>)
 8000dca:	f001 fd97 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_GPIO_Init+0x188>)
 8000de2:	f001 fd8b 	bl	80028fc <HAL_GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000

08000e04 <Start_RTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Set_Time(00, 03, 14, 5, 3, 1, 19);
 8000e0c:	2313      	movs	r3, #19
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	2301      	movs	r3, #1
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	2303      	movs	r3, #3
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2305      	movs	r3, #5
 8000e1a:	220e      	movs	r2, #14
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fc18 	bl	8000654 <Set_Time>
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8000e24:	f7ff fc68 	bl	80006f8 <Get_Time>
	  sprintf(buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <Start_RTC+0x48>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <Start_RTC+0x48>)
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	4619      	mov	r1, r3
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <Start_RTC+0x48>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <Start_RTC+0x4c>)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <Start_RTC+0x50>)
 8000e40:	f007 faec 	bl	800841c <siprintf>
    osDelay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f005 ff8e 	bl	8006d66 <osDelay>
  {
 8000e4a:	e7eb      	b.n	8000e24 <Start_RTC+0x20>
 8000e4c:	20000d78 	.word	0x20000d78
 8000e50:	08008c80 	.word	0x08008c80
 8000e54:	20000d80 	.word	0x20000d80

08000e58 <send_uart_dma>:
/**
* @brief Function implementing the UART_LEDTask thread.
* @param argument: Not used
* @retval None
*/
void send_uart_dma(uint8_t* ptr, uint16_t len){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 8000e64:	bf00      	nop
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <send_uart_dma+0x30>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0fb      	beq.n	8000e66 <send_uart_dma+0xe>

	UART_SendFlag=0;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <send_uart_dma+0x30>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <send_uart_dma+0x34>)
 8000e7c:	f004 fa78 	bl	8005370 <HAL_UART_Transmit_DMA>

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000750 	.word	0x20000750

08000e90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b0d      	cmp	r3, #13
 8000e9e:	d007      	beq.n	8000eb0 <HAL_UART_RxCpltCallback+0x20>
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b0a      	cmp	r3, #10
 8000ea6:	d003      	beq.n	8000eb0 <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_UART_RxCpltCallback+0x44>)
 8000eae:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b0d      	cmp	r3, #13
 8000eb6:	d102      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_UART_RxCpltCallback+0x48>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4903      	ldr	r1, [pc, #12]	; (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <HAL_UART_RxCpltCallback+0x4c>)
 8000ec4:	f004 fad2 	bl	800546c <HAL_UART_Receive_DMA>

}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000d74 	.word	0x20000d74
 8000ed4:	20000d75 	.word	0x20000d75
 8000ed8:	20000d76 	.word	0x20000d76
 8000edc:	20000750 	.word	0x20000750

08000ee0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HAL_UART_TxCpltCallback+0x1c>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000000 	.word	0x20000000

08000f00 <Start_UART_LED>:
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8000f08:	481e      	ldr	r0, [pc, #120]	; (8000f84 <Start_UART_LED+0x84>)
 8000f0a:	f7ff f971 	bl	80001f0 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	481b      	ldr	r0, [pc, #108]	; (8000f84 <Start_UART_LED+0x84>)
 8000f16:	f7ff ff9f 	bl	8000e58 <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	491a      	ldr	r1, [pc, #104]	; (8000f88 <Start_UART_LED+0x88>)
 8000f1e:	481b      	ldr	r0, [pc, #108]	; (8000f8c <Start_UART_LED+0x8c>)
 8000f20:	f004 faa4 	bl	800546c <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <Start_UART_LED+0x90>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d026      	beq.n	8000f7a <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <Start_UART_LED+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]

	      	//process command
	      	switch (cmd){
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <Start_UART_LED+0x94>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b33      	cmp	r3, #51	; 0x33
 8000f38:	d010      	beq.n	8000f5c <Start_UART_LED+0x5c>
 8000f3a:	2b33      	cmp	r3, #51	; 0x33
 8000f3c:	dc14      	bgt.n	8000f68 <Start_UART_LED+0x68>
 8000f3e:	2b31      	cmp	r3, #49	; 0x31
 8000f40:	d002      	beq.n	8000f48 <Start_UART_LED+0x48>
 8000f42:	2b32      	cmp	r3, #50	; 0x32
 8000f44:	d005      	beq.n	8000f52 <Start_UART_LED+0x52>
 8000f46:	e00f      	b.n	8000f68 <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <Start_UART_LED+0x98>)
 8000f4c:	f001 fe9b 	bl	8002c86 <HAL_GPIO_TogglePin>
	      		break;
 8000f50:	e00a      	b.n	8000f68 <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <Start_UART_LED+0x98>)
 8000f56:	f001 fe96 	bl	8002c86 <HAL_GPIO_TogglePin>
	      		break;
 8000f5a:	e005      	b.n	8000f68 <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8000f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <Start_UART_LED+0x98>)
 8000f62:	f001 fe90 	bl	8002c86 <HAL_GPIO_TogglePin>
	      		break;
 8000f66:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <Start_UART_LED+0x84>)
 8000f6a:	f7ff f941 	bl	80001f0 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <Start_UART_LED+0x84>)
 8000f76:	f7ff ff6f 	bl	8000e58 <send_uart_dma>

	      	}

    osDelay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f005 fef3 	bl	8006d66 <osDelay>
	  if(cmdstate){
 8000f80:	e7d0      	b.n	8000f24 <Start_UART_LED+0x24>
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000d74 	.word	0x20000d74
 8000f8c:	20000750 	.word	0x20000750
 8000f90:	20000d76 	.word	0x20000d76
 8000f94:	20000d75 	.word	0x20000d75
 8000f98:	40020400 	.word	0x40020400

08000f9c <Start_DataLogging>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f005 fede 	bl	8006d66 <osDelay>
 8000faa:	e7fb      	b.n	8000fa4 <Start_DataLogging+0x8>

08000fac <Start_FanControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f005 fed6 	bl	8006d66 <osDelay>
 8000fba:	e7fb      	b.n	8000fb4 <Start_FanControl+0x8>

08000fbc <Start_Temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f005 fece 	bl	8006d66 <osDelay>
 8000fca:	e7fb      	b.n	8000fc4 <Start_Temp+0x8>

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fde:	f000 fc3d 	bl	800185c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fee:	b672      	cpsid	i
}
 8000ff0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x8>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_MspInit+0x54>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_MspInit+0x54>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x54>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_MspInit+0x54>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_MspInit+0x54>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_MspInit+0x54>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	210f      	movs	r1, #15
 8001036:	f06f 0001 	mvn.w	r0, #1
 800103a:	f000 fd0b 	bl	8001a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_ETH_MspInit+0x174>)
 800106a:	4293      	cmp	r3, r2
 800106c:	f040 80a4 	bne.w	80011b8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a52      	ldr	r2, [pc, #328]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 800107a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a3d      	ldr	r2, [pc, #244]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 8001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_ETH_MspInit+0x178>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001134:	2332      	movs	r3, #50	; 0x32
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001144:	230b      	movs	r3, #11
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <HAL_ETH_MspInit+0x17c>)
 8001150:	f001 fbd4 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001154:	2386      	movs	r3, #134	; 0x86
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001164:	230b      	movs	r3, #11
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <HAL_ETH_MspInit+0x180>)
 8001170:	f001 fbc4 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001186:	230b      	movs	r3, #11
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <HAL_ETH_MspInit+0x184>)
 8001192:	f001 fbb3 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001196:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a8:	230b      	movs	r3, #11
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80011b4:	f001 fba2 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40028000 	.word	0x40028000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40021800 	.word	0x40021800

080011d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a47      	ldr	r2, [pc, #284]	; (8001314 <HAL_I2C_MspInit+0x13c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	f040 8088 	bne.w	800130c <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_I2C_MspInit+0x140>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a44      	ldr	r2, [pc, #272]	; (8001318 <HAL_I2C_MspInit+0x140>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <HAL_I2C_MspInit+0x140>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001218:	2303      	movs	r3, #3
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121c:	2312      	movs	r3, #18
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001228:	2304      	movs	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	483a      	ldr	r0, [pc, #232]	; (800131c <HAL_I2C_MspInit+0x144>)
 8001234:	f001 fb62 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_I2C_MspInit+0x140>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a35      	ldr	r2, [pc, #212]	; (8001318 <HAL_I2C_MspInit+0x140>)
 8001242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_I2C_MspInit+0x140>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_I2C_MspInit+0x14c>)
 8001258:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_I2C_MspInit+0x148>)
 800125c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001260:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_I2C_MspInit+0x148>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001274:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <HAL_I2C_MspInit+0x148>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_I2C_MspInit+0x148>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <HAL_I2C_MspInit+0x148>)
 8001296:	f000 fc07 	bl	8001aa8 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80012a0:	f7ff fea3 	bl	8000fea <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_I2C_MspInit+0x148>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_I2C_MspInit+0x148>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_I2C_MspInit+0x154>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012b8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0x150>)
 80012f2:	f000 fbd9 	bl	8001aa8 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80012fc:	f7ff fe75 	bl	8000fea <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_I2C_MspInit+0x150>)
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_I2C_MspInit+0x150>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005800 	.word	0x40005800
 8001318:	40023800 	.word	0x40023800
 800131c:	40021400 	.word	0x40021400
 8001320:	20000648 	.word	0x20000648
 8001324:	40026040 	.word	0x40026040
 8001328:	200006a8 	.word	0x200006a8
 800132c:	400260b8 	.word	0x400260b8

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10d      	bne.n	800135e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_TIM_Base_MspInit+0x40>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_TIM_Base_MspInit+0x40>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_TIM_Base_MspInit+0x40>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40010000 	.word	0x40010000
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <HAL_UART_MspInit+0x154>)
 8001392:	4293      	cmp	r3, r2
 8001394:	f040 8093 	bne.w	80014be <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <HAL_UART_MspInit+0x158>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a4a      	ldr	r2, [pc, #296]	; (80014cc <HAL_UART_MspInit+0x158>)
 80013a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_UART_MspInit+0x158>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <HAL_UART_MspInit+0x158>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a43      	ldr	r2, [pc, #268]	; (80014cc <HAL_UART_MspInit+0x158>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_UART_MspInit+0x158>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e2:	2307      	movs	r3, #7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4838      	ldr	r0, [pc, #224]	; (80014d0 <HAL_UART_MspInit+0x15c>)
 80013ee:	f001 fa85 	bl	80028fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_UART_MspInit+0x160>)
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_UART_MspInit+0x164>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_UART_MspInit+0x160>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_UART_MspInit+0x160>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_UART_MspInit+0x160>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001434:	4827      	ldr	r0, [pc, #156]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001436:	f000 fb37 	bl	8001aa8 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001440:	f7ff fdd3 	bl	8000fea <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_UART_MspInit+0x160>)
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_UART_MspInit+0x160>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_UART_MspInit+0x16c>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800145c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_UART_MspInit+0x168>)
 800146c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001470:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_UART_MspInit+0x168>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800148a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_UART_MspInit+0x168>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_UART_MspInit+0x168>)
 8001494:	f000 fb08 	bl	8001aa8 <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800149e:	f7ff fda4 	bl	8000fea <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_UART_MspInit+0x168>)
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
 80014a8:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <HAL_UART_MspInit+0x168>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	2027      	movs	r0, #39	; 0x27
 80014b4:	f000 face 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014b8:	2027      	movs	r0, #39	; 0x27
 80014ba:	f000 fae7 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	20000794 	.word	0x20000794
 80014d8:	40026028 	.word	0x40026028
 80014dc:	200007f4 	.word	0x200007f4
 80014e0:	40026058 	.word	0x40026058

080014e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001504:	d13f      	bne.n	8001586 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_PCD_MspInit+0xac>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a20      	ldr	r2, [pc, #128]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001522:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001534:	230a      	movs	r3, #10
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <HAL_PCD_MspInit+0xb0>)
 8001540:	f001 f9dc 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <HAL_PCD_MspInit+0xb0>)
 800155a:	f001 f9cf 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6353      	str	r3, [r2, #52]	; 0x34
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_PCD_MspInit+0xac>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_PCD_MspInit+0xac>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_InitTick+0xe8>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a33      	ldr	r2, [pc, #204]	; (8001680 <HAL_InitTick+0xe8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_InitTick+0xe8>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c4:	f107 0210 	add.w	r2, r7, #16
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f964 	bl	800489c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015de:	f003 f935 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 80015e2:	6378      	str	r0, [r7, #52]	; 0x34
 80015e4:	e004      	b.n	80015f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e6:	f003 f931 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	4a24      	ldr	r2, [pc, #144]	; (8001684 <HAL_InitTick+0xec>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	3b01      	subs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_InitTick+0xf0>)
 8001600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001604:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_InitTick+0xf0>)
 8001608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_InitTick+0xf0>)
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_InitTick+0xf0>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_InitTick+0xf0>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_InitTick+0xf0>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001626:	4818      	ldr	r0, [pc, #96]	; (8001688 <HAL_InitTick+0xf0>)
 8001628:	f003 f96a 	bl	8004900 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11b      	bne.n	8001672 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800163a:	4813      	ldr	r0, [pc, #76]	; (8001688 <HAL_InitTick+0xf0>)
 800163c:	f003 fa18 	bl	8004a70 <HAL_TIM_Base_Start_IT>
 8001640:	4603      	mov	r3, r0
 8001642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164a:	2b00      	cmp	r3, #0
 800164c:	d111      	bne.n	8001672 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800164e:	201c      	movs	r0, #28
 8001650:	f000 fa1c 	bl	8001a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d808      	bhi.n	800166c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800165a:	2200      	movs	r2, #0
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	201c      	movs	r0, #28
 8001660:	f000 f9f8 	bl	8001a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_InitTick+0xf4>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e002      	b.n	8001672 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001676:	4618      	mov	r0, r3
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	431bde83 	.word	0x431bde83
 8001688:	20000d94 	.word	0x20000d94
 800168c:	2000008c 	.word	0x2000008c

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Stream1_IRQHandler+0x10>)
 80016c2:	f000 fb89 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000794 	.word	0x20000794

080016d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream2_IRQHandler+0x10>)
 80016d6:	f000 fb7f 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000648 	.word	0x20000648

080016e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA1_Stream3_IRQHandler+0x10>)
 80016ea:	f000 fb75 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200007f4 	.word	0x200007f4

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f003 fa27 	bl	8004b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000d94 	.word	0x20000d94

0800170c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <USART3_IRQHandler+0x10>)
 8001712:	f003 fedb 	bl	80054cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000750 	.word	0x20000750

08001720 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream7_IRQHandler+0x10>)
 8001726:	f000 fb57 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200006a8 	.word	0x200006a8

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f006 fd0a 	bl	800817c <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20030000 	.word	0x20030000
 8001794:	00000400 	.word	0x00000400
 8001798:	20000ddc 	.word	0x20000ddc
 800179c:	20004b48 	.word	0x20004b48

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ca:	490e      	ldr	r1, [pc, #56]	; (8001804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e0:	4c0b      	ldr	r4, [pc, #44]	; (8001810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ee:	f7ff ffd7 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f006 fcc9 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7fe ffd1 	bl	800079c <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001808:	08008d5c 	.word	0x08008d5c
  ldr r2, =_sbss
 800180c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001810:	20004b48 	.word	0x20004b48

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f8fc 	bl	8001a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f7ff fea6 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fbd2 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000090 	.word	0x20000090
 8001880:	20000de0 	.word	0x20000de0

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000de0 	.word	0x20000de0

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000090 	.word	0x20000090

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	; (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff4c 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a66:	f7ff ff61 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001a6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	6978      	ldr	r0, [r7, #20]
 8001a72:	f7ff ffb1 	bl	80019d8 <NVIC_EncodePriority>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff80 	bl	8001984 <__NVIC_SetPriority>
}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff54 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fee6 	bl	8001884 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e099      	b.n	8001bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae4:	e00f      	b.n	8001b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae6:	f7ff fecd 	bl	8001884 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d908      	bls.n	8001b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2203      	movs	r2, #3
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e078      	b.n	8001bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e8      	bne.n	8001ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_DMA_Init+0x158>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d107      	bne.n	8001b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f023 0307 	bic.w	r3, r3, #7
 8001b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d117      	bne.n	8001bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00e      	beq.n	8001bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb01 	bl	80021b4 <DMA_CheckFifoParam>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e016      	b.n	8001bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fab8 	bl	8002148 <DMA_CalcBaseAndBitshift>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	223f      	movs	r2, #63	; 0x3f
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	f010803f 	.word	0xf010803f

08001c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_DMA_Start_IT+0x26>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e040      	b.n	8001cac <HAL_DMA_Start_IT+0xa8>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d12f      	bne.n	8001c9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fa4a 	bl	80020ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	223f      	movs	r2, #63	; 0x3f
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0216 	orr.w	r2, r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e005      	b.n	8001caa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cc2:	f7ff fddf 	bl	8001884 <HAL_GetTick>
 8001cc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d008      	beq.n	8001ce6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e052      	b.n	8001d8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0216 	bic.w	r2, r2, #22
 8001cf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <HAL_DMA_Abort+0x62>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0208 	bic.w	r2, r2, #8
 8001d24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d36:	e013      	b.n	8001d60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d38:	f7ff fda4 	bl	8001884 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d90c      	bls.n	8001d60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e015      	b.n	8001d8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e4      	bne.n	8001d38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	223f      	movs	r2, #63	; 0x3f
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00c      	b.n	8001dcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2205      	movs	r2, #5
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de4:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <HAL_DMA_IRQHandler+0x248>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a8e      	ldr	r2, [pc, #568]	; (8002024 <HAL_DMA_IRQHandler+0x24c>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2208      	movs	r2, #8
 8001e04:	409a      	lsls	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01a      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0204 	bic.w	r2, r2, #4
 8001e2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2208      	movs	r2, #8
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d012      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2201      	movs	r2, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f043 0202 	orr.w	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2204      	movs	r2, #4
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f043 0204 	orr.w	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d043      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03c      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d018      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d024      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
 8001f06:	e01f      	b.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e016      	b.n	8001f48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0208 	bic.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 808f 	beq.w	8002078 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8087 	beq.w	8002078 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2220      	movs	r2, #32
 8001f70:	409a      	lsls	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d136      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0216 	bic.w	r2, r2, #22
 8001f90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x1da>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	223f      	movs	r2, #63	; 0x3f
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07e      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
        }
        return;
 8001fee:	e079      	b.n	80020e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	2b00      	cmp	r3, #0
 8002012:	d031      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
 800201c:	e02c      	b.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
 800201e:	bf00      	nop
 8002020:	20000088 	.word	0x20000088
 8002024:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e01e      	b.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10f      	bne.n	8002068 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0210 	bic.w	r2, r2, #16
 8002056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	2b00      	cmp	r3, #0
 800207e:	d032      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d022      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d307      	bcc.n	80020c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f2      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x2cc>
 80020be:	e000      	b.n	80020c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e4:	bf00      	nop
    }
  }
}
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d108      	bne.n	800212c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800212a:	e007      	b.n	800213c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3b10      	subs	r3, #16
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <DMA_CalcBaseAndBitshift+0x64>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d909      	bls.n	800218a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	1d1a      	adds	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58
 8002188:	e007      	b.n	800219a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	08008cb0 	.word	0x08008cb0

080021b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d11f      	bne.n	800220e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d856      	bhi.n	8002282 <DMA_CheckFifoParam+0xce>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <DMA_CheckFifoParam+0x28>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021ff 	.word	0x080021ff
 80021e4:	080021ed 	.word	0x080021ed
 80021e8:	08002283 	.word	0x08002283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d046      	beq.n	8002286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e043      	b.n	8002286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002206:	d140      	bne.n	800228a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e03d      	b.n	800228a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002216:	d121      	bne.n	800225c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d837      	bhi.n	800228e <DMA_CheckFifoParam+0xda>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <DMA_CheckFifoParam+0x70>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	08002235 	.word	0x08002235
 8002228:	0800223b 	.word	0x0800223b
 800222c:	08002235 	.word	0x08002235
 8002230:	0800224d 	.word	0x0800224d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      break;
 8002238:	e030      	b.n	800229c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d025      	beq.n	8002292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224a:	e022      	b.n	8002292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002254:	d11f      	bne.n	8002296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800225a:	e01c      	b.n	8002296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d903      	bls.n	800226a <DMA_CheckFifoParam+0xb6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002268:	e018      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      break;
 800226e:	e015      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e00b      	b.n	800229a <DMA_CheckFifoParam+0xe6>
      break;
 8002282:	bf00      	nop
 8002284:	e00a      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e008      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
 800228c:	e006      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;   
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
    }
  } 
  
  return status; 
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop

080022ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06c      	b.n	8002398 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2223      	movs	r2, #35	; 0x23
 80022cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe febb 	bl	800104c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_ETH_Init+0xf4>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_ETH_Init+0xf4>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_ETH_Init+0xf4>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_ETH_Init+0xf8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <HAL_ETH_Init+0xf8>)
 80022f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_ETH_Init+0xf8>)
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4927      	ldr	r1, [pc, #156]	; (80023a4 <HAL_ETH_Init+0xf8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_ETH_Init+0xf8>)
 800230e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002326:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002328:	f7ff faac 	bl	8001884 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800232e:	e011      	b.n	8002354 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002330:	f7ff faa8 	bl	8001884 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800233e:	d909      	bls.n	8002354 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2204      	movs	r2, #4
 8002344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	22e0      	movs	r2, #224	; 0xe0
 800234c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e021      	b.n	8002398 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e4      	bne.n	8002330 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f958 	bl	800261c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9ff 	bl	8002770 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa55 	bl	8002822 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f9bd 	bl	8002700 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2210      	movs	r2, #16
 8002392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40013800 	.word	0x40013800

080023a8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4b51      	ldr	r3, [pc, #324]	; (8002504 <ETH_SetMACConfig+0x15c>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7c1b      	ldrb	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <ETH_SetMACConfig+0x28>
 80023ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ce:	e000      	b.n	80023d2 <ETH_SetMACConfig+0x2a>
 80023d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	7c5b      	ldrb	r3, [r3, #17]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <ETH_SetMACConfig+0x38>
 80023da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023de:	e000      	b.n	80023e2 <ETH_SetMACConfig+0x3a>
 80023e0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7fdb      	ldrb	r3, [r3, #31]
 80023ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	7f92      	ldrb	r2, [r2, #30]
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d102      	bne.n	8002406 <ETH_SetMACConfig+0x5e>
 8002400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002404:	e000      	b.n	8002408 <ETH_SetMACConfig+0x60>
 8002406:	2200      	movs	r2, #0
                        macconf->Speed |
 8002408:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7f1b      	ldrb	r3, [r3, #28]
 800240e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002410:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002416:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800241e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002426:	2a00      	cmp	r2, #0
 8002428:	d102      	bne.n	8002430 <ETH_SetMACConfig+0x88>
 800242a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242e:	e000      	b.n	8002432 <ETH_SetMACConfig+0x8a>
 8002430:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002432:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7bdb      	ldrb	r3, [r3, #15]
 8002438:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800243a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002440:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002448:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800244a:	4313      	orrs	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002462:	2001      	movs	r0, #1
 8002464:	f7ff fa1a 	bl	800189c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800247e:	4013      	ands	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800248e:	2a00      	cmp	r2, #0
 8002490:	d101      	bne.n	8002496 <ETH_SetMACConfig+0xee>
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	e000      	b.n	8002498 <ETH_SetMACConfig+0xf0>
 8002496:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002498:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800249e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024a6:	2a01      	cmp	r2, #1
 80024a8:	d101      	bne.n	80024ae <ETH_SetMACConfig+0x106>
 80024aa:	2208      	movs	r2, #8
 80024ac:	e000      	b.n	80024b0 <ETH_SetMACConfig+0x108>
 80024ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024b8:	2a01      	cmp	r2, #1
 80024ba:	d101      	bne.n	80024c0 <ETH_SetMACConfig+0x118>
 80024bc:	2204      	movs	r2, #4
 80024be:	e000      	b.n	80024c2 <ETH_SetMACConfig+0x11a>
 80024c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024ca:	2a01      	cmp	r2, #1
 80024cc:	d101      	bne.n	80024d2 <ETH_SetMACConfig+0x12a>
 80024ce:	2202      	movs	r2, #2
 80024d0:	e000      	b.n	80024d4 <ETH_SetMACConfig+0x12c>
 80024d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff f9d5 	bl	800189c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	ff20810f 	.word	0xff20810f

08002508 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <ETH_SetDMAConfig+0x110>)
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <ETH_SetDMAConfig+0x2c>
 800252e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002532:	e000      	b.n	8002536 <ETH_SetDMAConfig+0x2e>
 8002534:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	7b5b      	ldrb	r3, [r3, #13]
 800253a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800253c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	7f52      	ldrb	r2, [r2, #29]
 8002542:	2a00      	cmp	r2, #0
 8002544:	d102      	bne.n	800254c <ETH_SetDMAConfig+0x44>
 8002546:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800254a:	e000      	b.n	800254e <ETH_SetDMAConfig+0x46>
 800254c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800254e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	7b9b      	ldrb	r3, [r3, #14]
 8002554:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002556:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800255c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	7f1b      	ldrb	r3, [r3, #28]
 8002562:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002564:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7f9b      	ldrb	r3, [r3, #30]
 800256a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800256c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002572:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800257c:	4313      	orrs	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff f97c 	bl	800189c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7ff f94d 	bl	800189c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	f8de3f23 	.word	0xf8de3f23

0800261c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a6      	sub	sp, #152	; 0x98
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002630:	2300      	movs	r3, #0
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002658:	2300      	movs	r3, #0
 800265a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002662:	2300      	movs	r3, #0
 8002664:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800267e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002688:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe86 	bl	80023a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800269c:	2301      	movs	r3, #1
 800269e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026be:	2300      	movs	r3, #0
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff08 	bl	8002508 <ETH_SetDMAConfig>
}
 80026f8:	bf00      	nop
 80026fa:	3798      	adds	r7, #152	; 0x98
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3305      	adds	r3, #5
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	3204      	adds	r2, #4
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <ETH_MACAddressConfig+0x68>)
 8002722:	4413      	add	r3, r2
 8002724:	461a      	mov	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3303      	adds	r3, #3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3302      	adds	r3, #2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	4313      	orrs	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <ETH_MACAddressConfig+0x6c>)
 8002752:	4413      	add	r3, r2
 8002754:	461a      	mov	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6013      	str	r3, [r2, #0]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40028040 	.word	0x40028040
 800276c:	40028044 	.word	0x40028044

08002770 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e03e      	b.n	80027fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	3206      	adds	r2, #6
 80027b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d80c      	bhi.n	80027e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	e004      	b.n	80027ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d9bd      	bls.n	800277e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	611a      	str	r2, [r3, #16]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e046      	b.n	80028be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800286c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002874:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	3212      	adds	r2, #18
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d80c      	bhi.n	80028ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	e004      	b.n	80028b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3301      	adds	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d9b5      	bls.n	8002830 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	60da      	str	r2, [r3, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e177      	b.n	8002c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8166 	bne.w	8002c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80c0 	beq.w	8002c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d037      	beq.n	8002b3a <HAL_GPIO_Init+0x23e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d031      	beq.n	8002b36 <HAL_GPIO_Init+0x23a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x236>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_GPIO_Init+0x338>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x232>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	; (8002c38 <HAL_GPIO_Init+0x33c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x22e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a53      	ldr	r2, [pc, #332]	; (8002c3c <HAL_GPIO_Init+0x340>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x22a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x344>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x226>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_GPIO_Init+0x348>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x222>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_GPIO_Init+0x34c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x21e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x21a>
 8002b12:	2309      	movs	r3, #9
 8002b14:	e012      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b16:	230a      	movs	r3, #10
 8002b18:	e010      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	e00e      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00c      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e00a      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b26:	2305      	movs	r3, #5
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f002 0203 	and.w	r2, r2, #3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba8:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	f67f ae84 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40021400 	.word	0x40021400
 8002c40:	40021800 	.word	0x40021800
 8002c44:	40021c00 	.word	0x40021c00
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40022400 	.word	0x40022400
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c70:	e003      	b.n	8002c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	619a      	str	r2, [r3, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c98:	887a      	ldrh	r2, [r7, #2]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	041a      	lsls	r2, r3, #16
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	619a      	str	r2, [r3, #24]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e12b      	b.n	8002f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe fa78 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d20:	f001 fd94 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8002d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a81      	ldr	r2, [pc, #516]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d807      	bhi.n	8002d40 <HAL_I2C_Init+0x84>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a80      	ldr	r2, [pc, #512]	; (8002f34 <HAL_I2C_Init+0x278>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e006      	b.n	8002d4e <HAL_I2C_Init+0x92>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <HAL_I2C_Init+0x27c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0e7      	b.n	8002f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a78      	ldr	r2, [pc, #480]	; (8002f3c <HAL_I2C_Init+0x280>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9b      	lsrs	r3, r3, #18
 8002d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a6a      	ldr	r2, [pc, #424]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d802      	bhi.n	8002d90 <HAL_I2C_Init+0xd4>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	e009      	b.n	8002da4 <HAL_I2C_Init+0xe8>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <HAL_I2C_Init+0x284>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	3301      	adds	r3, #1
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002db6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	495c      	ldr	r1, [pc, #368]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d819      	bhi.n	8002df8 <HAL_I2C_Init+0x13c>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e59      	subs	r1, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dd8:	400b      	ands	r3, r1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_I2C_Init+0x138>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e59      	subs	r1, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df2:	e051      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002df4:	2304      	movs	r3, #4
 8002df6:	e04f      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <HAL_I2C_Init+0x168>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e012      	b.n	8002e4a <HAL_I2C_Init+0x18e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	0099      	lsls	r1, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x196>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e022      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10e      	bne.n	8002e78 <HAL_I2C_Init+0x1bc>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e58      	subs	r0, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	440b      	add	r3, r1
 8002e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	e00f      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6809      	ldr	r1, [r1, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6911      	ldr	r1, [r2, #16]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	000186a0 	.word	0x000186a0
 8002f34:	001e847f 	.word	0x001e847f
 8002f38:	003d08ff 	.word	0x003d08ff
 8002f3c:	431bde83 	.word	0x431bde83
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f5e:	f7fe fc91 	bl	8001884 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	f040 80d9 	bne.w	8003124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2319      	movs	r3, #25
 8002f78:	2201      	movs	r2, #1
 8002f7a:	496d      	ldr	r1, [pc, #436]	; (8003130 <HAL_I2C_Mem_Write+0x1ec>)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fc7f 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0cc      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Mem_Write+0x56>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0c5      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d007      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2221      	movs	r2, #33	; 0x21
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a4d      	ldr	r2, [pc, #308]	; (8003134 <HAL_I2C_Mem_Write+0x1f0>)
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003002:	88f8      	ldrh	r0, [r7, #6]
 8003004:	893a      	ldrh	r2, [r7, #8]
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4603      	mov	r3, r0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fab6 	bl	8003584 <I2C_RequestMemoryWrite>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d052      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e081      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fd00 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b04      	cmp	r3, #4
 8003038:	d107      	bne.n	800304a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d11b      	bne.n	80030c4 <HAL_I2C_Mem_Write+0x180>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1aa      	bne.n	8003022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fcec 	bl	8003aae <I2C_WaitOnBTFFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d107      	bne.n	80030f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e016      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	00100002 	.word	0x00100002
 8003134:	ffff0000 	.word	0xffff0000

08003138 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4603      	mov	r3, r0
 8003148:	817b      	strh	r3, [r7, #10]
 800314a:	460b      	mov	r3, r1
 800314c:	813b      	strh	r3, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003152:	f7fe fb97 	bl	8001884 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b20      	cmp	r3, #32
 8003162:	f040 8208 	bne.w	8003576 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2319      	movs	r3, #25
 800316c:	2201      	movs	r2, #1
 800316e:	497b      	ldr	r1, [pc, #492]	; (800335c <HAL_I2C_Mem_Read+0x224>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb85 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
 800317e:	e1fb      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Mem_Read+0x56>
 800318a:	2302      	movs	r3, #2
 800318c:	e1f4      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	; 0x22
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a5b      	ldr	r2, [pc, #364]	; (8003360 <HAL_I2C_Mem_Read+0x228>)
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f6:	88f8      	ldrh	r0, [r7, #6]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4603      	mov	r3, r0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa52 	bl	80036b0 <I2C_RequestMemoryRead>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1b0      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e184      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11b      	bne.n	8003286 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e164      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	2b02      	cmp	r3, #2
 800328c:	d11b      	bne.n	80032c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	e144      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032dc:	e138      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	f200 80f1 	bhi.w	80034ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d123      	bne.n	8003338 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fc1b 	bl	8003b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e139      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003336:	e10b      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	2b02      	cmp	r3, #2
 800333e:	d14e      	bne.n	80033de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	2200      	movs	r2, #0
 8003348:	4906      	ldr	r1, [pc, #24]	; (8003364 <HAL_I2C_Mem_Read+0x22c>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fa98 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e10e      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
 800335a:	bf00      	nop
 800335c:	00100002 	.word	0x00100002
 8003360:	ffff0000 	.word	0xffff0000
 8003364:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033dc:	e0b8      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	2200      	movs	r2, #0
 80033e6:	4966      	ldr	r1, [pc, #408]	; (8003580 <HAL_I2C_Mem_Read+0x448>)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa49 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0bf      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	2200      	movs	r2, #0
 8003442:	494f      	ldr	r1, [pc, #316]	; (8003580 <HAL_I2C_Mem_Read+0x448>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fa1b 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e091      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c8:	e042      	b.n	8003550 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fb2e 	bl	8003b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e04c      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d118      	bne.n	8003550 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f aec2 	bne.w	80032de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00010004 	.word	0x00010004

08003584 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4603      	mov	r3, r0
 8003594:	817b      	strh	r3, [r7, #10]
 8003596:	460b      	mov	r3, r1
 8003598:	813b      	strh	r3, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f960 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d103      	bne.n	80035de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e05f      	b.n	80036a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	492d      	ldr	r1, [pc, #180]	; (80036ac <I2C_RequestMemoryWrite+0x128>)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f998 	bl	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e04c      	b.n	80036a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fa02 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b04      	cmp	r3, #4
 8003634:	d107      	bne.n	8003646 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e02b      	b.n	80036a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	e021      	b.n	80036a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b29b      	uxth	r3, r3
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	6a39      	ldr	r1, [r7, #32]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f9dc 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b04      	cmp	r3, #4
 8003680:	d107      	bne.n	8003692 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e005      	b.n	80036a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	00010002 	.word	0x00010002

080036b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f8c2 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d103      	bne.n	800371a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0aa      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800372c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	4952      	ldr	r1, [pc, #328]	; (800387c <I2C_RequestMemoryRead+0x1cc>)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f8fa 	bl	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e097      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	6a39      	ldr	r1, [r7, #32]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f964 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b04      	cmp	r3, #4
 8003770:	d107      	bne.n	8003782 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e076      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	e021      	b.n	80037dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003798:	893b      	ldrh	r3, [r7, #8]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f93e 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e050      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d2:	893b      	ldrh	r3, [r7, #8]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f923 	bl	8003a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d107      	bne.n	8003804 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003802:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e035      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003816:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2200      	movs	r2, #0
 8003820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f82b 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	d103      	bne.n	8003848 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e013      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800384c:	897b      	ldrh	r3, [r7, #10]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	4906      	ldr	r1, [pc, #24]	; (800387c <I2C_RequestMemoryRead+0x1cc>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f863 	bl	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	00010002 	.word	0x00010002

08003880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003890:	e025      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d021      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fd fff3 	bl	8001884 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e023      	b.n	8003926 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10d      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	e00c      	b.n	800391e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d0b6      	beq.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393c:	e051      	b.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d123      	bne.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003966:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e046      	b.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d021      	beq.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fd ff71 	bl	8001884 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e020      	b.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10c      	bne.n	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e00b      	b.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d18d      	bne.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a38:	e02d      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f8ce 	bl	8003bdc <I2C_IsAcknowledgeFailed>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e02d      	b.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d021      	beq.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fd ff17 	bl	8001884 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d116      	bne.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e007      	b.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d1ca      	bne.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aba:	e02d      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f88d 	bl	8003bdc <I2C_IsAcknowledgeFailed>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e02d      	b.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d021      	beq.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	f7fd fed6 	bl	8001884 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d1ca      	bne.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b3c:	e042      	b.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d119      	bne.n	8003b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0210 	mvn.w	r2, #16
 8003b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e029      	b.n	8003bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b80:	f7fd fe80 	bl	8001884 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d302      	bcc.n	8003b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d1b5      	bne.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	d11b      	bne.n	8003c2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f043 0204 	orr.w	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d129      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0210 	bic.w	r2, r2, #16
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d12a      	bne.n	8003d22 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	89fb      	ldrh	r3, [r7, #14]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	89fa      	ldrh	r2, [r7, #14]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b08f      	sub	sp, #60	; 0x3c
 8003d34:	af0a      	add	r7, sp, #40	; 0x28
 8003d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e10f      	b.n	8003f62 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd fbc1 	bl	80014e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2203      	movs	r2, #3
 8003d66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f002 fce4 	bl	800674e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	687e      	ldr	r6, [r7, #4]
 8003d8e:	466d      	mov	r5, sp
 8003d90:	f106 0410 	add.w	r4, r6, #16
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003da4:	1d33      	adds	r3, r6, #4
 8003da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f002 fc6f 	bl	800668c <USB_CoreInit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d0      	b.n	8003f62 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f002 fcd2 	bl	8006770 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e04a      	b.n	8003e68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	333d      	adds	r3, #61	; 0x3d
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	333c      	adds	r3, #60	; 0x3c
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	b298      	uxth	r0, r3
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3344      	adds	r3, #68	; 0x44
 8003e0e:	4602      	mov	r2, r0
 8003e10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3340      	adds	r3, #64	; 0x40
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3348      	adds	r3, #72	; 0x48
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	; 0x4c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3354      	adds	r3, #84	; 0x54
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	3301      	adds	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3af      	bcc.n	8003dd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e044      	b.n	8003f02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3b5      	bcc.n	8003e78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	687e      	ldr	r6, [r7, #4]
 8003f14:	466d      	mov	r5, sp
 8003f16:	f106 0410 	add.w	r4, r6, #16
 8003f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f2a:	1d33      	adds	r3, r6, #4
 8003f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2e:	6838      	ldr	r0, [r7, #0]
 8003f30:	f002 fc6a 	bl	8006808 <USB_DevInit>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00d      	b.n	8003f62 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f002 fe35 	bl	8006bca <USB_DevDisconnect>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e267      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d075      	beq.n	8004076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d00c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d112      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05b      	beq.n	8004074 <HAL_RCC_OscConfig+0x108>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d157      	bne.n	8004074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e242      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x74>
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x98>
 8003fea:	4b70      	ldr	r3, [pc, #448]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6f      	ldr	r2, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b6d      	ldr	r3, [pc, #436]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6c      	ldr	r2, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8004004:	4b69      	ldr	r3, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a68      	ldr	r2, [pc, #416]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd fc2e 	bl	8001884 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fd fc2a 	bl	8001884 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e207      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xc0>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd fc1a 	bl	8001884 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd fc16 	bl	8001884 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1f3      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0xe8>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b44      	ldr	r3, [pc, #272]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1c7      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4937      	ldr	r1, [pc, #220]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <HAL_RCC_OscConfig+0x244>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fd fbcf 	bl	8001884 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fd fbcb 	bl	8001884 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1a8      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4925      	ldr	r1, [pc, #148]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_OscConfig+0x244>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd fbae 	bl	8001884 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412c:	f7fd fbaa 	bl	8001884 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e187      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d036      	beq.n	80041c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_RCC_OscConfig+0x248>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd fb8e 	bl	8001884 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416c:	f7fd fb8a 	bl	8001884 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e167      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x240>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x200>
 800418a:	e01b      	b.n	80041c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x248>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fd fb77 	bl	8001884 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	e00e      	b.n	80041b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419a:	f7fd fb73 	bl	8001884 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d907      	bls.n	80041b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e150      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	42470000 	.word	0x42470000
 80041b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	4b88      	ldr	r3, [pc, #544]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ea      	bne.n	800419a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8097 	beq.w	8004300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b81      	ldr	r3, [pc, #516]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	4b7d      	ldr	r3, [pc, #500]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	4a7c      	ldr	r2, [pc, #496]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80041ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6413      	str	r3, [r2, #64]	; 0x40
 80041f2:	4b7a      	ldr	r3, [pc, #488]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b77      	ldr	r3, [pc, #476]	; (80043e0 <HAL_RCC_OscConfig+0x474>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d118      	bne.n	8004240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420e:	4b74      	ldr	r3, [pc, #464]	; (80043e0 <HAL_RCC_OscConfig+0x474>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a73      	ldr	r2, [pc, #460]	; (80043e0 <HAL_RCC_OscConfig+0x474>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421a:	f7fd fb33 	bl	8001884 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004222:	f7fd fb2f 	bl	8001884 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e10c      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_OscConfig+0x474>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x2ea>
 8004248:	4b64      	ldr	r3, [pc, #400]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a63      	ldr	r2, [pc, #396]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
 8004254:	e01c      	b.n	8004290 <HAL_RCC_OscConfig+0x324>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x30c>
 800425e:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a5e      	ldr	r2, [pc, #376]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004264:	f043 0304 	orr.w	r3, r3, #4
 8004268:	6713      	str	r3, [r2, #112]	; 0x70
 800426a:	4b5c      	ldr	r3, [pc, #368]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a5b      	ldr	r2, [pc, #364]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0x324>
 8004278:	4b58      	ldr	r3, [pc, #352]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a57      	ldr	r2, [pc, #348]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a54      	ldr	r2, [pc, #336]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd faf4 	bl	8001884 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fd faf0 	bl	8001884 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e0cb      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ee      	beq.n	80042a0 <HAL_RCC_OscConfig+0x334>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c4:	f7fd fade 	bl	8001884 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fd fada 	bl	8001884 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0b5      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ee      	bne.n	80042cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f4:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4a38      	ldr	r2, [pc, #224]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80042fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80a1 	beq.w	800444c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430a:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b08      	cmp	r3, #8
 8004314:	d05c      	beq.n	80043d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d141      	bne.n	80043a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_RCC_OscConfig+0x478>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fd faae 	bl	8001884 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd faaa 	bl	8001884 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e087      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	491b      	ldr	r1, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x478>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437a:	f7fd fa83 	bl	8001884 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd fa7f 	bl	8001884 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e05c      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x416>
 80043a0:	e054      	b.n	800444c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_RCC_OscConfig+0x478>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd fa6c 	bl	8001884 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd fa68 	bl	8001884 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e045      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_OscConfig+0x470>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x444>
 80043ce:	e03d      	b.n	800444c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e038      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40007000 	.word	0x40007000
 80043e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x4ec>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d028      	beq.n	8004448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d121      	bne.n	8004448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d11a      	bne.n	8004448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004420:	4293      	cmp	r3, r2
 8004422:	d111      	bne.n	8004448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	3b01      	subs	r3, #1
 8004432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d107      	bne.n	8004448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cc      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90c      	bls.n	8004498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a58      	ldr	r2, [pc, #352]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a52      	ldr	r2, [pc, #328]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e067      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4934      	ldr	r1, [pc, #208]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7fd f99a 	bl	8001884 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fd f996 	bl	8001884 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d20c      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 f821 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	490a      	ldr	r1, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc ffc8 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00
 8004618:	40023800 	.word	0x40023800
 800461c:	08008c98 	.word	0x08008c98
 8004620:	20000088 	.word	0x20000088
 8004624:	2000008c 	.word	0x2000008c

08004628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b094      	sub	sp, #80	; 0x50
 800462e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	647b      	str	r3, [r7, #68]	; 0x44
 8004634:	2300      	movs	r3, #0
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	2300      	movs	r3, #0
 800463a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004640:	4b79      	ldr	r3, [pc, #484]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b08      	cmp	r3, #8
 800464a:	d00d      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x40>
 800464c:	2b08      	cmp	r3, #8
 800464e:	f200 80e1 	bhi.w	8004814 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x34>
 8004656:	2b04      	cmp	r3, #4
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x3a>
 800465a:	e0db      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800465c:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCC_GetSysClockFreq+0x204>)
 800465e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004660:	e0db      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004662:	4b73      	ldr	r3, [pc, #460]	; (8004830 <HAL_RCC_GetSysClockFreq+0x208>)
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004666:	e0d8      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004668:	4b6f      	ldr	r3, [pc, #444]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004672:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d063      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467e:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	2200      	movs	r2, #0
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
 8004688:	63fa      	str	r2, [r7, #60]	; 0x3c
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
 8004696:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	f04f 0000 	mov.w	r0, #0
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	0159      	lsls	r1, r3, #5
 80046a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ac:	0150      	lsls	r0, r2, #5
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4621      	mov	r1, r4
 80046b4:	1a51      	subs	r1, r2, r1
 80046b6:	6139      	str	r1, [r7, #16]
 80046b8:	4629      	mov	r1, r5
 80046ba:	eb63 0301 	sbc.w	r3, r3, r1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046cc:	4659      	mov	r1, fp
 80046ce:	018b      	lsls	r3, r1, #6
 80046d0:	4651      	mov	r1, sl
 80046d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d6:	4651      	mov	r1, sl
 80046d8:	018a      	lsls	r2, r1, #6
 80046da:	4651      	mov	r1, sl
 80046dc:	ebb2 0801 	subs.w	r8, r2, r1
 80046e0:	4659      	mov	r1, fp
 80046e2:	eb63 0901 	sbc.w	r9, r3, r1
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fa:	4690      	mov	r8, r2
 80046fc:	4699      	mov	r9, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	eb18 0303 	adds.w	r3, r8, r3
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	462b      	mov	r3, r5
 8004708:	eb49 0303 	adc.w	r3, r9, r3
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800471a:	4629      	mov	r1, r5
 800471c:	024b      	lsls	r3, r1, #9
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004724:	4621      	mov	r1, r4
 8004726:	024a      	lsls	r2, r1, #9
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472e:	2200      	movs	r2, #0
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
 8004732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004734:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004738:	f7fb fdb2 	bl	80002a0 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	e058      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	4618      	mov	r0, r3
 8004750:	4611      	mov	r1, r2
 8004752:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	0159      	lsls	r1, r3, #5
 800476e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004772:	0150      	lsls	r0, r2, #5
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4641      	mov	r1, r8
 800477a:	ebb2 0a01 	subs.w	sl, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb63 0b01 	sbc.w	fp, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004790:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004794:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004798:	ebb2 040a 	subs.w	r4, r2, sl
 800479c:	eb63 050b 	sbc.w	r5, r3, fp
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	00eb      	lsls	r3, r5, #3
 80047aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ae:	00e2      	lsls	r2, r4, #3
 80047b0:	4614      	mov	r4, r2
 80047b2:	461d      	mov	r5, r3
 80047b4:	4643      	mov	r3, r8
 80047b6:	18e3      	adds	r3, r4, r3
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	464b      	mov	r3, r9
 80047bc:	eb45 0303 	adc.w	r3, r5, r3
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ce:	4629      	mov	r1, r5
 80047d0:	028b      	lsls	r3, r1, #10
 80047d2:	4621      	mov	r1, r4
 80047d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d8:	4621      	mov	r1, r4
 80047da:	028a      	lsls	r2, r1, #10
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e2:	2200      	movs	r2, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	61fa      	str	r2, [r7, #28]
 80047e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ec:	f7fb fd58 	bl	80002a0 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	3301      	adds	r3, #1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800480a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetSysClockFreq+0x204>)
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800481c:	4618      	mov	r0, r3
 800481e:	3750      	adds	r7, #80	; 0x50
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	00f42400 	.word	0x00f42400
 8004830:	007a1200 	.word	0x007a1200

08004834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_RCC_GetHCLKFreq+0x14>)
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000088 	.word	0x20000088

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff0 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0a9b      	lsrs	r3, r3, #10
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08008ca8 	.word	0x08008ca8

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004878:	f7ff ffdc 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	08008ca8 	.word	0x08008ca8

0800489c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	220f      	movs	r2, #15
 80048aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0203 	and.w	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048b8:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_RCC_GetClockConfig+0x60>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 020f 	and.w	r2, r3, #15
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40023c00 	.word	0x40023c00

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fd02 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fafe 	bl	8004f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e046      	b.n	8004a46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a23      	ldr	r2, [pc, #140]	; (8004a54 <HAL_TIM_Base_Start+0xb4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d2:	d01d      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_TIM_Base_Start+0xb8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d018      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_TIM_Base_Start+0xbc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_TIM_Base_Start+0xc0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_TIM_Base_Start+0xc4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_TIM_Base_Start+0xc8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_Base_Start+0x70>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_TIM_Base_Start+0xcc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d010      	beq.n	8004a44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a32:	e007      	b.n	8004a44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40001800 	.word	0x40001800

08004a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e04e      	b.n	8004b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d01d      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d018      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d111      	bne.n	8004b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d010      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	e007      	b.n	8004b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0202 	mvn.w	r2, #2
 8004b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9b5 	bl	8004f02 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9a7 	bl	8004eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f9b8 	bl	8004f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0204 	mvn.w	r2, #4
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f98b 	bl	8004f02 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f97d 	bl	8004eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f98e 	bl	8004f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0208 	mvn.w	r2, #8
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f961 	bl	8004f02 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f953 	bl	8004eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f964 	bl	8004f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0210 	mvn.w	r2, #16
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f937 	bl	8004f02 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f929 	bl	8004eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f93a 	bl	8004f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0201 	mvn.w	r2, #1
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f97c 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fae0 	bl	80052c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8ff 	bl	8004f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0220 	mvn.w	r2, #32
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 faaa 	bl	80052ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0b4      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x186>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d03e      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0xd4>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dba:	f200 8087 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_TIM_ConfigClockSource+0x172>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	d87f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b70      	cmp	r3, #112	; 0x70
 8004dce:	d01a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xa6>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d87b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d050      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x11a>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d877      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b50      	cmp	r3, #80	; 0x50
 8004dde:	d03c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xfa>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d873      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d058      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x13a>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d86f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	d064      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d86b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d060      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d867      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d05a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	e062      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f000 f9ad 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
      break;
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f000 f996 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e03c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 f90a 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2150      	movs	r1, #80	; 0x50
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f963 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004e78:	e02c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 f929 	bl	80050de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2160      	movs	r1, #96	; 0x60
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f953 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 f8ea 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f943 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 f93a 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a40      	ldr	r2, [pc, #256]	; (8005054 <TIM_Base_SetConfig+0x114>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d00f      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <TIM_Base_SetConfig+0x118>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3c      	ldr	r2, [pc, #240]	; (800505c <TIM_Base_SetConfig+0x11c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <TIM_Base_SetConfig+0x120>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <TIM_Base_SetConfig+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d108      	bne.n	8004f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2f      	ldr	r2, [pc, #188]	; (8005054 <TIM_Base_SetConfig+0x114>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d02b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d027      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <TIM_Base_SetConfig+0x118>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d023      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2b      	ldr	r2, [pc, #172]	; (800505c <TIM_Base_SetConfig+0x11c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <TIM_Base_SetConfig+0x120>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a29      	ldr	r2, [pc, #164]	; (8005064 <TIM_Base_SetConfig+0x124>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d017      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a28      	ldr	r2, [pc, #160]	; (8005068 <TIM_Base_SetConfig+0x128>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a27      	ldr	r2, [pc, #156]	; (800506c <TIM_Base_SetConfig+0x12c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a26      	ldr	r2, [pc, #152]	; (8005070 <TIM_Base_SetConfig+0x130>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a25      	ldr	r2, [pc, #148]	; (8005074 <TIM_Base_SetConfig+0x134>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <TIM_Base_SetConfig+0x138>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <TIM_Base_SetConfig+0x13c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <TIM_Base_SetConfig+0x114>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_Base_SetConfig+0xf8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <TIM_Base_SetConfig+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d103      	bne.n	8005040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	615a      	str	r2, [r3, #20]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40010400 	.word	0x40010400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800
 8005074:	40001800 	.word	0x40001800
 8005078:	40001c00 	.word	0x40001c00
 800507c:	40002000 	.word	0x40002000

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	f043 0307 	orr.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e05a      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e03f      	b.n	8005366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc f83a 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2224      	movs	r2, #36	; 0x24
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 ff43 	bl	80061a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800534c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08c      	sub	sp, #48	; 0x30
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	d165      	bne.n	8005456 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_UART_Transmit_DMA+0x26>
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e05e      	b.n	8005458 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit_DMA+0x38>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e057      	b.n	8005458 <HAL_UART_Transmit_DMA+0xe8>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2221      	movs	r2, #33	; 0x21
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_UART_Transmit_DMA+0xf0>)
 80053d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <HAL_UART_Transmit_DMA+0xf4>)
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <HAL_UART_Transmit_DMA+0xf8>)
 80053e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	2200      	movs	r2, #0
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80053f0:	f107 0308 	add.w	r3, r7, #8
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3304      	adds	r3, #4
 8005404:	461a      	mov	r2, r3
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f7fc fbfc 	bl	8001c04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	617b      	str	r3, [r7, #20]
   return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543e:	627a      	str	r2, [r7, #36]	; 0x24
 8005440:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6a39      	ldr	r1, [r7, #32]
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	61fb      	str	r3, [r7, #28]
   return(result);
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	08005a3d 	.word	0x08005a3d
 8005464:	08005ad7 	.word	0x08005ad7
 8005468:	08005c4f 	.word	0x08005c4f

0800546c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b20      	cmp	r3, #32
 8005484:	d11d      	bne.n	80054c2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_UART_Receive_DMA+0x26>
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e016      	b.n	80054c4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Receive_DMA+0x38>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e00f      	b.n	80054c4 <HAL_UART_Receive_DMA+0x58>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fc13 	bl	8005ce4 <UART_Start_Receive_DMA>
 80054be:	4603      	mov	r3, r0
 80054c0:	e000      	b.n	80054c4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
  }
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b0ba      	sub	sp, #232	; 0xe8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800550a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_UART_IRQHandler+0x66>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fd7f 	bl	800602e <UART_Receive_IT>
      return;
 8005530:	e256      	b.n	80059e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80de 	beq.w	80056f8 <HAL_UART_IRQHandler+0x22c>
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80d1 	beq.w	80056f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_UART_IRQHandler+0xae>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0201 	orr.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_UART_IRQHandler+0xd2>
 8005586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <HAL_UART_IRQHandler+0xf6>
 80055aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d011      	beq.n	80055f2 <HAL_UART_IRQHandler+0x126>
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0208 	orr.w	r2, r3, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 81ed 	beq.w	80059d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_UART_IRQHandler+0x14e>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fd0a 	bl	800602e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_UART_IRQHandler+0x17a>
 800563e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04f      	beq.n	80056e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fc12 	bl	8005e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d141      	bne.n	80056de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800568a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800569e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1d9      	bne.n	800565a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d013      	beq.n	80056d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	4a7d      	ldr	r2, [pc, #500]	; (80058a8 <HAL_UART_IRQHandler+0x3dc>)
 80056b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fc fb6a 	bl	8001d94 <HAL_DMA_Abort_IT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e00e      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f99a 	bl	8005a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e00a      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f996 	bl	8005a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e006      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f992 	bl	8005a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056f2:	e170      	b.n	80059d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	bf00      	nop
    return;
 80056f6:	e16e      	b.n	80059d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	f040 814a 	bne.w	8005996 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8143 	beq.w	8005996 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 813c 	beq.w	8005996 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	f040 80b4 	bne.w	80058ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8140 	beq.w	80059da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800575e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005762:	429a      	cmp	r2, r3
 8005764:	f080 8139 	bcs.w	80059da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800576e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577a:	f000 8088 	beq.w	800588e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1d9      	bne.n	800577e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e1      	bne.n	80057ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3314      	adds	r3, #20
 8005826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800582a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800582c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e3      	bne.n	8005806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800585c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005870:	65ba      	str	r2, [r7, #88]	; 0x58
 8005872:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e3      	bne.n	800584c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	4618      	mov	r0, r3
 800588a:	f7fc fa13 	bl	8001cb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005896:	b29b      	uxth	r3, r3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8c0 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a4:	e099      	b.n	80059da <HAL_UART_IRQHandler+0x50e>
 80058a6:	bf00      	nop
 80058a8:	08005f37 	.word	0x08005f37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 808b 	beq.w	80059de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8086 	beq.w	80059de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058f6:	647a      	str	r2, [r7, #68]	; 0x44
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	623b      	str	r3, [r7, #32]
   return(result);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800592e:	633a      	str	r2, [r7, #48]	; 0x30
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e3      	bne.n	800590a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005974:	61fa      	str	r2, [r7, #28]
 8005976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	69b9      	ldr	r1, [r7, #24]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	617b      	str	r3, [r7, #20]
   return(result);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e3      	bne.n	8005950 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f848 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005994:	e023      	b.n	80059de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_UART_IRQHandler+0x4ea>
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fad5 	bl	8005f5e <UART_Transmit_IT>
    return;
 80059b4:	e014      	b.n	80059e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00e      	beq.n	80059e0 <HAL_UART_IRQHandler+0x514>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb15 	bl	8005ffe <UART_EndTransmit_IT>
    return;
 80059d4:	e004      	b.n	80059e0 <HAL_UART_IRQHandler+0x514>
    return;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <HAL_UART_IRQHandler+0x514>
      return;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HAL_UART_IRQHandler+0x514>
      return;
 80059de:	bf00      	nop
  }
}
 80059e0:	37e8      	adds	r7, #232	; 0xe8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop

080059e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b090      	sub	sp, #64	; 0x40
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d137      	bne.n	8005ac8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab2:	61fa      	str	r2, [r7, #28]
 8005ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ac6:	e002      	b.n	8005ace <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005ac8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005aca:	f7fb fa09 	bl	8000ee0 <HAL_UART_TxCpltCallback>
}
 8005ace:	bf00      	nop
 8005ad0:	3740      	adds	r7, #64	; 0x40
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff ff7f 	bl	80059e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b09c      	sub	sp, #112	; 0x70
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d172      	bne.n	8005bf4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	2200      	movs	r2, #0
 8005b12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b34:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b68:	647a      	str	r2, [r7, #68]	; 0x44
 8005b6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	663b      	str	r3, [r7, #96]	; 0x60
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b9c:	633a      	str	r2, [r7, #48]	; 0x30
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d119      	bne.n	8005bf4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0310 	bic.w	r3, r3, #16
 8005bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005be0:	61fa      	str	r2, [r7, #28]
 8005be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	617b      	str	r3, [r7, #20]
   return(result);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c00:	4619      	mov	r1, r3
 8005c02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c04:	f7ff ff0e 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c08:	e002      	b.n	8005c10 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005c0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c0c:	f7fb f940 	bl	8000e90 <HAL_UART_RxCpltCallback>
}
 8005c10:	bf00      	nop
 8005c12:	3770      	adds	r7, #112	; 0x70
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d108      	bne.n	8005c40 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4619      	mov	r1, r3
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fef3 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c3e:	e002      	b.n	8005c46 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff fedb 	bl	80059fc <HAL_UART_RxHalfCpltCallback>
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b80      	cmp	r3, #128	; 0x80
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b21      	cmp	r3, #33	; 0x21
 8005c80:	d108      	bne.n	8005c94 <UART_DMAError+0x46>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c8e:	68b8      	ldr	r0, [r7, #8]
 8005c90:	f000 f8c6 	bl	8005e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b22      	cmp	r3, #34	; 0x22
 8005cb4:	d108      	bne.n	8005cc8 <UART_DMAError+0x7a>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005cc2:	68b8      	ldr	r0, [r7, #8]
 8005cc4:	f000 f8d4 	bl	8005e70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd4:	68b8      	ldr	r0, [r7, #8]
 8005cd6:	f7ff fe9b 	bl	8005a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b098      	sub	sp, #96	; 0x60
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2222      	movs	r2, #34	; 0x22
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	4a40      	ldr	r2, [pc, #256]	; (8005e14 <UART_Start_Receive_DMA+0x130>)
 8005d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4a3f      	ldr	r2, [pc, #252]	; (8005e18 <UART_Start_Receive_DMA+0x134>)
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	4a3e      	ldr	r2, [pc, #248]	; (8005e1c <UART_Start_Receive_DMA+0x138>)
 8005d22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	2200      	movs	r2, #0
 8005d2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f7fb ff5e 	bl	8001c04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d019      	beq.n	8005da2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	657b      	str	r3, [r7, #84]	; 0x54
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3314      	adds	r3, #20
 8005ddc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	617b      	str	r3, [r7, #20]
   return(result);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005df6:	627a      	str	r2, [r7, #36]	; 0x24
 8005df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6a39      	ldr	r1, [r7, #32]
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e5      	bne.n	8005dd6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3760      	adds	r7, #96	; 0x60
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08005af3 	.word	0x08005af3
 8005e18:	08005c19 	.word	0x08005c19
 8005e1c:	08005c4f 	.word	0x08005c4f

08005e20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	61ba      	str	r2, [r7, #24]
 8005e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	613b      	str	r3, [r7, #16]
   return(result);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005e64:	bf00      	nop
 8005e66:	3724      	adds	r7, #36	; 0x24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b095      	sub	sp, #84	; 0x54
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e98:	643a      	str	r2, [r7, #64]	; 0x40
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d119      	bne.n	8005f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0310 	bic.w	r3, r3, #16
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f08:	61ba      	str	r2, [r7, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f2a:	bf00      	nop
 8005f2c:	3754      	adds	r7, #84	; 0x54
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fd5d 	bl	8005a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b21      	cmp	r3, #33	; 0x21
 8005f70:	d13e      	bne.n	8005ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d114      	bne.n	8005fa6 <UART_Transmit_IT+0x48>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d110      	bne.n	8005fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]
 8005fa4:	e008      	b.n	8005fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	1c59      	adds	r1, r3, #1
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6211      	str	r1, [r2, #32]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fa ff5e 	bl	8000ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b08c      	sub	sp, #48	; 0x30
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b22      	cmp	r3, #34	; 0x22
 8006040:	f040 80ab 	bne.w	800619a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d117      	bne.n	800607e <UART_Receive_IT+0x50>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606c:	b29a      	uxth	r2, r3
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
 800607c:	e026      	b.n	80060cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d007      	beq.n	80060a2 <UART_Receive_IT+0x74>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <UART_Receive_IT+0x82>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e008      	b.n	80060c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	4619      	mov	r1, r3
 80060da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d15a      	bne.n	8006196 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0220 	bic.w	r2, r2, #32
 80060ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d135      	bne.n	800618c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	613b      	str	r3, [r7, #16]
   return(result);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f023 0310 	bic.w	r3, r3, #16
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	623a      	str	r2, [r7, #32]
 8006148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	69f9      	ldr	r1, [r7, #28]
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	61bb      	str	r3, [r7, #24]
   return(result);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b10      	cmp	r3, #16
 8006166:	d10a      	bne.n	800617e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fc4d 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 800618a:	e002      	b.n	8006192 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fa fe7f 	bl	8000e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e002      	b.n	800619c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e000      	b.n	800619c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800619a:	2302      	movs	r3, #2
  }
}
 800619c:	4618      	mov	r0, r3
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a8:	b0c0      	sub	sp, #256	; 0x100
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	ea40 0301 	orr.w	r3, r0, r1
 80061cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	431a      	orrs	r2, r3
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061fc:	f021 010c 	bic.w	r1, r1, #12
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800620a:	430b      	orrs	r3, r1
 800620c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621e:	6999      	ldr	r1, [r3, #24]
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	ea40 0301 	orr.w	r3, r0, r1
 800622a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b8f      	ldr	r3, [pc, #572]	; (8006470 <UART_SetConfig+0x2cc>)
 8006234:	429a      	cmp	r2, r3
 8006236:	d005      	beq.n	8006244 <UART_SetConfig+0xa0>
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b8d      	ldr	r3, [pc, #564]	; (8006474 <UART_SetConfig+0x2d0>)
 8006240:	429a      	cmp	r2, r3
 8006242:	d104      	bne.n	800624e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7fe fb16 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8006248:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800624c:	e003      	b.n	8006256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800624e:	f7fe fafd 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8006252:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006260:	f040 810c 	bne.w	800647c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	1891      	adds	r1, r2, r2
 800627c:	65b9      	str	r1, [r7, #88]	; 0x58
 800627e:	415b      	adcs	r3, r3
 8006280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006286:	4621      	mov	r1, r4
 8006288:	eb12 0801 	adds.w	r8, r2, r1
 800628c:	4629      	mov	r1, r5
 800628e:	eb43 0901 	adc.w	r9, r3, r1
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800629e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062a6:	4690      	mov	r8, r2
 80062a8:	4699      	mov	r9, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	eb18 0303 	adds.w	r3, r8, r3
 80062b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b4:	462b      	mov	r3, r5
 80062b6:	eb49 0303 	adc.w	r3, r9, r3
 80062ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062d2:	460b      	mov	r3, r1
 80062d4:	18db      	adds	r3, r3, r3
 80062d6:	653b      	str	r3, [r7, #80]	; 0x50
 80062d8:	4613      	mov	r3, r2
 80062da:	eb42 0303 	adc.w	r3, r2, r3
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
 80062e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062e8:	f7f9 ffda 	bl	80002a0 <__aeabi_uldivmod>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4b61      	ldr	r3, [pc, #388]	; (8006478 <UART_SetConfig+0x2d4>)
 80062f2:	fba3 2302 	umull	r2, r3, r3, r2
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	011c      	lsls	r4, r3, #4
 80062fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006304:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800630c:	4642      	mov	r2, r8
 800630e:	464b      	mov	r3, r9
 8006310:	1891      	adds	r1, r2, r2
 8006312:	64b9      	str	r1, [r7, #72]	; 0x48
 8006314:	415b      	adcs	r3, r3
 8006316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800631c:	4641      	mov	r1, r8
 800631e:	eb12 0a01 	adds.w	sl, r2, r1
 8006322:	4649      	mov	r1, r9
 8006324:	eb43 0b01 	adc.w	fp, r3, r1
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800633c:	4692      	mov	sl, r2
 800633e:	469b      	mov	fp, r3
 8006340:	4643      	mov	r3, r8
 8006342:	eb1a 0303 	adds.w	r3, sl, r3
 8006346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800634a:	464b      	mov	r3, r9
 800634c:	eb4b 0303 	adc.w	r3, fp, r3
 8006350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006360:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006368:	460b      	mov	r3, r1
 800636a:	18db      	adds	r3, r3, r3
 800636c:	643b      	str	r3, [r7, #64]	; 0x40
 800636e:	4613      	mov	r3, r2
 8006370:	eb42 0303 	adc.w	r3, r2, r3
 8006374:	647b      	str	r3, [r7, #68]	; 0x44
 8006376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800637a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800637e:	f7f9 ff8f 	bl	80002a0 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4611      	mov	r1, r2
 8006388:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <UART_SetConfig+0x2d4>)
 800638a:	fba3 2301 	umull	r2, r3, r3, r1
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	2264      	movs	r2, #100	; 0x64
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	1acb      	subs	r3, r1, r3
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <UART_SetConfig+0x2d4>)
 80063a0:	fba3 2302 	umull	r2, r3, r3, r2
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063ac:	441c      	add	r4, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80063c8:	415b      	adcs	r3, r3
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063d0:	4641      	mov	r1, r8
 80063d2:	1851      	adds	r1, r2, r1
 80063d4:	6339      	str	r1, [r7, #48]	; 0x30
 80063d6:	4649      	mov	r1, r9
 80063d8:	414b      	adcs	r3, r1
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063e8:	4659      	mov	r1, fp
 80063ea:	00cb      	lsls	r3, r1, #3
 80063ec:	4651      	mov	r1, sl
 80063ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f2:	4651      	mov	r1, sl
 80063f4:	00ca      	lsls	r2, r1, #3
 80063f6:	4610      	mov	r0, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	4642      	mov	r2, r8
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006404:	464b      	mov	r3, r9
 8006406:	460a      	mov	r2, r1
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800641c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006424:	460b      	mov	r3, r1
 8006426:	18db      	adds	r3, r3, r3
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
 800642a:	4613      	mov	r3, r2
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800643a:	f7f9 ff31 	bl	80002a0 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <UART_SetConfig+0x2d4>)
 8006444:	fba3 1302 	umull	r1, r3, r3, r2
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	2164      	movs	r1, #100	; 0x64
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	3332      	adds	r3, #50	; 0x32
 8006456:	4a08      	ldr	r2, [pc, #32]	; (8006478 <UART_SetConfig+0x2d4>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f003 0207 	and.w	r2, r3, #7
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4422      	add	r2, r4
 800646a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800646c:	e105      	b.n	800667a <UART_SetConfig+0x4d6>
 800646e:	bf00      	nop
 8006470:	40011000 	.word	0x40011000
 8006474:	40011400 	.word	0x40011400
 8006478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800647c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006480:	2200      	movs	r2, #0
 8006482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006486:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800648a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800648e:	4642      	mov	r2, r8
 8006490:	464b      	mov	r3, r9
 8006492:	1891      	adds	r1, r2, r2
 8006494:	6239      	str	r1, [r7, #32]
 8006496:	415b      	adcs	r3, r3
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
 800649a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800649e:	4641      	mov	r1, r8
 80064a0:	1854      	adds	r4, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb43 0501 	adc.w	r5, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	00eb      	lsls	r3, r5, #3
 80064b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b6:	00e2      	lsls	r2, r4, #3
 80064b8:	4614      	mov	r4, r2
 80064ba:	461d      	mov	r5, r3
 80064bc:	4643      	mov	r3, r8
 80064be:	18e3      	adds	r3, r4, r3
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c4:	464b      	mov	r3, r9
 80064c6:	eb45 0303 	adc.w	r3, r5, r3
 80064ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064ea:	4629      	mov	r1, r5
 80064ec:	008b      	lsls	r3, r1, #2
 80064ee:	4621      	mov	r1, r4
 80064f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f4:	4621      	mov	r1, r4
 80064f6:	008a      	lsls	r2, r1, #2
 80064f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064fc:	f7f9 fed0 	bl	80002a0 <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4b60      	ldr	r3, [pc, #384]	; (8006688 <UART_SetConfig+0x4e4>)
 8006506:	fba3 2302 	umull	r2, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	011c      	lsls	r4, r3, #4
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006518:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800651c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	61b9      	str	r1, [r7, #24]
 8006528:	415b      	adcs	r3, r3
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006530:	4641      	mov	r1, r8
 8006532:	1851      	adds	r1, r2, r1
 8006534:	6139      	str	r1, [r7, #16]
 8006536:	4649      	mov	r1, r9
 8006538:	414b      	adcs	r3, r1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006548:	4659      	mov	r1, fp
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006552:	4651      	mov	r1, sl
 8006554:	00ca      	lsls	r2, r1, #3
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	4603      	mov	r3, r0
 800655c:	4642      	mov	r2, r8
 800655e:	189b      	adds	r3, r3, r2
 8006560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	67bb      	str	r3, [r7, #120]	; 0x78
 800657a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006588:	4649      	mov	r1, r9
 800658a:	008b      	lsls	r3, r1, #2
 800658c:	4641      	mov	r1, r8
 800658e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006592:	4641      	mov	r1, r8
 8006594:	008a      	lsls	r2, r1, #2
 8006596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800659a:	f7f9 fe81 	bl	80002a0 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <UART_SetConfig+0x4e4>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	; 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	3332      	adds	r3, #50	; 0x32
 80065b6:	4a34      	ldr	r2, [pc, #208]	; (8006688 <UART_SetConfig+0x4e4>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c2:	441c      	add	r4, r3
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	673b      	str	r3, [r7, #112]	; 0x70
 80065cc:	677a      	str	r2, [r7, #116]	; 0x74
 80065ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065d2:	4642      	mov	r2, r8
 80065d4:	464b      	mov	r3, r9
 80065d6:	1891      	adds	r1, r2, r2
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	415b      	adcs	r3, r3
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e2:	4641      	mov	r1, r8
 80065e4:	1851      	adds	r1, r2, r1
 80065e6:	6039      	str	r1, [r7, #0]
 80065e8:	4649      	mov	r1, r9
 80065ea:	414b      	adcs	r3, r1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065fa:	4659      	mov	r1, fp
 80065fc:	00cb      	lsls	r3, r1, #3
 80065fe:	4651      	mov	r1, sl
 8006600:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006604:	4651      	mov	r1, sl
 8006606:	00ca      	lsls	r2, r1, #3
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	4603      	mov	r3, r0
 800660e:	4642      	mov	r2, r8
 8006610:	189b      	adds	r3, r3, r2
 8006612:	66bb      	str	r3, [r7, #104]	; 0x68
 8006614:	464b      	mov	r3, r9
 8006616:	460a      	mov	r2, r1
 8006618:	eb42 0303 	adc.w	r3, r2, r3
 800661c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	663b      	str	r3, [r7, #96]	; 0x60
 8006628:	667a      	str	r2, [r7, #100]	; 0x64
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006636:	4649      	mov	r1, r9
 8006638:	008b      	lsls	r3, r1, #2
 800663a:	4641      	mov	r1, r8
 800663c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006640:	4641      	mov	r1, r8
 8006642:	008a      	lsls	r2, r1, #2
 8006644:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006648:	f7f9 fe2a 	bl	80002a0 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <UART_SetConfig+0x4e4>)
 8006652:	fba3 1302 	umull	r1, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	2164      	movs	r1, #100	; 0x64
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	3332      	adds	r3, #50	; 0x32
 8006664:	4a08      	ldr	r2, [pc, #32]	; (8006688 <UART_SetConfig+0x4e4>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	f003 020f 	and.w	r2, r3, #15
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4422      	add	r2, r4
 8006678:	609a      	str	r2, [r3, #8]
}
 800667a:	bf00      	nop
 800667c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006680:	46bd      	mov	sp, r7
 8006682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006686:	bf00      	nop
 8006688:	51eb851f 	.word	0x51eb851f

0800668c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800668c:	b084      	sub	sp, #16
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	f107 001c 	add.w	r0, r7, #28
 800669a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d122      	bne.n	80066ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d105      	bne.n	80066de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 faa2 	bl	8006c28 <USB_CoreReset>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e01a      	b.n	8006720 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa96 	bl	8006c28 <USB_CoreReset>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
 8006712:	e005      	b.n	8006720 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	2b01      	cmp	r3, #1
 8006724:	d10b      	bne.n	800673e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f043 0206 	orr.w	r2, r3, #6
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800674a:	b004      	add	sp, #16
 800674c:	4770      	bx	lr

0800674e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d115      	bne.n	80067be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800679e:	2001      	movs	r0, #1
 80067a0:	f7fb f87c 	bl	800189c <HAL_Delay>
      ms++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa2e 	bl	8006c0c <USB_GetMode>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d01e      	beq.n	80067f4 <USB_SetCurrentMode+0x84>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b31      	cmp	r3, #49	; 0x31
 80067ba:	d9f0      	bls.n	800679e <USB_SetCurrentMode+0x2e>
 80067bc:	e01a      	b.n	80067f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d115      	bne.n	80067f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067d0:	2001      	movs	r0, #1
 80067d2:	f7fb f863 	bl	800189c <HAL_Delay>
      ms++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fa15 	bl	8006c0c <USB_GetMode>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <USB_SetCurrentMode+0x84>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b31      	cmp	r3, #49	; 0x31
 80067ec:	d9f0      	bls.n	80067d0 <USB_SetCurrentMode+0x60>
 80067ee:	e001      	b.n	80067f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e005      	b.n	8006800 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b32      	cmp	r3, #50	; 0x32
 80067f8:	d101      	bne.n	80067fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006808:	b084      	sub	sp, #16
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	e009      	b.n	800683c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3340      	adds	r3, #64	; 0x40
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3301      	adds	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b0e      	cmp	r3, #14
 8006840:	d9f2      	bls.n	8006828 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11c      	bne.n	8006882 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006856:	f043 0302 	orr.w	r3, r3, #2
 800685a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
 8006880:	e00b      	b.n	800689a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	4619      	mov	r1, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b4:	461a      	mov	r2, r3
 80068b6:	680b      	ldr	r3, [r1, #0]
 80068b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10c      	bne.n	80068da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f965 	bl	8006b98 <USB_SetDevSpeed>
 80068ce:	e008      	b.n	80068e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068d0:	2101      	movs	r1, #1
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f960 	bl	8006b98 <USB_SetDevSpeed>
 80068d8:	e003      	b.n	80068e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068da:	2103      	movs	r1, #3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f95b 	bl	8006b98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068e2:	2110      	movs	r1, #16
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8f3 	bl	8006ad0 <USB_FlushTxFifo>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f91f 	bl	8006b38 <USB_FlushRxFifo>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	461a      	mov	r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	461a      	mov	r2, r3
 8006918:	2300      	movs	r3, #0
 800691a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	461a      	mov	r2, r3
 8006924:	2300      	movs	r3, #0
 8006926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	e043      	b.n	80069b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006944:	d118      	bne.n	8006978 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	461a      	mov	r2, r3
 800695a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e013      	b.n	800698a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696e:	461a      	mov	r2, r3
 8006970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e008      	b.n	800698a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	461a      	mov	r2, r3
 8006998:	2300      	movs	r3, #0
 800699a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	461a      	mov	r2, r3
 80069aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	3301      	adds	r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d3b7      	bcc.n	800692e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e043      	b.n	8006a4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069da:	d118      	bne.n	8006a0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e013      	b.n	8006a20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	461a      	mov	r2, r3
 8006a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e008      	b.n	8006a20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d3b7      	bcc.n	80069c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	f043 0210 	orr.w	r2, r3, #16
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <USB_DevInit+0x2c4>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f043 0208 	orr.w	r2, r3, #8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d107      	bne.n	8006abc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab4:	f043 0304 	orr.w	r3, r3, #4
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ac8:	b004      	add	sp, #16
 8006aca:	4770      	bx	lr
 8006acc:	803c3800 	.word	0x803c3800

08006ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <USB_FlushTxFifo+0x64>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e01b      	b.n	8006b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	daf2      	bge.n	8006ade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	019b      	lsls	r3, r3, #6
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <USB_FlushTxFifo+0x64>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e006      	b.n	8006b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d0f0      	beq.n	8006b08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	00030d40 	.word	0x00030d40

08006b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <USB_FlushRxFifo+0x5c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e018      	b.n	8006b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	daf2      	bge.n	8006b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2210      	movs	r2, #16
 8006b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <USB_FlushRxFifo+0x5c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e006      	b.n	8006b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d0f0      	beq.n	8006b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	00030d40 	.word	0x00030d40

08006b98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f003 0301 	and.w	r3, r3, #1
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a13      	ldr	r2, [pc, #76]	; (8006c8c <USB_CoreReset+0x64>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e01b      	b.n	8006c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	daf2      	bge.n	8006c34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f043 0201 	orr.w	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3301      	adds	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <USB_CoreReset+0x64>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d901      	bls.n	8006c70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e006      	b.n	8006c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d0f0      	beq.n	8006c5e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	00030d40 	.word	0x00030d40

08006c90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ca2:	2b84      	cmp	r3, #132	; 0x84
 8006ca4:	d005      	beq.n	8006cb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ca6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	3303      	adds	r3, #3
 8006cb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006cc4:	f000 faf6 	bl	80072b4 <vTaskStartScheduler>
  
  return osOK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd0:	b089      	sub	sp, #36	; 0x24
 8006cd2:	af04      	add	r7, sp, #16
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d020      	beq.n	8006d22 <osThreadCreate+0x54>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685c      	ldr	r4, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681d      	ldr	r5, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691e      	ldr	r6, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ffc8 	bl	8006c90 <makeFreeRtosPriority>
 8006d00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d0a:	9202      	str	r2, [sp, #8]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	9100      	str	r1, [sp, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4632      	mov	r2, r6
 8006d14:	4629      	mov	r1, r5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f8ed 	bl	8006ef6 <xTaskCreateStatic>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e01c      	b.n	8006d5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685c      	ldr	r4, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d2e:	b29e      	uxth	r6, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ffaa 	bl	8006c90 <makeFreeRtosPriority>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	9200      	str	r2, [sp, #0]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f92f 	bl	8006fb0 <xTaskCreate>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d001      	beq.n	8006d5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <osDelay+0x16>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	e000      	b.n	8006d7e <osDelay+0x18>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa64 	bl	800724c <vTaskDelay>
  
  return osOK;
 8006d84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f103 0208 	add.w	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f103 0208 	add.w	r2, r3, #8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d103      	bne.n	8006e50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e00c      	b.n	8006e6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3308      	adds	r3, #8
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e002      	b.n	8006e5e <vListInsert+0x2e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d2f6      	bcs.n	8006e58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6892      	ldr	r2, [r2, #8]
 8006eb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d103      	bne.n	8006ed6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b08e      	sub	sp, #56	; 0x38
 8006efa:	af04      	add	r7, sp, #16
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <xTaskCreateStatic+0x46>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	61fb      	str	r3, [r7, #28]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f3c:	23b4      	movs	r3, #180	; 0xb4
 8006f3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2bb4      	cmp	r3, #180	; 0xb4
 8006f44:	d00a      	beq.n	8006f5c <xTaskCreateStatic+0x66>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61bb      	str	r3, [r7, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01e      	beq.n	8006fa2 <xTaskCreateStatic+0xac>
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d01b      	beq.n	8006fa2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f851 	bl	800703c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f9c:	f000 f8ec 	bl	8007178 <prvAddNewTaskToReadyList>
 8006fa0:	e001      	b.n	8006fa6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 feef 	bl	8007da8 <pvPortMalloc>
 8006fca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fd2:	20b4      	movs	r0, #180	; 0xb4
 8006fd4:	f000 fee8 	bl	8007da8 <pvPortMalloc>
 8006fd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8006fe6:	e005      	b.n	8006ff4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	f000 ffa9 	bl	8007f40 <vPortFree>
 8006fee:	e001      	b.n	8006ff4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d017      	beq.n	800702a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	2300      	movs	r3, #0
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f80f 	bl	800703c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800701e:	69f8      	ldr	r0, [r7, #28]
 8007020:	f000 f8aa 	bl	8007178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007024:	2301      	movs	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	e002      	b.n	8007030 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007030:	69bb      	ldr	r3, [r7, #24]
	}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007054:	3b01      	subs	r3, #1
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f023 0307 	bic.w	r3, r3, #7
 8007062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <prvInitialiseNewTask+0x48>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	617b      	str	r3, [r7, #20]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01f      	beq.n	80070ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e012      	b.n	80070b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	7819      	ldrb	r1, [r3, #0]
 8007098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	3334      	adds	r3, #52	; 0x34
 80070a0:	460a      	mov	r2, r1
 80070a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	3301      	adds	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b0f      	cmp	r3, #15
 80070ba:	d9e9      	bls.n	8007090 <prvInitialiseNewTask+0x54>
 80070bc:	e000      	b.n	80070c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80070be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c8:	e003      	b.n	80070d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	2b06      	cmp	r3, #6
 80070d6:	d901      	bls.n	80070dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070d8:	2306      	movs	r3, #6
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	2200      	movs	r2, #0
 80070ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	3304      	adds	r3, #4
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff fe6b 	bl	8006dce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	3318      	adds	r3, #24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fe66 	bl	8006dce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	f1c3 0207 	rsb	r2, r3, #7
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	2200      	movs	r2, #0
 8007124:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	334c      	adds	r3, #76	; 0x4c
 800712c:	2260      	movs	r2, #96	; 0x60
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f001 f85d 	bl	80081f0 <memset>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	4a0c      	ldr	r2, [pc, #48]	; (800716c <prvInitialiseNewTask+0x130>)
 800713a:	651a      	str	r2, [r3, #80]	; 0x50
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <prvInitialiseNewTask+0x134>)
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	4a0b      	ldr	r2, [pc, #44]	; (8007174 <prvInitialiseNewTask+0x138>)
 8007146:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	69b8      	ldr	r0, [r7, #24]
 800714e:	f000 fc1f 	bl	8007990 <pxPortInitialiseStack>
 8007152:	4602      	mov	r2, r0
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007162:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007164:	bf00      	nop
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08008cd8 	.word	0x08008cd8
 8007170:	08008cf8 	.word	0x08008cf8
 8007174:	08008cb8 	.word	0x08008cb8

08007178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007180:	f000 fd30 	bl	8007be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007184:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <prvAddNewTaskToReadyList+0xb8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a29      	ldr	r2, [pc, #164]	; (8007230 <prvAddNewTaskToReadyList+0xb8>)
 800718c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800718e:	4b29      	ldr	r3, [pc, #164]	; (8007234 <prvAddNewTaskToReadyList+0xbc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <prvAddNewTaskToReadyList+0xbc>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <prvAddNewTaskToReadyList+0xb8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d110      	bne.n	80071c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071a4:	f000 facc 	bl	8007740 <prvInitialiseTaskLists>
 80071a8:	e00d      	b.n	80071c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071aa:	4b23      	ldr	r3, [pc, #140]	; (8007238 <prvAddNewTaskToReadyList+0xc0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071b2:	4b20      	ldr	r3, [pc, #128]	; (8007234 <prvAddNewTaskToReadyList+0xbc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	429a      	cmp	r2, r3
 80071be:	d802      	bhi.n	80071c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071c0:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <prvAddNewTaskToReadyList+0xbc>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071c6:	4b1d      	ldr	r3, [pc, #116]	; (800723c <prvAddNewTaskToReadyList+0xc4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	4a1b      	ldr	r2, [pc, #108]	; (800723c <prvAddNewTaskToReadyList+0xc4>)
 80071ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	2201      	movs	r2, #1
 80071d6:	409a      	lsls	r2, r3
 80071d8:	4b19      	ldr	r3, [pc, #100]	; (8007240 <prvAddNewTaskToReadyList+0xc8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4313      	orrs	r3, r2
 80071de:	4a18      	ldr	r2, [pc, #96]	; (8007240 <prvAddNewTaskToReadyList+0xc8>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a15      	ldr	r2, [pc, #84]	; (8007244 <prvAddNewTaskToReadyList+0xcc>)
 80071f0:	441a      	add	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7ff fdf5 	bl	8006de8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071fe:	f000 fd21 	bl	8007c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007202:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <prvAddNewTaskToReadyList+0xc0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00e      	beq.n	8007228 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <prvAddNewTaskToReadyList+0xbc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	429a      	cmp	r2, r3
 8007216:	d207      	bcs.n	8007228 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007218:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <prvAddNewTaskToReadyList+0xd0>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000ee4 	.word	0x20000ee4
 8007234:	20000de4 	.word	0x20000de4
 8007238:	20000ef0 	.word	0x20000ef0
 800723c:	20000f00 	.word	0x20000f00
 8007240:	20000eec 	.word	0x20000eec
 8007244:	20000de8 	.word	0x20000de8
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d017      	beq.n	800728e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <vTaskDelay+0x60>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <vTaskDelay+0x30>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800727c:	f000 f884 	bl	8007388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fb1e 	bl	80078c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007288:	f000 f88c 	bl	80073a4 <xTaskResumeAll>
 800728c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <vTaskDelay+0x64>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000f0c 	.word	0x20000f0c
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08a      	sub	sp, #40	; 0x28
 80072b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072c2:	463a      	mov	r2, r7
 80072c4:	1d39      	adds	r1, r7, #4
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f9 f96a 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	9202      	str	r2, [sp, #8]
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	2300      	movs	r3, #0
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	2300      	movs	r3, #0
 80072e0:	460a      	mov	r2, r1
 80072e2:	4921      	ldr	r1, [pc, #132]	; (8007368 <vTaskStartScheduler+0xb4>)
 80072e4:	4821      	ldr	r0, [pc, #132]	; (800736c <vTaskStartScheduler+0xb8>)
 80072e6:	f7ff fe06 	bl	8006ef6 <xTaskCreateStatic>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4a20      	ldr	r2, [pc, #128]	; (8007370 <vTaskStartScheduler+0xbc>)
 80072ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072f0:	4b1f      	ldr	r3, [pc, #124]	; (8007370 <vTaskStartScheduler+0xbc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	e001      	b.n	8007302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d11b      	bne.n	8007340 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	613b      	str	r3, [r7, #16]
}
 800731a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <vTaskStartScheduler+0xc0>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	334c      	adds	r3, #76	; 0x4c
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <vTaskStartScheduler+0xc4>)
 8007324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <vTaskStartScheduler+0xc8>)
 8007328:	f04f 32ff 	mov.w	r2, #4294967295
 800732c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <vTaskStartScheduler+0xcc>)
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007334:	4b13      	ldr	r3, [pc, #76]	; (8007384 <vTaskStartScheduler+0xd0>)
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800733a:	f000 fbb1 	bl	8007aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800733e:	e00e      	b.n	800735e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d10a      	bne.n	800735e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <vTaskStartScheduler+0xa8>
}
 800735e:	bf00      	nop
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	08008c90 	.word	0x08008c90
 800736c:	08007711 	.word	0x08007711
 8007370:	20000f08 	.word	0x20000f08
 8007374:	20000de4 	.word	0x20000de4
 8007378:	20000098 	.word	0x20000098
 800737c:	20000f04 	.word	0x20000f04
 8007380:	20000ef0 	.word	0x20000ef0
 8007384:	20000ee8 	.word	0x20000ee8

08007388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800738c:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <vTaskSuspendAll+0x18>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a03      	ldr	r2, [pc, #12]	; (80073a0 <vTaskSuspendAll+0x18>)
 8007394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000f0c 	.word	0x20000f0c

080073a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073b2:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <xTaskResumeAll+0x114>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	603b      	str	r3, [r7, #0]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073d0:	f000 fc08 	bl	8007be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073d4:	4b38      	ldr	r3, [pc, #224]	; (80074b8 <xTaskResumeAll+0x114>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3b01      	subs	r3, #1
 80073da:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <xTaskResumeAll+0x114>)
 80073dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073de:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <xTaskResumeAll+0x114>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d161      	bne.n	80074aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e6:	4b35      	ldr	r3, [pc, #212]	; (80074bc <xTaskResumeAll+0x118>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d05d      	beq.n	80074aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ee:	e02e      	b.n	800744e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	4b33      	ldr	r3, [pc, #204]	; (80074c0 <xTaskResumeAll+0x11c>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fd50 	bl	8006ea2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3304      	adds	r3, #4
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fd4b 	bl	8006ea2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <xTaskResumeAll+0x120>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4313      	orrs	r3, r2
 800741a:	4a2a      	ldr	r2, [pc, #168]	; (80074c4 <xTaskResumeAll+0x120>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <xTaskResumeAll+0x124>)
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7ff fcd7 	bl	8006de8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4b23      	ldr	r3, [pc, #140]	; (80074cc <xTaskResumeAll+0x128>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d302      	bcc.n	800744e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <xTaskResumeAll+0x12c>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800744e:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <xTaskResumeAll+0x11c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1cc      	bne.n	80073f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800745c:	f000 fa12 	bl	8007884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <xTaskResumeAll+0x130>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800746c:	f000 f836 	bl	80074dc <xTaskIncrementTick>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <xTaskResumeAll+0x12c>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3b01      	subs	r3, #1
 8007480:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f1      	bne.n	800746c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <xTaskResumeAll+0x130>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <xTaskResumeAll+0x12c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <xTaskResumeAll+0x134>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074aa:	f000 fbcb 	bl	8007c44 <vPortExitCritical>

	return xAlreadyYielded;
 80074ae:	68bb      	ldr	r3, [r7, #8]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000f0c 	.word	0x20000f0c
 80074bc:	20000ee4 	.word	0x20000ee4
 80074c0:	20000ea4 	.word	0x20000ea4
 80074c4:	20000eec 	.word	0x20000eec
 80074c8:	20000de8 	.word	0x20000de8
 80074cc:	20000de4 	.word	0x20000de4
 80074d0:	20000ef8 	.word	0x20000ef8
 80074d4:	20000ef4 	.word	0x20000ef4
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e6:	4b4e      	ldr	r3, [pc, #312]	; (8007620 <xTaskIncrementTick+0x144>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f040 808e 	bne.w	800760c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074f0:	4b4c      	ldr	r3, [pc, #304]	; (8007624 <xTaskIncrementTick+0x148>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f8:	4a4a      	ldr	r2, [pc, #296]	; (8007624 <xTaskIncrementTick+0x148>)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d120      	bne.n	8007546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007504:	4b48      	ldr	r3, [pc, #288]	; (8007628 <xTaskIncrementTick+0x14c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <xTaskIncrementTick+0x48>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	603b      	str	r3, [r7, #0]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xTaskIncrementTick+0x46>
 8007524:	4b40      	ldr	r3, [pc, #256]	; (8007628 <xTaskIncrementTick+0x14c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	4b40      	ldr	r3, [pc, #256]	; (800762c <xTaskIncrementTick+0x150>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a3e      	ldr	r2, [pc, #248]	; (8007628 <xTaskIncrementTick+0x14c>)
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	4a3e      	ldr	r2, [pc, #248]	; (800762c <xTaskIncrementTick+0x150>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4b3d      	ldr	r3, [pc, #244]	; (8007630 <xTaskIncrementTick+0x154>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <xTaskIncrementTick+0x154>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	f000 f99f 	bl	8007884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007546:	4b3b      	ldr	r3, [pc, #236]	; (8007634 <xTaskIncrementTick+0x158>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d348      	bcc.n	80075e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <xTaskIncrementTick+0x14c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755a:	4b36      	ldr	r3, [pc, #216]	; (8007634 <xTaskIncrementTick+0x158>)
 800755c:	f04f 32ff 	mov.w	r2, #4294967295
 8007560:	601a      	str	r2, [r3, #0]
					break;
 8007562:	e03e      	b.n	80075e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	4b30      	ldr	r3, [pc, #192]	; (8007628 <xTaskIncrementTick+0x14c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d203      	bcs.n	8007584 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <xTaskIncrementTick+0x158>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007582:	e02e      	b.n	80075e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fc8a 	bl	8006ea2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3318      	adds	r3, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fc81 	bl	8006ea2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	2201      	movs	r2, #1
 80075a6:	409a      	lsls	r2, r3
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <xTaskIncrementTick+0x15c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	4a22      	ldr	r2, [pc, #136]	; (8007638 <xTaskIncrementTick+0x15c>)
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a1f      	ldr	r2, [pc, #124]	; (800763c <xTaskIncrementTick+0x160>)
 80075c0:	441a      	add	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7ff fc0d 	bl	8006de8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <xTaskIncrementTick+0x164>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d3b9      	bcc.n	8007550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e0:	e7b6      	b.n	8007550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075e2:	4b17      	ldr	r3, [pc, #92]	; (8007640 <xTaskIncrementTick+0x164>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4914      	ldr	r1, [pc, #80]	; (800763c <xTaskIncrementTick+0x160>)
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d901      	bls.n	80075fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <xTaskIncrementTick+0x168>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007606:	2301      	movs	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e004      	b.n	8007616 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <xTaskIncrementTick+0x16c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <xTaskIncrementTick+0x16c>)
 8007614:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007616:	697b      	ldr	r3, [r7, #20]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000f0c 	.word	0x20000f0c
 8007624:	20000ee8 	.word	0x20000ee8
 8007628:	20000e9c 	.word	0x20000e9c
 800762c:	20000ea0 	.word	0x20000ea0
 8007630:	20000efc 	.word	0x20000efc
 8007634:	20000f04 	.word	0x20000f04
 8007638:	20000eec 	.word	0x20000eec
 800763c:	20000de8 	.word	0x20000de8
 8007640:	20000de4 	.word	0x20000de4
 8007644:	20000ef8 	.word	0x20000ef8
 8007648:	20000ef4 	.word	0x20000ef4

0800764c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007652:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <vTaskSwitchContext+0xac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800765a:	4b28      	ldr	r3, [pc, #160]	; (80076fc <vTaskSwitchContext+0xb0>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007660:	e044      	b.n	80076ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007662:	4b26      	ldr	r3, [pc, #152]	; (80076fc <vTaskSwitchContext+0xb0>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <vTaskSwitchContext+0xb4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	fab3 f383 	clz	r3, r3
 8007674:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f1c3 031f 	rsb	r3, r3, #31
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	4921      	ldr	r1, [pc, #132]	; (8007704 <vTaskSwitchContext+0xb8>)
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vTaskSwitchContext+0x5a>
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4a14      	ldr	r2, [pc, #80]	; (8007704 <vTaskSwitchContext+0xb8>)
 80076b4:	4413      	add	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3308      	adds	r3, #8
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d104      	bne.n	80076d8 <vTaskSwitchContext+0x8c>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	4a0a      	ldr	r2, [pc, #40]	; (8007708 <vTaskSwitchContext+0xbc>)
 80076e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <vTaskSwitchContext+0xbc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	334c      	adds	r3, #76	; 0x4c
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <vTaskSwitchContext+0xc0>)
 80076ea:	6013      	str	r3, [r2, #0]
}
 80076ec:	bf00      	nop
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	20000f0c 	.word	0x20000f0c
 80076fc:	20000ef8 	.word	0x20000ef8
 8007700:	20000eec 	.word	0x20000eec
 8007704:	20000de8 	.word	0x20000de8
 8007708:	20000de4 	.word	0x20000de4
 800770c:	20000098 	.word	0x20000098

08007710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007718:	f000 f852 	bl	80077c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <prvIdleTask+0x28>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d9f9      	bls.n	8007718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <prvIdleTask+0x2c>)
 8007726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007734:	e7f0      	b.n	8007718 <prvIdleTask+0x8>
 8007736:	bf00      	nop
 8007738:	20000de8 	.word	0x20000de8
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	e00c      	b.n	8007766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4a12      	ldr	r2, [pc, #72]	; (80077a0 <prvInitialiseTaskLists+0x60>)
 8007758:	4413      	add	r3, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fb17 	bl	8006d8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3301      	adds	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b06      	cmp	r3, #6
 800776a:	d9ef      	bls.n	800774c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800776c:	480d      	ldr	r0, [pc, #52]	; (80077a4 <prvInitialiseTaskLists+0x64>)
 800776e:	f7ff fb0e 	bl	8006d8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007772:	480d      	ldr	r0, [pc, #52]	; (80077a8 <prvInitialiseTaskLists+0x68>)
 8007774:	f7ff fb0b 	bl	8006d8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007778:	480c      	ldr	r0, [pc, #48]	; (80077ac <prvInitialiseTaskLists+0x6c>)
 800777a:	f7ff fb08 	bl	8006d8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800777e:	480c      	ldr	r0, [pc, #48]	; (80077b0 <prvInitialiseTaskLists+0x70>)
 8007780:	f7ff fb05 	bl	8006d8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007784:	480b      	ldr	r0, [pc, #44]	; (80077b4 <prvInitialiseTaskLists+0x74>)
 8007786:	f7ff fb02 	bl	8006d8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <prvInitialiseTaskLists+0x78>)
 800778c:	4a05      	ldr	r2, [pc, #20]	; (80077a4 <prvInitialiseTaskLists+0x64>)
 800778e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <prvInitialiseTaskLists+0x7c>)
 8007792:	4a05      	ldr	r2, [pc, #20]	; (80077a8 <prvInitialiseTaskLists+0x68>)
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000de8 	.word	0x20000de8
 80077a4:	20000e74 	.word	0x20000e74
 80077a8:	20000e88 	.word	0x20000e88
 80077ac:	20000ea4 	.word	0x20000ea4
 80077b0:	20000eb8 	.word	0x20000eb8
 80077b4:	20000ed0 	.word	0x20000ed0
 80077b8:	20000e9c 	.word	0x20000e9c
 80077bc:	20000ea0 	.word	0x20000ea0

080077c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c6:	e019      	b.n	80077fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c8:	f000 fa0c 	bl	8007be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <prvCheckTasksWaitingTermination+0x50>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fb62 	bl	8006ea2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077de:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <prvCheckTasksWaitingTermination+0x54>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	4a0b      	ldr	r2, [pc, #44]	; (8007814 <prvCheckTasksWaitingTermination+0x54>)
 80077e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e8:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077f2:	f000 fa27 	bl	8007c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f810 	bl	800781c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e1      	bne.n	80077c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000eb8 	.word	0x20000eb8
 8007814:	20000ee4 	.word	0x20000ee4
 8007818:	20000ecc 	.word	0x20000ecc

0800781c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	334c      	adds	r3, #76	; 0x4c
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fd8b 	bl	8008344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d108      	bne.n	800784a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fb7f 	bl	8007f40 <vPortFree>
				vPortFree( pxTCB );
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb7c 	bl	8007f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007848:	e018      	b.n	800787c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007850:	2b01      	cmp	r3, #1
 8007852:	d103      	bne.n	800785c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fb73 	bl	8007f40 <vPortFree>
	}
 800785a:	e00f      	b.n	800787c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007862:	2b02      	cmp	r3, #2
 8007864:	d00a      	beq.n	800787c <prvDeleteTCB+0x60>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60fb      	str	r3, [r7, #12]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <prvDeleteTCB+0x5e>
	}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <prvResetNextTaskUnblockTime+0x38>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800789c:	e008      	b.n	80078b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b07      	ldr	r3, [pc, #28]	; (80078bc <prvResetNextTaskUnblockTime+0x38>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4a04      	ldr	r2, [pc, #16]	; (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	6013      	str	r3, [r2, #0]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	20000e9c 	.word	0x20000e9c
 80078c0:	20000f04 	.word	0x20000f04

080078c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ce:	4b29      	ldr	r3, [pc, #164]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d4:	4b28      	ldr	r3, [pc, #160]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3304      	adds	r3, #4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fae1 	bl	8006ea2 <uxListRemove>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	2201      	movs	r2, #1
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43da      	mvns	r2, r3
 80078f4:	4b21      	ldr	r3, [pc, #132]	; (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	4a20      	ldr	r2, [pc, #128]	; (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d10a      	bne.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	481a      	ldr	r0, [pc, #104]	; (8007980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007916:	f7ff fa67 	bl	8006de8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800791a:	e026      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007924:	4b14      	ldr	r3, [pc, #80]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d209      	bcs.n	8007948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007934:	4b13      	ldr	r3, [pc, #76]	; (8007984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff fa75 	bl	8006e30 <vListInsert>
}
 8007946:	e010      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <prvAddCurrentTaskToDelayedList+0xc4>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7ff fa6b 	bl	8006e30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	d202      	bcs.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007964:	4a09      	ldr	r2, [pc, #36]	; (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6013      	str	r3, [r2, #0]
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000ee8 	.word	0x20000ee8
 8007978:	20000de4 	.word	0x20000de4
 800797c:	20000eec 	.word	0x20000eec
 8007980:	20000ed0 	.word	0x20000ed0
 8007984:	20000ea0 	.word	0x20000ea0
 8007988:	20000e9c 	.word	0x20000e9c
 800798c:	20000f04 	.word	0x20000f04

08007990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b04      	subs	r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c0:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <pxPortInitialiseStack+0x64>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b14      	subs	r3, #20
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f06f 0202 	mvn.w	r2, #2
 80079de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3b20      	subs	r3, #32
 80079e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	080079f9 	.word	0x080079f9

080079f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <prvTaskExitError+0x54>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d00a      	beq.n	8007a22 <prvTaskExitError+0x2a>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <prvTaskExitError+0x28>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a36:	bf00      	nop
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0fc      	beq.n	8007a38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20000094 	.word	0x20000094

08007a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <pxCurrentTCBConst2>)
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	f380 8809 	msr	PSP, r0
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	4770      	bx	lr
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst2>:
 8007a70:	20000de4 	.word	0x20000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a78:	4808      	ldr	r0, [pc, #32]	; (8007a9c <prvPortStartFirstTask+0x24>)
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f380 8808 	msr	MSP, r0
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8814 	msr	CONTROL, r0
 8007a8a:	b662      	cpsie	i
 8007a8c:	b661      	cpsie	f
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	df00      	svc	0
 8007a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed08 	.word	0xe000ed08

08007aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007aa6:	4b46      	ldr	r3, [pc, #280]	; (8007bc0 <xPortStartScheduler+0x120>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a46      	ldr	r2, [pc, #280]	; (8007bc4 <xPortStartScheduler+0x124>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10a      	bne.n	8007ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xPortStartScheduler+0x120>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3f      	ldr	r2, [pc, #252]	; (8007bc8 <xPortStartScheduler+0x128>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10a      	bne.n	8007ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60fb      	str	r3, [r7, #12]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ae6:	4b39      	ldr	r3, [pc, #228]	; (8007bcc <xPortStartScheduler+0x12c>)
 8007ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	22ff      	movs	r2, #255	; 0xff
 8007af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	4b31      	ldr	r3, [pc, #196]	; (8007bd0 <xPortStartScheduler+0x130>)
 8007b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b10:	2207      	movs	r2, #7
 8007b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b14:	e009      	b.n	8007b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b16:	4b2f      	ldr	r3, [pc, #188]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	4a2d      	ldr	r2, [pc, #180]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b32:	2b80      	cmp	r3, #128	; 0x80
 8007b34:	d0ef      	beq.n	8007b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f1c3 0307 	rsb	r3, r3, #7
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d00a      	beq.n	8007b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60bb      	str	r3, [r7, #8]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b58:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b62:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <xPortStartScheduler+0x134>)
 8007b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b76:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <xPortStartScheduler+0x138>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a17      	ldr	r2, [pc, #92]	; (8007bd8 <xPortStartScheduler+0x138>)
 8007b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <xPortStartScheduler+0x138>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <xPortStartScheduler+0x138>)
 8007b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b8e:	f000 f8dd 	bl	8007d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <xPortStartScheduler+0x13c>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b98:	f000 f8fc 	bl	8007d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b9c:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <xPortStartScheduler+0x140>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0f      	ldr	r2, [pc, #60]	; (8007be0 <xPortStartScheduler+0x140>)
 8007ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ba8:	f7ff ff66 	bl	8007a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bac:	f7ff fd4e 	bl	800764c <vTaskSwitchContext>
	prvTaskExitError();
 8007bb0:	f7ff ff22 	bl	80079f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	e000ed00 	.word	0xe000ed00
 8007bc4:	410fc271 	.word	0x410fc271
 8007bc8:	410fc270 	.word	0x410fc270
 8007bcc:	e000e400 	.word	0xe000e400
 8007bd0:	20000f10 	.word	0x20000f10
 8007bd4:	20000f14 	.word	0x20000f14
 8007bd8:	e000ed20 	.word	0xe000ed20
 8007bdc:	20000094 	.word	0x20000094
 8007be0:	e000ef34 	.word	0xe000ef34

08007be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <vPortEnterCritical+0x58>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a0d      	ldr	r2, [pc, #52]	; (8007c3c <vPortEnterCritical+0x58>)
 8007c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <vPortEnterCritical+0x58>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10f      	bne.n	8007c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortEnterCritical+0x5c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	603b      	str	r3, [r7, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <vPortEnterCritical+0x4a>
	}
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	20000094 	.word	0x20000094
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <vPortExitCritical+0x50>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <vPortExitCritical+0x24>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	607b      	str	r3, [r7, #4]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <vPortExitCritical+0x50>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <vPortExitCritical+0x50>)
 8007c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <vPortExitCritical+0x50>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <vPortExitCritical+0x42>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000094 	.word	0x20000094
	...

08007ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ca0:	f3ef 8009 	mrs	r0, PSP
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <pxCurrentTCBConst>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	f01e 0f10 	tst.w	lr, #16
 8007cb0:	bf08      	it	eq
 8007cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	6010      	str	r0, [r2, #0]
 8007cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cc4:	f380 8811 	msr	BASEPRI, r0
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f7ff fcbc 	bl	800764c <vTaskSwitchContext>
 8007cd4:	f04f 0000 	mov.w	r0, #0
 8007cd8:	f380 8811 	msr	BASEPRI, r0
 8007cdc:	bc09      	pop	{r0, r3}
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	6808      	ldr	r0, [r1, #0]
 8007ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce6:	f01e 0f10 	tst.w	lr, #16
 8007cea:	bf08      	it	eq
 8007cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cf0:	f380 8809 	msr	PSP, r0
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst>:
 8007d00:	20000de4 	.word	0x20000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop

08007d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d22:	f7ff fbdb 	bl	80074dc <xTaskIncrementTick>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <SysTick_Handler+0x40>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f383 8811 	msr	BASEPRI, r3
}
 8007d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <vPortSetupTimerInterrupt+0x38>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <vPortSetupTimerInterrupt+0x3c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <vPortSetupTimerInterrupt+0x40>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <vPortSetupTimerInterrupt+0x44>)
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	e000e010 	.word	0xe000e010
 8007d84:	e000e018 	.word	0xe000e018
 8007d88:	20000088 	.word	0x20000088
 8007d8c:	10624dd3 	.word	0x10624dd3
 8007d90:	e000e014 	.word	0xe000e014

08007d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007da4 <vPortEnableVFP+0x10>
 8007d98:	6801      	ldr	r1, [r0, #0]
 8007d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d9e:	6001      	str	r1, [r0, #0]
 8007da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007da2:	bf00      	nop
 8007da4:	e000ed88 	.word	0xe000ed88

08007da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db4:	f7ff fae8 	bl	8007388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db8:	4b5b      	ldr	r3, [pc, #364]	; (8007f28 <pvPortMalloc+0x180>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dc0:	f000 f920 	bl	8008004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc4:	4b59      	ldr	r3, [pc, #356]	; (8007f2c <pvPortMalloc+0x184>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 8093 	bne.w	8007ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	3308      	adds	r3, #8
 8007df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0x6c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d06e      	beq.n	8007ef8 <pvPortMalloc+0x150>
 8007e1a:	4b45      	ldr	r3, [pc, #276]	; (8007f30 <pvPortMalloc+0x188>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d869      	bhi.n	8007ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b43      	ldr	r3, [pc, #268]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa4>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b36      	ldr	r3, [pc, #216]	; (8007f28 <pvPortMalloc+0x180>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d050      	beq.n	8007ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d91f      	bls.n	8007eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	613b      	str	r3, [r7, #16]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f000 f908 	bl	80080c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb8:	4b1d      	ldr	r3, [pc, #116]	; (8007f30 <pvPortMalloc+0x188>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <pvPortMalloc+0x190>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d203      	bcs.n	8007eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed2:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <pvPortMalloc+0x188>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <pvPortMalloc+0x190>)
 8007ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <pvPortMalloc+0x184>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ef8:	f7ff fa54 	bl	80073a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <pvPortMalloc+0x174>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <pvPortMalloc+0x172>
	return pvReturn;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3728      	adds	r7, #40	; 0x28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20004b20 	.word	0x20004b20
 8007f2c:	20004b34 	.word	0x20004b34
 8007f30:	20004b24 	.word	0x20004b24
 8007f34:	20004b18 	.word	0x20004b18
 8007f38:	20004b28 	.word	0x20004b28
 8007f3c:	20004b2c 	.word	0x20004b2c

08007f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f52:	2308      	movs	r3, #8
 8007f54:	425b      	negs	r3, r3
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <vPortFree+0xb8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <vPortFree+0x44>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60fb      	str	r3, [r7, #12]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <vPortFree+0x62>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <vPortFree+0xb8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01e      	beq.n	8007fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11a      	bne.n	8007fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <vPortFree+0xb8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7ff f9de 	bl	8007388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <vPortFree+0xbc>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <vPortFree+0xbc>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f874 	bl	80080c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <vPortFree+0xc0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a06      	ldr	r2, [pc, #24]	; (8008000 <vPortFree+0xc0>)
 8007fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fea:	f7ff f9db 	bl	80073a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20004b34 	.word	0x20004b34
 8007ffc:	20004b24 	.word	0x20004b24
 8008000:	20004b30 	.word	0x20004b30

08008004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800800a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800800e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <prvHeapInit+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3307      	adds	r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <prvHeapInit+0xac>)
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800803c:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <prvHeapInit+0xb0>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <prvHeapInit+0xb0>)
 8008044:	2200      	movs	r2, #0
 8008046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008050:	2208      	movs	r2, #8
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0307 	bic.w	r3, r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <prvHeapInit+0xb4>)
 8008064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <prvHeapInit+0xb4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <prvHeapInit+0xb4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvHeapInit+0xb4>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <prvHeapInit+0xb8>)
 8008092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <prvHeapInit+0xbc>)
 800809a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <prvHeapInit+0xc0>)
 800809e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	20000f18 	.word	0x20000f18
 80080b4:	20004b18 	.word	0x20004b18
 80080b8:	20004b20 	.word	0x20004b20
 80080bc:	20004b28 	.word	0x20004b28
 80080c0:	20004b24 	.word	0x20004b24
 80080c4:	20004b34 	.word	0x20004b34

080080c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <prvInsertBlockIntoFreeList+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e002      	b.n	80080dc <prvInsertBlockIntoFreeList+0x14>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d8f7      	bhi.n	80080d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d108      	bne.n	800810a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	441a      	add	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d118      	bne.n	8008150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d00d      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e008      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e003      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d002      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008166:	bf00      	nop
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20004b18 	.word	0x20004b18
 8008178:	20004b20 	.word	0x20004b20

0800817c <__errno>:
 800817c:	4b01      	ldr	r3, [pc, #4]	; (8008184 <__errno+0x8>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000098 	.word	0x20000098

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4d0d      	ldr	r5, [pc, #52]	; (80081c0 <__libc_init_array+0x38>)
 800818c:	4c0d      	ldr	r4, [pc, #52]	; (80081c4 <__libc_init_array+0x3c>)
 800818e:	1b64      	subs	r4, r4, r5
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	2600      	movs	r6, #0
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	4d0b      	ldr	r5, [pc, #44]	; (80081c8 <__libc_init_array+0x40>)
 800819a:	4c0c      	ldr	r4, [pc, #48]	; (80081cc <__libc_init_array+0x44>)
 800819c:	f000 fcf8 	bl	8008b90 <_init>
 80081a0:	1b64      	subs	r4, r4, r5
 80081a2:	10a4      	asrs	r4, r4, #2
 80081a4:	2600      	movs	r6, #0
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	08008d54 	.word	0x08008d54
 80081c4:	08008d54 	.word	0x08008d54
 80081c8:	08008d54 	.word	0x08008d54
 80081cc:	08008d58 	.word	0x08008d58

080081d0 <__retarget_lock_acquire_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <__retarget_lock_release_recursive>:
 80081d2:	4770      	bx	lr

080081d4 <memcpy>:
 80081d4:	440a      	add	r2, r1
 80081d6:	4291      	cmp	r1, r2
 80081d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xc>
 80081de:	4770      	bx	lr
 80081e0:	b510      	push	{r4, lr}
 80081e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ea:	4291      	cmp	r1, r2
 80081ec:	d1f9      	bne.n	80081e2 <memcpy+0xe>
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <memset>:
 80081f0:	4402      	add	r2, r0
 80081f2:	4603      	mov	r3, r0
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d100      	bne.n	80081fa <memset+0xa>
 80081f8:	4770      	bx	lr
 80081fa:	f803 1b01 	strb.w	r1, [r3], #1
 80081fe:	e7f9      	b.n	80081f4 <memset+0x4>

08008200 <sbrk_aligned>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4e0e      	ldr	r6, [pc, #56]	; (800823c <sbrk_aligned+0x3c>)
 8008204:	460c      	mov	r4, r1
 8008206:	6831      	ldr	r1, [r6, #0]
 8008208:	4605      	mov	r5, r0
 800820a:	b911      	cbnz	r1, 8008212 <sbrk_aligned+0x12>
 800820c:	f000 f8f6 	bl	80083fc <_sbrk_r>
 8008210:	6030      	str	r0, [r6, #0]
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f8f1 	bl	80083fc <_sbrk_r>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	d00a      	beq.n	8008234 <sbrk_aligned+0x34>
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d007      	beq.n	8008238 <sbrk_aligned+0x38>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4628      	mov	r0, r5
 800822c:	f000 f8e6 	bl	80083fc <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d101      	bne.n	8008238 <sbrk_aligned+0x38>
 8008234:	f04f 34ff 	mov.w	r4, #4294967295
 8008238:	4620      	mov	r0, r4
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	20004b40 	.word	0x20004b40

08008240 <_malloc_r>:
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	1ccd      	adds	r5, r1, #3
 8008246:	f025 0503 	bic.w	r5, r5, #3
 800824a:	3508      	adds	r5, #8
 800824c:	2d0c      	cmp	r5, #12
 800824e:	bf38      	it	cc
 8008250:	250c      	movcc	r5, #12
 8008252:	2d00      	cmp	r5, #0
 8008254:	4607      	mov	r7, r0
 8008256:	db01      	blt.n	800825c <_malloc_r+0x1c>
 8008258:	42a9      	cmp	r1, r5
 800825a:	d905      	bls.n	8008268 <_malloc_r+0x28>
 800825c:	230c      	movs	r3, #12
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	2600      	movs	r6, #0
 8008262:	4630      	mov	r0, r6
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	4e2e      	ldr	r6, [pc, #184]	; (8008324 <_malloc_r+0xe4>)
 800826a:	f000 f8f7 	bl	800845c <__malloc_lock>
 800826e:	6833      	ldr	r3, [r6, #0]
 8008270:	461c      	mov	r4, r3
 8008272:	bb34      	cbnz	r4, 80082c2 <_malloc_r+0x82>
 8008274:	4629      	mov	r1, r5
 8008276:	4638      	mov	r0, r7
 8008278:	f7ff ffc2 	bl	8008200 <sbrk_aligned>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	4604      	mov	r4, r0
 8008280:	d14d      	bne.n	800831e <_malloc_r+0xde>
 8008282:	6834      	ldr	r4, [r6, #0]
 8008284:	4626      	mov	r6, r4
 8008286:	2e00      	cmp	r6, #0
 8008288:	d140      	bne.n	800830c <_malloc_r+0xcc>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	4631      	mov	r1, r6
 800828e:	4638      	mov	r0, r7
 8008290:	eb04 0803 	add.w	r8, r4, r3
 8008294:	f000 f8b2 	bl	80083fc <_sbrk_r>
 8008298:	4580      	cmp	r8, r0
 800829a:	d13a      	bne.n	8008312 <_malloc_r+0xd2>
 800829c:	6821      	ldr	r1, [r4, #0]
 800829e:	3503      	adds	r5, #3
 80082a0:	1a6d      	subs	r5, r5, r1
 80082a2:	f025 0503 	bic.w	r5, r5, #3
 80082a6:	3508      	adds	r5, #8
 80082a8:	2d0c      	cmp	r5, #12
 80082aa:	bf38      	it	cc
 80082ac:	250c      	movcc	r5, #12
 80082ae:	4629      	mov	r1, r5
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7ff ffa5 	bl	8008200 <sbrk_aligned>
 80082b6:	3001      	adds	r0, #1
 80082b8:	d02b      	beq.n	8008312 <_malloc_r+0xd2>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	442b      	add	r3, r5
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	e00e      	b.n	80082e0 <_malloc_r+0xa0>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	1b52      	subs	r2, r2, r5
 80082c6:	d41e      	bmi.n	8008306 <_malloc_r+0xc6>
 80082c8:	2a0b      	cmp	r2, #11
 80082ca:	d916      	bls.n	80082fa <_malloc_r+0xba>
 80082cc:	1961      	adds	r1, r4, r5
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	6025      	str	r5, [r4, #0]
 80082d2:	bf18      	it	ne
 80082d4:	6059      	strne	r1, [r3, #4]
 80082d6:	6863      	ldr	r3, [r4, #4]
 80082d8:	bf08      	it	eq
 80082da:	6031      	streq	r1, [r6, #0]
 80082dc:	5162      	str	r2, [r4, r5]
 80082de:	604b      	str	r3, [r1, #4]
 80082e0:	4638      	mov	r0, r7
 80082e2:	f104 060b 	add.w	r6, r4, #11
 80082e6:	f000 f8bf 	bl	8008468 <__malloc_unlock>
 80082ea:	f026 0607 	bic.w	r6, r6, #7
 80082ee:	1d23      	adds	r3, r4, #4
 80082f0:	1af2      	subs	r2, r6, r3
 80082f2:	d0b6      	beq.n	8008262 <_malloc_r+0x22>
 80082f4:	1b9b      	subs	r3, r3, r6
 80082f6:	50a3      	str	r3, [r4, r2]
 80082f8:	e7b3      	b.n	8008262 <_malloc_r+0x22>
 80082fa:	6862      	ldr	r2, [r4, #4]
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	bf0c      	ite	eq
 8008300:	6032      	streq	r2, [r6, #0]
 8008302:	605a      	strne	r2, [r3, #4]
 8008304:	e7ec      	b.n	80082e0 <_malloc_r+0xa0>
 8008306:	4623      	mov	r3, r4
 8008308:	6864      	ldr	r4, [r4, #4]
 800830a:	e7b2      	b.n	8008272 <_malloc_r+0x32>
 800830c:	4634      	mov	r4, r6
 800830e:	6876      	ldr	r6, [r6, #4]
 8008310:	e7b9      	b.n	8008286 <_malloc_r+0x46>
 8008312:	230c      	movs	r3, #12
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	4638      	mov	r0, r7
 8008318:	f000 f8a6 	bl	8008468 <__malloc_unlock>
 800831c:	e7a1      	b.n	8008262 <_malloc_r+0x22>
 800831e:	6025      	str	r5, [r4, #0]
 8008320:	e7de      	b.n	80082e0 <_malloc_r+0xa0>
 8008322:	bf00      	nop
 8008324:	20004b3c 	.word	0x20004b3c

08008328 <cleanup_glue>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	460c      	mov	r4, r1
 800832c:	6809      	ldr	r1, [r1, #0]
 800832e:	4605      	mov	r5, r0
 8008330:	b109      	cbz	r1, 8008336 <cleanup_glue+0xe>
 8008332:	f7ff fff9 	bl	8008328 <cleanup_glue>
 8008336:	4621      	mov	r1, r4
 8008338:	4628      	mov	r0, r5
 800833a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833e:	f000 b899 	b.w	8008474 <_free_r>
	...

08008344 <_reclaim_reent>:
 8008344:	4b2c      	ldr	r3, [pc, #176]	; (80083f8 <_reclaim_reent+0xb4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4283      	cmp	r3, r0
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	4604      	mov	r4, r0
 800834e:	d051      	beq.n	80083f4 <_reclaim_reent+0xb0>
 8008350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008352:	b143      	cbz	r3, 8008366 <_reclaim_reent+0x22>
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d14a      	bne.n	80083f0 <_reclaim_reent+0xac>
 800835a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	b111      	cbz	r1, 8008366 <_reclaim_reent+0x22>
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f887 	bl	8008474 <_free_r>
 8008366:	6961      	ldr	r1, [r4, #20]
 8008368:	b111      	cbz	r1, 8008370 <_reclaim_reent+0x2c>
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f882 	bl	8008474 <_free_r>
 8008370:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008372:	b111      	cbz	r1, 800837a <_reclaim_reent+0x36>
 8008374:	4620      	mov	r0, r4
 8008376:	f000 f87d 	bl	8008474 <_free_r>
 800837a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800837c:	b111      	cbz	r1, 8008384 <_reclaim_reent+0x40>
 800837e:	4620      	mov	r0, r4
 8008380:	f000 f878 	bl	8008474 <_free_r>
 8008384:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008386:	b111      	cbz	r1, 800838e <_reclaim_reent+0x4a>
 8008388:	4620      	mov	r0, r4
 800838a:	f000 f873 	bl	8008474 <_free_r>
 800838e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008390:	b111      	cbz	r1, 8008398 <_reclaim_reent+0x54>
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f86e 	bl	8008474 <_free_r>
 8008398:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800839a:	b111      	cbz	r1, 80083a2 <_reclaim_reent+0x5e>
 800839c:	4620      	mov	r0, r4
 800839e:	f000 f869 	bl	8008474 <_free_r>
 80083a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083a4:	b111      	cbz	r1, 80083ac <_reclaim_reent+0x68>
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f864 	bl	8008474 <_free_r>
 80083ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ae:	b111      	cbz	r1, 80083b6 <_reclaim_reent+0x72>
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f85f 	bl	8008474 <_free_r>
 80083b6:	69a3      	ldr	r3, [r4, #24]
 80083b8:	b1e3      	cbz	r3, 80083f4 <_reclaim_reent+0xb0>
 80083ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083bc:	4620      	mov	r0, r4
 80083be:	4798      	blx	r3
 80083c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083c2:	b1b9      	cbz	r1, 80083f4 <_reclaim_reent+0xb0>
 80083c4:	4620      	mov	r0, r4
 80083c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083ca:	f7ff bfad 	b.w	8008328 <cleanup_glue>
 80083ce:	5949      	ldr	r1, [r1, r5]
 80083d0:	b941      	cbnz	r1, 80083e4 <_reclaim_reent+0xa0>
 80083d2:	3504      	adds	r5, #4
 80083d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d6:	2d80      	cmp	r5, #128	; 0x80
 80083d8:	68d9      	ldr	r1, [r3, #12]
 80083da:	d1f8      	bne.n	80083ce <_reclaim_reent+0x8a>
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 f849 	bl	8008474 <_free_r>
 80083e2:	e7ba      	b.n	800835a <_reclaim_reent+0x16>
 80083e4:	680e      	ldr	r6, [r1, #0]
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 f844 	bl	8008474 <_free_r>
 80083ec:	4631      	mov	r1, r6
 80083ee:	e7ef      	b.n	80083d0 <_reclaim_reent+0x8c>
 80083f0:	2500      	movs	r5, #0
 80083f2:	e7ef      	b.n	80083d4 <_reclaim_reent+0x90>
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	bf00      	nop
 80083f8:	20000098 	.word	0x20000098

080083fc <_sbrk_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	; (8008418 <_sbrk_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7f9 f994 	bl	8001734 <_sbrk>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_sbrk_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_sbrk_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20004b44 	.word	0x20004b44

0800841c <siprintf>:
 800841c:	b40e      	push	{r1, r2, r3}
 800841e:	b500      	push	{lr}
 8008420:	b09c      	sub	sp, #112	; 0x70
 8008422:	ab1d      	add	r3, sp, #116	; 0x74
 8008424:	9002      	str	r0, [sp, #8]
 8008426:	9006      	str	r0, [sp, #24]
 8008428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800842c:	4809      	ldr	r0, [pc, #36]	; (8008454 <siprintf+0x38>)
 800842e:	9107      	str	r1, [sp, #28]
 8008430:	9104      	str	r1, [sp, #16]
 8008432:	4909      	ldr	r1, [pc, #36]	; (8008458 <siprintf+0x3c>)
 8008434:	f853 2b04 	ldr.w	r2, [r3], #4
 8008438:	9105      	str	r1, [sp, #20]
 800843a:	6800      	ldr	r0, [r0, #0]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	a902      	add	r1, sp, #8
 8008440:	f000 f8c0 	bl	80085c4 <_svfiprintf_r>
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	b01c      	add	sp, #112	; 0x70
 800844c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008450:	b003      	add	sp, #12
 8008452:	4770      	bx	lr
 8008454:	20000098 	.word	0x20000098
 8008458:	ffff0208 	.word	0xffff0208

0800845c <__malloc_lock>:
 800845c:	4801      	ldr	r0, [pc, #4]	; (8008464 <__malloc_lock+0x8>)
 800845e:	f7ff beb7 	b.w	80081d0 <__retarget_lock_acquire_recursive>
 8008462:	bf00      	nop
 8008464:	20004b38 	.word	0x20004b38

08008468 <__malloc_unlock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_unlock+0x8>)
 800846a:	f7ff beb2 	b.w	80081d2 <__retarget_lock_release_recursive>
 800846e:	bf00      	nop
 8008470:	20004b38 	.word	0x20004b38

08008474 <_free_r>:
 8008474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008476:	2900      	cmp	r1, #0
 8008478:	d044      	beq.n	8008504 <_free_r+0x90>
 800847a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847e:	9001      	str	r0, [sp, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f1a1 0404 	sub.w	r4, r1, #4
 8008486:	bfb8      	it	lt
 8008488:	18e4      	addlt	r4, r4, r3
 800848a:	f7ff ffe7 	bl	800845c <__malloc_lock>
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <_free_r+0x94>)
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	b933      	cbnz	r3, 80084a4 <_free_r+0x30>
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	b003      	add	sp, #12
 800849c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a0:	f7ff bfe2 	b.w	8008468 <__malloc_unlock>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d908      	bls.n	80084ba <_free_r+0x46>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1949      	addeq	r1, r1, r5
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	e7ed      	b.n	8008496 <_free_r+0x22>
 80084ba:	461a      	mov	r2, r3
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b10b      	cbz	r3, 80084c4 <_free_r+0x50>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d9fa      	bls.n	80084ba <_free_r+0x46>
 80084c4:	6811      	ldr	r1, [r2, #0]
 80084c6:	1855      	adds	r5, r2, r1
 80084c8:	42a5      	cmp	r5, r4
 80084ca:	d10b      	bne.n	80084e4 <_free_r+0x70>
 80084cc:	6824      	ldr	r4, [r4, #0]
 80084ce:	4421      	add	r1, r4
 80084d0:	1854      	adds	r4, r2, r1
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	d1e0      	bne.n	800849a <_free_r+0x26>
 80084d8:	681c      	ldr	r4, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	6053      	str	r3, [r2, #4]
 80084de:	4421      	add	r1, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	e7da      	b.n	800849a <_free_r+0x26>
 80084e4:	d902      	bls.n	80084ec <_free_r+0x78>
 80084e6:	230c      	movs	r3, #12
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	e7d6      	b.n	800849a <_free_r+0x26>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf04      	itt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	bf04      	itt	eq
 80084fc:	1949      	addeq	r1, r1, r5
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	6054      	str	r4, [r2, #4]
 8008502:	e7ca      	b.n	800849a <_free_r+0x26>
 8008504:	b003      	add	sp, #12
 8008506:	bd30      	pop	{r4, r5, pc}
 8008508:	20004b3c 	.word	0x20004b3c

0800850c <__ssputs_r>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	688e      	ldr	r6, [r1, #8]
 8008512:	429e      	cmp	r6, r3
 8008514:	4682      	mov	sl, r0
 8008516:	460c      	mov	r4, r1
 8008518:	4690      	mov	r8, r2
 800851a:	461f      	mov	r7, r3
 800851c:	d838      	bhi.n	8008590 <__ssputs_r+0x84>
 800851e:	898a      	ldrh	r2, [r1, #12]
 8008520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008524:	d032      	beq.n	800858c <__ssputs_r+0x80>
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	6909      	ldr	r1, [r1, #16]
 800852a:	eba5 0901 	sub.w	r9, r5, r1
 800852e:	6965      	ldr	r5, [r4, #20]
 8008530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008538:	3301      	adds	r3, #1
 800853a:	444b      	add	r3, r9
 800853c:	106d      	asrs	r5, r5, #1
 800853e:	429d      	cmp	r5, r3
 8008540:	bf38      	it	cc
 8008542:	461d      	movcc	r5, r3
 8008544:	0553      	lsls	r3, r2, #21
 8008546:	d531      	bpl.n	80085ac <__ssputs_r+0xa0>
 8008548:	4629      	mov	r1, r5
 800854a:	f7ff fe79 	bl	8008240 <_malloc_r>
 800854e:	4606      	mov	r6, r0
 8008550:	b950      	cbnz	r0, 8008568 <__ssputs_r+0x5c>
 8008552:	230c      	movs	r3, #12
 8008554:	f8ca 3000 	str.w	r3, [sl]
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	6921      	ldr	r1, [r4, #16]
 800856a:	464a      	mov	r2, r9
 800856c:	f7ff fe32 	bl	80081d4 <memcpy>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	6126      	str	r6, [r4, #16]
 800857e:	6165      	str	r5, [r4, #20]
 8008580:	444e      	add	r6, r9
 8008582:	eba5 0509 	sub.w	r5, r5, r9
 8008586:	6026      	str	r6, [r4, #0]
 8008588:	60a5      	str	r5, [r4, #8]
 800858a:	463e      	mov	r6, r7
 800858c:	42be      	cmp	r6, r7
 800858e:	d900      	bls.n	8008592 <__ssputs_r+0x86>
 8008590:	463e      	mov	r6, r7
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	4632      	mov	r2, r6
 8008596:	4641      	mov	r1, r8
 8008598:	f000 faa8 	bl	8008aec <memmove>
 800859c:	68a3      	ldr	r3, [r4, #8]
 800859e:	1b9b      	subs	r3, r3, r6
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4433      	add	r3, r6
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7db      	b.n	8008564 <__ssputs_r+0x58>
 80085ac:	462a      	mov	r2, r5
 80085ae:	f000 fab7 	bl	8008b20 <_realloc_r>
 80085b2:	4606      	mov	r6, r0
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d1e1      	bne.n	800857c <__ssputs_r+0x70>
 80085b8:	6921      	ldr	r1, [r4, #16]
 80085ba:	4650      	mov	r0, sl
 80085bc:	f7ff ff5a 	bl	8008474 <_free_r>
 80085c0:	e7c7      	b.n	8008552 <__ssputs_r+0x46>
	...

080085c4 <_svfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	4698      	mov	r8, r3
 80085ca:	898b      	ldrh	r3, [r1, #12]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	b09d      	sub	sp, #116	; 0x74
 80085d0:	4607      	mov	r7, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	d50e      	bpl.n	80085f6 <_svfiprintf_r+0x32>
 80085d8:	690b      	ldr	r3, [r1, #16]
 80085da:	b963      	cbnz	r3, 80085f6 <_svfiprintf_r+0x32>
 80085dc:	2140      	movs	r1, #64	; 0x40
 80085de:	f7ff fe2f 	bl	8008240 <_malloc_r>
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	6128      	str	r0, [r5, #16]
 80085e6:	b920      	cbnz	r0, 80085f2 <_svfiprintf_r+0x2e>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	e0d1      	b.n	8008796 <_svfiprintf_r+0x1d2>
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	616b      	str	r3, [r5, #20]
 80085f6:	2300      	movs	r3, #0
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	2320      	movs	r3, #32
 80085fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008600:	f8cd 800c 	str.w	r8, [sp, #12]
 8008604:	2330      	movs	r3, #48	; 0x30
 8008606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087b0 <_svfiprintf_r+0x1ec>
 800860a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800860e:	f04f 0901 	mov.w	r9, #1
 8008612:	4623      	mov	r3, r4
 8008614:	469a      	mov	sl, r3
 8008616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861a:	b10a      	cbz	r2, 8008620 <_svfiprintf_r+0x5c>
 800861c:	2a25      	cmp	r2, #37	; 0x25
 800861e:	d1f9      	bne.n	8008614 <_svfiprintf_r+0x50>
 8008620:	ebba 0b04 	subs.w	fp, sl, r4
 8008624:	d00b      	beq.n	800863e <_svfiprintf_r+0x7a>
 8008626:	465b      	mov	r3, fp
 8008628:	4622      	mov	r2, r4
 800862a:	4629      	mov	r1, r5
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ff6d 	bl	800850c <__ssputs_r>
 8008632:	3001      	adds	r0, #1
 8008634:	f000 80aa 	beq.w	800878c <_svfiprintf_r+0x1c8>
 8008638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800863a:	445a      	add	r2, fp
 800863c:	9209      	str	r2, [sp, #36]	; 0x24
 800863e:	f89a 3000 	ldrb.w	r3, [sl]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80a2 	beq.w	800878c <_svfiprintf_r+0x1c8>
 8008648:	2300      	movs	r3, #0
 800864a:	f04f 32ff 	mov.w	r2, #4294967295
 800864e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008652:	f10a 0a01 	add.w	sl, sl, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	9307      	str	r3, [sp, #28]
 800865a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800865e:	931a      	str	r3, [sp, #104]	; 0x68
 8008660:	4654      	mov	r4, sl
 8008662:	2205      	movs	r2, #5
 8008664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008668:	4851      	ldr	r0, [pc, #324]	; (80087b0 <_svfiprintf_r+0x1ec>)
 800866a:	f7f7 fdc9 	bl	8000200 <memchr>
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	b9d8      	cbnz	r0, 80086aa <_svfiprintf_r+0xe6>
 8008672:	06d0      	lsls	r0, r2, #27
 8008674:	bf44      	itt	mi
 8008676:	2320      	movmi	r3, #32
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867c:	0711      	lsls	r1, r2, #28
 800867e:	bf44      	itt	mi
 8008680:	232b      	movmi	r3, #43	; 0x2b
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	f89a 3000 	ldrb.w	r3, [sl]
 800868a:	2b2a      	cmp	r3, #42	; 0x2a
 800868c:	d015      	beq.n	80086ba <_svfiprintf_r+0xf6>
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4654      	mov	r4, sl
 8008692:	2000      	movs	r0, #0
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4621      	mov	r1, r4
 800869a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869e:	3b30      	subs	r3, #48	; 0x30
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d94e      	bls.n	8008742 <_svfiprintf_r+0x17e>
 80086a4:	b1b0      	cbz	r0, 80086d4 <_svfiprintf_r+0x110>
 80086a6:	9207      	str	r2, [sp, #28]
 80086a8:	e014      	b.n	80086d4 <_svfiprintf_r+0x110>
 80086aa:	eba0 0308 	sub.w	r3, r0, r8
 80086ae:	fa09 f303 	lsl.w	r3, r9, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	46a2      	mov	sl, r4
 80086b8:	e7d2      	b.n	8008660 <_svfiprintf_r+0x9c>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	9103      	str	r1, [sp, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfbb      	ittet	lt
 80086c6:	425b      	neglt	r3, r3
 80086c8:	f042 0202 	orrlt.w	r2, r2, #2
 80086cc:	9307      	strge	r3, [sp, #28]
 80086ce:	9307      	strlt	r3, [sp, #28]
 80086d0:	bfb8      	it	lt
 80086d2:	9204      	strlt	r2, [sp, #16]
 80086d4:	7823      	ldrb	r3, [r4, #0]
 80086d6:	2b2e      	cmp	r3, #46	; 0x2e
 80086d8:	d10c      	bne.n	80086f4 <_svfiprintf_r+0x130>
 80086da:	7863      	ldrb	r3, [r4, #1]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d135      	bne.n	800874c <_svfiprintf_r+0x188>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	1d1a      	adds	r2, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	9203      	str	r2, [sp, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfb8      	it	lt
 80086ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80086f0:	3402      	adds	r4, #2
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087c0 <_svfiprintf_r+0x1fc>
 80086f8:	7821      	ldrb	r1, [r4, #0]
 80086fa:	2203      	movs	r2, #3
 80086fc:	4650      	mov	r0, sl
 80086fe:	f7f7 fd7f 	bl	8000200 <memchr>
 8008702:	b140      	cbz	r0, 8008716 <_svfiprintf_r+0x152>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	eba0 000a 	sub.w	r0, r0, sl
 800870a:	fa03 f000 	lsl.w	r0, r3, r0
 800870e:	9b04      	ldr	r3, [sp, #16]
 8008710:	4303      	orrs	r3, r0
 8008712:	3401      	adds	r4, #1
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <_svfiprintf_r+0x1f0>)
 800871c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008720:	2206      	movs	r2, #6
 8008722:	f7f7 fd6d 	bl	8000200 <memchr>
 8008726:	2800      	cmp	r0, #0
 8008728:	d038      	beq.n	800879c <_svfiprintf_r+0x1d8>
 800872a:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <_svfiprintf_r+0x1f4>)
 800872c:	bb1b      	cbnz	r3, 8008776 <_svfiprintf_r+0x1b2>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	f023 0307 	bic.w	r3, r3, #7
 8008736:	3308      	adds	r3, #8
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873c:	4433      	add	r3, r6
 800873e:	9309      	str	r3, [sp, #36]	; 0x24
 8008740:	e767      	b.n	8008612 <_svfiprintf_r+0x4e>
 8008742:	fb0c 3202 	mla	r2, ip, r2, r3
 8008746:	460c      	mov	r4, r1
 8008748:	2001      	movs	r0, #1
 800874a:	e7a5      	b.n	8008698 <_svfiprintf_r+0xd4>
 800874c:	2300      	movs	r3, #0
 800874e:	3401      	adds	r4, #1
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	4619      	mov	r1, r3
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4620      	mov	r0, r4
 800875a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875e:	3a30      	subs	r2, #48	; 0x30
 8008760:	2a09      	cmp	r2, #9
 8008762:	d903      	bls.n	800876c <_svfiprintf_r+0x1a8>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0c5      	beq.n	80086f4 <_svfiprintf_r+0x130>
 8008768:	9105      	str	r1, [sp, #20]
 800876a:	e7c3      	b.n	80086f4 <_svfiprintf_r+0x130>
 800876c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008770:	4604      	mov	r4, r0
 8008772:	2301      	movs	r3, #1
 8008774:	e7f0      	b.n	8008758 <_svfiprintf_r+0x194>
 8008776:	ab03      	add	r3, sp, #12
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	462a      	mov	r2, r5
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <_svfiprintf_r+0x1f8>)
 800877e:	a904      	add	r1, sp, #16
 8008780:	4638      	mov	r0, r7
 8008782:	f3af 8000 	nop.w
 8008786:	1c42      	adds	r2, r0, #1
 8008788:	4606      	mov	r6, r0
 800878a:	d1d6      	bne.n	800873a <_svfiprintf_r+0x176>
 800878c:	89ab      	ldrh	r3, [r5, #12]
 800878e:	065b      	lsls	r3, r3, #25
 8008790:	f53f af2c 	bmi.w	80085ec <_svfiprintf_r+0x28>
 8008794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008796:	b01d      	add	sp, #116	; 0x74
 8008798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879c:	ab03      	add	r3, sp, #12
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <_svfiprintf_r+0x1f8>)
 80087a4:	a904      	add	r1, sp, #16
 80087a6:	4638      	mov	r0, r7
 80087a8:	f000 f87a 	bl	80088a0 <_printf_i>
 80087ac:	e7eb      	b.n	8008786 <_svfiprintf_r+0x1c2>
 80087ae:	bf00      	nop
 80087b0:	08008d18 	.word	0x08008d18
 80087b4:	08008d22 	.word	0x08008d22
 80087b8:	00000000 	.word	0x00000000
 80087bc:	0800850d 	.word	0x0800850d
 80087c0:	08008d1e 	.word	0x08008d1e

080087c4 <_printf_common>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	4616      	mov	r6, r2
 80087ca:	4699      	mov	r9, r3
 80087cc:	688a      	ldr	r2, [r1, #8]
 80087ce:	690b      	ldr	r3, [r1, #16]
 80087d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	bfb8      	it	lt
 80087d8:	4613      	movlt	r3, r2
 80087da:	6033      	str	r3, [r6, #0]
 80087dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e0:	4607      	mov	r7, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	b10a      	cbz	r2, 80087ea <_printf_common+0x26>
 80087e6:	3301      	adds	r3, #1
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	0699      	lsls	r1, r3, #26
 80087ee:	bf42      	ittt	mi
 80087f0:	6833      	ldrmi	r3, [r6, #0]
 80087f2:	3302      	addmi	r3, #2
 80087f4:	6033      	strmi	r3, [r6, #0]
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	f015 0506 	ands.w	r5, r5, #6
 80087fc:	d106      	bne.n	800880c <_printf_common+0x48>
 80087fe:	f104 0a19 	add.w	sl, r4, #25
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	6832      	ldr	r2, [r6, #0]
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc26      	bgt.n	800885a <_printf_common+0x96>
 800880c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008810:	1e13      	subs	r3, r2, #0
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	bf18      	it	ne
 8008816:	2301      	movne	r3, #1
 8008818:	0692      	lsls	r2, r2, #26
 800881a:	d42b      	bmi.n	8008874 <_printf_common+0xb0>
 800881c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008820:	4649      	mov	r1, r9
 8008822:	4638      	mov	r0, r7
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d01e      	beq.n	8008868 <_printf_common+0xa4>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	68e5      	ldr	r5, [r4, #12]
 800882e:	6832      	ldr	r2, [r6, #0]
 8008830:	f003 0306 	and.w	r3, r3, #6
 8008834:	2b04      	cmp	r3, #4
 8008836:	bf08      	it	eq
 8008838:	1aad      	subeq	r5, r5, r2
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	bf0c      	ite	eq
 8008840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008844:	2500      	movne	r5, #0
 8008846:	4293      	cmp	r3, r2
 8008848:	bfc4      	itt	gt
 800884a:	1a9b      	subgt	r3, r3, r2
 800884c:	18ed      	addgt	r5, r5, r3
 800884e:	2600      	movs	r6, #0
 8008850:	341a      	adds	r4, #26
 8008852:	42b5      	cmp	r5, r6
 8008854:	d11a      	bne.n	800888c <_printf_common+0xc8>
 8008856:	2000      	movs	r0, #0
 8008858:	e008      	b.n	800886c <_printf_common+0xa8>
 800885a:	2301      	movs	r3, #1
 800885c:	4652      	mov	r2, sl
 800885e:	4649      	mov	r1, r9
 8008860:	4638      	mov	r0, r7
 8008862:	47c0      	blx	r8
 8008864:	3001      	adds	r0, #1
 8008866:	d103      	bne.n	8008870 <_printf_common+0xac>
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008870:	3501      	adds	r5, #1
 8008872:	e7c6      	b.n	8008802 <_printf_common+0x3e>
 8008874:	18e1      	adds	r1, r4, r3
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	2030      	movs	r0, #48	; 0x30
 800887a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800887e:	4422      	add	r2, r4
 8008880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008888:	3302      	adds	r3, #2
 800888a:	e7c7      	b.n	800881c <_printf_common+0x58>
 800888c:	2301      	movs	r3, #1
 800888e:	4622      	mov	r2, r4
 8008890:	4649      	mov	r1, r9
 8008892:	4638      	mov	r0, r7
 8008894:	47c0      	blx	r8
 8008896:	3001      	adds	r0, #1
 8008898:	d0e6      	beq.n	8008868 <_printf_common+0xa4>
 800889a:	3601      	adds	r6, #1
 800889c:	e7d9      	b.n	8008852 <_printf_common+0x8e>
	...

080088a0 <_printf_i>:
 80088a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	7e0f      	ldrb	r7, [r1, #24]
 80088a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088a8:	2f78      	cmp	r7, #120	; 0x78
 80088aa:	4691      	mov	r9, r2
 80088ac:	4680      	mov	r8, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	469a      	mov	sl, r3
 80088b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088b6:	d807      	bhi.n	80088c8 <_printf_i+0x28>
 80088b8:	2f62      	cmp	r7, #98	; 0x62
 80088ba:	d80a      	bhi.n	80088d2 <_printf_i+0x32>
 80088bc:	2f00      	cmp	r7, #0
 80088be:	f000 80d8 	beq.w	8008a72 <_printf_i+0x1d2>
 80088c2:	2f58      	cmp	r7, #88	; 0x58
 80088c4:	f000 80a3 	beq.w	8008a0e <_printf_i+0x16e>
 80088c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d0:	e03a      	b.n	8008948 <_printf_i+0xa8>
 80088d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088d6:	2b15      	cmp	r3, #21
 80088d8:	d8f6      	bhi.n	80088c8 <_printf_i+0x28>
 80088da:	a101      	add	r1, pc, #4	; (adr r1, 80088e0 <_printf_i+0x40>)
 80088dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e0:	08008939 	.word	0x08008939
 80088e4:	0800894d 	.word	0x0800894d
 80088e8:	080088c9 	.word	0x080088c9
 80088ec:	080088c9 	.word	0x080088c9
 80088f0:	080088c9 	.word	0x080088c9
 80088f4:	080088c9 	.word	0x080088c9
 80088f8:	0800894d 	.word	0x0800894d
 80088fc:	080088c9 	.word	0x080088c9
 8008900:	080088c9 	.word	0x080088c9
 8008904:	080088c9 	.word	0x080088c9
 8008908:	080088c9 	.word	0x080088c9
 800890c:	08008a59 	.word	0x08008a59
 8008910:	0800897d 	.word	0x0800897d
 8008914:	08008a3b 	.word	0x08008a3b
 8008918:	080088c9 	.word	0x080088c9
 800891c:	080088c9 	.word	0x080088c9
 8008920:	08008a7b 	.word	0x08008a7b
 8008924:	080088c9 	.word	0x080088c9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088c9 	.word	0x080088c9
 8008930:	080088c9 	.word	0x080088c9
 8008934:	08008a43 	.word	0x08008a43
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	602a      	str	r2, [r5, #0]
 8008940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008948:	2301      	movs	r3, #1
 800894a:	e0a3      	b.n	8008a94 <_printf_i+0x1f4>
 800894c:	6820      	ldr	r0, [r4, #0]
 800894e:	6829      	ldr	r1, [r5, #0]
 8008950:	0606      	lsls	r6, r0, #24
 8008952:	f101 0304 	add.w	r3, r1, #4
 8008956:	d50a      	bpl.n	800896e <_printf_i+0xce>
 8008958:	680e      	ldr	r6, [r1, #0]
 800895a:	602b      	str	r3, [r5, #0]
 800895c:	2e00      	cmp	r6, #0
 800895e:	da03      	bge.n	8008968 <_printf_i+0xc8>
 8008960:	232d      	movs	r3, #45	; 0x2d
 8008962:	4276      	negs	r6, r6
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008968:	485e      	ldr	r0, [pc, #376]	; (8008ae4 <_printf_i+0x244>)
 800896a:	230a      	movs	r3, #10
 800896c:	e019      	b.n	80089a2 <_printf_i+0x102>
 800896e:	680e      	ldr	r6, [r1, #0]
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008976:	bf18      	it	ne
 8008978:	b236      	sxthne	r6, r6
 800897a:	e7ef      	b.n	800895c <_printf_i+0xbc>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	1d19      	adds	r1, r3, #4
 8008982:	6029      	str	r1, [r5, #0]
 8008984:	0601      	lsls	r1, r0, #24
 8008986:	d501      	bpl.n	800898c <_printf_i+0xec>
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	e002      	b.n	8008992 <_printf_i+0xf2>
 800898c:	0646      	lsls	r6, r0, #25
 800898e:	d5fb      	bpl.n	8008988 <_printf_i+0xe8>
 8008990:	881e      	ldrh	r6, [r3, #0]
 8008992:	4854      	ldr	r0, [pc, #336]	; (8008ae4 <_printf_i+0x244>)
 8008994:	2f6f      	cmp	r7, #111	; 0x6f
 8008996:	bf0c      	ite	eq
 8008998:	2308      	moveq	r3, #8
 800899a:	230a      	movne	r3, #10
 800899c:	2100      	movs	r1, #0
 800899e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a2:	6865      	ldr	r5, [r4, #4]
 80089a4:	60a5      	str	r5, [r4, #8]
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	bfa2      	ittt	ge
 80089aa:	6821      	ldrge	r1, [r4, #0]
 80089ac:	f021 0104 	bicge.w	r1, r1, #4
 80089b0:	6021      	strge	r1, [r4, #0]
 80089b2:	b90e      	cbnz	r6, 80089b8 <_printf_i+0x118>
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	d04d      	beq.n	8008a54 <_printf_i+0x1b4>
 80089b8:	4615      	mov	r5, r2
 80089ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80089be:	fb03 6711 	mls	r7, r3, r1, r6
 80089c2:	5dc7      	ldrb	r7, [r0, r7]
 80089c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089c8:	4637      	mov	r7, r6
 80089ca:	42bb      	cmp	r3, r7
 80089cc:	460e      	mov	r6, r1
 80089ce:	d9f4      	bls.n	80089ba <_printf_i+0x11a>
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d10b      	bne.n	80089ec <_printf_i+0x14c>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	07de      	lsls	r6, r3, #31
 80089d8:	d508      	bpl.n	80089ec <_printf_i+0x14c>
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	4299      	cmp	r1, r3
 80089e0:	bfde      	ittt	le
 80089e2:	2330      	movle	r3, #48	; 0x30
 80089e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ec:	1b52      	subs	r2, r2, r5
 80089ee:	6122      	str	r2, [r4, #16]
 80089f0:	f8cd a000 	str.w	sl, [sp]
 80089f4:	464b      	mov	r3, r9
 80089f6:	aa03      	add	r2, sp, #12
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f7ff fee2 	bl	80087c4 <_printf_common>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d14c      	bne.n	8008a9e <_printf_i+0x1fe>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b004      	add	sp, #16
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	4835      	ldr	r0, [pc, #212]	; (8008ae4 <_printf_i+0x244>)
 8008a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a14:	6829      	ldr	r1, [r5, #0]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a1c:	6029      	str	r1, [r5, #0]
 8008a1e:	061d      	lsls	r5, r3, #24
 8008a20:	d514      	bpl.n	8008a4c <_printf_i+0x1ac>
 8008a22:	07df      	lsls	r7, r3, #31
 8008a24:	bf44      	itt	mi
 8008a26:	f043 0320 	orrmi.w	r3, r3, #32
 8008a2a:	6023      	strmi	r3, [r4, #0]
 8008a2c:	b91e      	cbnz	r6, 8008a36 <_printf_i+0x196>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f023 0320 	bic.w	r3, r3, #32
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	2310      	movs	r3, #16
 8008a38:	e7b0      	b.n	800899c <_printf_i+0xfc>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	f043 0320 	orr.w	r3, r3, #32
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	2378      	movs	r3, #120	; 0x78
 8008a44:	4828      	ldr	r0, [pc, #160]	; (8008ae8 <_printf_i+0x248>)
 8008a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a4a:	e7e3      	b.n	8008a14 <_printf_i+0x174>
 8008a4c:	0659      	lsls	r1, r3, #25
 8008a4e:	bf48      	it	mi
 8008a50:	b2b6      	uxthmi	r6, r6
 8008a52:	e7e6      	b.n	8008a22 <_printf_i+0x182>
 8008a54:	4615      	mov	r5, r2
 8008a56:	e7bb      	b.n	80089d0 <_printf_i+0x130>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	6826      	ldr	r6, [r4, #0]
 8008a5c:	6961      	ldr	r1, [r4, #20]
 8008a5e:	1d18      	adds	r0, r3, #4
 8008a60:	6028      	str	r0, [r5, #0]
 8008a62:	0635      	lsls	r5, r6, #24
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	d501      	bpl.n	8008a6c <_printf_i+0x1cc>
 8008a68:	6019      	str	r1, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <_printf_i+0x1d2>
 8008a6c:	0670      	lsls	r0, r6, #25
 8008a6e:	d5fb      	bpl.n	8008a68 <_printf_i+0x1c8>
 8008a70:	8019      	strh	r1, [r3, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	4615      	mov	r5, r2
 8008a78:	e7ba      	b.n	80089f0 <_printf_i+0x150>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	602a      	str	r2, [r5, #0]
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	2100      	movs	r1, #0
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7f7 fbba 	bl	8000200 <memchr>
 8008a8c:	b108      	cbz	r0, 8008a92 <_printf_i+0x1f2>
 8008a8e:	1b40      	subs	r0, r0, r5
 8008a90:	6060      	str	r0, [r4, #4]
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	2300      	movs	r3, #0
 8008a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9c:	e7a8      	b.n	80089f0 <_printf_i+0x150>
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	47d0      	blx	sl
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d0ab      	beq.n	8008a04 <_printf_i+0x164>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	079b      	lsls	r3, r3, #30
 8008ab0:	d413      	bmi.n	8008ada <_printf_i+0x23a>
 8008ab2:	68e0      	ldr	r0, [r4, #12]
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	4298      	cmp	r0, r3
 8008ab8:	bfb8      	it	lt
 8008aba:	4618      	movlt	r0, r3
 8008abc:	e7a4      	b.n	8008a08 <_printf_i+0x168>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	47d0      	blx	sl
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d09b      	beq.n	8008a04 <_printf_i+0x164>
 8008acc:	3501      	adds	r5, #1
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	9903      	ldr	r1, [sp, #12]
 8008ad2:	1a5b      	subs	r3, r3, r1
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dcf2      	bgt.n	8008abe <_printf_i+0x21e>
 8008ad8:	e7eb      	b.n	8008ab2 <_printf_i+0x212>
 8008ada:	2500      	movs	r5, #0
 8008adc:	f104 0619 	add.w	r6, r4, #25
 8008ae0:	e7f5      	b.n	8008ace <_printf_i+0x22e>
 8008ae2:	bf00      	nop
 8008ae4:	08008d29 	.word	0x08008d29
 8008ae8:	08008d3a 	.word	0x08008d3a

08008aec <memmove>:
 8008aec:	4288      	cmp	r0, r1
 8008aee:	b510      	push	{r4, lr}
 8008af0:	eb01 0402 	add.w	r4, r1, r2
 8008af4:	d902      	bls.n	8008afc <memmove+0x10>
 8008af6:	4284      	cmp	r4, r0
 8008af8:	4623      	mov	r3, r4
 8008afa:	d807      	bhi.n	8008b0c <memmove+0x20>
 8008afc:	1e43      	subs	r3, r0, #1
 8008afe:	42a1      	cmp	r1, r4
 8008b00:	d008      	beq.n	8008b14 <memmove+0x28>
 8008b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b0a:	e7f8      	b.n	8008afe <memmove+0x12>
 8008b0c:	4402      	add	r2, r0
 8008b0e:	4601      	mov	r1, r0
 8008b10:	428a      	cmp	r2, r1
 8008b12:	d100      	bne.n	8008b16 <memmove+0x2a>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b1e:	e7f7      	b.n	8008b10 <memmove+0x24>

08008b20 <_realloc_r>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4680      	mov	r8, r0
 8008b26:	4614      	mov	r4, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	b921      	cbnz	r1, 8008b36 <_realloc_r+0x16>
 8008b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b30:	4611      	mov	r1, r2
 8008b32:	f7ff bb85 	b.w	8008240 <_malloc_r>
 8008b36:	b92a      	cbnz	r2, 8008b44 <_realloc_r+0x24>
 8008b38:	f7ff fc9c 	bl	8008474 <_free_r>
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	f000 f81b 	bl	8008b7e <_malloc_usable_size_r>
 8008b48:	4284      	cmp	r4, r0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	d802      	bhi.n	8008b54 <_realloc_r+0x34>
 8008b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b52:	d812      	bhi.n	8008b7a <_realloc_r+0x5a>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7ff fb72 	bl	8008240 <_malloc_r>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d0ed      	beq.n	8008b3e <_realloc_r+0x1e>
 8008b62:	42bc      	cmp	r4, r7
 8008b64:	4622      	mov	r2, r4
 8008b66:	4631      	mov	r1, r6
 8008b68:	bf28      	it	cs
 8008b6a:	463a      	movcs	r2, r7
 8008b6c:	f7ff fb32 	bl	80081d4 <memcpy>
 8008b70:	4631      	mov	r1, r6
 8008b72:	4640      	mov	r0, r8
 8008b74:	f7ff fc7e 	bl	8008474 <_free_r>
 8008b78:	e7e1      	b.n	8008b3e <_realloc_r+0x1e>
 8008b7a:	4635      	mov	r5, r6
 8008b7c:	e7df      	b.n	8008b3e <_realloc_r+0x1e>

08008b7e <_malloc_usable_size_r>:
 8008b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b82:	1f18      	subs	r0, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfbc      	itt	lt
 8008b88:	580b      	ldrlt	r3, [r1, r0]
 8008b8a:	18c0      	addlt	r0, r0, r3
 8008b8c:	4770      	bx	lr
	...

08008b90 <_init>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr

08008b9c <_fini>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr
