
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a44  08007a44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004988  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200049fc  200049fc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f7eb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a21  00000000  00000000  0003f88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  000432b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00044bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b47  00000000  00000000  000463f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca02  00000000  00000000  0006cf37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed80d  00000000  00000000  00089939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00177146  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071c4  00000000  00000000  00177198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007880 	.word	0x08007880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007880 	.word	0x08007880

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <decToBcd>:



 // Convert normal decimal numbers to binary coded decimal
 uint8_t decToBcd(int val)
 {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
   return (uint8_t)( (val/10*16) + (val%10) );
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <decToBcd+0x48>)
 80005d4:	fb82 1203 	smull	r1, r2, r2, r3
 80005d8:	1092      	asrs	r2, r2, #2
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	b2d8      	uxtb	r0, r3
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <decToBcd+0x48>)
 80005e8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ec:	1099      	asrs	r1, r3, #2
 80005ee:	17d3      	asrs	r3, r2, #31
 80005f0:	1ac9      	subs	r1, r1, r3
 80005f2:	460b      	mov	r3, r1
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	1ad1      	subs	r1, r2, r3
 80005fc:	b2cb      	uxtb	r3, r1
 80005fe:	4403      	add	r3, r0
 8000600:	b2db      	uxtb	r3, r3
 }
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	66666667 	.word	0x66666667

08000614 <bcdToDec>:

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	461a      	mov	r2, r3
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	4413      	add	r3, r2
 }
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Set_Time>:

 TIME time;

 /* function to set time */
 void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
 {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af04      	add	r7, sp, #16
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4603      	mov	r3, r0
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	460b      	mov	r3, r1
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	4613      	mov	r3, r2
 8000660:	713b      	strb	r3, [r7, #4]
 	uint8_t set_time[7];
 	set_time[0] = decToBcd(sec);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffaf 	bl	80005c8 <decToBcd>
 800066a:	4603      	mov	r3, r0
 800066c:	723b      	strb	r3, [r7, #8]
 	set_time[1] = decToBcd(min);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffa9 	bl	80005c8 <decToBcd>
 8000676:	4603      	mov	r3, r0
 8000678:	727b      	strb	r3, [r7, #9]
 	set_time[2] = decToBcd(hour);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffa3 	bl	80005c8 <decToBcd>
 8000682:	4603      	mov	r3, r0
 8000684:	72bb      	strb	r3, [r7, #10]
 	set_time[3] = decToBcd(dow);
 8000686:	793b      	ldrb	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff9d 	bl	80005c8 <decToBcd>
 800068e:	4603      	mov	r3, r0
 8000690:	72fb      	strb	r3, [r7, #11]
 	set_time[4] = decToBcd(dom);
 8000692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff96 	bl	80005c8 <decToBcd>
 800069c:	4603      	mov	r3, r0
 800069e:	733b      	strb	r3, [r7, #12]
 	set_time[5] = decToBcd(month);
 80006a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff8f 	bl	80005c8 <decToBcd>
 80006aa:	4603      	mov	r3, r0
 80006ac:	737b      	strb	r3, [r7, #13]
 	set_time[6] = decToBcd(year);
 80006ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff88 	bl	80005c8 <decToBcd>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73bb      	strb	r3, [r7, #14]

 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
 80006bc:	23d0      	movs	r3, #208	; 0xd0
 80006be:	b299      	uxth	r1, r3
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2307      	movs	r3, #7
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2200      	movs	r2, #0
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <Set_Time+0xa0>)
 80006d6:	f002 f9c3 	bl	8002a60 <HAL_I2C_Mem_Write>
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000056c 	.word	0x2000056c

080006e8 <Get_Time>:

 void Get_Time (void)
 {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af04      	add	r7, sp, #16
 	uint8_t get_time[7];
 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 80006ee:	23d0      	movs	r3, #208	; 0xd0
 80006f0:	b299      	uxth	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2307      	movs	r3, #7
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	463b      	mov	r3, r7
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	2200      	movs	r2, #0
 8000704:	481f      	ldr	r0, [pc, #124]	; (8000784 <Get_Time+0x9c>)
 8000706:	f002 faa5 	bl	8002c54 <HAL_I2C_Mem_Read>
// 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 	time.seconds = bcdToDec(get_time[0]);
 800070a:	783b      	ldrb	r3, [r7, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff81 	bl	8000614 <bcdToDec>
 8000712:	4603      	mov	r3, r0
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <Get_Time+0xa0>)
 8000718:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 800071a:	787b      	ldrb	r3, [r7, #1]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff79 	bl	8000614 <bcdToDec>
 8000722:	4603      	mov	r3, r0
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <Get_Time+0xa0>)
 8000728:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 800072a:	78bb      	ldrb	r3, [r7, #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff71 	bl	8000614 <bcdToDec>
 8000732:	4603      	mov	r3, r0
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <Get_Time+0xa0>)
 8000738:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff69 	bl	8000614 <bcdToDec>
 8000742:	4603      	mov	r3, r0
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <Get_Time+0xa0>)
 8000748:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff61 	bl	8000614 <bcdToDec>
 8000752:	4603      	mov	r3, r0
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <Get_Time+0xa0>)
 8000758:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff59 	bl	8000614 <bcdToDec>
 8000762:	4603      	mov	r3, r0
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <Get_Time+0xa0>)
 8000768:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff51 	bl	8000614 <bcdToDec>
 8000772:	4603      	mov	r3, r0
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <Get_Time+0xa0>)
 8000778:	719a      	strb	r2, [r3, #6]
 }
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000056c 	.word	0x2000056c
 8000788:	20000c2c 	.word	0x20000c2c

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b0a4      	sub	sp, #144	; 0x90
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 ff01 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f88b 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fa51 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fa27 	bl	8000bf0 <MX_DMA_Init>
  MX_ETH_Init();
 80007a2:	f000 f8ef 	bl	8000984 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007a6:	f000 f9cb 	bl	8000b40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007aa:	f000 f9f3 	bl	8000b94 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80007ae:	f000 f977 	bl	8000aa0 <MX_TIM1_Init>
  MX_I2C2_Init();
 80007b2:	f000 f935 	bl	8000a20 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80007b6:	4833      	ldr	r0, [pc, #204]	; (8000884 <main+0xf8>)
 80007b8:	f003 fe80 	bl	80044bc <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityNormal, 0, 128);
 80007bc:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0xfc>)
 80007be:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 80007d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 f8ed 	bl	80059b6 <osThreadCreate>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a2b      	ldr	r2, [pc, #172]	; (800088c <main+0x100>)
 80007e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <main+0x104>)
 80007e4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 80007f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 f8da 	bl	80059b6 <osThreadCreate>
 8000802:	4603      	mov	r3, r0
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <main+0x108>)
 8000806:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0x10c>)
 800080a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 800081c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f8c7 	bl	80059b6 <osThreadCreate>
 8000828:	4603      	mov	r3, r0
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <main+0x110>)
 800082c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x114>)
 8000830:	f107 0420 	add.w	r4, r7, #32
 8000834:	461d      	mov	r5, r3
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 f8b4 	bl	80059b6 <osThreadCreate>
 800084e:	4603      	mov	r3, r0
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <main+0x118>)
 8000852:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityAboveNormal, 0, 128);
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <main+0x11c>)
 8000856:	1d3c      	adds	r4, r7, #4
 8000858:	461d      	mov	r5, r3
 800085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f005 f8a3 	bl	80059b6 <osThreadCreate>
 8000870:	4603      	mov	r3, r0
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <main+0x120>)
 8000874:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000876:	f005 f897 	bl	80059a8 <osKernelStart>
//
//	  Temp_byte1 = DS18B20_Read();
//	  Temp_byte2 = DS18B20_Read();
//	  TEMP = (Temp_byte2<<8)|Temp_byte1;
//	  temperature = (float)TEMP/16;
	  HAL_Delay(500);
 800087a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087e:	f000 fecd 	bl	800161c <HAL_Delay>
 8000882:	e7fa      	b.n	800087a <main+0xee>
 8000884:	20000680 	.word	0x20000680
 8000888:	080078e4 	.word	0x080078e4
 800088c:	20000c18 	.word	0x20000c18
 8000890:	08007900 	.word	0x08007900
 8000894:	20000c1c 	.word	0x20000c1c
 8000898:	0800791c 	.word	0x0800791c
 800089c:	20000c20 	.word	0x20000c20
 80008a0:	08007938 	.word	0x08007938
 80008a4:	20000c24 	.word	0x20000c24
 80008a8:	08007954 	.word	0x08007954
 80008ac:	20000c28 	.word	0x20000c28

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	; 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fb0e 	bl	8006ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a27      	ldr	r2, [pc, #156]	; (800097c <SystemClock_Config+0xcc>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <SystemClock_Config+0xd0>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000924:	23a8      	movs	r3, #168	; 0xa8
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800092c:	2307      	movs	r3, #7
 800092e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4618      	mov	r0, r3
 8000936:	f003 f8a7 	bl	8003a88 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000940:	f000 faa1 	bl	8000e86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000950:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2105      	movs	r1, #5
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fb08 	bl	8003f78 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800096e:	f000 fa8a 	bl	8000e86 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3750      	adds	r7, #80	; 0x50
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_ETH_Init+0x84>)
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <MX_ETH_Init+0x88>)
 800098c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_ETH_Init+0x8c>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_ETH_Init+0x8c>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_ETH_Init+0x8c>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_ETH_Init+0x8c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_ETH_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_ETH_Init+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_ETH_Init+0x84>)
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MX_ETH_Init+0x8c>)
 80009b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_ETH_Init+0x84>)
 80009ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009be:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_ETH_Init+0x84>)
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <MX_ETH_Init+0x90>)
 80009c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_ETH_Init+0x84>)
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_ETH_Init+0x94>)
 80009ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_ETH_Init+0x84>)
 80009ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_ETH_Init+0x84>)
 80009d6:	f001 fa11 	bl	8001dfc <HAL_ETH_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009e0:	f000 fa51 	bl	8000e86 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009e4:	2238      	movs	r2, #56	; 0x38
 80009e6:	2100      	movs	r1, #0
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_ETH_Init+0x98>)
 80009ea:	f006 fa79 	bl	8006ee0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_ETH_Init+0x98>)
 80009f0:	2221      	movs	r2, #33	; 0x21
 80009f2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_ETH_Init+0x98>)
 80009f6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009fa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_ETH_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200004bc 	.word	0x200004bc
 8000a0c:	40028000 	.word	0x40028000
 8000a10:	20000c40 	.word	0x20000c40
 8000a14:	2000041c 	.word	0x2000041c
 8000a18:	2000037c 	.word	0x2000037c
 8000a1c:	20000344 	.word	0x20000344

08000a20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C2_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C2_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a5e:	f001 febb 	bl	80027d8 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fa0d 	bl	8000e86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a70:	f002 fe71 	bl	8003756 <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 fa04 	bl	8000e86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a82:	f002 fea4 	bl	80037ce <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 f9fb 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000056c 	.word	0x2000056c
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000ac4:	22a7      	movs	r2, #167	; 0xa7
 8000ac6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000aea:	f003 fc97 	bl	800441c <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f9c7 	bl	8000e86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000b06:	f003 feb9 	bl	800487c <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b10:	f000 f9b9 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM1_Init+0x98>)
 8000b22:	f004 f8d5 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b2c:	f000 f9ab 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000680 	.word	0x20000680
 8000b3c:	40010000 	.word	0x40010000

08000b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART3_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b78:	f004 f93a 	bl	8004df0 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f980 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200006c8 	.word	0x200006c8
 8000b90:	40004800 	.word	0x40004800

08000b94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd8:	f002 fe38 	bl	800384c <HAL_PCD_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f950 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000070c 	.word	0x2000070c

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2105      	movs	r1, #5
 8000c16:	200d      	movs	r0, #13
 8000c18:	f000 fddc 	bl	80017d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c1c:	200d      	movs	r0, #13
 8000c1e:	f000 fdf5 	bl	800180c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	202f      	movs	r0, #47	; 0x2f
 8000c28:	f000 fdd4 	bl	80017d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c2c:	202f      	movs	r0, #47	; 0x2f
 8000c2e:	f000 fded 	bl	800180c <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a4a      	ldr	r2, [pc, #296]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a43      	ldr	r2, [pc, #268]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d20:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000d22:	f001 fd3f 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2140      	movs	r1, #64	; 0x40
 8000d2a:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <MX_GPIO_Init+0x188>)
 8000d2c:	f001 fd3a 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4821      	ldr	r0, [pc, #132]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d48:	f001 fb80 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_GPIO_Init+0x190>)
 8000d60:	f001 fb74 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000d7e:	f001 fb65 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0x188>)
 8000d9a:	f001 fb57 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_GPIO_Init+0x188>)
 8000db2:	f001 fb4b 	bl	800244c <HAL_GPIO_Init>

}
 8000db6:	bf00      	nop
 8000db8:	3730      	adds	r7, #48	; 0x30
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <Start_RTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Set_Time(00, 03, 14, 5, 3, 1, 19);
 8000ddc:	2313      	movs	r3, #19
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2305      	movs	r3, #5
 8000dea:	220e      	movs	r2, #14
 8000dec:	2103      	movs	r1, #3
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fc28 	bl	8000644 <Set_Time>
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8000df4:	f7ff fc78 	bl	80006e8 <Get_Time>
	  sprintf(buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <Start_RTC+0x48>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <Start_RTC+0x48>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <Start_RTC+0x48>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4904      	ldr	r1, [pc, #16]	; (8000e20 <Start_RTC+0x4c>)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <Start_RTC+0x50>)
 8000e10:	f006 f97c 	bl	800710c <siprintf>
    osDelay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f004 fe1a 	bl	8005a4e <osDelay>
  {
 8000e1a:	e7eb      	b.n	8000df4 <Start_RTC+0x20>
 8000e1c:	20000c2c 	.word	0x20000c2c
 8000e20:	08007970 	.word	0x08007970
 8000e24:	20000c34 	.word	0x20000c34

08000e28 <Start_UART_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f004 fe0c 	bl	8005a4e <osDelay>
 8000e36:	e7fb      	b.n	8000e30 <Start_UART_LED+0x8>

08000e38 <Start_DataLogging>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f004 fe04 	bl	8005a4e <osDelay>
 8000e46:	e7fb      	b.n	8000e40 <Start_DataLogging+0x8>

08000e48 <Start_FanControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f004 fdfc 	bl	8005a4e <osDelay>
 8000e56:	e7fb      	b.n	8000e50 <Start_FanControl+0x8>

08000e58 <Start_Temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f004 fdf4 	bl	8005a4e <osDelay>
 8000e66:	e7fb      	b.n	8000e60 <Start_Temp+0x8>

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 fbaf 	bl	80015dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8a:	b672      	cpsid	i
}
 8000e8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x54>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_MspInit+0x54>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f06f 0001 	mvn.w	r0, #1
 8000ed6:	f000 fc7d 	bl	80017d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_ETH_MspInit+0x174>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f040 80a4 	bne.w	8001054 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	4b53      	ldr	r3, [pc, #332]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b50      	ldr	r3, [pc, #320]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	623b      	str	r3, [r7, #32]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a3d      	ldr	r2, [pc, #244]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a36      	ldr	r2, [pc, #216]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_ETH_MspInit+0x178>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd0:	2332      	movs	r3, #50	; 0x32
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481e      	ldr	r0, [pc, #120]	; (8001064 <HAL_ETH_MspInit+0x17c>)
 8000fec:	f001 fa2e 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ff0:	2386      	movs	r3, #134	; 0x86
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001000:	230b      	movs	r3, #11
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <HAL_ETH_MspInit+0x180>)
 800100c:	f001 fa1e 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001022:	230b      	movs	r3, #11
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <HAL_ETH_MspInit+0x184>)
 800102e:	f001 fa0d 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001032:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001044:	230b      	movs	r3, #11
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <HAL_ETH_MspInit+0x188>)
 8001050:	f001 f9fc 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3738      	adds	r7, #56	; 0x38
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40028000 	.word	0x40028000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020800 	.word	0x40020800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40021800 	.word	0x40021800

08001074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <HAL_I2C_MspInit+0x13c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 8088 	bne.w	80011a8 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2312      	movs	r3, #18
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010c4:	2304      	movs	r3, #4
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	483a      	ldr	r0, [pc, #232]	; (80011b8 <HAL_I2C_MspInit+0x144>)
 80010d0:	f001 f9bc 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 80010de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_I2C_MspInit+0x140>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_I2C_MspInit+0x148>)
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_I2C_MspInit+0x14c>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_I2C_MspInit+0x148>)
 80010f8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_I2C_MspInit+0x148>)
 800110c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_I2C_MspInit+0x148>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_I2C_MspInit+0x148>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001132:	f000 fb79 	bl	8001828 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800113c:	f7ff fea3 	bl	8000e86 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_I2C_MspInit+0x148>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_I2C_MspInit+0x154>)
 8001150:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001154:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001158:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 800118e:	f000 fb4b 	bl	8001828 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001198:	f7ff fe75 	bl	8000e86 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x150>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005800 	.word	0x40005800
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021400 	.word	0x40021400
 80011bc:	200005c0 	.word	0x200005c0
 80011c0:	40026040 	.word	0x40026040
 80011c4:	20000620 	.word	0x20000620
 80011c8:	400260b8 	.word	0x400260b8

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_TIM_Base_MspInit+0x3c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10d      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_TIM_Base_MspInit+0x40>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x40>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_TIM_Base_MspInit+0x40>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40010000 	.word	0x40010000
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12c      	bne.n	800128c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x88>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_MspInit+0x8c>)
 8001288:	f001 f8e0 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004800 	.word	0x40004800
 8001298:	40023800 	.word	0x40023800
 800129c:	40020c00 	.word	0x40020c00

080012a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c0:	d13f      	bne.n	8001342 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_PCD_MspInit+0xac>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_PCD_MspInit+0xac>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_PCD_MspInit+0xac>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f0:	230a      	movs	r3, #10
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <HAL_PCD_MspInit+0xb0>)
 80012fc:	f001 f8a6 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <HAL_PCD_MspInit+0xb0>)
 8001316:	f001 f899 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_PCD_MspInit+0xac>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_PCD_MspInit+0xac>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6353      	str	r3, [r2, #52]	; 0x34
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_PCD_MspInit+0xac>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_PCD_MspInit+0xac>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_PCD_MspInit+0xac>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_InitTick+0xe8>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_InitTick+0xe8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_InitTick+0xe8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f003 f814 	bl	80043b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800139a:	f002 ffe5 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 800139e:	6378      	str	r0, [r7, #52]	; 0x34
 80013a0:	e004      	b.n	80013ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013a2:	f002 ffe1 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	4a24      	ldr	r2, [pc, #144]	; (8001440 <HAL_InitTick+0xec>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	3b01      	subs	r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_InitTick+0xf0>)
 80013bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_InitTick+0xf0>)
 80013c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <HAL_InitTick+0xf0>)
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_InitTick+0xf0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_InitTick+0xf0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_InitTick+0xf0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_InitTick+0xf0>)
 80013e4:	f003 f81a 	bl	800441c <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11b      	bne.n	800142e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <HAL_InitTick+0xf0>)
 80013f8:	f003 f8c8 	bl	800458c <HAL_TIM_Base_Start_IT>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001406:	2b00      	cmp	r3, #0
 8001408:	d111      	bne.n	800142e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140a:	201c      	movs	r0, #28
 800140c:	f000 f9fe 	bl	800180c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d808      	bhi.n	8001428 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001416:	2200      	movs	r2, #0
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	201c      	movs	r0, #28
 800141c:	f000 f9da 	bl	80017d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_InitTick+0xf4>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e002      	b.n	800142e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800142e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001432:	4618      	mov	r0, r3
 8001434:	3738      	adds	r7, #56	; 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	431bde83 	.word	0x431bde83
 8001444:	20000c48 	.word	0x20000c48
 8001448:	20000004 	.word	0x20000004

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA1_Stream2_IRQHandler+0x10>)
 800147e:	f000 fa81 	bl	8001984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200005c0 	.word	0x200005c0

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f003 f8eb 	bl	800466c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000c48 	.word	0x20000c48

080014a0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA1_Stream7_IRQHandler+0x10>)
 80014a6:	f000 fa6d 	bl	8001984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000620 	.word	0x20000620

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f005 fcc2 	bl	8006e6c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20030000 	.word	0x20030000
 8001514:	00000400 	.word	0x00000400
 8001518:	20000c90 	.word	0x20000c90
 800151c:	20004a00 	.word	0x20004a00

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156e:	f7ff ffd7 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f005 fc81 	bl	8006e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff f909 	bl	800078c <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800157c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001588:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 800158c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001590:	200049fc 	.word	0x200049fc

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f8fc 	bl	80017be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f7ff fec4 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fc60 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000c94 	.word	0x20000c94

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000c94 	.word	0x20000c94

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff4c 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e6:	f7ff ff61 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7ff ffb1 	bl	8001758 <NVIC_EncodePriority>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff80 	bl	8001704 <__NVIC_SetPriority>
}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff54 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fee6 	bl	8001604 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e099      	b.n	8001978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001864:	e00f      	b.n	8001886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001866:	f7ff fecd 	bl	8001604 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b05      	cmp	r3, #5
 8001872:	d908      	bls.n	8001886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2220      	movs	r2, #32
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2203      	movs	r2, #3
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e078      	b.n	8001978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e8      	bne.n	8001866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_DMA_Init+0x158>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d107      	bne.n	80018f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4313      	orrs	r3, r2
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f023 0307 	bic.w	r3, r3, #7
 8001906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2b04      	cmp	r3, #4
 8001918:	d117      	bne.n	800194a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00e      	beq.n	800194a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f9e9 	bl	8001d04 <DMA_CheckFifoParam>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001946:	2301      	movs	r3, #1
 8001948:	e016      	b.n	8001978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f9a0 	bl	8001c98 <DMA_CalcBaseAndBitshift>
 8001958:	4603      	mov	r3, r0
 800195a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	223f      	movs	r2, #63	; 0x3f
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	f010803f 	.word	0xf010803f

08001984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_DMA_IRQHandler+0x248>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a8e      	ldr	r2, [pc, #568]	; (8001bd0 <HAL_DMA_IRQHandler+0x24c>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2208      	movs	r2, #8
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0204 	bic.w	r2, r2, #4
 80019d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	2208      	movs	r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f043 0202 	orr.w	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2204      	movs	r2, #4
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2210      	movs	r2, #16
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d043      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2210      	movs	r2, #16
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d108      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
 8001ab2:	e01f      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0208 	bic.w	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	2220      	movs	r2, #32
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 808f 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8087 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d136      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0216 	bic.w	r2, r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x1da>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0208 	bic.w	r2, r2, #8
 8001b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	223f      	movs	r2, #63	; 0x3f
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07e      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
        }
        return;
 8001b9a:	e079      	b.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01d      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d031      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
 8001bc8:	e02c      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e01e      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10f      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0210 	bic.w	r2, r2, #16
 8001c02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d307      	bcc.n	8001c6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x2cc>
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e000      	b.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c90:	bf00      	nop
    }
  }
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3b10      	subs	r3, #16
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <DMA_CalcBaseAndBitshift+0x64>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d909      	bls.n	8001cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	1d1a      	adds	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd8:	e007      	b.n	8001cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	aaaaaaab 	.word	0xaaaaaaab
 8001d00:	080079a0 	.word	0x080079a0

08001d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11f      	bne.n	8001d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d856      	bhi.n	8001dd2 <DMA_CheckFifoParam+0xce>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <DMA_CheckFifoParam+0x28>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d4f 	.word	0x08001d4f
 8001d34:	08001d3d 	.word	0x08001d3d
 8001d38:	08001dd3 	.word	0x08001dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d046      	beq.n	8001dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d4c:	e043      	b.n	8001dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d56:	d140      	bne.n	8001dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5c:	e03d      	b.n	8001dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d66:	d121      	bne.n	8001dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d837      	bhi.n	8001dde <DMA_CheckFifoParam+0xda>
 8001d6e:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <DMA_CheckFifoParam+0x70>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001d85 	.word	0x08001d85
 8001d78:	08001d8b 	.word	0x08001d8b
 8001d7c:	08001d85 	.word	0x08001d85
 8001d80:	08001d9d 	.word	0x08001d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      break;
 8001d88:	e030      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d025      	beq.n	8001de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d9a:	e022      	b.n	8001de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da4:	d11f      	bne.n	8001de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001daa:	e01c      	b.n	8001de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d903      	bls.n	8001dba <DMA_CheckFifoParam+0xb6>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d003      	beq.n	8001dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001db8:	e018      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbe:	e015      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd0:	e00b      	b.n	8001dea <DMA_CheckFifoParam+0xe6>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e00a      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e008      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e006      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
 8001de0:	e004      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e002      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;   
 8001de6:	bf00      	nop
 8001de8:	e000      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
    }
  } 
  
  return status; 
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06c      	b.n	8001ee8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2223      	movs	r2, #35	; 0x23
 8001e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff f861 	bl	8000ee8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_ETH_Init+0xf4>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a30      	ldr	r2, [pc, #192]	; (8001ef0 <HAL_ETH_Init+0xf4>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_ETH_Init+0xf4>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_ETH_Init+0xf8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <HAL_ETH_Init+0xf8>)
 8001e48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e4c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_ETH_Init+0xf8>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_ETH_Init+0xf8>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_ETH_Init+0xf8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff fbc4 	bl	8001604 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e7e:	e011      	b.n	8001ea4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e80:	f7ff fbc0 	bl	8001604 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e8e:	d909      	bls.n	8001ea4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	22e0      	movs	r2, #224	; 0xe0
 8001e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e021      	b.n	8001ee8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1e4      	bne.n	8001e80 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f958 	bl	800216c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f9ff 	bl	80022c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fa55 	bl	8002372 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f9bd 	bl	8002250 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800

08001ef8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4b51      	ldr	r3, [pc, #324]	; (8002054 <ETH_SetMACConfig+0x15c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	7c1b      	ldrb	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <ETH_SetMACConfig+0x28>
 8001f1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f1e:	e000      	b.n	8001f22 <ETH_SetMACConfig+0x2a>
 8001f20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7c5b      	ldrb	r3, [r3, #17]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <ETH_SetMACConfig+0x38>
 8001f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f2e:	e000      	b.n	8001f32 <ETH_SetMACConfig+0x3a>
 8001f30:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	7fdb      	ldrb	r3, [r3, #31]
 8001f3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	7f92      	ldrb	r2, [r2, #30]
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d102      	bne.n	8001f56 <ETH_SetMACConfig+0x5e>
 8001f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f54:	e000      	b.n	8001f58 <ETH_SetMACConfig+0x60>
 8001f56:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7f1b      	ldrb	r3, [r3, #28]
 8001f5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d102      	bne.n	8001f80 <ETH_SetMACConfig+0x88>
 8001f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7e:	e000      	b.n	8001f82 <ETH_SetMACConfig+0x8a>
 8001f80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7bdb      	ldrb	r3, [r3, #15]
 8001f88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff fb32 	bl	800161c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d101      	bne.n	8001fe6 <ETH_SetMACConfig+0xee>
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	e000      	b.n	8001fe8 <ETH_SetMACConfig+0xf0>
 8001fe6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fe8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001ff6:	2a01      	cmp	r2, #1
 8001ff8:	d101      	bne.n	8001ffe <ETH_SetMACConfig+0x106>
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	e000      	b.n	8002000 <ETH_SetMACConfig+0x108>
 8001ffe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002000:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002008:	2a01      	cmp	r2, #1
 800200a:	d101      	bne.n	8002010 <ETH_SetMACConfig+0x118>
 800200c:	2204      	movs	r2, #4
 800200e:	e000      	b.n	8002012 <ETH_SetMACConfig+0x11a>
 8002010:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800201a:	2a01      	cmp	r2, #1
 800201c:	d101      	bne.n	8002022 <ETH_SetMACConfig+0x12a>
 800201e:	2202      	movs	r2, #2
 8002020:	e000      	b.n	8002024 <ETH_SetMACConfig+0x12c>
 8002022:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002024:	4313      	orrs	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff faed 	bl	800161c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	ff20810f 	.word	0xff20810f

08002058 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <ETH_SetDMAConfig+0x110>)
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	7b1b      	ldrb	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <ETH_SetDMAConfig+0x2c>
 800207e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002082:	e000      	b.n	8002086 <ETH_SetDMAConfig+0x2e>
 8002084:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7b5b      	ldrb	r3, [r3, #13]
 800208a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800208c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	7f52      	ldrb	r2, [r2, #29]
 8002092:	2a00      	cmp	r2, #0
 8002094:	d102      	bne.n	800209c <ETH_SetDMAConfig+0x44>
 8002096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800209a:	e000      	b.n	800209e <ETH_SetDMAConfig+0x46>
 800209c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800209e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	7b9b      	ldrb	r3, [r3, #14]
 80020a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7f1b      	ldrb	r3, [r3, #28]
 80020b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7f9b      	ldrb	r3, [r3, #30]
 80020ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020dc:	461a      	mov	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff fa94 	bl	800161c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800210c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002112:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002118:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002120:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002122:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800212a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002130:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800213a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff fa65 	bl	800161c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	f8de3f23 	.word	0xf8de3f23

0800216c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0a6      	sub	sp, #152	; 0x98
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002174:	2301      	movs	r3, #1
 8002176:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021a8:	2300      	movs	r3, #0
 80021aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fe86 	bl	8001ef8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002218:	2301      	movs	r3, #1
 800221a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002220:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff08 	bl	8002058 <ETH_SetDMAConfig>
}
 8002248:	bf00      	nop
 800224a:	3798      	adds	r7, #152	; 0x98
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3305      	adds	r3, #5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	3204      	adds	r2, #4
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <ETH_MACAddressConfig+0x68>)
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3303      	adds	r3, #3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	061a      	lsls	r2, r3, #24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3302      	adds	r3, #2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	4313      	orrs	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <ETH_MACAddressConfig+0x6c>)
 80022a2:	4413      	add	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40028040 	.word	0x40028040
 80022bc:	40028044 	.word	0x40028044

080022c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e03e      	b.n	800234c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	3206      	adds	r2, #6
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d80c      	bhi.n	8002330 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e004      	b.n	800233a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3301      	adds	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d9bd      	bls.n	80022ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	611a      	str	r2, [r3, #16]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e046      	b.n	800240e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80023c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	3212      	adds	r2, #18
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d80c      	bhi.n	80023fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e004      	b.n	8002408 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3301      	adds	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d9b5      	bls.n	8002380 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e177      	b.n	8002758 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8166 	bne.w	8002752 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	2b02      	cmp	r3, #2
 800249c:	d130      	bne.n	8002500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b03      	cmp	r3, #3
 800250a:	d017      	beq.n	800253c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80c0 	beq.w	8002752 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a65      	ldr	r2, [pc, #404]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_GPIO_Init+0x328>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_GPIO_Init+0x32c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d037      	beq.n	800268a <HAL_GPIO_Init+0x23e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_GPIO_Init+0x330>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_GPIO_Init+0x23a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_GPIO_Init+0x334>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x236>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a55      	ldr	r2, [pc, #340]	; (8002784 <HAL_GPIO_Init+0x338>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x232>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_GPIO_Init+0x33c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x22e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a53      	ldr	r2, [pc, #332]	; (800278c <HAL_GPIO_Init+0x340>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x22a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x344>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x348>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x34c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x350>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x21a>
 8002662:	2309      	movs	r3, #9
 8002664:	e012      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002666:	230a      	movs	r3, #10
 8002668:	e010      	b.n	800268c <HAL_GPIO_Init+0x240>
 800266a:	2308      	movs	r3, #8
 800266c:	e00e      	b.n	800268c <HAL_GPIO_Init+0x240>
 800266e:	2307      	movs	r3, #7
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002672:	2306      	movs	r3, #6
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x240>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x240>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x240>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x328>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_GPIO_Init+0x354>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_GPIO_Init+0x354>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae84 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40022000 	.word	0x40022000
 800279c:	40022400 	.word	0x40022400
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e12b      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fc38 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800283a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800283c:	f001 fd94 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a81      	ldr	r2, [pc, #516]	; (8002a4c <HAL_I2C_Init+0x274>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d807      	bhi.n	800285c <HAL_I2C_Init+0x84>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a80      	ldr	r2, [pc, #512]	; (8002a50 <HAL_I2C_Init+0x278>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e006      	b.n	800286a <HAL_I2C_Init+0x92>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <HAL_I2C_Init+0x27c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0e7      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a78      	ldr	r2, [pc, #480]	; (8002a58 <HAL_I2C_Init+0x280>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9b      	lsrs	r3, r3, #18
 800287c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <HAL_I2C_Init+0x274>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d802      	bhi.n	80028ac <HAL_I2C_Init+0xd4>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3301      	adds	r3, #1
 80028aa:	e009      	b.n	80028c0 <HAL_I2C_Init+0xe8>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_I2C_Init+0x284>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	3301      	adds	r3, #1
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	495c      	ldr	r1, [pc, #368]	; (8002a4c <HAL_I2C_Init+0x274>)
 80028dc:	428b      	cmp	r3, r1
 80028de:	d819      	bhi.n	8002914 <HAL_I2C_Init+0x13c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e59      	subs	r1, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f4:	400b      	ands	r3, r1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_I2C_Init+0x138>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e59      	subs	r1, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fbb1 f3f3 	udiv	r3, r1, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	e051      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002910:	2304      	movs	r3, #4
 8002912:	e04f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d111      	bne.n	8002940 <HAL_I2C_Init+0x168>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e012      	b.n	8002966 <HAL_I2C_Init+0x18e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	0099      	lsls	r1, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x196>
 800296a:	2301      	movs	r3, #1
 800296c:	e022      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10e      	bne.n	8002994 <HAL_I2C_Init+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e58      	subs	r0, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	440b      	add	r3, r1
 8002984:	fbb0 f3f3 	udiv	r3, r0, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002992:	e00f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6809      	ldr	r1, [r1, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6911      	ldr	r1, [r2, #16]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	000186a0 	.word	0x000186a0
 8002a50:	001e847f 	.word	0x001e847f
 8002a54:	003d08ff 	.word	0x003d08ff
 8002a58:	431bde83 	.word	0x431bde83
 8002a5c:	10624dd3 	.word	0x10624dd3

08002a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7fe fdc3 	bl	8001604 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	f040 80d9 	bne.w	8002c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2319      	movs	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	496d      	ldr	r1, [pc, #436]	; (8002c4c <HAL_I2C_Mem_Write+0x1ec>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fc7f 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0cc      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Write+0x56>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0c5      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	; 0x21
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_I2C_Mem_Write+0x1f0>)
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fab6 	bl	80030a0 <I2C_RequestMemoryWrite>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d052      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e081      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fd00 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06b      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11b      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x180>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1aa      	bne.n	8002b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fcec 	bl	80035ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e016      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000

08002c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	460b      	mov	r3, r1
 8002c68:	813b      	strh	r3, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c6e:	f7fe fcc9 	bl	8001604 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8208 	bne.w	8003092 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2319      	movs	r3, #25
 8002c88:	2201      	movs	r2, #1
 8002c8a:	497b      	ldr	r1, [pc, #492]	; (8002e78 <HAL_I2C_Mem_Read+0x224>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb85 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e1fb      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_I2C_Mem_Read+0x56>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e1f4      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d007      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2222      	movs	r2, #34	; 0x22
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a5b      	ldr	r2, [pc, #364]	; (8002e7c <HAL_I2C_Mem_Read+0x228>)
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d12:	88f8      	ldrh	r0, [r7, #6]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4603      	mov	r3, r0
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa52 	bl	80031cc <I2C_RequestMemoryRead>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1b0      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	623b      	str	r3, [r7, #32]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e184      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d11b      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e164      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d11b      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	e144      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002df8:	e138      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	f200 80f1 	bhi.w	8002fe6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d123      	bne.n	8002e54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fc1b 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e139      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e52:	e10b      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d14e      	bne.n	8002efa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	2200      	movs	r2, #0
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_I2C_Mem_Read+0x22c>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa98 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e10e      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
 8002e76:	bf00      	nop
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000
 8002e80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ef8:	e0b8      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2200      	movs	r2, #0
 8002f02:	4966      	ldr	r1, [pc, #408]	; (800309c <HAL_I2C_Mem_Read+0x448>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fa49 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0bf      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	494f      	ldr	r1, [pc, #316]	; (800309c <HAL_I2C_Mem_Read+0x448>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa1b 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e091      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe4:	e042      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fb2e 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e04c      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d118      	bne.n	800306c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f aec2 	bne.w	8002dfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	00010004 	.word	0x00010004

080030a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	460b      	mov	r3, r1
 80030b4:	813b      	strh	r3, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f960 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d103      	bne.n	80030fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e05f      	b.n	80031be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800310c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	492d      	ldr	r1, [pc, #180]	; (80031c8 <I2C_RequestMemoryWrite+0x128>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f998 	bl	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04c      	b.n	80031be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa02 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b04      	cmp	r3, #4
 8003150:	d107      	bne.n	8003162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02b      	b.n	80031be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800316c:	893b      	ldrh	r3, [r7, #8]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e021      	b.n	80031bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003178:	893b      	ldrh	r3, [r7, #8]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	b29b      	uxth	r3, r3
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9dc 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e005      	b.n	80031be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00010002 	.word	0x00010002

080031cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	460b      	mov	r3, r1
 80031e0:	813b      	strh	r3, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2200      	movs	r2, #0
 800320e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f8c2 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	d103      	bne.n	8003236 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0aa      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	4952      	ldr	r1, [pc, #328]	; (8003398 <I2C_RequestMemoryRead+0x1cc>)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f8fa 	bl	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e097      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f964 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e076      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	611a      	str	r2, [r3, #16]
 80032b2:	e021      	b.n	80032f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	6a39      	ldr	r1, [r7, #32]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f93e 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d107      	bne.n	80032ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e050      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	6a39      	ldr	r1, [r7, #32]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f923 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e035      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003332:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2200      	movs	r2, #0
 800333c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f82b 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335a:	d103      	bne.n	8003364 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e013      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	4906      	ldr	r1, [pc, #24]	; (8003398 <I2C_RequestMemoryRead+0x1cc>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f863 	bl	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010002 	.word	0x00010002

0800339c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	e025      	b.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d021      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fe f925 	bl	8001604 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e023      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	e00c      	b.n	800343a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d0b6      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003458:	e051      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d123      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0204 	orr.w	r2, r3, #4
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e046      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d021      	beq.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe f8a3 	bl	8001604 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e020      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d18d      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003554:	e02d      	b.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8ce 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e02d      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d021      	beq.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe f849 	bl	8001604 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d1ca      	bne.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d6:	e02d      	b.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f88d 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02d      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d021      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7fe f808 	bl	8001604 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d1ca      	bne.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003658:	e042      	b.n	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d119      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e029      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fd ffb2 	bl	8001604 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d1b5      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370e:	d11b      	bne.n	8003748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d129      	bne.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0210 	bic.w	r2, r2, #16
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d12a      	bne.n	800383e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	f023 030f 	bic.w	r3, r3, #15
 800380e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b29a      	uxth	r2, r3
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	4313      	orrs	r3, r2
 8003818:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	89fa      	ldrh	r2, [r7, #14]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384e:	b08f      	sub	sp, #60	; 0x3c
 8003850:	af0a      	add	r7, sp, #40	; 0x28
 8003852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e10f      	b.n	8003a7e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fd11 	bl	80012a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fdca 	bl	8005436 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	687e      	ldr	r6, [r7, #4]
 80038aa:	466d      	mov	r5, sp
 80038ac:	f106 0410 	add.w	r4, r6, #16
 80038b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80038c0:	1d33      	adds	r3, r6, #4
 80038c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f001 fd55 	bl	8005374 <USB_CoreInit>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0d0      	b.n	8003a7e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fdb8 	bl	8005458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e04a      	b.n	8003984 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	333d      	adds	r3, #61	; 0x3d
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	333c      	adds	r3, #60	; 0x3c
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	b298      	uxth	r0, r3
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3344      	adds	r3, #68	; 0x44
 800392a:	4602      	mov	r2, r0
 800392c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3340      	adds	r3, #64	; 0x40
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3348      	adds	r3, #72	; 0x48
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	334c      	adds	r3, #76	; 0x4c
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3354      	adds	r3, #84	; 0x54
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	3301      	adds	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3af      	bcc.n	80038ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e044      	b.n	8003a1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3b5      	bcc.n	8003994 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	687e      	ldr	r6, [r7, #4]
 8003a30:	466d      	mov	r5, sp
 8003a32:	f106 0410 	add.w	r4, r6, #16
 8003a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a46:	1d33      	adds	r3, r6, #4
 8003a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a4a:	6838      	ldr	r0, [r7, #0]
 8003a4c:	f001 fd50 	bl	80054f0 <USB_DevInit>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00d      	b.n	8003a7e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 ff1b 	bl	80058b2 <USB_DevDisconnect>

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e267      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e242      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6f      	ldr	r2, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6c      	ldr	r2, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a68      	ldr	r2, [pc, #416]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd fd60 	bl	8001604 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fd fd5c 	bl	8001604 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e207      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fd4c 	bl	8001604 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd fd48 	bl	8001604 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f3      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c7      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4937      	ldr	r1, [pc, #220]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fd01 	bl	8001604 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd fcfd 	bl	8001604 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a8      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4925      	ldr	r1, [pc, #148]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fce0 	bl	8001604 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fd fcdc 	bl	8001604 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e187      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fcc0 	bl	8001604 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd fcbc 	bl	8001604 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e167      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e01b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fd fca9 	bl	8001604 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fca5 	bl	8001604 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d907      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e150      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ea      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8097 	beq.w	8003e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b77      	ldr	r3, [pc, #476]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b74      	ldr	r3, [pc, #464]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a73      	ldr	r2, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fc65 	bl	8001604 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fc61 	bl	8001604 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e10c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ea>
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a63      	ldr	r2, [pc, #396]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	e01c      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x30c>
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d94:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0304 	bic.w	r3, r3, #4
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fc26 	bl	8001604 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fc22 	bl	8001604 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0cb      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ee      	beq.n	8003dbc <HAL_RCC_OscConfig+0x334>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fd fc10 	bl	8001604 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd fc0c 	bl	8001604 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0b5      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a1 	beq.w	8003f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d05c      	beq.n	8003eec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d141      	bne.n	8003ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fbe0 	bl	8001604 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fd fbdc 	bl	8001604 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e087      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	491b      	ldr	r1, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fd fbb5 	bl	8001604 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd fbb1 	bl	8001604 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e05c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x416>
 8003ebc:	e054      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fb9e 	bl	8001604 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fb9a 	bl	8001604 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e045      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x444>
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e038      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d028      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd facc 	bl	8001604 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd fac8 	bl	8001604 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd f918 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08007988 	.word	0x08007988
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b094      	sub	sp, #80	; 0x50
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	2300      	movs	r3, #0
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	2300      	movs	r3, #0
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80e1 	bhi.w	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e0db      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800417c:	e0db      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x208>)
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004182:	e0d8      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
 80041b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f04f 0000 	mov.w	r0, #0
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	0159      	lsls	r1, r3, #5
 80041c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c8:	0150      	lsls	r0, r2, #5
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4621      	mov	r1, r4
 80041d0:	1a51      	subs	r1, r2, r1
 80041d2:	6139      	str	r1, [r7, #16]
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb63 0301 	sbc.w	r3, r3, r1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e8:	4659      	mov	r1, fp
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f2:	4651      	mov	r1, sl
 80041f4:	018a      	lsls	r2, r1, #6
 80041f6:	4651      	mov	r1, sl
 80041f8:	ebb2 0801 	subs.w	r8, r2, r1
 80041fc:	4659      	mov	r1, fp
 80041fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004216:	4690      	mov	r8, r2
 8004218:	4699      	mov	r9, r3
 800421a:	4623      	mov	r3, r4
 800421c:	eb18 0303 	adds.w	r3, r8, r3
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	462b      	mov	r3, r5
 8004224:	eb49 0303 	adc.w	r3, r9, r3
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004236:	4629      	mov	r1, r5
 8004238:	024b      	lsls	r3, r1, #9
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004240:	4621      	mov	r1, r4
 8004242:	024a      	lsls	r2, r1, #9
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
 800424e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004254:	f7fc f81c 	bl	8000290 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	e058      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	2200      	movs	r2, #0
 800426a:	4618      	mov	r0, r3
 800426c:	4611      	mov	r1, r2
 800426e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	0159      	lsls	r1, r3, #5
 800428a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428e:	0150      	lsls	r0, r2, #5
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4641      	mov	r1, r8
 8004296:	ebb2 0a01 	subs.w	sl, r2, r1
 800429a:	4649      	mov	r1, r9
 800429c:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b4:	ebb2 040a 	subs.w	r4, r2, sl
 80042b8:	eb63 050b 	sbc.w	r5, r3, fp
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	00eb      	lsls	r3, r5, #3
 80042c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ca:	00e2      	lsls	r2, r4, #3
 80042cc:	4614      	mov	r4, r2
 80042ce:	461d      	mov	r5, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	18e3      	adds	r3, r4, r3
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	464b      	mov	r3, r9
 80042d8:	eb45 0303 	adc.w	r3, r5, r3
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f4:	4621      	mov	r1, r4
 80042f6:	028a      	lsls	r2, r1, #10
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	61fa      	str	r2, [r7, #28]
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004308:	f7fb ffc2 	bl	8000290 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004338:	4618      	mov	r0, r3
 800433a:	3750      	adds	r7, #80	; 0x50
 800433c:	46bd      	mov	sp, r7
 800433e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000000 	.word	0x20000000

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	08007998 	.word	0x08007998

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffdc 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08007998 	.word	0x08007998

080043b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	220f      	movs	r2, #15
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0203 	and.w	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <HAL_RCC_GetClockConfig+0x60>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40023c00 	.word	0x40023c00

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fec2 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fafe 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e046      	b.n	8004562 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a23      	ldr	r2, [pc, #140]	; (8004570 <HAL_TIM_Base_Start+0xb4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d022      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d01d      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_Base_Start+0xb8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d018      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start+0xbc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <HAL_TIM_Base_Start+0xc0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00e      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIM_Base_Start+0xc4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d009      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_TIM_Base_Start+0xc8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_TIM_Base_Start+0x70>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIM_Base_Start+0xcc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d111      	bne.n	8004550 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b06      	cmp	r3, #6
 800453c:	d010      	beq.n	8004560 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454e:	e007      	b.n	8004560 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40010400 	.word	0x40010400
 8004584:	40014000 	.word	0x40014000
 8004588:	40001800 	.word	0x40001800

0800458c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e04e      	b.n	8004642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_TIM_Base_Start_IT+0xc4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d01d      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_TIM_Base_Start_IT+0xc8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_TIM_Base_Start_IT+0xcc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_TIM_Base_Start_IT+0xd0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_TIM_Base_Start_IT+0xd4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_TIM_Base_Start_IT+0xd8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x80>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	; (8004668 <HAL_TIM_Base_Start_IT+0xdc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d111      	bne.n	8004630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b06      	cmp	r3, #6
 800461c:	d010      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	e007      	b.n	8004640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40014000 	.word	0x40014000
 8004668:	40001800 	.word	0x40001800

0800466c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b02      	cmp	r3, #2
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0202 	mvn.w	r2, #2
 8004698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9b5 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9a7 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f9b8 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d122      	bne.n	800471c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d11b      	bne.n	800471c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0204 	mvn.w	r2, #4
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f98b 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f97d 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f98e 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b08      	cmp	r3, #8
 8004728:	d122      	bne.n	8004770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b08      	cmp	r3, #8
 8004736:	d11b      	bne.n	8004770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0208 	mvn.w	r2, #8
 8004740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2204      	movs	r2, #4
 8004746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f961 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f953 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f964 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b10      	cmp	r3, #16
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b10      	cmp	r3, #16
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0210 	mvn.w	r2, #16
 8004794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2208      	movs	r2, #8
 800479a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f937 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f929 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f93a 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10e      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0201 	mvn.w	r2, #1
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fb3c 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b80      	cmp	r3, #128	; 0x80
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b80      	cmp	r3, #128	; 0x80
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fae0 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8ff 	bl	8004a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b20      	cmp	r3, #32
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0220 	mvn.w	r2, #32
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 faaa 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x1c>
 8004894:	2302      	movs	r3, #2
 8004896:	e0b4      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x186>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d0:	d03e      	beq.n	8004950 <HAL_TIM_ConfigClockSource+0xd4>
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	f200 8087 	bhi.w	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048de:	f000 8086 	beq.w	80049ee <HAL_TIM_ConfigClockSource+0x172>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d87f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b70      	cmp	r3, #112	; 0x70
 80048ea:	d01a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xa6>
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d87b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b60      	cmp	r3, #96	; 0x60
 80048f2:	d050      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x11a>
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d877      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b50      	cmp	r3, #80	; 0x50
 80048fa:	d03c      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0xfa>
 80048fc:	2b50      	cmp	r3, #80	; 0x50
 80048fe:	d873      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d058      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d86f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	d064      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d86b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d060      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d867      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05c      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d05a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	e062      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f000 f9ad 	bl	8004c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]
      break;
 800494e:	e04f      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f000 f996 	bl	8004c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004972:	609a      	str	r2, [r3, #8]
      break;
 8004974:	e03c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 f90a 	bl	8004b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2150      	movs	r1, #80	; 0x50
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f963 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004994:	e02c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f000 f929 	bl	8004bfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2160      	movs	r1, #96	; 0x60
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f953 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80049b4:	e01c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f000 f8ea 	bl	8004b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2140      	movs	r1, #64	; 0x40
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f943 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f000 f93a 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80049e6:	e003      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d02b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d027      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d023      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d017      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <TIM_Base_SetConfig+0x128>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <TIM_Base_SetConfig+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <TIM_Base_SetConfig+0x134>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <TIM_Base_SetConfig+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <TIM_Base_SetConfig+0x13c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800
 8004b90:	40001800 	.word	0x40001800
 8004b94:	40001c00 	.word	0x40001c00
 8004b98:	40002000 	.word	0x40002000

08004b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f023 0201 	bic.w	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 030a 	bic.w	r3, r3, #10
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b087      	sub	sp, #28
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0210 	bic.w	r2, r3, #16
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f043 0307 	orr.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e05a      	b.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a21      	ldr	r2, [pc, #132]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d01d      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10c      	bne.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40010400 	.word	0x40010400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40001800 	.word	0x40001800

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e03f      	b.n	8004e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc f9fa 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f829 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b0c0      	sub	sp, #256	; 0x100
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	68d9      	ldr	r1, [r3, #12]
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	ea40 0301 	orr.w	r3, r0, r1
 8004eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ee4:	f021 010c 	bic.w	r1, r1, #12
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	6999      	ldr	r1, [r3, #24]
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	ea40 0301 	orr.w	r3, r0, r1
 8004f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b8f      	ldr	r3, [pc, #572]	; (8005158 <UART_SetConfig+0x2cc>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d005      	beq.n	8004f2c <UART_SetConfig+0xa0>
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8d      	ldr	r3, [pc, #564]	; (800515c <UART_SetConfig+0x2d0>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d104      	bne.n	8004f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7ff fa30 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8004f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f34:	e003      	b.n	8004f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f36:	f7ff fa17 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	f040 810c 	bne.w	8005164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f66:	415b      	adcs	r3, r3
 8004f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f6e:	4621      	mov	r1, r4
 8004f70:	eb12 0801 	adds.w	r8, r2, r1
 8004f74:	4629      	mov	r1, r5
 8004f76:	eb43 0901 	adc.w	r9, r3, r1
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8e:	4690      	mov	r8, r2
 8004f90:	4699      	mov	r9, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	eb18 0303 	adds.w	r3, r8, r3
 8004f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	eb49 0303 	adc.w	r3, r9, r3
 8004fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fba:	460b      	mov	r3, r1
 8004fbc:	18db      	adds	r3, r3, r3
 8004fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	eb42 0303 	adc.w	r3, r2, r3
 8004fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fd0:	f7fb f95e 	bl	8000290 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b61      	ldr	r3, [pc, #388]	; (8005160 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2302 	umull	r2, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	011c      	lsls	r4, r3, #4
 8004fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005004:	4641      	mov	r1, r8
 8005006:	eb12 0a01 	adds.w	sl, r2, r1
 800500a:	4649      	mov	r1, r9
 800500c:	eb43 0b01 	adc.w	fp, r3, r1
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800501c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005024:	4692      	mov	sl, r2
 8005026:	469b      	mov	fp, r3
 8005028:	4643      	mov	r3, r8
 800502a:	eb1a 0303 	adds.w	r3, sl, r3
 800502e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005032:	464b      	mov	r3, r9
 8005034:	eb4b 0303 	adc.w	r3, fp, r3
 8005038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800504c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	643b      	str	r3, [r7, #64]	; 0x40
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005066:	f7fb f913 	bl	8000290 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4611      	mov	r1, r2
 8005070:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <UART_SetConfig+0x2d4>)
 8005072:	fba3 2301 	umull	r2, r3, r3, r1
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2264      	movs	r2, #100	; 0x64
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <UART_SetConfig+0x2d4>)
 8005088:	fba3 2302 	umull	r2, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005094:	441c      	add	r4, r3
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80050b0:	415b      	adcs	r3, r3
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6339      	str	r1, [r7, #48]	; 0x30
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800510c:	460b      	mov	r3, r1
 800510e:	18db      	adds	r3, r3, r3
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
 8005112:	4613      	mov	r3, r2
 8005114:	eb42 0303 	adc.w	r3, r2, r3
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005122:	f7fb f8b5 	bl	8000290 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <UART_SetConfig+0x2d4>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <UART_SetConfig+0x2d4>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4422      	add	r2, r4
 8005152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005154:	e105      	b.n	8005362 <UART_SetConfig+0x4d6>
 8005156:	bf00      	nop
 8005158:	40011000 	.word	0x40011000
 800515c:	40011400 	.word	0x40011400
 8005160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800516e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005176:	4642      	mov	r2, r8
 8005178:	464b      	mov	r3, r9
 800517a:	1891      	adds	r1, r2, r2
 800517c:	6239      	str	r1, [r7, #32]
 800517e:	415b      	adcs	r3, r3
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005186:	4641      	mov	r1, r8
 8005188:	1854      	adds	r4, r2, r1
 800518a:	4649      	mov	r1, r9
 800518c:	eb43 0501 	adc.w	r5, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	00eb      	lsls	r3, r5, #3
 800519a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ac:	464b      	mov	r3, r9
 80051ae:	eb45 0303 	adc.w	r3, r5, r3
 80051b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051d2:	4629      	mov	r1, r5
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051dc:	4621      	mov	r1, r4
 80051de:	008a      	lsls	r2, r1, #2
 80051e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051e4:	f7fb f854 	bl	8000290 <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4b60      	ldr	r3, [pc, #384]	; (8005370 <UART_SetConfig+0x4e4>)
 80051ee:	fba3 2302 	umull	r2, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	011c      	lsls	r4, r3, #4
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	61b9      	str	r1, [r7, #24]
 8005210:	415b      	adcs	r3, r3
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6139      	str	r1, [r7, #16]
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800524c:	464b      	mov	r3, r9
 800524e:	460a      	mov	r2, r1
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	67bb      	str	r3, [r7, #120]	; 0x78
 8005262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005270:	4649      	mov	r1, r9
 8005272:	008b      	lsls	r3, r1, #2
 8005274:	4641      	mov	r1, r8
 8005276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527a:	4641      	mov	r1, r8
 800527c:	008a      	lsls	r2, r1, #2
 800527e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005282:	f7fb f805 	bl	8000290 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <UART_SetConfig+0x4e4>)
 800528c:	fba3 1302 	umull	r1, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	2164      	movs	r1, #100	; 0x64
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	3332      	adds	r3, #50	; 0x32
 800529e:	4a34      	ldr	r2, [pc, #208]	; (8005370 <UART_SetConfig+0x4e4>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052aa:	441c      	add	r4, r3
 80052ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b0:	2200      	movs	r2, #0
 80052b2:	673b      	str	r3, [r7, #112]	; 0x70
 80052b4:	677a      	str	r2, [r7, #116]	; 0x74
 80052b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	415b      	adcs	r3, r3
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ca:	4641      	mov	r1, r8
 80052cc:	1851      	adds	r1, r2, r1
 80052ce:	6039      	str	r1, [r7, #0]
 80052d0:	4649      	mov	r1, r9
 80052d2:	414b      	adcs	r3, r1
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e2:	4659      	mov	r1, fp
 80052e4:	00cb      	lsls	r3, r1, #3
 80052e6:	4651      	mov	r1, sl
 80052e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ec:	4651      	mov	r1, sl
 80052ee:	00ca      	lsls	r2, r1, #3
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	4603      	mov	r3, r0
 80052f6:	4642      	mov	r2, r8
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	663b      	str	r3, [r7, #96]	; 0x60
 8005310:	667a      	str	r2, [r7, #100]	; 0x64
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800531e:	4649      	mov	r1, r9
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	4641      	mov	r1, r8
 8005324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005328:	4641      	mov	r1, r8
 800532a:	008a      	lsls	r2, r1, #2
 800532c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005330:	f7fa ffae 	bl	8000290 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <UART_SetConfig+0x4e4>)
 800533a:	fba3 1302 	umull	r1, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2164      	movs	r1, #100	; 0x64
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <UART_SetConfig+0x4e4>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4422      	add	r2, r4
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	bf00      	nop
 8005364:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	51eb851f 	.word	0x51eb851f

08005374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005374:	b084      	sub	sp, #16
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	f107 001c 	add.w	r0, r7, #28
 8005382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d122      	bne.n	80053d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 faa2 	bl	8005910 <USB_CoreReset>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e01a      	b.n	8005408 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa96 	bl	8005910 <USB_CoreReset>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
 80053fa:	e005      	b.n	8005408 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10b      	bne.n	8005426 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f043 0206 	orr.w	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005432:	b004      	add	sp, #16
 8005434:	4770      	bx	lr

08005436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d115      	bne.n	80054a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005486:	2001      	movs	r0, #1
 8005488:	f7fc f8c8 	bl	800161c <HAL_Delay>
      ms++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa2e 	bl	80058f4 <USB_GetMode>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d01e      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b31      	cmp	r3, #49	; 0x31
 80054a2:	d9f0      	bls.n	8005486 <USB_SetCurrentMode+0x2e>
 80054a4:	e01a      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fc f8af 	bl	800161c <HAL_Delay>
      ms++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa15 	bl	80058f4 <USB_GetMode>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b31      	cmp	r3, #49	; 0x31
 80054d4:	d9f0      	bls.n	80054b8 <USB_SetCurrentMode+0x60>
 80054d6:	e001      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e005      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b32      	cmp	r3, #50	; 0x32
 80054e0:	d101      	bne.n	80054e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f0:	b084      	sub	sp, #16
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e009      	b.n	8005524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3340      	adds	r3, #64	; 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0e      	cmp	r3, #14
 8005528:	d9f2      	bls.n	8005510 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11c      	bne.n	800556a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
 8005568:	e00b      	b.n	8005582 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	4619      	mov	r1, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	461a      	mov	r2, r3
 800559e:	680b      	ldr	r3, [r1, #0]
 80055a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10c      	bne.n	80055c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ae:	2100      	movs	r1, #0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f965 	bl	8005880 <USB_SetDevSpeed>
 80055b6:	e008      	b.n	80055ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055b8:	2101      	movs	r1, #1
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f960 	bl	8005880 <USB_SetDevSpeed>
 80055c0:	e003      	b.n	80055ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055c2:	2103      	movs	r1, #3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f95b 	bl	8005880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ca:	2110      	movs	r1, #16
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8f3 	bl	80057b8 <USB_FlushTxFifo>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f91f 	bl	8005820 <USB_FlushRxFifo>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	461a      	mov	r2, r3
 800560c:	2300      	movs	r3, #0
 800560e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	e043      	b.n	800569e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800562c:	d118      	bne.n	8005660 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	e013      	b.n	8005672 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	461a      	mov	r2, r3
 8005658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e008      	b.n	8005672 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	461a      	mov	r2, r3
 800566e:	2300      	movs	r3, #0
 8005670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3301      	adds	r3, #1
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3b7      	bcc.n	8005616 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e043      	b.n	8005734 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c2:	d118      	bne.n	80056f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e013      	b.n	8005708 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e008      	b.n	8005708 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800572c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3301      	adds	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d3b7      	bcc.n	80056ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800575c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f043 0210 	orr.w	r2, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <USB_DevInit+0x2c4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f043 0208 	orr.w	r2, r3, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800578e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800579c:	f043 0304 	orr.w	r3, r3, #4
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b0:	b004      	add	sp, #16
 80057b2:	4770      	bx	lr
 80057b4:	803c3800 	.word	0x803c3800

080057b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <USB_FlushTxFifo+0x64>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e01b      	b.n	8005810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	daf2      	bge.n	80057c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	019b      	lsls	r3, r3, #6
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <USB_FlushTxFifo+0x64>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e006      	b.n	8005810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b20      	cmp	r3, #32
 800580c:	d0f0      	beq.n	80057f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	00030d40 	.word	0x00030d40

08005820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <USB_FlushRxFifo+0x5c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e018      	b.n	8005870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	daf2      	bge.n	800582c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2210      	movs	r2, #16
 800584e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a08      	ldr	r2, [pc, #32]	; (800587c <USB_FlushRxFifo+0x5c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e006      	b.n	8005870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b10      	cmp	r3, #16
 800586c:	d0f0      	beq.n	8005850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	00030d40 	.word	0x00030d40

08005880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e0:	f043 0302 	orr.w	r3, r3, #2
 80058e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0301 	and.w	r3, r3, #1
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a13      	ldr	r2, [pc, #76]	; (8005974 <USB_CoreReset+0x64>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e01b      	b.n	8005966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	daf2      	bge.n	800591c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <USB_CoreReset+0x64>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d0f0      	beq.n	8005946 <USB_CoreReset+0x36>

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	00030d40 	.word	0x00030d40

08005978 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598a:	2b84      	cmp	r3, #132	; 0x84
 800598c:	d005      	beq.n	800599a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800598e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	3303      	adds	r3, #3
 8005998:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80059ac:	f000 faf6 	bl	8005f9c <vTaskStartScheduler>
  
  return osOK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b8:	b089      	sub	sp, #36	; 0x24
 80059ba:	af04      	add	r7, sp, #16
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <osThreadCreate+0x54>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01c      	beq.n	8005a0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685c      	ldr	r4, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681d      	ldr	r5, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691e      	ldr	r6, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff ffc8 	bl	8005978 <makeFreeRtosPriority>
 80059e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059f2:	9202      	str	r2, [sp, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9100      	str	r1, [sp, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	4632      	mov	r2, r6
 80059fc:	4629      	mov	r1, r5
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f8ed 	bl	8005bde <xTaskCreateStatic>
 8005a04:	4603      	mov	r3, r0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e01c      	b.n	8005a44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685c      	ldr	r4, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a16:	b29e      	uxth	r6, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ffaa 	bl	8005978 <makeFreeRtosPriority>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	9200      	str	r2, [sp, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4632      	mov	r2, r6
 8005a32:	4629      	mov	r1, r5
 8005a34:	4620      	mov	r0, r4
 8005a36:	f000 f92f 	bl	8005c98 <xTaskCreate>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a44:	68fb      	ldr	r3, [r7, #12]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <osDelay+0x16>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	e000      	b.n	8005a66 <osDelay+0x18>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa64 	bl	8005f34 <vTaskDelay>
  
  return osOK;
 8005a6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0208 	add.w	r2, r3, #8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f103 0208 	add.w	r2, r3, #8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f103 0208 	add.w	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d103      	bne.n	8005b38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e00c      	b.n	8005b52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e002      	b.n	8005b46 <vListInsert+0x2e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d2f6      	bcs.n	8005b40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6852      	ldr	r2, [r2, #4]
 8005baa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d103      	bne.n	8005bbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b08e      	sub	sp, #56	; 0x38
 8005be2:	af04      	add	r7, sp, #16
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	61fb      	str	r3, [r7, #28]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c24:	23b4      	movs	r3, #180	; 0xb4
 8005c26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2bb4      	cmp	r3, #180	; 0xb4
 8005c2c:	d00a      	beq.n	8005c44 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <xTaskCreateStatic+0xac>
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01b      	beq.n	8005c8a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c64:	2300      	movs	r3, #0
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	9302      	str	r3, [sp, #8]
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f851 	bl	8005d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c84:	f000 f8ec 	bl	8005e60 <prvAddNewTaskToReadyList>
 8005c88:	e001      	b.n	8005c8e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c8e:	697b      	ldr	r3, [r7, #20]
	}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3728      	adds	r7, #40	; 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08c      	sub	sp, #48	; 0x30
 8005c9c:	af04      	add	r7, sp, #16
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fef3 	bl	8006a98 <pvPortMalloc>
 8005cb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cba:	20b4      	movs	r0, #180	; 0xb4
 8005cbc:	f000 feec 	bl	8006a98 <pvPortMalloc>
 8005cc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cce:	e005      	b.n	8005cdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f000 ffad 	bl	8006c30 <vPortFree>
 8005cd6:	e001      	b.n	8005cdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	2300      	movs	r3, #0
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	9302      	str	r3, [sp, #8]
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f80f 	bl	8005d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d06:	69f8      	ldr	r0, [r7, #28]
 8005d08:	f000 f8aa 	bl	8005e60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e002      	b.n	8005d18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d18:	69bb      	ldr	r3, [r7, #24]
	}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	617b      	str	r3, [r7, #20]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01f      	beq.n	8005db2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e012      	b.n	8005d9e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	7819      	ldrb	r1, [r3, #0]
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	3334      	adds	r3, #52	; 0x34
 8005d88:	460a      	mov	r2, r1
 8005d8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d9e9      	bls.n	8005d78 <prvInitialiseNewTask+0x54>
 8005da4:	e000      	b.n	8005da8 <prvInitialiseNewTask+0x84>
			{
				break;
 8005da6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db0:	e003      	b.n	8005dba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b06      	cmp	r3, #6
 8005dbe:	d901      	bls.n	8005dc4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dc0:	2306      	movs	r3, #6
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fe6b 	bl	8005ab6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	3318      	adds	r3, #24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fe66 	bl	8005ab6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f1c3 0207 	rsb	r2, r3, #7
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	334c      	adds	r3, #76	; 0x4c
 8005e14:	2260      	movs	r2, #96	; 0x60
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f861 	bl	8006ee0 <memset>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <prvInitialiseNewTask+0x130>)
 8005e22:	651a      	str	r2, [r3, #80]	; 0x50
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <prvInitialiseNewTask+0x134>)
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <prvInitialiseNewTask+0x138>)
 8005e2e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	69b8      	ldr	r0, [r7, #24]
 8005e36:	f000 fc1f 	bl	8006678 <pxPortInitialiseStack>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4c:	bf00      	nop
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	080079c8 	.word	0x080079c8
 8005e58:	080079e8 	.word	0x080079e8
 8005e5c:	080079a8 	.word	0x080079a8

08005e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e68:	f000 fd34 	bl	80068d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <prvAddNewTaskToReadyList+0xb8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <prvAddNewTaskToReadyList+0xb8>)
 8005e74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <prvAddNewTaskToReadyList+0xbc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e7e:	4a27      	ldr	r2, [pc, #156]	; (8005f1c <prvAddNewTaskToReadyList+0xbc>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <prvAddNewTaskToReadyList+0xb8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d110      	bne.n	8005eae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e8c:	f000 facc 	bl	8006428 <prvInitialiseTaskLists>
 8005e90:	e00d      	b.n	8005eae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <prvAddNewTaskToReadyList+0xc0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e9a:	4b20      	ldr	r3, [pc, #128]	; (8005f1c <prvAddNewTaskToReadyList+0xbc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d802      	bhi.n	8005eae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <prvAddNewTaskToReadyList+0xbc>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005eae:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <prvAddNewTaskToReadyList+0xc4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <prvAddNewTaskToReadyList+0xc4>)
 8005eb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <prvAddNewTaskToReadyList+0xcc>)
 8005ed8:	441a      	add	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7ff fdf5 	bl	8005ad0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ee6:	f000 fd25 	bl	8006934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <prvAddNewTaskToReadyList+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvAddNewTaskToReadyList+0xbc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d207      	bcs.n	8005f10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <prvAddNewTaskToReadyList+0xd0>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000d98 	.word	0x20000d98
 8005f1c:	20000c98 	.word	0x20000c98
 8005f20:	20000da4 	.word	0x20000da4
 8005f24:	20000db4 	.word	0x20000db4
 8005f28:	20000da0 	.word	0x20000da0
 8005f2c:	20000c9c 	.word	0x20000c9c
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d017      	beq.n	8005f76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <vTaskDelay+0x60>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <vTaskDelay+0x30>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60bb      	str	r3, [r7, #8]
}
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f64:	f000 f884 	bl	8006070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fb1e 	bl	80065ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f70:	f000 f88c 	bl	800608c <xTaskResumeAll>
 8005f74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <vTaskDelay+0x64>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000dc0 	.word	0x20000dc0
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005faa:	463a      	mov	r2, r7
 8005fac:	1d39      	adds	r1, r7, #4
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa faee 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	460a      	mov	r2, r1
 8005fca:	4921      	ldr	r1, [pc, #132]	; (8006050 <vTaskStartScheduler+0xb4>)
 8005fcc:	4821      	ldr	r0, [pc, #132]	; (8006054 <vTaskStartScheduler+0xb8>)
 8005fce:	f7ff fe06 	bl	8005bde <xTaskCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <vTaskStartScheduler+0xbc>)
 8005fd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <vTaskStartScheduler+0xbc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e001      	b.n	8005fea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d11b      	bne.n	8006028 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	613b      	str	r3, [r7, #16]
}
 8006002:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <vTaskStartScheduler+0xc0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	334c      	adds	r3, #76	; 0x4c
 800600a:	4a15      	ldr	r2, [pc, #84]	; (8006060 <vTaskStartScheduler+0xc4>)
 800600c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <vTaskStartScheduler+0xc8>)
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <vTaskStartScheduler+0xcc>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <vTaskStartScheduler+0xd0>)
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006022:	f000 fbb5 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006026:	e00e      	b.n	8006046 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d10a      	bne.n	8006046 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60fb      	str	r3, [r7, #12]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <vTaskStartScheduler+0xa8>
}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08007980 	.word	0x08007980
 8006054:	080063f9 	.word	0x080063f9
 8006058:	20000dbc 	.word	0x20000dbc
 800605c:	20000c98 	.word	0x20000c98
 8006060:	20000010 	.word	0x20000010
 8006064:	20000db8 	.word	0x20000db8
 8006068:	20000da4 	.word	0x20000da4
 800606c:	20000d9c 	.word	0x20000d9c

08006070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <vTaskSuspendAll+0x18>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a03      	ldr	r2, [pc, #12]	; (8006088 <vTaskSuspendAll+0x18>)
 800607c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800607e:	bf00      	nop
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	20000dc0 	.word	0x20000dc0

0800608c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800609a:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <xTaskResumeAll+0x114>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	603b      	str	r3, [r7, #0]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060b8:	f000 fc0c 	bl	80068d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060bc:	4b38      	ldr	r3, [pc, #224]	; (80061a0 <xTaskResumeAll+0x114>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	4a37      	ldr	r2, [pc, #220]	; (80061a0 <xTaskResumeAll+0x114>)
 80060c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <xTaskResumeAll+0x114>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d161      	bne.n	8006192 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060ce:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <xTaskResumeAll+0x118>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d05d      	beq.n	8006192 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060d6:	e02e      	b.n	8006136 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d8:	4b33      	ldr	r3, [pc, #204]	; (80061a8 <xTaskResumeAll+0x11c>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3318      	adds	r3, #24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fd50 	bl	8005b8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fd4b 	bl	8005b8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <xTaskResumeAll+0x120>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <xTaskResumeAll+0x120>)
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <xTaskResumeAll+0x124>)
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3304      	adds	r3, #4
 800611a:	4619      	mov	r1, r3
 800611c:	4610      	mov	r0, r2
 800611e:	f7ff fcd7 	bl	8005ad0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <xTaskResumeAll+0x128>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	429a      	cmp	r2, r3
 800612e:	d302      	bcc.n	8006136 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006130:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <xTaskResumeAll+0x12c>)
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <xTaskResumeAll+0x11c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1cc      	bne.n	80060d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006144:	f000 fa12 	bl	800656c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006148:	4b1c      	ldr	r3, [pc, #112]	; (80061bc <xTaskResumeAll+0x130>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d010      	beq.n	8006176 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006154:	f000 f836 	bl	80061c4 <xTaskIncrementTick>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <xTaskResumeAll+0x12c>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3b01      	subs	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f1      	bne.n	8006154 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <xTaskResumeAll+0x130>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006176:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <xTaskResumeAll+0x12c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800617e:	2301      	movs	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <xTaskResumeAll+0x134>)
 8006184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006192:	f000 fbcf 	bl	8006934 <vPortExitCritical>

	return xAlreadyYielded;
 8006196:	68bb      	ldr	r3, [r7, #8]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000dc0 	.word	0x20000dc0
 80061a4:	20000d98 	.word	0x20000d98
 80061a8:	20000d58 	.word	0x20000d58
 80061ac:	20000da0 	.word	0x20000da0
 80061b0:	20000c9c 	.word	0x20000c9c
 80061b4:	20000c98 	.word	0x20000c98
 80061b8:	20000dac 	.word	0x20000dac
 80061bc:	20000da8 	.word	0x20000da8
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ce:	4b4e      	ldr	r3, [pc, #312]	; (8006308 <xTaskIncrementTick+0x144>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 808e 	bne.w	80062f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061d8:	4b4c      	ldr	r3, [pc, #304]	; (800630c <xTaskIncrementTick+0x148>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061e0:	4a4a      	ldr	r2, [pc, #296]	; (800630c <xTaskIncrementTick+0x148>)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d120      	bne.n	800622e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061ec:	4b48      	ldr	r3, [pc, #288]	; (8006310 <xTaskIncrementTick+0x14c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <xTaskIncrementTick+0x48>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	603b      	str	r3, [r7, #0]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xTaskIncrementTick+0x46>
 800620c:	4b40      	ldr	r3, [pc, #256]	; (8006310 <xTaskIncrementTick+0x14c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	4b40      	ldr	r3, [pc, #256]	; (8006314 <xTaskIncrementTick+0x150>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3e      	ldr	r2, [pc, #248]	; (8006310 <xTaskIncrementTick+0x14c>)
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4a3e      	ldr	r2, [pc, #248]	; (8006314 <xTaskIncrementTick+0x150>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <xTaskIncrementTick+0x154>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a3c      	ldr	r2, [pc, #240]	; (8006318 <xTaskIncrementTick+0x154>)
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	f000 f99f 	bl	800656c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800622e:	4b3b      	ldr	r3, [pc, #236]	; (800631c <xTaskIncrementTick+0x158>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	429a      	cmp	r2, r3
 8006236:	d348      	bcc.n	80062ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <xTaskIncrementTick+0x14c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006242:	4b36      	ldr	r3, [pc, #216]	; (800631c <xTaskIncrementTick+0x158>)
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	601a      	str	r2, [r3, #0]
					break;
 800624a:	e03e      	b.n	80062ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800624c:	4b30      	ldr	r3, [pc, #192]	; (8006310 <xTaskIncrementTick+0x14c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d203      	bcs.n	800626c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006264:	4a2d      	ldr	r2, [pc, #180]	; (800631c <xTaskIncrementTick+0x158>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800626a:	e02e      	b.n	80062ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	3304      	adds	r3, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fc8a 	bl	8005b8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3318      	adds	r3, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fc81 	bl	8005b8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2201      	movs	r2, #1
 800628e:	409a      	lsls	r2, r3
 8006290:	4b23      	ldr	r3, [pc, #140]	; (8006320 <xTaskIncrementTick+0x15c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	4a22      	ldr	r2, [pc, #136]	; (8006320 <xTaskIncrementTick+0x15c>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <xTaskIncrementTick+0x160>)
 80062a8:	441a      	add	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7ff fc0d 	bl	8005ad0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <xTaskIncrementTick+0x164>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3b9      	bcc.n	8006238 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c8:	e7b6      	b.n	8006238 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062ca:	4b17      	ldr	r3, [pc, #92]	; (8006328 <xTaskIncrementTick+0x164>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d0:	4914      	ldr	r1, [pc, #80]	; (8006324 <xTaskIncrementTick+0x160>)
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d901      	bls.n	80062e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <xTaskIncrementTick+0x168>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80062ee:	2301      	movs	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e004      	b.n	80062fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <xTaskIncrementTick+0x16c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <xTaskIncrementTick+0x16c>)
 80062fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062fe:	697b      	ldr	r3, [r7, #20]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000dc0 	.word	0x20000dc0
 800630c:	20000d9c 	.word	0x20000d9c
 8006310:	20000d50 	.word	0x20000d50
 8006314:	20000d54 	.word	0x20000d54
 8006318:	20000db0 	.word	0x20000db0
 800631c:	20000db8 	.word	0x20000db8
 8006320:	20000da0 	.word	0x20000da0
 8006324:	20000c9c 	.word	0x20000c9c
 8006328:	20000c98 	.word	0x20000c98
 800632c:	20000dac 	.word	0x20000dac
 8006330:	20000da8 	.word	0x20000da8

08006334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <vTaskSwitchContext+0xac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006342:	4b28      	ldr	r3, [pc, #160]	; (80063e4 <vTaskSwitchContext+0xb0>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006348:	e044      	b.n	80063d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <vTaskSwitchContext+0xb0>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <vTaskSwitchContext+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	f1c3 031f 	rsb	r3, r3, #31
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	4921      	ldr	r1, [pc, #132]	; (80063ec <vTaskSwitchContext+0xb8>)
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <vTaskSwitchContext+0x5c>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <vTaskSwitchContext+0x5a>
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4a14      	ldr	r2, [pc, #80]	; (80063ec <vTaskSwitchContext+0xb8>)
 800639c:	4413      	add	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3308      	adds	r3, #8
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d104      	bne.n	80063c0 <vTaskSwitchContext+0x8c>
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <vTaskSwitchContext+0xbc>)
 80063c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <vTaskSwitchContext+0xbc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	334c      	adds	r3, #76	; 0x4c
 80063d0:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <vTaskSwitchContext+0xc0>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000dc0 	.word	0x20000dc0
 80063e4:	20000dac 	.word	0x20000dac
 80063e8:	20000da0 	.word	0x20000da0
 80063ec:	20000c9c 	.word	0x20000c9c
 80063f0:	20000c98 	.word	0x20000c98
 80063f4:	20000010 	.word	0x20000010

080063f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006400:	f000 f852 	bl	80064a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <prvIdleTask+0x28>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d9f9      	bls.n	8006400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <prvIdleTask+0x2c>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800641c:	e7f0      	b.n	8006400 <prvIdleTask+0x8>
 800641e:	bf00      	nop
 8006420:	20000c9c 	.word	0x20000c9c
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	e00c      	b.n	800644e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <prvInitialiseTaskLists+0x60>)
 8006440:	4413      	add	r3, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fb17 	bl	8005a76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b06      	cmp	r3, #6
 8006452:	d9ef      	bls.n	8006434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006454:	480d      	ldr	r0, [pc, #52]	; (800648c <prvInitialiseTaskLists+0x64>)
 8006456:	f7ff fb0e 	bl	8005a76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800645a:	480d      	ldr	r0, [pc, #52]	; (8006490 <prvInitialiseTaskLists+0x68>)
 800645c:	f7ff fb0b 	bl	8005a76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006460:	480c      	ldr	r0, [pc, #48]	; (8006494 <prvInitialiseTaskLists+0x6c>)
 8006462:	f7ff fb08 	bl	8005a76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006466:	480c      	ldr	r0, [pc, #48]	; (8006498 <prvInitialiseTaskLists+0x70>)
 8006468:	f7ff fb05 	bl	8005a76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800646c:	480b      	ldr	r0, [pc, #44]	; (800649c <prvInitialiseTaskLists+0x74>)
 800646e:	f7ff fb02 	bl	8005a76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006472:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvInitialiseTaskLists+0x78>)
 8006474:	4a05      	ldr	r2, [pc, #20]	; (800648c <prvInitialiseTaskLists+0x64>)
 8006476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <prvInitialiseTaskLists+0x7c>)
 800647a:	4a05      	ldr	r2, [pc, #20]	; (8006490 <prvInitialiseTaskLists+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000c9c 	.word	0x20000c9c
 800648c:	20000d28 	.word	0x20000d28
 8006490:	20000d3c 	.word	0x20000d3c
 8006494:	20000d58 	.word	0x20000d58
 8006498:	20000d6c 	.word	0x20000d6c
 800649c:	20000d84 	.word	0x20000d84
 80064a0:	20000d50 	.word	0x20000d50
 80064a4:	20000d54 	.word	0x20000d54

080064a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ae:	e019      	b.n	80064e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064b0:	f000 fa10 	bl	80068d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <prvCheckTasksWaitingTermination+0x50>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fb62 	bl	8005b8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064da:	f000 fa2b 	bl	8006934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f810 	bl	8006504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e1      	bne.n	80064b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000d6c 	.word	0x20000d6c
 80064fc:	20000d98 	.word	0x20000d98
 8006500:	20000d80 	.word	0x20000d80

08006504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	334c      	adds	r3, #76	; 0x4c
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fd8f 	bl	8007034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fb83 	bl	8006c30 <vPortFree>
				vPortFree( pxTCB );
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb80 	bl	8006c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006530:	e018      	b.n	8006564 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d103      	bne.n	8006544 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb77 	bl	8006c30 <vPortFree>
	}
 8006542:	e00f      	b.n	8006564 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800654a:	2b02      	cmp	r3, #2
 800654c:	d00a      	beq.n	8006564 <prvDeleteTCB+0x60>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <prvDeleteTCB+0x5e>
	}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <prvResetNextTaskUnblockTime+0x38>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvResetNextTaskUnblockTime+0x3c>)
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006584:	e008      	b.n	8006598 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <prvResetNextTaskUnblockTime+0x38>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000d50 	.word	0x20000d50
 80065a8:	20000db8 	.word	0x20000db8

080065ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065b6:	4b29      	ldr	r3, [pc, #164]	; (800665c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fae1 	bl	8005b8a <uxListRemove>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2201      	movs	r2, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43da      	mvns	r2, r3
 80065dc:	4b21      	ldr	r3, [pc, #132]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4013      	ands	r3, r2
 80065e2:	4a20      	ldr	r2, [pc, #128]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d10a      	bne.n	8006604 <prvAddCurrentTaskToDelayedList+0x58>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f4:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	481a      	ldr	r0, [pc, #104]	; (8006668 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065fe:	f7ff fa67 	bl	8005ad0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006602:	e026      	b.n	8006652 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d209      	bcs.n	8006630 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <prvAddCurrentTaskToDelayedList+0xc0>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7ff fa75 	bl	8005b18 <vListInsert>
}
 800662e:	e010      	b.n	8006652 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7ff fa6b 	bl	8005b18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006642:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	429a      	cmp	r2, r3
 800664a:	d202      	bcs.n	8006652 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800664c:	4a09      	ldr	r2, [pc, #36]	; (8006674 <prvAddCurrentTaskToDelayedList+0xc8>)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6013      	str	r3, [r2, #0]
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000d9c 	.word	0x20000d9c
 8006660:	20000c98 	.word	0x20000c98
 8006664:	20000da0 	.word	0x20000da0
 8006668:	20000d84 	.word	0x20000d84
 800666c:	20000d54 	.word	0x20000d54
 8006670:	20000d50 	.word	0x20000d50
 8006674:	20000db8 	.word	0x20000db8

08006678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3b04      	subs	r3, #4
 8006688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <pxPortInitialiseStack+0x64>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b14      	subs	r3, #20
 80066b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b04      	subs	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f06f 0202 	mvn.w	r2, #2
 80066c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b20      	subs	r3, #32
 80066cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	080066e1 	.word	0x080066e1

080066e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <prvTaskExitError+0x54>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d00a      	beq.n	800670a <prvTaskExitError+0x2a>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60fb      	str	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <prvTaskExitError+0x28>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800671e:	bf00      	nop
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0fc      	beq.n	8006720 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	2000000c 	.word	0x2000000c
	...

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a46      	ldr	r2, [pc, #280]	; (80068b4 <xPortStartScheduler+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x26>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b6:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <xPortStartScheduler+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x46>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <xPortStartScheduler+0x12c>)
 80067d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xPortStartScheduler+0x130>)
 80067fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <xPortStartScheduler+0x134>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006804:	e009      	b.n	800681a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <xPortStartScheduler+0x134>)
 800680e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d0ef      	beq.n	8006806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006826:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1c3 0307 	rsb	r3, r3, #7
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00a      	beq.n	8006848 <xPortStartScheduler+0xb8>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <xPortStartScheduler+0x134>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <xPortStartScheduler+0x134>)
 8006850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xPortStartScheduler+0x134>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <xPortStartScheduler+0x134>)
 800685c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <xPortStartScheduler+0x138>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <xPortStartScheduler+0x138>)
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <xPortStartScheduler+0x138>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <xPortStartScheduler+0x138>)
 8006878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800687c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800687e:	f000 f8dd 	bl	8006a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <xPortStartScheduler+0x13c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006888:	f000 f8fc 	bl	8006a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <xPortStartScheduler+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0f      	ldr	r2, [pc, #60]	; (80068d0 <xPortStartScheduler+0x140>)
 8006892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006898:	f7ff ff66 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800689c:	f7ff fd4a 	bl	8006334 <vTaskSwitchContext>
	prvTaskExitError();
 80068a0:	f7ff ff1e 	bl	80066e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00
 80068b4:	410fc271 	.word	0x410fc271
 80068b8:	410fc270 	.word	0x410fc270
 80068bc:	e000e400 	.word	0xe000e400
 80068c0:	20000dc4 	.word	0x20000dc4
 80068c4:	20000dc8 	.word	0x20000dc8
 80068c8:	e000ed20 	.word	0xe000ed20
 80068cc:	2000000c 	.word	0x2000000c
 80068d0:	e000ef34 	.word	0xe000ef34

080068d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <vPortEnterCritical+0x58>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a0d      	ldr	r2, [pc, #52]	; (800692c <vPortEnterCritical+0x58>)
 80068f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <vPortEnterCritical+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortEnterCritical+0x5c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <vPortEnterCritical+0x4c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vPortEnterCritical+0x4a>
	}
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000000c 	.word	0x2000000c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vPortExitCritical+0x50>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <vPortExitCritical+0x24>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <vPortExitCritical+0x50>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <vPortExitCritical+0x50>)
 8006960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <vPortExitCritical+0x42>
 800696a:	2300      	movs	r3, #0
 800696c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000000c 	.word	0x2000000c
	...

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <pxCurrentTCBConst>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f01e 0f10 	tst.w	lr, #16
 80069a0:	bf08      	it	eq
 80069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069b4:	f380 8811 	msr	BASEPRI, r0
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f7ff fcb8 	bl	8006334 <vTaskSwitchContext>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f380 8811 	msr	BASEPRI, r0
 80069cc:	bc09      	pop	{r0, r3}
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d6:	f01e 0f10 	tst.w	lr, #16
 80069da:	bf08      	it	eq
 80069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069e0:	f380 8809 	msr	PSP, r0
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst>:
 80069f0:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a12:	f7ff fbd7 	bl	80061c4 <xTaskIncrementTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SysTick_Handler+0x40>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vPortSetupTimerInterrupt+0x38>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vPortSetupTimerInterrupt+0x3c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vPortSetupTimerInterrupt+0x40>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <vPortSetupTimerInterrupt+0x44>)
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a60:	2207      	movs	r2, #7
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000e010 	.word	0xe000e010
 8006a74:	e000e018 	.word	0xe000e018
 8006a78:	20000000 	.word	0x20000000
 8006a7c:	10624dd3 	.word	0x10624dd3
 8006a80:	e000e014 	.word	0xe000e014

08006a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a94 <vPortEnableVFP+0x10>
 8006a88:	6801      	ldr	r1, [r0, #0]
 8006a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a8e:	6001      	str	r1, [r0, #0]
 8006a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e000ed88 	.word	0xe000ed88

08006a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa4:	f7ff fae4 	bl	8006070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aa8:	4b5b      	ldr	r3, [pc, #364]	; (8006c18 <pvPortMalloc+0x180>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ab0:	f000 f920 	bl	8006cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <pvPortMalloc+0x184>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8093 	bne.w	8006be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01d      	beq.n	8006b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ac8:	2208      	movs	r2, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <pvPortMalloc+0x6c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06e      	beq.n	8006be8 <pvPortMalloc+0x150>
 8006b0a:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <pvPortMalloc+0x188>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d869      	bhi.n	8006be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b14:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1e:	e004      	b.n	8006b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <pvPortMalloc+0xa4>
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f1      	bne.n	8006b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <pvPortMalloc+0x180>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d050      	beq.n	8006be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	4413      	add	r3, r2
 8006b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	2308      	movs	r3, #8
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d91f      	bls.n	8006ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <pvPortMalloc+0xf8>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	613b      	str	r3, [r7, #16]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ba2:	69b8      	ldr	r0, [r7, #24]
 8006ba4:	f000 f908 	bl	8006db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <pvPortMalloc+0x188>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <pvPortMalloc+0x190>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d203      	bcs.n	8006bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <pvPortMalloc+0x188>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <pvPortMalloc+0x190>)
 8006bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <pvPortMalloc+0x184>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x194>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <pvPortMalloc+0x194>)
 8006be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006be8:	f7ff fa50 	bl	800608c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <pvPortMalloc+0x174>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <pvPortMalloc+0x172>
	return pvReturn;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	; 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200049d4 	.word	0x200049d4
 8006c1c:	200049e8 	.word	0x200049e8
 8006c20:	200049d8 	.word	0x200049d8
 8006c24:	200049cc 	.word	0x200049cc
 8006c28:	200049dc 	.word	0x200049dc
 8006c2c:	200049e0 	.word	0x200049e0

08006c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04d      	beq.n	8006cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c42:	2308      	movs	r3, #8
 8006c44:	425b      	negs	r3, r3
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <vPortFree+0xb8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <vPortFree+0x44>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60fb      	str	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <vPortFree+0x62>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60bb      	str	r3, [r7, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <vPortFree+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01e      	beq.n	8006cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11a      	bne.n	8006cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <vPortFree+0xb8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cb8:	f7ff f9da 	bl	8006070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <vPortFree+0xbc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <vPortFree+0xbc>)
 8006cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cca:	6938      	ldr	r0, [r7, #16]
 8006ccc:	f000 f874 	bl	8006db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <vPortFree+0xc0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vPortFree+0xc0>)
 8006cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cda:	f7ff f9d7 	bl	800608c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200049e8 	.word	0x200049e8
 8006cec:	200049d8 	.word	0x200049d8
 8006cf0:	200049e4 	.word	0x200049e4

08006cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d00:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <prvHeapInit+0xac>)
 8006d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00c      	beq.n	8006d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3307      	adds	r3, #7
 8006d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <prvHeapInit+0xac>)
 8006d24:	4413      	add	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <prvHeapInit+0xb0>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <prvHeapInit+0xb0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d40:	2208      	movs	r2, #8
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <prvHeapInit+0xb4>)
 8006d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <prvHeapInit+0xb4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <prvHeapInit+0xb4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvHeapInit+0xb4>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <prvHeapInit+0xb8>)
 8006d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <prvHeapInit+0xbc>)
 8006d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <prvHeapInit+0xc0>)
 8006d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d92:	601a      	str	r2, [r3, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20000dcc 	.word	0x20000dcc
 8006da4:	200049cc 	.word	0x200049cc
 8006da8:	200049d4 	.word	0x200049d4
 8006dac:	200049dc 	.word	0x200049dc
 8006db0:	200049d8 	.word	0x200049d8
 8006db4:	200049e8 	.word	0x200049e8

08006db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <prvInsertBlockIntoFreeList+0xac>)
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e002      	b.n	8006dcc <prvInsertBlockIntoFreeList+0x14>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d8f7      	bhi.n	8006dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d108      	bne.n	8006dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d118      	bne.n	8006e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d00d      	beq.n	8006e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e008      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e003      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d002      	beq.n	8006e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	200049cc 	.word	0x200049cc
 8006e68:	200049d4 	.word	0x200049d4

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000010 	.word	0x20000010

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4d0d      	ldr	r5, [pc, #52]	; (8006eb0 <__libc_init_array+0x38>)
 8006e7c:	4c0d      	ldr	r4, [pc, #52]	; (8006eb4 <__libc_init_array+0x3c>)
 8006e7e:	1b64      	subs	r4, r4, r5
 8006e80:	10a4      	asrs	r4, r4, #2
 8006e82:	2600      	movs	r6, #0
 8006e84:	42a6      	cmp	r6, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	4d0b      	ldr	r5, [pc, #44]	; (8006eb8 <__libc_init_array+0x40>)
 8006e8a:	4c0c      	ldr	r4, [pc, #48]	; (8006ebc <__libc_init_array+0x44>)
 8006e8c:	f000 fcf8 	bl	8007880 <_init>
 8006e90:	1b64      	subs	r4, r4, r5
 8006e92:	10a4      	asrs	r4, r4, #2
 8006e94:	2600      	movs	r6, #0
 8006e96:	42a6      	cmp	r6, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea0:	4798      	blx	r3
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eaa:	4798      	blx	r3
 8006eac:	3601      	adds	r6, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	08007a44 	.word	0x08007a44
 8006eb4:	08007a44 	.word	0x08007a44
 8006eb8:	08007a44 	.word	0x08007a44
 8006ebc:	08007a48 	.word	0x08007a48

08006ec0 <__retarget_lock_acquire_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <__retarget_lock_release_recursive>:
 8006ec2:	4770      	bx	lr

08006ec4 <memcpy>:
 8006ec4:	440a      	add	r2, r1
 8006ec6:	4291      	cmp	r1, r2
 8006ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ecc:	d100      	bne.n	8006ed0 <memcpy+0xc>
 8006ece:	4770      	bx	lr
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eda:	4291      	cmp	r1, r2
 8006edc:	d1f9      	bne.n	8006ed2 <memcpy+0xe>
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <memset>:
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d100      	bne.n	8006eea <memset+0xa>
 8006ee8:	4770      	bx	lr
 8006eea:	f803 1b01 	strb.w	r1, [r3], #1
 8006eee:	e7f9      	b.n	8006ee4 <memset+0x4>

08006ef0 <sbrk_aligned>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4e0e      	ldr	r6, [pc, #56]	; (8006f2c <sbrk_aligned+0x3c>)
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	6831      	ldr	r1, [r6, #0]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	b911      	cbnz	r1, 8006f02 <sbrk_aligned+0x12>
 8006efc:	f000 f8f6 	bl	80070ec <_sbrk_r>
 8006f00:	6030      	str	r0, [r6, #0]
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f000 f8f1 	bl	80070ec <_sbrk_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d00a      	beq.n	8006f24 <sbrk_aligned+0x34>
 8006f0e:	1cc4      	adds	r4, r0, #3
 8006f10:	f024 0403 	bic.w	r4, r4, #3
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d007      	beq.n	8006f28 <sbrk_aligned+0x38>
 8006f18:	1a21      	subs	r1, r4, r0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f8e6 	bl	80070ec <_sbrk_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d101      	bne.n	8006f28 <sbrk_aligned+0x38>
 8006f24:	f04f 34ff 	mov.w	r4, #4294967295
 8006f28:	4620      	mov	r0, r4
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	200049f4 	.word	0x200049f4

08006f30 <_malloc_r>:
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	1ccd      	adds	r5, r1, #3
 8006f36:	f025 0503 	bic.w	r5, r5, #3
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	2d0c      	cmp	r5, #12
 8006f3e:	bf38      	it	cc
 8006f40:	250c      	movcc	r5, #12
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	4607      	mov	r7, r0
 8006f46:	db01      	blt.n	8006f4c <_malloc_r+0x1c>
 8006f48:	42a9      	cmp	r1, r5
 8006f4a:	d905      	bls.n	8006f58 <_malloc_r+0x28>
 8006f4c:	230c      	movs	r3, #12
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	2600      	movs	r6, #0
 8006f52:	4630      	mov	r0, r6
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	4e2e      	ldr	r6, [pc, #184]	; (8007014 <_malloc_r+0xe4>)
 8006f5a:	f000 f8f7 	bl	800714c <__malloc_lock>
 8006f5e:	6833      	ldr	r3, [r6, #0]
 8006f60:	461c      	mov	r4, r3
 8006f62:	bb34      	cbnz	r4, 8006fb2 <_malloc_r+0x82>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ffc2 	bl	8006ef0 <sbrk_aligned>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	4604      	mov	r4, r0
 8006f70:	d14d      	bne.n	800700e <_malloc_r+0xde>
 8006f72:	6834      	ldr	r4, [r6, #0]
 8006f74:	4626      	mov	r6, r4
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	d140      	bne.n	8006ffc <_malloc_r+0xcc>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4638      	mov	r0, r7
 8006f80:	eb04 0803 	add.w	r8, r4, r3
 8006f84:	f000 f8b2 	bl	80070ec <_sbrk_r>
 8006f88:	4580      	cmp	r8, r0
 8006f8a:	d13a      	bne.n	8007002 <_malloc_r+0xd2>
 8006f8c:	6821      	ldr	r1, [r4, #0]
 8006f8e:	3503      	adds	r5, #3
 8006f90:	1a6d      	subs	r5, r5, r1
 8006f92:	f025 0503 	bic.w	r5, r5, #3
 8006f96:	3508      	adds	r5, #8
 8006f98:	2d0c      	cmp	r5, #12
 8006f9a:	bf38      	it	cc
 8006f9c:	250c      	movcc	r5, #12
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ffa5 	bl	8006ef0 <sbrk_aligned>
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d02b      	beq.n	8007002 <_malloc_r+0xd2>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	442b      	add	r3, r5
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	e00e      	b.n	8006fd0 <_malloc_r+0xa0>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	1b52      	subs	r2, r2, r5
 8006fb6:	d41e      	bmi.n	8006ff6 <_malloc_r+0xc6>
 8006fb8:	2a0b      	cmp	r2, #11
 8006fba:	d916      	bls.n	8006fea <_malloc_r+0xba>
 8006fbc:	1961      	adds	r1, r4, r5
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	6025      	str	r5, [r4, #0]
 8006fc2:	bf18      	it	ne
 8006fc4:	6059      	strne	r1, [r3, #4]
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	bf08      	it	eq
 8006fca:	6031      	streq	r1, [r6, #0]
 8006fcc:	5162      	str	r2, [r4, r5]
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f104 060b 	add.w	r6, r4, #11
 8006fd6:	f000 f8bf 	bl	8007158 <__malloc_unlock>
 8006fda:	f026 0607 	bic.w	r6, r6, #7
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	1af2      	subs	r2, r6, r3
 8006fe2:	d0b6      	beq.n	8006f52 <_malloc_r+0x22>
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	50a3      	str	r3, [r4, r2]
 8006fe8:	e7b3      	b.n	8006f52 <_malloc_r+0x22>
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	bf0c      	ite	eq
 8006ff0:	6032      	streq	r2, [r6, #0]
 8006ff2:	605a      	strne	r2, [r3, #4]
 8006ff4:	e7ec      	b.n	8006fd0 <_malloc_r+0xa0>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7b2      	b.n	8006f62 <_malloc_r+0x32>
 8006ffc:	4634      	mov	r4, r6
 8006ffe:	6876      	ldr	r6, [r6, #4]
 8007000:	e7b9      	b.n	8006f76 <_malloc_r+0x46>
 8007002:	230c      	movs	r3, #12
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4638      	mov	r0, r7
 8007008:	f000 f8a6 	bl	8007158 <__malloc_unlock>
 800700c:	e7a1      	b.n	8006f52 <_malloc_r+0x22>
 800700e:	6025      	str	r5, [r4, #0]
 8007010:	e7de      	b.n	8006fd0 <_malloc_r+0xa0>
 8007012:	bf00      	nop
 8007014:	200049f0 	.word	0x200049f0

08007018 <cleanup_glue>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	6809      	ldr	r1, [r1, #0]
 800701e:	4605      	mov	r5, r0
 8007020:	b109      	cbz	r1, 8007026 <cleanup_glue+0xe>
 8007022:	f7ff fff9 	bl	8007018 <cleanup_glue>
 8007026:	4621      	mov	r1, r4
 8007028:	4628      	mov	r0, r5
 800702a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800702e:	f000 b899 	b.w	8007164 <_free_r>
	...

08007034 <_reclaim_reent>:
 8007034:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <_reclaim_reent+0xb4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4283      	cmp	r3, r0
 800703a:	b570      	push	{r4, r5, r6, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	d051      	beq.n	80070e4 <_reclaim_reent+0xb0>
 8007040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007042:	b143      	cbz	r3, 8007056 <_reclaim_reent+0x22>
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d14a      	bne.n	80070e0 <_reclaim_reent+0xac>
 800704a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704c:	6819      	ldr	r1, [r3, #0]
 800704e:	b111      	cbz	r1, 8007056 <_reclaim_reent+0x22>
 8007050:	4620      	mov	r0, r4
 8007052:	f000 f887 	bl	8007164 <_free_r>
 8007056:	6961      	ldr	r1, [r4, #20]
 8007058:	b111      	cbz	r1, 8007060 <_reclaim_reent+0x2c>
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f882 	bl	8007164 <_free_r>
 8007060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007062:	b111      	cbz	r1, 800706a <_reclaim_reent+0x36>
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f87d 	bl	8007164 <_free_r>
 800706a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800706c:	b111      	cbz	r1, 8007074 <_reclaim_reent+0x40>
 800706e:	4620      	mov	r0, r4
 8007070:	f000 f878 	bl	8007164 <_free_r>
 8007074:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007076:	b111      	cbz	r1, 800707e <_reclaim_reent+0x4a>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 f873 	bl	8007164 <_free_r>
 800707e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007080:	b111      	cbz	r1, 8007088 <_reclaim_reent+0x54>
 8007082:	4620      	mov	r0, r4
 8007084:	f000 f86e 	bl	8007164 <_free_r>
 8007088:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800708a:	b111      	cbz	r1, 8007092 <_reclaim_reent+0x5e>
 800708c:	4620      	mov	r0, r4
 800708e:	f000 f869 	bl	8007164 <_free_r>
 8007092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007094:	b111      	cbz	r1, 800709c <_reclaim_reent+0x68>
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f864 	bl	8007164 <_free_r>
 800709c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800709e:	b111      	cbz	r1, 80070a6 <_reclaim_reent+0x72>
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 f85f 	bl	8007164 <_free_r>
 80070a6:	69a3      	ldr	r3, [r4, #24]
 80070a8:	b1e3      	cbz	r3, 80070e4 <_reclaim_reent+0xb0>
 80070aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070ac:	4620      	mov	r0, r4
 80070ae:	4798      	blx	r3
 80070b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80070b2:	b1b9      	cbz	r1, 80070e4 <_reclaim_reent+0xb0>
 80070b4:	4620      	mov	r0, r4
 80070b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070ba:	f7ff bfad 	b.w	8007018 <cleanup_glue>
 80070be:	5949      	ldr	r1, [r1, r5]
 80070c0:	b941      	cbnz	r1, 80070d4 <_reclaim_reent+0xa0>
 80070c2:	3504      	adds	r5, #4
 80070c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c6:	2d80      	cmp	r5, #128	; 0x80
 80070c8:	68d9      	ldr	r1, [r3, #12]
 80070ca:	d1f8      	bne.n	80070be <_reclaim_reent+0x8a>
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 f849 	bl	8007164 <_free_r>
 80070d2:	e7ba      	b.n	800704a <_reclaim_reent+0x16>
 80070d4:	680e      	ldr	r6, [r1, #0]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f844 	bl	8007164 <_free_r>
 80070dc:	4631      	mov	r1, r6
 80070de:	e7ef      	b.n	80070c0 <_reclaim_reent+0x8c>
 80070e0:	2500      	movs	r5, #0
 80070e2:	e7ef      	b.n	80070c4 <_reclaim_reent+0x90>
 80070e4:	bd70      	pop	{r4, r5, r6, pc}
 80070e6:	bf00      	nop
 80070e8:	20000010 	.word	0x20000010

080070ec <_sbrk_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d06      	ldr	r5, [pc, #24]	; (8007108 <_sbrk_r+0x1c>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7fa f9dc 	bl	80014b4 <_sbrk>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_sbrk_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_sbrk_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	200049f8 	.word	0x200049f8

0800710c <siprintf>:
 800710c:	b40e      	push	{r1, r2, r3}
 800710e:	b500      	push	{lr}
 8007110:	b09c      	sub	sp, #112	; 0x70
 8007112:	ab1d      	add	r3, sp, #116	; 0x74
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	9006      	str	r0, [sp, #24]
 8007118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800711c:	4809      	ldr	r0, [pc, #36]	; (8007144 <siprintf+0x38>)
 800711e:	9107      	str	r1, [sp, #28]
 8007120:	9104      	str	r1, [sp, #16]
 8007122:	4909      	ldr	r1, [pc, #36]	; (8007148 <siprintf+0x3c>)
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	a902      	add	r1, sp, #8
 8007130:	f000 f8c0 	bl	80072b4 <_svfiprintf_r>
 8007134:	9b02      	ldr	r3, [sp, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	b01c      	add	sp, #112	; 0x70
 800713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007140:	b003      	add	sp, #12
 8007142:	4770      	bx	lr
 8007144:	20000010 	.word	0x20000010
 8007148:	ffff0208 	.word	0xffff0208

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	; (8007154 <__malloc_lock+0x8>)
 800714e:	f7ff beb7 	b.w	8006ec0 <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	200049ec 	.word	0x200049ec

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__malloc_unlock+0x8>)
 800715a:	f7ff beb2 	b.w	8006ec2 <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	200049ec 	.word	0x200049ec

08007164 <_free_r>:
 8007164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007166:	2900      	cmp	r1, #0
 8007168:	d044      	beq.n	80071f4 <_free_r+0x90>
 800716a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f1a1 0404 	sub.w	r4, r1, #4
 8007176:	bfb8      	it	lt
 8007178:	18e4      	addlt	r4, r4, r3
 800717a:	f7ff ffe7 	bl	800714c <__malloc_lock>
 800717e:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <_free_r+0x94>)
 8007180:	9801      	ldr	r0, [sp, #4]
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	b933      	cbnz	r3, 8007194 <_free_r+0x30>
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	6014      	str	r4, [r2, #0]
 800718a:	b003      	add	sp, #12
 800718c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007190:	f7ff bfe2 	b.w	8007158 <__malloc_unlock>
 8007194:	42a3      	cmp	r3, r4
 8007196:	d908      	bls.n	80071aa <_free_r+0x46>
 8007198:	6825      	ldr	r5, [r4, #0]
 800719a:	1961      	adds	r1, r4, r5
 800719c:	428b      	cmp	r3, r1
 800719e:	bf01      	itttt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	1949      	addeq	r1, r1, r5
 80071a6:	6021      	streq	r1, [r4, #0]
 80071a8:	e7ed      	b.n	8007186 <_free_r+0x22>
 80071aa:	461a      	mov	r2, r3
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b10b      	cbz	r3, 80071b4 <_free_r+0x50>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d9fa      	bls.n	80071aa <_free_r+0x46>
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	1855      	adds	r5, r2, r1
 80071b8:	42a5      	cmp	r5, r4
 80071ba:	d10b      	bne.n	80071d4 <_free_r+0x70>
 80071bc:	6824      	ldr	r4, [r4, #0]
 80071be:	4421      	add	r1, r4
 80071c0:	1854      	adds	r4, r2, r1
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	d1e0      	bne.n	800718a <_free_r+0x26>
 80071c8:	681c      	ldr	r4, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	6053      	str	r3, [r2, #4]
 80071ce:	4421      	add	r1, r4
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	e7da      	b.n	800718a <_free_r+0x26>
 80071d4:	d902      	bls.n	80071dc <_free_r+0x78>
 80071d6:	230c      	movs	r3, #12
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	e7d6      	b.n	800718a <_free_r+0x26>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	1961      	adds	r1, r4, r5
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf04      	itt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	6063      	str	r3, [r4, #4]
 80071ea:	bf04      	itt	eq
 80071ec:	1949      	addeq	r1, r1, r5
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	6054      	str	r4, [r2, #4]
 80071f2:	e7ca      	b.n	800718a <_free_r+0x26>
 80071f4:	b003      	add	sp, #12
 80071f6:	bd30      	pop	{r4, r5, pc}
 80071f8:	200049f0 	.word	0x200049f0

080071fc <__ssputs_r>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	688e      	ldr	r6, [r1, #8]
 8007202:	429e      	cmp	r6, r3
 8007204:	4682      	mov	sl, r0
 8007206:	460c      	mov	r4, r1
 8007208:	4690      	mov	r8, r2
 800720a:	461f      	mov	r7, r3
 800720c:	d838      	bhi.n	8007280 <__ssputs_r+0x84>
 800720e:	898a      	ldrh	r2, [r1, #12]
 8007210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007214:	d032      	beq.n	800727c <__ssputs_r+0x80>
 8007216:	6825      	ldr	r5, [r4, #0]
 8007218:	6909      	ldr	r1, [r1, #16]
 800721a:	eba5 0901 	sub.w	r9, r5, r1
 800721e:	6965      	ldr	r5, [r4, #20]
 8007220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007228:	3301      	adds	r3, #1
 800722a:	444b      	add	r3, r9
 800722c:	106d      	asrs	r5, r5, #1
 800722e:	429d      	cmp	r5, r3
 8007230:	bf38      	it	cc
 8007232:	461d      	movcc	r5, r3
 8007234:	0553      	lsls	r3, r2, #21
 8007236:	d531      	bpl.n	800729c <__ssputs_r+0xa0>
 8007238:	4629      	mov	r1, r5
 800723a:	f7ff fe79 	bl	8006f30 <_malloc_r>
 800723e:	4606      	mov	r6, r0
 8007240:	b950      	cbnz	r0, 8007258 <__ssputs_r+0x5c>
 8007242:	230c      	movs	r3, #12
 8007244:	f8ca 3000 	str.w	r3, [sl]
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	6921      	ldr	r1, [r4, #16]
 800725a:	464a      	mov	r2, r9
 800725c:	f7ff fe32 	bl	8006ec4 <memcpy>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	6126      	str	r6, [r4, #16]
 800726e:	6165      	str	r5, [r4, #20]
 8007270:	444e      	add	r6, r9
 8007272:	eba5 0509 	sub.w	r5, r5, r9
 8007276:	6026      	str	r6, [r4, #0]
 8007278:	60a5      	str	r5, [r4, #8]
 800727a:	463e      	mov	r6, r7
 800727c:	42be      	cmp	r6, r7
 800727e:	d900      	bls.n	8007282 <__ssputs_r+0x86>
 8007280:	463e      	mov	r6, r7
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	4632      	mov	r2, r6
 8007286:	4641      	mov	r1, r8
 8007288:	f000 faa8 	bl	80077dc <memmove>
 800728c:	68a3      	ldr	r3, [r4, #8]
 800728e:	1b9b      	subs	r3, r3, r6
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	4433      	add	r3, r6
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	2000      	movs	r0, #0
 800729a:	e7db      	b.n	8007254 <__ssputs_r+0x58>
 800729c:	462a      	mov	r2, r5
 800729e:	f000 fab7 	bl	8007810 <_realloc_r>
 80072a2:	4606      	mov	r6, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d1e1      	bne.n	800726c <__ssputs_r+0x70>
 80072a8:	6921      	ldr	r1, [r4, #16]
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7ff ff5a 	bl	8007164 <_free_r>
 80072b0:	e7c7      	b.n	8007242 <__ssputs_r+0x46>
	...

080072b4 <_svfiprintf_r>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4698      	mov	r8, r3
 80072ba:	898b      	ldrh	r3, [r1, #12]
 80072bc:	061b      	lsls	r3, r3, #24
 80072be:	b09d      	sub	sp, #116	; 0x74
 80072c0:	4607      	mov	r7, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	d50e      	bpl.n	80072e6 <_svfiprintf_r+0x32>
 80072c8:	690b      	ldr	r3, [r1, #16]
 80072ca:	b963      	cbnz	r3, 80072e6 <_svfiprintf_r+0x32>
 80072cc:	2140      	movs	r1, #64	; 0x40
 80072ce:	f7ff fe2f 	bl	8006f30 <_malloc_r>
 80072d2:	6028      	str	r0, [r5, #0]
 80072d4:	6128      	str	r0, [r5, #16]
 80072d6:	b920      	cbnz	r0, 80072e2 <_svfiprintf_r+0x2e>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e0d1      	b.n	8007486 <_svfiprintf_r+0x1d2>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	616b      	str	r3, [r5, #20]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	2320      	movs	r3, #32
 80072ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074a0 <_svfiprintf_r+0x1ec>
 80072fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072fe:	f04f 0901 	mov.w	r9, #1
 8007302:	4623      	mov	r3, r4
 8007304:	469a      	mov	sl, r3
 8007306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730a:	b10a      	cbz	r2, 8007310 <_svfiprintf_r+0x5c>
 800730c:	2a25      	cmp	r2, #37	; 0x25
 800730e:	d1f9      	bne.n	8007304 <_svfiprintf_r+0x50>
 8007310:	ebba 0b04 	subs.w	fp, sl, r4
 8007314:	d00b      	beq.n	800732e <_svfiprintf_r+0x7a>
 8007316:	465b      	mov	r3, fp
 8007318:	4622      	mov	r2, r4
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ff6d 	bl	80071fc <__ssputs_r>
 8007322:	3001      	adds	r0, #1
 8007324:	f000 80aa 	beq.w	800747c <_svfiprintf_r+0x1c8>
 8007328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732a:	445a      	add	r2, fp
 800732c:	9209      	str	r2, [sp, #36]	; 0x24
 800732e:	f89a 3000 	ldrb.w	r3, [sl]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a2 	beq.w	800747c <_svfiprintf_r+0x1c8>
 8007338:	2300      	movs	r3, #0
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007342:	f10a 0a01 	add.w	sl, sl, #1
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800734e:	931a      	str	r3, [sp, #104]	; 0x68
 8007350:	4654      	mov	r4, sl
 8007352:	2205      	movs	r2, #5
 8007354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007358:	4851      	ldr	r0, [pc, #324]	; (80074a0 <_svfiprintf_r+0x1ec>)
 800735a:	f7f8 ff49 	bl	80001f0 <memchr>
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	b9d8      	cbnz	r0, 800739a <_svfiprintf_r+0xe6>
 8007362:	06d0      	lsls	r0, r2, #27
 8007364:	bf44      	itt	mi
 8007366:	2320      	movmi	r3, #32
 8007368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736c:	0711      	lsls	r1, r2, #28
 800736e:	bf44      	itt	mi
 8007370:	232b      	movmi	r3, #43	; 0x2b
 8007372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007376:	f89a 3000 	ldrb.w	r3, [sl]
 800737a:	2b2a      	cmp	r3, #42	; 0x2a
 800737c:	d015      	beq.n	80073aa <_svfiprintf_r+0xf6>
 800737e:	9a07      	ldr	r2, [sp, #28]
 8007380:	4654      	mov	r4, sl
 8007382:	2000      	movs	r0, #0
 8007384:	f04f 0c0a 	mov.w	ip, #10
 8007388:	4621      	mov	r1, r4
 800738a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738e:	3b30      	subs	r3, #48	; 0x30
 8007390:	2b09      	cmp	r3, #9
 8007392:	d94e      	bls.n	8007432 <_svfiprintf_r+0x17e>
 8007394:	b1b0      	cbz	r0, 80073c4 <_svfiprintf_r+0x110>
 8007396:	9207      	str	r2, [sp, #28]
 8007398:	e014      	b.n	80073c4 <_svfiprintf_r+0x110>
 800739a:	eba0 0308 	sub.w	r3, r0, r8
 800739e:	fa09 f303 	lsl.w	r3, r9, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	46a2      	mov	sl, r4
 80073a8:	e7d2      	b.n	8007350 <_svfiprintf_r+0x9c>
 80073aa:	9b03      	ldr	r3, [sp, #12]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfbb      	ittet	lt
 80073b6:	425b      	neglt	r3, r3
 80073b8:	f042 0202 	orrlt.w	r2, r2, #2
 80073bc:	9307      	strge	r3, [sp, #28]
 80073be:	9307      	strlt	r3, [sp, #28]
 80073c0:	bfb8      	it	lt
 80073c2:	9204      	strlt	r2, [sp, #16]
 80073c4:	7823      	ldrb	r3, [r4, #0]
 80073c6:	2b2e      	cmp	r3, #46	; 0x2e
 80073c8:	d10c      	bne.n	80073e4 <_svfiprintf_r+0x130>
 80073ca:	7863      	ldrb	r3, [r4, #1]
 80073cc:	2b2a      	cmp	r3, #42	; 0x2a
 80073ce:	d135      	bne.n	800743c <_svfiprintf_r+0x188>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	9203      	str	r2, [sp, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfb8      	it	lt
 80073dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e0:	3402      	adds	r4, #2
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074b0 <_svfiprintf_r+0x1fc>
 80073e8:	7821      	ldrb	r1, [r4, #0]
 80073ea:	2203      	movs	r2, #3
 80073ec:	4650      	mov	r0, sl
 80073ee:	f7f8 feff 	bl	80001f0 <memchr>
 80073f2:	b140      	cbz	r0, 8007406 <_svfiprintf_r+0x152>
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	eba0 000a 	sub.w	r0, r0, sl
 80073fa:	fa03 f000 	lsl.w	r0, r3, r0
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	4303      	orrs	r3, r0
 8007402:	3401      	adds	r4, #1
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740a:	4826      	ldr	r0, [pc, #152]	; (80074a4 <_svfiprintf_r+0x1f0>)
 800740c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007410:	2206      	movs	r2, #6
 8007412:	f7f8 feed 	bl	80001f0 <memchr>
 8007416:	2800      	cmp	r0, #0
 8007418:	d038      	beq.n	800748c <_svfiprintf_r+0x1d8>
 800741a:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <_svfiprintf_r+0x1f4>)
 800741c:	bb1b      	cbnz	r3, 8007466 <_svfiprintf_r+0x1b2>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	f023 0307 	bic.w	r3, r3, #7
 8007426:	3308      	adds	r3, #8
 8007428:	9303      	str	r3, [sp, #12]
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	4433      	add	r3, r6
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	e767      	b.n	8007302 <_svfiprintf_r+0x4e>
 8007432:	fb0c 3202 	mla	r2, ip, r2, r3
 8007436:	460c      	mov	r4, r1
 8007438:	2001      	movs	r0, #1
 800743a:	e7a5      	b.n	8007388 <_svfiprintf_r+0xd4>
 800743c:	2300      	movs	r3, #0
 800743e:	3401      	adds	r4, #1
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	4619      	mov	r1, r3
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	4620      	mov	r0, r4
 800744a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744e:	3a30      	subs	r2, #48	; 0x30
 8007450:	2a09      	cmp	r2, #9
 8007452:	d903      	bls.n	800745c <_svfiprintf_r+0x1a8>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0c5      	beq.n	80073e4 <_svfiprintf_r+0x130>
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	e7c3      	b.n	80073e4 <_svfiprintf_r+0x130>
 800745c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007460:	4604      	mov	r4, r0
 8007462:	2301      	movs	r3, #1
 8007464:	e7f0      	b.n	8007448 <_svfiprintf_r+0x194>
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	462a      	mov	r2, r5
 800746c:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <_svfiprintf_r+0x1f8>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	4638      	mov	r0, r7
 8007472:	f3af 8000 	nop.w
 8007476:	1c42      	adds	r2, r0, #1
 8007478:	4606      	mov	r6, r0
 800747a:	d1d6      	bne.n	800742a <_svfiprintf_r+0x176>
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	065b      	lsls	r3, r3, #25
 8007480:	f53f af2c 	bmi.w	80072dc <_svfiprintf_r+0x28>
 8007484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007486:	b01d      	add	sp, #116	; 0x74
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	ab03      	add	r3, sp, #12
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462a      	mov	r2, r5
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <_svfiprintf_r+0x1f8>)
 8007494:	a904      	add	r1, sp, #16
 8007496:	4638      	mov	r0, r7
 8007498:	f000 f87a 	bl	8007590 <_printf_i>
 800749c:	e7eb      	b.n	8007476 <_svfiprintf_r+0x1c2>
 800749e:	bf00      	nop
 80074a0:	08007a08 	.word	0x08007a08
 80074a4:	08007a12 	.word	0x08007a12
 80074a8:	00000000 	.word	0x00000000
 80074ac:	080071fd 	.word	0x080071fd
 80074b0:	08007a0e 	.word	0x08007a0e

080074b4 <_printf_common>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	4616      	mov	r6, r2
 80074ba:	4699      	mov	r9, r3
 80074bc:	688a      	ldr	r2, [r1, #8]
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c4:	4293      	cmp	r3, r2
 80074c6:	bfb8      	it	lt
 80074c8:	4613      	movlt	r3, r2
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074d0:	4607      	mov	r7, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	b10a      	cbz	r2, 80074da <_printf_common+0x26>
 80074d6:	3301      	adds	r3, #1
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	0699      	lsls	r1, r3, #26
 80074de:	bf42      	ittt	mi
 80074e0:	6833      	ldrmi	r3, [r6, #0]
 80074e2:	3302      	addmi	r3, #2
 80074e4:	6033      	strmi	r3, [r6, #0]
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	f015 0506 	ands.w	r5, r5, #6
 80074ec:	d106      	bne.n	80074fc <_printf_common+0x48>
 80074ee:	f104 0a19 	add.w	sl, r4, #25
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	6832      	ldr	r2, [r6, #0]
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc26      	bgt.n	800754a <_printf_common+0x96>
 80074fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007500:	1e13      	subs	r3, r2, #0
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	bf18      	it	ne
 8007506:	2301      	movne	r3, #1
 8007508:	0692      	lsls	r2, r2, #26
 800750a:	d42b      	bmi.n	8007564 <_printf_common+0xb0>
 800750c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007510:	4649      	mov	r1, r9
 8007512:	4638      	mov	r0, r7
 8007514:	47c0      	blx	r8
 8007516:	3001      	adds	r0, #1
 8007518:	d01e      	beq.n	8007558 <_printf_common+0xa4>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	68e5      	ldr	r5, [r4, #12]
 800751e:	6832      	ldr	r2, [r6, #0]
 8007520:	f003 0306 	and.w	r3, r3, #6
 8007524:	2b04      	cmp	r3, #4
 8007526:	bf08      	it	eq
 8007528:	1aad      	subeq	r5, r5, r2
 800752a:	68a3      	ldr	r3, [r4, #8]
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	bf0c      	ite	eq
 8007530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007534:	2500      	movne	r5, #0
 8007536:	4293      	cmp	r3, r2
 8007538:	bfc4      	itt	gt
 800753a:	1a9b      	subgt	r3, r3, r2
 800753c:	18ed      	addgt	r5, r5, r3
 800753e:	2600      	movs	r6, #0
 8007540:	341a      	adds	r4, #26
 8007542:	42b5      	cmp	r5, r6
 8007544:	d11a      	bne.n	800757c <_printf_common+0xc8>
 8007546:	2000      	movs	r0, #0
 8007548:	e008      	b.n	800755c <_printf_common+0xa8>
 800754a:	2301      	movs	r3, #1
 800754c:	4652      	mov	r2, sl
 800754e:	4649      	mov	r1, r9
 8007550:	4638      	mov	r0, r7
 8007552:	47c0      	blx	r8
 8007554:	3001      	adds	r0, #1
 8007556:	d103      	bne.n	8007560 <_printf_common+0xac>
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007560:	3501      	adds	r5, #1
 8007562:	e7c6      	b.n	80074f2 <_printf_common+0x3e>
 8007564:	18e1      	adds	r1, r4, r3
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	2030      	movs	r0, #48	; 0x30
 800756a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756e:	4422      	add	r2, r4
 8007570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007578:	3302      	adds	r3, #2
 800757a:	e7c7      	b.n	800750c <_printf_common+0x58>
 800757c:	2301      	movs	r3, #1
 800757e:	4622      	mov	r2, r4
 8007580:	4649      	mov	r1, r9
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	3001      	adds	r0, #1
 8007588:	d0e6      	beq.n	8007558 <_printf_common+0xa4>
 800758a:	3601      	adds	r6, #1
 800758c:	e7d9      	b.n	8007542 <_printf_common+0x8e>
	...

08007590 <_printf_i>:
 8007590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	7e0f      	ldrb	r7, [r1, #24]
 8007596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007598:	2f78      	cmp	r7, #120	; 0x78
 800759a:	4691      	mov	r9, r2
 800759c:	4680      	mov	r8, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	469a      	mov	sl, r3
 80075a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a6:	d807      	bhi.n	80075b8 <_printf_i+0x28>
 80075a8:	2f62      	cmp	r7, #98	; 0x62
 80075aa:	d80a      	bhi.n	80075c2 <_printf_i+0x32>
 80075ac:	2f00      	cmp	r7, #0
 80075ae:	f000 80d8 	beq.w	8007762 <_printf_i+0x1d2>
 80075b2:	2f58      	cmp	r7, #88	; 0x58
 80075b4:	f000 80a3 	beq.w	80076fe <_printf_i+0x16e>
 80075b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c0:	e03a      	b.n	8007638 <_printf_i+0xa8>
 80075c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c6:	2b15      	cmp	r3, #21
 80075c8:	d8f6      	bhi.n	80075b8 <_printf_i+0x28>
 80075ca:	a101      	add	r1, pc, #4	; (adr r1, 80075d0 <_printf_i+0x40>)
 80075cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d0:	08007629 	.word	0x08007629
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	080075b9 	.word	0x080075b9
 80075dc:	080075b9 	.word	0x080075b9
 80075e0:	080075b9 	.word	0x080075b9
 80075e4:	080075b9 	.word	0x080075b9
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	080075b9 	.word	0x080075b9
 80075f0:	080075b9 	.word	0x080075b9
 80075f4:	080075b9 	.word	0x080075b9
 80075f8:	080075b9 	.word	0x080075b9
 80075fc:	08007749 	.word	0x08007749
 8007600:	0800766d 	.word	0x0800766d
 8007604:	0800772b 	.word	0x0800772b
 8007608:	080075b9 	.word	0x080075b9
 800760c:	080075b9 	.word	0x080075b9
 8007610:	0800776b 	.word	0x0800776b
 8007614:	080075b9 	.word	0x080075b9
 8007618:	0800766d 	.word	0x0800766d
 800761c:	080075b9 	.word	0x080075b9
 8007620:	080075b9 	.word	0x080075b9
 8007624:	08007733 	.word	0x08007733
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007638:	2301      	movs	r3, #1
 800763a:	e0a3      	b.n	8007784 <_printf_i+0x1f4>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	6829      	ldr	r1, [r5, #0]
 8007640:	0606      	lsls	r6, r0, #24
 8007642:	f101 0304 	add.w	r3, r1, #4
 8007646:	d50a      	bpl.n	800765e <_printf_i+0xce>
 8007648:	680e      	ldr	r6, [r1, #0]
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	2e00      	cmp	r6, #0
 800764e:	da03      	bge.n	8007658 <_printf_i+0xc8>
 8007650:	232d      	movs	r3, #45	; 0x2d
 8007652:	4276      	negs	r6, r6
 8007654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007658:	485e      	ldr	r0, [pc, #376]	; (80077d4 <_printf_i+0x244>)
 800765a:	230a      	movs	r3, #10
 800765c:	e019      	b.n	8007692 <_printf_i+0x102>
 800765e:	680e      	ldr	r6, [r1, #0]
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007666:	bf18      	it	ne
 8007668:	b236      	sxthne	r6, r6
 800766a:	e7ef      	b.n	800764c <_printf_i+0xbc>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	6029      	str	r1, [r5, #0]
 8007674:	0601      	lsls	r1, r0, #24
 8007676:	d501      	bpl.n	800767c <_printf_i+0xec>
 8007678:	681e      	ldr	r6, [r3, #0]
 800767a:	e002      	b.n	8007682 <_printf_i+0xf2>
 800767c:	0646      	lsls	r6, r0, #25
 800767e:	d5fb      	bpl.n	8007678 <_printf_i+0xe8>
 8007680:	881e      	ldrh	r6, [r3, #0]
 8007682:	4854      	ldr	r0, [pc, #336]	; (80077d4 <_printf_i+0x244>)
 8007684:	2f6f      	cmp	r7, #111	; 0x6f
 8007686:	bf0c      	ite	eq
 8007688:	2308      	moveq	r3, #8
 800768a:	230a      	movne	r3, #10
 800768c:	2100      	movs	r1, #0
 800768e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007692:	6865      	ldr	r5, [r4, #4]
 8007694:	60a5      	str	r5, [r4, #8]
 8007696:	2d00      	cmp	r5, #0
 8007698:	bfa2      	ittt	ge
 800769a:	6821      	ldrge	r1, [r4, #0]
 800769c:	f021 0104 	bicge.w	r1, r1, #4
 80076a0:	6021      	strge	r1, [r4, #0]
 80076a2:	b90e      	cbnz	r6, 80076a8 <_printf_i+0x118>
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	d04d      	beq.n	8007744 <_printf_i+0x1b4>
 80076a8:	4615      	mov	r5, r2
 80076aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ae:	fb03 6711 	mls	r7, r3, r1, r6
 80076b2:	5dc7      	ldrb	r7, [r0, r7]
 80076b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b8:	4637      	mov	r7, r6
 80076ba:	42bb      	cmp	r3, r7
 80076bc:	460e      	mov	r6, r1
 80076be:	d9f4      	bls.n	80076aa <_printf_i+0x11a>
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d10b      	bne.n	80076dc <_printf_i+0x14c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	07de      	lsls	r6, r3, #31
 80076c8:	d508      	bpl.n	80076dc <_printf_i+0x14c>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	6861      	ldr	r1, [r4, #4]
 80076ce:	4299      	cmp	r1, r3
 80076d0:	bfde      	ittt	le
 80076d2:	2330      	movle	r3, #48	; 0x30
 80076d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076dc:	1b52      	subs	r2, r2, r5
 80076de:	6122      	str	r2, [r4, #16]
 80076e0:	f8cd a000 	str.w	sl, [sp]
 80076e4:	464b      	mov	r3, r9
 80076e6:	aa03      	add	r2, sp, #12
 80076e8:	4621      	mov	r1, r4
 80076ea:	4640      	mov	r0, r8
 80076ec:	f7ff fee2 	bl	80074b4 <_printf_common>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d14c      	bne.n	800778e <_printf_i+0x1fe>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	b004      	add	sp, #16
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	4835      	ldr	r0, [pc, #212]	; (80077d4 <_printf_i+0x244>)
 8007700:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f851 6b04 	ldr.w	r6, [r1], #4
 800770c:	6029      	str	r1, [r5, #0]
 800770e:	061d      	lsls	r5, r3, #24
 8007710:	d514      	bpl.n	800773c <_printf_i+0x1ac>
 8007712:	07df      	lsls	r7, r3, #31
 8007714:	bf44      	itt	mi
 8007716:	f043 0320 	orrmi.w	r3, r3, #32
 800771a:	6023      	strmi	r3, [r4, #0]
 800771c:	b91e      	cbnz	r6, 8007726 <_printf_i+0x196>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	f023 0320 	bic.w	r3, r3, #32
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	2310      	movs	r3, #16
 8007728:	e7b0      	b.n	800768c <_printf_i+0xfc>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f043 0320 	orr.w	r3, r3, #32
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	2378      	movs	r3, #120	; 0x78
 8007734:	4828      	ldr	r0, [pc, #160]	; (80077d8 <_printf_i+0x248>)
 8007736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800773a:	e7e3      	b.n	8007704 <_printf_i+0x174>
 800773c:	0659      	lsls	r1, r3, #25
 800773e:	bf48      	it	mi
 8007740:	b2b6      	uxthmi	r6, r6
 8007742:	e7e6      	b.n	8007712 <_printf_i+0x182>
 8007744:	4615      	mov	r5, r2
 8007746:	e7bb      	b.n	80076c0 <_printf_i+0x130>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	6826      	ldr	r6, [r4, #0]
 800774c:	6961      	ldr	r1, [r4, #20]
 800774e:	1d18      	adds	r0, r3, #4
 8007750:	6028      	str	r0, [r5, #0]
 8007752:	0635      	lsls	r5, r6, #24
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	d501      	bpl.n	800775c <_printf_i+0x1cc>
 8007758:	6019      	str	r1, [r3, #0]
 800775a:	e002      	b.n	8007762 <_printf_i+0x1d2>
 800775c:	0670      	lsls	r0, r6, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0x1c8>
 8007760:	8019      	strh	r1, [r3, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	6123      	str	r3, [r4, #16]
 8007766:	4615      	mov	r5, r2
 8007768:	e7ba      	b.n	80076e0 <_printf_i+0x150>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	1d1a      	adds	r2, r3, #4
 800776e:	602a      	str	r2, [r5, #0]
 8007770:	681d      	ldr	r5, [r3, #0]
 8007772:	6862      	ldr	r2, [r4, #4]
 8007774:	2100      	movs	r1, #0
 8007776:	4628      	mov	r0, r5
 8007778:	f7f8 fd3a 	bl	80001f0 <memchr>
 800777c:	b108      	cbz	r0, 8007782 <_printf_i+0x1f2>
 800777e:	1b40      	subs	r0, r0, r5
 8007780:	6060      	str	r0, [r4, #4]
 8007782:	6863      	ldr	r3, [r4, #4]
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	2300      	movs	r3, #0
 8007788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778c:	e7a8      	b.n	80076e0 <_printf_i+0x150>
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	462a      	mov	r2, r5
 8007792:	4649      	mov	r1, r9
 8007794:	4640      	mov	r0, r8
 8007796:	47d0      	blx	sl
 8007798:	3001      	adds	r0, #1
 800779a:	d0ab      	beq.n	80076f4 <_printf_i+0x164>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	079b      	lsls	r3, r3, #30
 80077a0:	d413      	bmi.n	80077ca <_printf_i+0x23a>
 80077a2:	68e0      	ldr	r0, [r4, #12]
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	4298      	cmp	r0, r3
 80077a8:	bfb8      	it	lt
 80077aa:	4618      	movlt	r0, r3
 80077ac:	e7a4      	b.n	80076f8 <_printf_i+0x168>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4632      	mov	r2, r6
 80077b2:	4649      	mov	r1, r9
 80077b4:	4640      	mov	r0, r8
 80077b6:	47d0      	blx	sl
 80077b8:	3001      	adds	r0, #1
 80077ba:	d09b      	beq.n	80076f4 <_printf_i+0x164>
 80077bc:	3501      	adds	r5, #1
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	9903      	ldr	r1, [sp, #12]
 80077c2:	1a5b      	subs	r3, r3, r1
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	dcf2      	bgt.n	80077ae <_printf_i+0x21e>
 80077c8:	e7eb      	b.n	80077a2 <_printf_i+0x212>
 80077ca:	2500      	movs	r5, #0
 80077cc:	f104 0619 	add.w	r6, r4, #25
 80077d0:	e7f5      	b.n	80077be <_printf_i+0x22e>
 80077d2:	bf00      	nop
 80077d4:	08007a19 	.word	0x08007a19
 80077d8:	08007a2a 	.word	0x08007a2a

080077dc <memmove>:
 80077dc:	4288      	cmp	r0, r1
 80077de:	b510      	push	{r4, lr}
 80077e0:	eb01 0402 	add.w	r4, r1, r2
 80077e4:	d902      	bls.n	80077ec <memmove+0x10>
 80077e6:	4284      	cmp	r4, r0
 80077e8:	4623      	mov	r3, r4
 80077ea:	d807      	bhi.n	80077fc <memmove+0x20>
 80077ec:	1e43      	subs	r3, r0, #1
 80077ee:	42a1      	cmp	r1, r4
 80077f0:	d008      	beq.n	8007804 <memmove+0x28>
 80077f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077fa:	e7f8      	b.n	80077ee <memmove+0x12>
 80077fc:	4402      	add	r2, r0
 80077fe:	4601      	mov	r1, r0
 8007800:	428a      	cmp	r2, r1
 8007802:	d100      	bne.n	8007806 <memmove+0x2a>
 8007804:	bd10      	pop	{r4, pc}
 8007806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800780a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800780e:	e7f7      	b.n	8007800 <memmove+0x24>

08007810 <_realloc_r>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4680      	mov	r8, r0
 8007816:	4614      	mov	r4, r2
 8007818:	460e      	mov	r6, r1
 800781a:	b921      	cbnz	r1, 8007826 <_realloc_r+0x16>
 800781c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	4611      	mov	r1, r2
 8007822:	f7ff bb85 	b.w	8006f30 <_malloc_r>
 8007826:	b92a      	cbnz	r2, 8007834 <_realloc_r+0x24>
 8007828:	f7ff fc9c 	bl	8007164 <_free_r>
 800782c:	4625      	mov	r5, r4
 800782e:	4628      	mov	r0, r5
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	f000 f81b 	bl	800786e <_malloc_usable_size_r>
 8007838:	4284      	cmp	r4, r0
 800783a:	4607      	mov	r7, r0
 800783c:	d802      	bhi.n	8007844 <_realloc_r+0x34>
 800783e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007842:	d812      	bhi.n	800786a <_realloc_r+0x5a>
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fb72 	bl	8006f30 <_malloc_r>
 800784c:	4605      	mov	r5, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	d0ed      	beq.n	800782e <_realloc_r+0x1e>
 8007852:	42bc      	cmp	r4, r7
 8007854:	4622      	mov	r2, r4
 8007856:	4631      	mov	r1, r6
 8007858:	bf28      	it	cs
 800785a:	463a      	movcs	r2, r7
 800785c:	f7ff fb32 	bl	8006ec4 <memcpy>
 8007860:	4631      	mov	r1, r6
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fc7e 	bl	8007164 <_free_r>
 8007868:	e7e1      	b.n	800782e <_realloc_r+0x1e>
 800786a:	4635      	mov	r5, r6
 800786c:	e7df      	b.n	800782e <_realloc_r+0x1e>

0800786e <_malloc_usable_size_r>:
 800786e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007872:	1f18      	subs	r0, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	bfbc      	itt	lt
 8007878:	580b      	ldrlt	r3, [r1, r0]
 800787a:	18c0      	addlt	r0, r0, r3
 800787c:	4770      	bx	lr
	...

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
