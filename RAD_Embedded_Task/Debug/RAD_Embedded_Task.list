
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a0  080060a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080060a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000930  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009a0  200009a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bc2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002914  00000000  00000000  00037c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001378  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bbc  00000000  00000000  0003cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174bf  00000000  00000000  00062904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e59e6  00000000  00000000  00079dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f7a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cc8  00000000  00000000  0015f7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800601c 	.word	0x0800601c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800601c 	.word	0x0800601c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Set_Pin_Output>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = GPIO_Pin;
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
		  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f001 ffc2 	bl	800254c <HAL_GPIO_Init>

	  }
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Set_Pin_Input>:
  void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f001 ffa4 	bl	800254c <HAL_GPIO_Init>
	}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <delay>:

    /*Configure GPIO pin : Temp_Sensor_Pin */


  void delay(uint32_t us)
  {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
      __HAL_TIM_SET_COUNTER(&htim1,0);
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <delay+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
      while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 800061c:	bf00      	nop
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <delay+0x2c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	429a      	cmp	r2, r3
 8000628:	d8f9      	bhi.n	800061e <delay+0x12>
  }
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200003c8 	.word	0x200003c8

0800063c <DS18B20_Start>:

  uint8_t DS18B20_Start(void)
  {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  	uint8_t Response = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
  	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000646:	2108      	movs	r1, #8
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <DS18B20_Start+0x5c>)
 800064a:	f7ff ffa3 	bl	8000594 <Set_Pin_Output>
  	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	4811      	ldr	r0, [pc, #68]	; (8000698 <DS18B20_Start+0x5c>)
 8000654:	f002 f93e 	bl	80028d4 <HAL_GPIO_WritePin>
  	delay(480);   // delay according to datasheet
 8000658:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800065c:	f7ff ffd6 	bl	800060c <delay>

  	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8000660:	2108      	movs	r1, #8
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <DS18B20_Start+0x5c>)
 8000664:	f7ff ffb4 	bl	80005d0 <Set_Pin_Input>
  	delay(80);    // delay according to datasheet
 8000668:	2050      	movs	r0, #80	; 0x50
 800066a:	f7ff ffcf 	bl	800060c <delay>

  	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800066e:	2108      	movs	r1, #8
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <DS18B20_Start+0x5c>)
 8000672:	f002 f917 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <DS18B20_Start+0x46>
 800067c:	2301      	movs	r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e001      	b.n	8000686 <DS18B20_Start+0x4a>
  	else Response = -1;
 8000682:	23ff      	movs	r3, #255	; 0xff
 8000684:	71fb      	strb	r3, [r7, #7]

  	delay (400); // 480 us delay totally.
 8000686:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800068a:	f7ff ffbf 	bl	800060c <delay>

  	return Response;
 800068e:	79fb      	ldrb	r3, [r7, #7]
  }
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020000 	.word	0x40020000

0800069c <DS18B20_Write>:




 void DS18B20_Write (uint8_t data)
  {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80006a6:	2108      	movs	r1, #8
 80006a8:	481e      	ldr	r0, [pc, #120]	; (8000724 <DS18B20_Write+0x88>)
 80006aa:	f7ff ff73 	bl	8000594 <Set_Pin_Output>

  	for (int i=0; i<8; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e02e      	b.n	8000712 <DS18B20_Write+0x76>
  	{

  		if ((data & (1<<i))!=0)  // if the bit is high
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	fa42 f303 	asr.w	r3, r2, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d013      	beq.n	80006ec <DS18B20_Write+0x50>
  		{
  			// write 1

  			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80006c4:	2108      	movs	r1, #8
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <DS18B20_Write+0x88>)
 80006c8:	f7ff ff64 	bl	8000594 <Set_Pin_Output>
  			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <DS18B20_Write+0x88>)
 80006d2:	f002 f8ff 	bl	80028d4 <HAL_GPIO_WritePin>
  			delay (1);  // wait for 1 us
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff98 	bl	800060c <delay>

  			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80006dc:	2108      	movs	r1, #8
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <DS18B20_Write+0x88>)
 80006e0:	f7ff ff76 	bl	80005d0 <Set_Pin_Input>
  			delay (50);  // wait for 60 us
 80006e4:	2032      	movs	r0, #50	; 0x32
 80006e6:	f7ff ff91 	bl	800060c <delay>
 80006ea:	e00f      	b.n	800070c <DS18B20_Write+0x70>

  		else  // if the bit is low
  		{
  			// write 0

  			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80006ec:	2108      	movs	r1, #8
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <DS18B20_Write+0x88>)
 80006f0:	f7ff ff50 	bl	8000594 <Set_Pin_Output>
  			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80006f4:	2200      	movs	r2, #0
 80006f6:	2108      	movs	r1, #8
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <DS18B20_Write+0x88>)
 80006fa:	f002 f8eb 	bl	80028d4 <HAL_GPIO_WritePin>
  			delay (50);  // wait for 60 us
 80006fe:	2032      	movs	r0, #50	; 0x32
 8000700:	f7ff ff84 	bl	800060c <delay>

  			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000704:	2108      	movs	r1, #8
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <DS18B20_Write+0x88>)
 8000708:	f7ff ff62 	bl	80005d0 <Set_Pin_Input>
  	for (int i=0; i<8; i++)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b07      	cmp	r3, #7
 8000716:	ddcd      	ble.n	80006b4 <DS18B20_Write+0x18>
  		}
  	}
  }
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020000 	.word	0x40020000

08000728 <DS18B20_Read>:




 uint8_t DS18B20_Read(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  	uint8_t value=0;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
  	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000732:	2108      	movs	r1, #8
 8000734:	481a      	ldr	r0, [pc, #104]	; (80007a0 <DS18B20_Read+0x78>)
 8000736:	f7ff ff4b 	bl	80005d0 <Set_Pin_Input>

  	for (int i=0;i<8;i++)
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	e026      	b.n	800078e <DS18B20_Read+0x66>
  	{
  		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000740:	2108      	movs	r1, #8
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <DS18B20_Read+0x78>)
 8000744:	f7ff ff26 	bl	8000594 <Set_Pin_Output>

  		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8000748:	2200      	movs	r2, #0
 800074a:	2108      	movs	r1, #8
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <DS18B20_Read+0x78>)
 800074e:	f002 f8c1 	bl	80028d4 <HAL_GPIO_WritePin>
  		delay (2);  // wait for 2 us
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff5a 	bl	800060c <delay>

  		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000758:	2108      	movs	r1, #8
 800075a:	4811      	ldr	r0, [pc, #68]	; (80007a0 <DS18B20_Read+0x78>)
 800075c:	f7ff ff38 	bl	80005d0 <Set_Pin_Input>
  		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8000760:	2108      	movs	r1, #8
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <DS18B20_Read+0x78>)
 8000764:	f002 f89e 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d009      	beq.n	8000782 <DS18B20_Read+0x5a>
  		{
  			value |= 1<<i;  // read = 1
 800076e:	2201      	movs	r2, #1
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	b25a      	sxtb	r2, r3
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	71fb      	strb	r3, [r7, #7]
  		}
  		delay (60);  // wait for 60 us
 8000782:	203c      	movs	r0, #60	; 0x3c
 8000784:	f7ff ff42 	bl	800060c <delay>
  	for (int i=0;i<8;i++)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b07      	cmp	r3, #7
 8000792:	ddd5      	ble.n	8000740 <DS18B20_Read+0x18>
  	}
  	return value;
 8000794:	79fb      	ldrb	r3, [r7, #7]
  }
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020000 	.word	0x40020000

080007a4 <decToBcd>:

 // Convert normal decimal numbers to binary coded decimal
 uint8_t decToBcd(int val)
 {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
   return (uint8_t)( (val/10*16) + (val%10) );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <decToBcd+0x48>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	1092      	asrs	r2, r2, #2
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	b2d8      	uxtb	r0, r3
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <decToBcd+0x48>)
 80007c4:	fb83 1302 	smull	r1, r3, r3, r2
 80007c8:	1099      	asrs	r1, r3, #2
 80007ca:	17d3      	asrs	r3, r2, #31
 80007cc:	1ac9      	subs	r1, r1, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	1ad1      	subs	r1, r2, r3
 80007d8:	b2cb      	uxtb	r3, r1
 80007da:	4403      	add	r3, r0
 80007dc:	b2db      	uxtb	r3, r3
 }
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	66666667 	.word	0x66666667

080007f0 <bcdToDec>:

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	091b      	lsrs	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	461a      	mov	r2, r3
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	4413      	add	r3, r2
 }
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <Set_Time>:

 TIME time;

 /* function to set time */
 void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
 {
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af04      	add	r7, sp, #16
 8000826:	4604      	mov	r4, r0
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4623      	mov	r3, r4
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	4603      	mov	r3, r0
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	460b      	mov	r3, r1
 8000838:	717b      	strb	r3, [r7, #5]
 800083a:	4613      	mov	r3, r2
 800083c:	713b      	strb	r3, [r7, #4]
 	uint8_t set_time[7];
 	set_time[0] = decToBcd(sec);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffaf 	bl	80007a4 <decToBcd>
 8000846:	4603      	mov	r3, r0
 8000848:	723b      	strb	r3, [r7, #8]
 	set_time[1] = decToBcd(min);
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffa9 	bl	80007a4 <decToBcd>
 8000852:	4603      	mov	r3, r0
 8000854:	727b      	strb	r3, [r7, #9]
 	set_time[2] = decToBcd(hour);
 8000856:	797b      	ldrb	r3, [r7, #5]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffa3 	bl	80007a4 <decToBcd>
 800085e:	4603      	mov	r3, r0
 8000860:	72bb      	strb	r3, [r7, #10]
 	set_time[3] = decToBcd(dow);
 8000862:	793b      	ldrb	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff9d 	bl	80007a4 <decToBcd>
 800086a:	4603      	mov	r3, r0
 800086c:	72fb      	strb	r3, [r7, #11]
 	set_time[4] = decToBcd(dom);
 800086e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff96 	bl	80007a4 <decToBcd>
 8000878:	4603      	mov	r3, r0
 800087a:	733b      	strb	r3, [r7, #12]
 	set_time[5] = decToBcd(month);
 800087c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff8f 	bl	80007a4 <decToBcd>
 8000886:	4603      	mov	r3, r0
 8000888:	737b      	strb	r3, [r7, #13]
 	set_time[6] = decToBcd(year);
 800088a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff88 	bl	80007a4 <decToBcd>
 8000894:	4603      	mov	r3, r0
 8000896:	73bb      	strb	r3, [r7, #14]

 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
 8000898:	23d0      	movs	r3, #208	; 0xd0
 800089a:	b299      	uxth	r1, r3
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	2307      	movs	r3, #7
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	2200      	movs	r2, #0
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <Set_Time+0xa0>)
 80008b2:	f002 f96d 	bl	8002b90 <HAL_I2C_Mem_Write>
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002b4 	.word	0x200002b4

080008c4 <Get_Time>:

 void Get_Time (void)
 {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af04      	add	r7, sp, #16
 	uint8_t get_time[7];
 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 80008ca:	23d0      	movs	r3, #208	; 0xd0
 80008cc:	b299      	uxth	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	2307      	movs	r3, #7
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	463b      	mov	r3, r7
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	2200      	movs	r2, #0
 80008e0:	481f      	ldr	r0, [pc, #124]	; (8000960 <Get_Time+0x9c>)
 80008e2:	f002 fa4f 	bl	8002d84 <HAL_I2C_Mem_Read>
// 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 	time.seconds = bcdToDec(get_time[0]);
 80008e6:	783b      	ldrb	r3, [r7, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff81 	bl	80007f0 <bcdToDec>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <Get_Time+0xa0>)
 80008f4:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff79 	bl	80007f0 <bcdToDec>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <Get_Time+0xa0>)
 8000904:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 8000906:	78bb      	ldrb	r3, [r7, #2]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff71 	bl	80007f0 <bcdToDec>
 800090e:	4603      	mov	r3, r0
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <Get_Time+0xa0>)
 8000914:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff69 	bl	80007f0 <bcdToDec>
 800091e:	4603      	mov	r3, r0
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <Get_Time+0xa0>)
 8000924:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 8000926:	793b      	ldrb	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff61 	bl	80007f0 <bcdToDec>
 800092e:	4603      	mov	r3, r0
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Get_Time+0xa0>)
 8000934:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff59 	bl	80007f0 <bcdToDec>
 800093e:	4603      	mov	r3, r0
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <Get_Time+0xa0>)
 8000944:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff51 	bl	80007f0 <bcdToDec>
 800094e:	4603      	mov	r3, r0
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <Get_Time+0xa0>)
 8000954:	719a      	strb	r2, [r3, #6]
 }
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002b4 	.word	0x200002b4
 8000964:	2000096c 	.word	0x2000096c

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fe33 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f88b 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f000 fa51 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 800097a:	f000 fa27 	bl	8000dcc <MX_DMA_Init>
  MX_ETH_Init();
 800097e:	f000 f8ef 	bl	8000b60 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000982:	f000 f9cb 	bl	8000d1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000986:	f000 f9f3 	bl	8000d70 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800098a:	f000 f977 	bl	8000c7c <MX_TIM1_Init>
  MX_I2C2_Init();
 800098e:	f000 f935 	bl	8000bfc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000992:	4835      	ldr	r0, [pc, #212]	; (8000a68 <main+0x100>)
 8000994:	f003 fdf8 	bl	8004588 <HAL_TIM_Base_Start>

  Set_Time(00, 03, 14, 5, 3, 1, 19);
 8000998:	2313      	movs	r3, #19
 800099a:	9302      	str	r3, [sp, #8]
 800099c:	2301      	movs	r3, #1
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	2303      	movs	r3, #3
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2305      	movs	r3, #5
 80009a6:	220e      	movs	r2, #14
 80009a8:	2103      	movs	r1, #3
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ff38 	bl	8000820 <Set_Time>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Get_Time();
 80009b0:	f7ff ff88 	bl	80008c4 <Get_Time>
	  sprintf(buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <main+0x104>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <main+0x104>)
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	4619      	mov	r1, r3
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <main+0x104>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	460b      	mov	r3, r1
 80009c8:	4929      	ldr	r1, [pc, #164]	; (8000a70 <main+0x108>)
 80009ca:	482a      	ldr	r0, [pc, #168]	; (8000a74 <main+0x10c>)
 80009cc:	f004 feb8 	bl	8005740 <siprintf>

	  Presence = DS18B20_Start();
 80009d0:	f7ff fe34 	bl	800063c <DS18B20_Start>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <main+0x110>)
 80009da:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fe6d 	bl	80016bc <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80009e2:	20cc      	movs	r0, #204	; 0xcc
 80009e4:	f7ff fe5a 	bl	800069c <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 80009e8:	2044      	movs	r0, #68	; 0x44
 80009ea:	f7ff fe57 	bl	800069c <DS18B20_Write>
	  HAL_Delay (800);
 80009ee:	f44f 7048 	mov.w	r0, #800	; 0x320
 80009f2:	f000 fe63 	bl	80016bc <HAL_Delay>

	  Presence = DS18B20_Start ();
 80009f6:	f7ff fe21 	bl	800063c <DS18B20_Start>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <main+0x110>)
 8000a00:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fe5a 	bl	80016bc <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8000a08:	20cc      	movs	r0, #204	; 0xcc
 8000a0a:	f7ff fe47 	bl	800069c <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8000a0e:	20be      	movs	r0, #190	; 0xbe
 8000a10:	f7ff fe44 	bl	800069c <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8000a14:	f7ff fe88 	bl	8000728 <DS18B20_Read>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <main+0x114>)
 8000a1e:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 8000a20:	f7ff fe82 	bl	8000728 <DS18B20_Read>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <main+0x118>)
 8000a2a:	701a      	strb	r2, [r3, #0]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <main+0x118>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <main+0x114>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <main+0x11c>)
 8000a42:	801a      	strh	r2, [r3, #0]
	  temperature = (float)TEMP/16;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0x11c>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a50:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <main+0x120>)
 8000a5a:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(500);
 8000a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a62:	f000 fe2b 	bl	80016bc <HAL_Delay>
	  Get_Time();
 8000a66:	e7a3      	b.n	80009b0 <main+0x48>
 8000a68:	200003c8 	.word	0x200003c8
 8000a6c:	2000096c 	.word	0x2000096c
 8000a70:	08006034 	.word	0x08006034
 8000a74:	20000974 	.word	0x20000974
 8000a78:	20000968 	.word	0x20000968
 8000a7c:	20000969 	.word	0x20000969
 8000a80:	2000096a 	.word	0x2000096a
 8000a84:	20000960 	.word	0x20000960
 8000a88:	20000964 	.word	0x20000964

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fe48 	bl	8005730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 f851 	bl	8003bb8 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b1c:	f000 fa48 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fab2 	bl	80040a8 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4a:	f000 fa31 	bl	8000fb0 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <MX_ETH_Init+0x88>)
 8000b68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b78:	22e1      	movs	r2, #225	; 0xe1
 8000b7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <MX_ETH_Init+0x90>)
 8000ba0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_ETH_Init+0x84>)
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_ETH_Init+0x94>)
 8000ba6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_ETH_Init+0x84>)
 8000baa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_ETH_Init+0x84>)
 8000bb2:	f001 f9a3 	bl	8001efc <HAL_ETH_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000bbc:	f000 f9f8 	bl	8000fb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bc0:	2238      	movs	r2, #56	; 0x38
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bc6:	f004 fdb3 	bl	8005730 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bcc:	2221      	movs	r2, #33	; 0x21
 8000bce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bd2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000bd6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000204 	.word	0x20000204
 8000be8:	40028000 	.word	0x40028000
 8000bec:	20000980 	.word	0x20000980
 8000bf0:	20000164 	.word	0x20000164
 8000bf4:	200000c4 	.word	0x200000c4
 8000bf8:	2000008c 	.word	0x2000008c

08000bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_I2C2_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <MX_I2C2_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c3a:	f001 fe65 	bl	8002908 <HAL_I2C_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 f9b4 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c4c:	f002 fe1b 	bl	8003886 <HAL_I2CEx_ConfigAnalogFilter>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c56:	f000 f9ab 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c5e:	f002 fe4e 	bl	80038fe <HAL_I2CEx_ConfigDigitalFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c68:	f000 f9a2 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200002b4 	.word	0x200002b4
 8000c74:	40005800 	.word	0x40005800
 8000c78:	000186a0 	.word	0x000186a0

08000c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <MX_TIM1_Init+0x9c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000ca0:	22a7      	movs	r2, #167	; 0xa7
 8000ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cc6:	f003 fc0f 	bl	80044e8 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cd0:	f000 f96e 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000ce2:	f003 fcb9 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cec:	f000 f960 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM1_Init+0x98>)
 8000cfe:	f003 fead 	bl	8004a5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d08:	f000 f952 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200003c8 	.word	0x200003c8
 8000d18:	40010000 	.word	0x40010000

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_USART3_UART_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_USART3_UART_Init+0x4c>)
 8000d54:	f003 fefe 	bl	8004b54 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d5e:	f000 f927 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000410 	.word	0x20000410
 8000d6c:	40004800 	.word	0x40004800

08000d70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db4:	f002 fde2 	bl	800397c <HAL_PCD_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 f8f7 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000454 	.word	0x20000454

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200d      	movs	r0, #13
 8000df4:	f000 fd61 	bl	80018ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000df8:	200d      	movs	r0, #13
 8000dfa:	f000 fd7a 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	202f      	movs	r0, #47	; 0x2f
 8000e04:	f000 fd59 	bl	80018ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e08:	202f      	movs	r0, #47	; 0x2f
 8000e0a:	f000 fd72 	bl	80018f2 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_GPIO_Init+0x180>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <MX_GPIO_Init+0x184>)
 8000efe:	f001 fce9 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0x188>)
 8000f08:	f001 fce4 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <MX_GPIO_Init+0x18c>)
 8000f24:	f001 fb12 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	; (8000fac <MX_GPIO_Init+0x190>)
 8000f3c:	f001 fb06 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f40:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_GPIO_Init+0x184>)
 8000f5a:	f001 faf7 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <MX_GPIO_Init+0x188>)
 8000f76:	f001 fae9 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_GPIO_Init+0x188>)
 8000f8e:	f001 fadd 	bl	800254c <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_MspInit+0x4c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a55      	ldr	r2, [pc, #340]	; (8001180 <HAL_ETH_MspInit+0x174>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 80a4 	bne.w	8001178 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	4b53      	ldr	r3, [pc, #332]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001056:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a44      	ldr	r2, [pc, #272]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a3d      	ldr	r2, [pc, #244]	; (8001184 <HAL_ETH_MspInit+0x178>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_ETH_MspInit+0x178>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a36      	ldr	r2, [pc, #216]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a28      	ldr	r2, [pc, #160]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_ETH_MspInit+0x178>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010f4:	2332      	movs	r3, #50	; 0x32
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001104:	230b      	movs	r3, #11
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <HAL_ETH_MspInit+0x17c>)
 8001110:	f001 fa1c 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001114:	2386      	movs	r3, #134	; 0x86
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001124:	230b      	movs	r3, #11
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <HAL_ETH_MspInit+0x180>)
 8001130:	f001 fa0c 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001146:	230b      	movs	r3, #11
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <HAL_ETH_MspInit+0x184>)
 8001152:	f001 f9fb 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001156:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <HAL_ETH_MspInit+0x188>)
 8001174:	f001 f9ea 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	3738      	adds	r7, #56	; 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40028000 	.word	0x40028000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020800 	.word	0x40020800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40021800 	.word	0x40021800

08001198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a47      	ldr	r2, [pc, #284]	; (80012d4 <HAL_I2C_MspInit+0x13c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f040 8088 	bne.w	80012cc <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d8:	2303      	movs	r3, #3
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	483a      	ldr	r0, [pc, #232]	; (80012dc <HAL_I2C_MspInit+0x144>)
 80011f4:	f001 f9aa 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a35      	ldr	r2, [pc, #212]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 8001202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_I2C_MspInit+0x140>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001216:	4a33      	ldr	r2, [pc, #204]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 800121c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001220:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001254:	4822      	ldr	r0, [pc, #136]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001256:	f000 fb67 	bl	8001928 <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001260:	f7ff fea6 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_I2C_MspInit+0x154>)
 8001274:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 8001278:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800127c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 8001280:	2240      	movs	r2, #64	; 0x40
 8001282:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012b2:	f000 fb39 	bl	8001928 <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80012bc:	f7ff fe78 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005800 	.word	0x40005800
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021400 	.word	0x40021400
 80012e0:	20000308 	.word	0x20000308
 80012e4:	40026040 	.word	0x40026040
 80012e8:	20000368 	.word	0x20000368
 80012ec:	400260b8 	.word	0x400260b8

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_TIM_Base_MspInit+0x3c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10d      	bne.n	800131e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x40>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x40>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_TIM_Base_MspInit+0x40>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_UART_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_UART_MspInit+0x88>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800138e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x8c>)
 80013ac:	f001 f8ce 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004800 	.word	0x40004800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e4:	d13f      	bne.n	8001466 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_PCD_MspInit+0xac>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_PCD_MspInit+0xac>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_PCD_MspInit+0xac>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001402:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001414:	230a      	movs	r3, #10
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <HAL_PCD_MspInit+0xb0>)
 8001420:	f001 f894 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480e      	ldr	r0, [pc, #56]	; (8001474 <HAL_PCD_MspInit+0xb0>)
 800143a:	f001 f887 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_PCD_MspInit+0xac>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_PCD_MspInit+0xac>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6353      	str	r3, [r2, #52]	; 0x34
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_PCD_MspInit+0xac>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_PCD_MspInit+0xac>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_PCD_MspInit+0xac>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f8da 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <DMA1_Stream2_IRQHandler+0x10>)
 80014d2:	f000 fad7 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000308 	.word	0x20000308

080014e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream7_IRQHandler+0x10>)
 80014e6:	f000 facd 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000368 	.word	0x20000368

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f004 f8da 	bl	80056dc <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20030000 	.word	0x20030000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000988 	.word	0x20000988
 800155c:	200009a0 	.word	0x200009a0

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a0:	4c0b      	ldr	r4, [pc, #44]	; (80015d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ae:	f7ff ffd7 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f004 f899 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff f9d7 	bl	8000968 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015c8:	080060a8 	.word	0x080060a8
  ldr r2, =_sbss
 80015cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015d0:	200009a0 	.word	0x200009a0

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f94f 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fcd6 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f967 	bl	800190e <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f92f 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000000 	.word	0x20000000
 8001674:	20000008 	.word	0x20000008
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	2000098c 	.word	0x2000098c

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000098c 	.word	0x2000098c

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff feb6 	bl	80016a4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e099      	b.n	8001a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001964:	e00f      	b.n	8001986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001966:	f7ff fe9d 	bl	80016a4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b05      	cmp	r3, #5
 8001972:	d908      	bls.n	8001986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e078      	b.n	8001a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_DMA_Init+0x158>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4313      	orrs	r3, r2
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d117      	bne.n	8001a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f9e9 	bl	8001e04 <DMA_CheckFifoParam>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a46:	2301      	movs	r3, #1
 8001a48:	e016      	b.n	8001a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f9a0 	bl	8001d98 <DMA_CalcBaseAndBitshift>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	f010803f 	.word	0xf010803f

08001a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a90:	4b8e      	ldr	r3, [pc, #568]	; (8001ccc <HAL_DMA_IRQHandler+0x248>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8e      	ldr	r2, [pc, #568]	; (8001cd0 <HAL_DMA_IRQHandler+0x24c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2208      	movs	r2, #8
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2208      	movs	r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2204      	movs	r2, #4
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	2210      	movs	r2, #16
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2210      	movs	r2, #16
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 808f 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8087 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d136      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0216 	bic.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x1da>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	223f      	movs	r2, #63	; 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07e      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
        }
        return;
 8001c9a:	e079      	b.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e02c      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e01e      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d307      	bcc.n	8001d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f2      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x2cc>
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d90:	bf00      	nop
    }
  }
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3b10      	subs	r3, #16
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <DMA_CalcBaseAndBitshift+0x64>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <DMA_CalcBaseAndBitshift+0x68>)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d909      	bls.n	8001dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	1d1a      	adds	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001dd8:	e007      	b.n	8001dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	aaaaaaab 	.word	0xaaaaaaab
 8001e00:	0800605c 	.word	0x0800605c

08001e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11f      	bne.n	8001e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d856      	bhi.n	8001ed2 <DMA_CheckFifoParam+0xce>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <DMA_CheckFifoParam+0x28>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e4f 	.word	0x08001e4f
 8001e34:	08001e3d 	.word	0x08001e3d
 8001e38:	08001ed3 	.word	0x08001ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d046      	beq.n	8001ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4c:	e043      	b.n	8001ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e56:	d140      	bne.n	8001eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5c:	e03d      	b.n	8001eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e66:	d121      	bne.n	8001eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d837      	bhi.n	8001ede <DMA_CheckFifoParam+0xda>
 8001e6e:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <DMA_CheckFifoParam+0x70>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e8b 	.word	0x08001e8b
 8001e7c:	08001e85 	.word	0x08001e85
 8001e80:	08001e9d 	.word	0x08001e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      break;
 8001e88:	e030      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d025      	beq.n	8001ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9a:	e022      	b.n	8001ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea4:	d11f      	bne.n	8001ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eaa:	e01c      	b.n	8001ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d903      	bls.n	8001eba <DMA_CheckFifoParam+0xb6>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d003      	beq.n	8001ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001eb8:	e018      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ebe:	e015      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e00b      	b.n	8001eea <DMA_CheckFifoParam+0xe6>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e00a      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e008      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
 8001edc:	e006      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e004      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e002      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
    }
  } 
  
  return status; 
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop

08001efc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06c      	b.n	8001fe8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2223      	movs	r2, #35	; 0x23
 8001f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff f873 	bl	800100c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_ETH_Init+0xf8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <HAL_ETH_Init+0xf8>)
 8001f48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f4c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_ETH_Init+0xf8>)
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_ETH_Init+0xf8>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_ETH_Init+0xf8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f78:	f7ff fb94 	bl	80016a4 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f7e:	e011      	b.n	8001fa4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f80:	f7ff fb90 	bl	80016a4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8e:	d909      	bls.n	8001fa4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	22e0      	movs	r2, #224	; 0xe0
 8001f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e021      	b.n	8001fe8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e4      	bne.n	8001f80 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f958 	bl	800226c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f9ff 	bl	80023c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa55 	bl	8002472 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f9bd 	bl	8002350 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <ETH_SetMACConfig+0x15c>)
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7c1b      	ldrb	r3, [r3, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <ETH_SetMACConfig+0x28>
 800201a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800201e:	e000      	b.n	8002022 <ETH_SetMACConfig+0x2a>
 8002020:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7c5b      	ldrb	r3, [r3, #17]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetMACConfig+0x38>
 800202a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x3a>
 8002030:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002032:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002038:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	7fdb      	ldrb	r3, [r3, #31]
 800203e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002040:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	7f92      	ldrb	r2, [r2, #30]
 800204c:	2a00      	cmp	r2, #0
 800204e:	d102      	bne.n	8002056 <ETH_SetMACConfig+0x5e>
 8002050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002054:	e000      	b.n	8002058 <ETH_SetMACConfig+0x60>
 8002056:	2200      	movs	r2, #0
                        macconf->Speed |
 8002058:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7f1b      	ldrb	r3, [r3, #28]
 800205e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002060:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002066:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800206e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002076:	2a00      	cmp	r2, #0
 8002078:	d102      	bne.n	8002080 <ETH_SetMACConfig+0x88>
 800207a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207e:	e000      	b.n	8002082 <ETH_SetMACConfig+0x8a>
 8002080:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002082:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	7bdb      	ldrb	r3, [r3, #15]
 8002088:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800208a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002098:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800209a:	4313      	orrs	r3, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff fb02 	bl	80016bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d101      	bne.n	80020e6 <ETH_SetMACConfig+0xee>
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	e000      	b.n	80020e8 <ETH_SetMACConfig+0xf0>
 80020e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020f6:	2a01      	cmp	r2, #1
 80020f8:	d101      	bne.n	80020fe <ETH_SetMACConfig+0x106>
 80020fa:	2208      	movs	r2, #8
 80020fc:	e000      	b.n	8002100 <ETH_SetMACConfig+0x108>
 80020fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002100:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002108:	2a01      	cmp	r2, #1
 800210a:	d101      	bne.n	8002110 <ETH_SetMACConfig+0x118>
 800210c:	2204      	movs	r2, #4
 800210e:	e000      	b.n	8002112 <ETH_SetMACConfig+0x11a>
 8002110:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800211a:	2a01      	cmp	r2, #1
 800211c:	d101      	bne.n	8002122 <ETH_SetMACConfig+0x12a>
 800211e:	2202      	movs	r2, #2
 8002120:	e000      	b.n	8002124 <ETH_SetMACConfig+0x12c>
 8002122:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002124:	4313      	orrs	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff fabd 	bl	80016bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	ff20810f 	.word	0xff20810f

08002158 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <ETH_SetDMAConfig+0x110>)
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	7b1b      	ldrb	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <ETH_SetDMAConfig+0x2c>
 800217e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002182:	e000      	b.n	8002186 <ETH_SetDMAConfig+0x2e>
 8002184:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7b5b      	ldrb	r3, [r3, #13]
 800218a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800218c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	7f52      	ldrb	r2, [r2, #29]
 8002192:	2a00      	cmp	r2, #0
 8002194:	d102      	bne.n	800219c <ETH_SetDMAConfig+0x44>
 8002196:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800219a:	e000      	b.n	800219e <ETH_SetDMAConfig+0x46>
 800219c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800219e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	7b9b      	ldrb	r3, [r3, #14]
 80021a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	7f1b      	ldrb	r3, [r3, #28]
 80021b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7f9b      	ldrb	r3, [r3, #30]
 80021ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	461a      	mov	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fa64 	bl	80016bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800220c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002212:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002218:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002220:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002222:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800222a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002230:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800223a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800224c:	2001      	movs	r0, #1
 800224e:	f7ff fa35 	bl	80016bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	f8de3f23 	.word	0xf8de3f23

0800226c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a6      	sub	sp, #152	; 0x98
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800227a:	2301      	movs	r3, #1
 800227c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022a8:	2300      	movs	r3, #0
 80022aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fe86 	bl	8001ff8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002318:	2301      	movs	r3, #1
 800231a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800231c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002320:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002326:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff08 	bl	8002158 <ETH_SetDMAConfig>
}
 8002348:	bf00      	nop
 800234a:	3798      	adds	r7, #152	; 0x98
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3204      	adds	r2, #4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <ETH_MACAddressConfig+0x68>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3303      	adds	r3, #3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061a      	lsls	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4313      	orrs	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <ETH_MACAddressConfig+0x6c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40028040 	.word	0x40028040
 80023bc:	40028044 	.word	0x40028044

080023c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e03e      	b.n	800244c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	3206      	adds	r2, #6
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d80c      	bhi.n	8002430 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d9      	ldr	r1, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e004      	b.n	800243a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3301      	adds	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d9bd      	bls.n	80023ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002464:	611a      	str	r2, [r3, #16]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e046      	b.n	800250e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6919      	ldr	r1, [r3, #16]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80024c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	3212      	adds	r2, #18
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d80c      	bhi.n	80024fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6919      	ldr	r1, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	e004      	b.n	8002508 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d9b5      	bls.n	8002480 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e177      	b.n	8002858 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8166 	bne.w	8002852 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80c0 	beq.w	8002852 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a61      	ldr	r2, [pc, #388]	; (8002874 <HAL_GPIO_Init+0x328>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_GPIO_Init+0x32c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d037      	beq.n	800278a <HAL_GPIO_Init+0x23e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_GPIO_Init+0x330>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_GPIO_Init+0x23a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_GPIO_Init+0x334>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x236>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a55      	ldr	r2, [pc, #340]	; (8002884 <HAL_GPIO_Init+0x338>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x232>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_GPIO_Init+0x33c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x22e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a53      	ldr	r2, [pc, #332]	; (800288c <HAL_GPIO_Init+0x340>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x22a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_GPIO_Init+0x344>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x226>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_GPIO_Init+0x348>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <HAL_GPIO_Init+0x34c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x350>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x21a>
 8002762:	2309      	movs	r3, #9
 8002764:	e012      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002766:	230a      	movs	r3, #10
 8002768:	e010      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276a:	2308      	movs	r3, #8
 800276c:	e00e      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276e:	2307      	movs	r3, #7
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002772:	2306      	movs	r3, #6
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x240>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x328>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_GPIO_Init+0x354>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_GPIO_Init+0x354>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_GPIO_Init+0x354>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_GPIO_Init+0x354>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae84 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40021c00 	.word	0x40021c00
 8002898:	40022000 	.word	0x40022000
 800289c:	40022400 	.word	0x40022400
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e12b      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fc32 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	; 0x24
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800296c:	f001 fd94 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8002970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_I2C_Init+0x274>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d807      	bhi.n	800298c <HAL_I2C_Init+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_I2C_Init+0x278>)
 8002980:	4293      	cmp	r3, r2
 8002982:	bf94      	ite	ls
 8002984:	2301      	movls	r3, #1
 8002986:	2300      	movhi	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e006      	b.n	800299a <HAL_I2C_Init+0x92>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a7d      	ldr	r2, [pc, #500]	; (8002b84 <HAL_I2C_Init+0x27c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0e7      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a78      	ldr	r2, [pc, #480]	; (8002b88 <HAL_I2C_Init+0x280>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	; (8002b7c <HAL_I2C_Init+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d802      	bhi.n	80029dc <HAL_I2C_Init+0xd4>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	e009      	b.n	80029f0 <HAL_I2C_Init+0xe8>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_I2C_Init+0x284>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	3301      	adds	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	495c      	ldr	r1, [pc, #368]	; (8002b7c <HAL_I2C_Init+0x274>)
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	d819      	bhi.n	8002a44 <HAL_I2C_Init+0x13c>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e59      	subs	r1, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a24:	400b      	ands	r3, r1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_I2C_Init+0x138>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e59      	subs	r1, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	e051      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e04f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d111      	bne.n	8002a70 <HAL_I2C_Init+0x168>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e012      	b.n	8002a96 <HAL_I2C_Init+0x18e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	0099      	lsls	r1, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x196>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e022      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_I2C_Init+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e58      	subs	r0, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6809      	ldr	r1, [r1, #0]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6911      	ldr	r1, [r2, #16]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68d2      	ldr	r2, [r2, #12]
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	000186a0 	.word	0x000186a0
 8002b80:	001e847f 	.word	0x001e847f
 8002b84:	003d08ff 	.word	0x003d08ff
 8002b88:	431bde83 	.word	0x431bde83
 8002b8c:	10624dd3 	.word	0x10624dd3

08002b90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002baa:	f7fe fd7b 	bl	80016a4 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f040 80d9 	bne.w	8002d70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	496d      	ldr	r1, [pc, #436]	; (8002d7c <HAL_I2C_Mem_Write+0x1ec>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fc7f 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0cc      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Mem_Write+0x56>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0c5      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a4d      	ldr	r2, [pc, #308]	; (8002d80 <HAL_I2C_Mem_Write+0x1f0>)
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c4e:	88f8      	ldrh	r0, [r7, #6]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fab6 	bl	80031d0 <I2C_RequestMemoryWrite>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d052      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e081      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fd00 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d107      	bne.n	8002c96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11b      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x180>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1aa      	bne.n	8002c6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fcec 	bl	80036fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e016      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00100002 	.word	0x00100002
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d9e:	f7fe fc81 	bl	80016a4 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	f040 8208 	bne.w	80031c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2319      	movs	r3, #25
 8002db8:	2201      	movs	r2, #1
 8002dba:	497b      	ldr	r1, [pc, #492]	; (8002fa8 <HAL_I2C_Mem_Read+0x224>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb85 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e1fb      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Read+0x56>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e1f4      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2222      	movs	r2, #34	; 0x22
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <HAL_I2C_Mem_Read+0x228>)
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e42:	88f8      	ldrh	r0, [r7, #6]
 8002e44:	893a      	ldrh	r2, [r7, #8]
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4603      	mov	r3, r0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fa52 	bl	80032fc <I2C_RequestMemoryRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1b0      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e184      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d11b      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e164      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d11b      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	e144      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f28:	e138      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	f200 80f1 	bhi.w	8003116 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d123      	bne.n	8002f84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fc1b 	bl	800377c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e139      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f82:	e10b      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d14e      	bne.n	800302a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	2200      	movs	r2, #0
 8002f94:	4906      	ldr	r1, [pc, #24]	; (8002fb0 <HAL_I2C_Mem_Read+0x22c>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fa98 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e10e      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
 8002fa6:	bf00      	nop
 8002fa8:	00100002 	.word	0x00100002
 8002fac:	ffff0000 	.word	0xffff0000
 8002fb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003028:	e0b8      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	2200      	movs	r2, #0
 8003032:	4966      	ldr	r1, [pc, #408]	; (80031cc <HAL_I2C_Mem_Read+0x448>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa49 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0bf      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2200      	movs	r2, #0
 800308e:	494f      	ldr	r1, [pc, #316]	; (80031cc <HAL_I2C_Mem_Read+0x448>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fa1b 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e091      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003114:	e042      	b.n	800319c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fb2e 	bl	800377c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e04c      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d118      	bne.n	800319c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f aec2 	bne.w	8002f2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	00010004 	.word	0x00010004

080031d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2200      	movs	r2, #0
 8003202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f960 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d103      	bne.n	800322a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e05f      	b.n	80032ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800323c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	492d      	ldr	r1, [pc, #180]	; (80032f8 <I2C_RequestMemoryWrite+0x128>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f998 	bl	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e04c      	b.n	80032ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa02 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e02b      	b.n	80032ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	e021      	b.n	80032ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f9dc 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e005      	b.n	80032ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	00010002 	.word	0x00010002

080032fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	461a      	mov	r2, r3
 800330a:	4603      	mov	r3, r0
 800330c:	817b      	strh	r3, [r7, #10]
 800330e:	460b      	mov	r3, r1
 8003310:	813b      	strh	r3, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003334:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2200      	movs	r2, #0
 800333e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f8c2 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335c:	d103      	bne.n	8003366 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0aa      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003378:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	4952      	ldr	r1, [pc, #328]	; (80034c8 <I2C_RequestMemoryRead+0x1cc>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8fa 	bl	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e097      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	6a39      	ldr	r1, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f964 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d107      	bne.n	80033ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e076      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]
 80033e2:	e021      	b.n	8003428 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f93e 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e050      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800341e:	893b      	ldrh	r3, [r7, #8]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f923 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b04      	cmp	r3, #4
 800343e:	d107      	bne.n	8003450 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e035      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2200      	movs	r2, #0
 800346c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f82b 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d103      	bne.n	8003494 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e013      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003498:	897b      	ldrh	r3, [r7, #10]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	6a3a      	ldr	r2, [r7, #32]
 80034ac:	4906      	ldr	r1, [pc, #24]	; (80034c8 <I2C_RequestMemoryRead+0x1cc>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f863 	bl	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	00010002 	.word	0x00010002

080034cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034dc:	e025      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d021      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fe f8dd 	bl	80016a4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e023      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10d      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	e00c      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0b6      	beq.n	80034de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003588:	e051      	b.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003598:	d123      	bne.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0204 	orr.w	r2, r3, #4
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e046      	b.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d021      	beq.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe f85b 	bl	80016a4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d116      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e020      	b.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10c      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e00b      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d18d      	bne.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003684:	e02d      	b.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8ce 	bl	8003828 <I2C_IsAcknowledgeFailed>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e02d      	b.n	80036f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d021      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe f801 	bl	80016a4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e007      	b.n	80036f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d1ca      	bne.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003706:	e02d      	b.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f88d 	bl	8003828 <I2C_IsAcknowledgeFailed>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e02d      	b.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d021      	beq.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7fd ffc0 	bl	80016a4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d116      	bne.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e007      	b.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d1ca      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003788:	e042      	b.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d119      	bne.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0210 	mvn.w	r2, #16
 80037a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e029      	b.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fd ff6a 	bl	80016a4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e007      	b.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d1b5      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d11b      	bne.n	8003878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d129      	bne.n	80038f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d12a      	bne.n	800396e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	f023 030f 	bic.w	r3, r3, #15
 800393e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	89fb      	ldrh	r3, [r7, #14]
 8003946:	4313      	orrs	r3, r2
 8003948:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	89fa      	ldrh	r2, [r7, #14]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b08f      	sub	sp, #60	; 0x3c
 8003980:	af0a      	add	r7, sp, #40	; 0x28
 8003982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e10f      	b.n	8003bae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd fd0b 	bl	80013c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fbe4 	bl	800519a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	687e      	ldr	r6, [r7, #4]
 80039da:	466d      	mov	r5, sp
 80039dc:	f106 0410 	add.w	r4, r6, #16
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f0:	1d33      	adds	r3, r6, #4
 80039f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f001 fb6f 	bl	80050d8 <USB_CoreInit>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0d0      	b.n	8003bae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 fbd2 	bl	80051bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e04a      	b.n	8003ab4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	333d      	adds	r3, #61	; 0x3d
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333c      	adds	r3, #60	; 0x3c
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	b298      	uxth	r0, r3
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3344      	adds	r3, #68	; 0x44
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3340      	adds	r3, #64	; 0x40
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3348      	adds	r3, #72	; 0x48
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334c      	adds	r3, #76	; 0x4c
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3354      	adds	r3, #84	; 0x54
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3af      	bcc.n	8003a1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	e044      	b.n	8003b4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3b5      	bcc.n	8003ac4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	687e      	ldr	r6, [r7, #4]
 8003b60:	466d      	mov	r5, sp
 8003b62:	f106 0410 	add.w	r4, r6, #16
 8003b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b76:	1d33      	adds	r3, r6, #4
 8003b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7a:	6838      	ldr	r0, [r7, #0]
 8003b7c:	f001 fb6a 	bl	8005254 <USB_DevInit>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00d      	b.n	8003bae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fd35 	bl	8005616 <USB_DevDisconnect>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e267      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d075      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d112      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4b82      	ldr	r3, [pc, #520]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	4b7e      	ldr	r3, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05b      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x108>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d157      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e242      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_OscConfig+0x74>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e01d      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c36:	4b70      	ldr	r3, [pc, #448]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6f      	ldr	r2, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6c      	ldr	r2, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c50:	4b69      	ldr	r3, [pc, #420]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a68      	ldr	r2, [pc, #416]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a65      	ldr	r2, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d013      	beq.n	8003c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd fd18 	bl	80016a4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd fd14 	bl	80016a4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e207      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0xc0>
 8003c96:	e014      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fd fd04 	bl	80016a4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fd fd00 	bl	80016a4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1f3      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	4b51      	ldr	r3, [pc, #324]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xe8>
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x152>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1c7      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCC_OscConfig+0x244>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fcb9 	bl	80016a4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fd fcb5 	bl	80016a4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1a8      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x244>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fc98 	bl	80016a4 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fd fc94 	bl	80016a4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e187      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x248>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fc78 	bl	80016a4 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fd fc74 	bl	80016a4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e167      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x200>
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x248>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fc61 	bl	80016a4 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00e      	b.n	8003e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fd fc5d 	bl	80016a4 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d907      	bls.n	8003e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e150      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470000 	.word	0x42470000
 8003e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ea      	bne.n	8003de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8097 	beq.w	8003f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b81      	ldr	r3, [pc, #516]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a7c      	ldr	r2, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b7a      	ldr	r3, [pc, #488]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x474>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b74      	ldr	r3, [pc, #464]	; (800402c <HAL_RCC_OscConfig+0x474>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a73      	ldr	r2, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x474>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fc1d 	bl	80016a4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fd fc19 	bl	80016a4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e10c      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCC_OscConfig+0x474>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x2ea>
 8003e94:	4b64      	ldr	r3, [pc, #400]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a63      	ldr	r2, [pc, #396]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x324>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x30c>
 8003eaa:	4b5f      	ldr	r3, [pc, #380]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a5e      	ldr	r2, [pc, #376]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0x324>
 8003ec4:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b55      	ldr	r3, [pc, #340]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f023 0304 	bic.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fbde 	bl	80016a4 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fbda 	bl	80016a4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0cb      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x334>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fd fbc8 	bl	80016a4 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd fbc4 	bl	80016a4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0b5      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	4a38      	ldr	r2, [pc, #224]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a1 	beq.w	8004098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f56:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d05c      	beq.n	800401c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d141      	bne.n	8003fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_RCC_OscConfig+0x478>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fd fb98 	bl	80016a4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd fb94 	bl	80016a4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e087      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	491b      	ldr	r1, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x478>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fb6d 	bl	80016a4 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fd fb69 	bl	80016a4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e05c      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x416>
 8003fec:	e054      	b.n	8004098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x478>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd fb56 	bl	80016a4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd fb52 	bl	80016a4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e045      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCC_OscConfig+0x470>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x444>
 800401a:	e03d      	b.n	8004098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e038      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
 8004030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x4ec>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d028      	beq.n	8004094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d121      	bne.n	8004094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d11a      	bne.n	8004094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800406c:	4293      	cmp	r3, r2
 800406e:	d111      	bne.n	8004094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	3b01      	subs	r3, #1
 800407e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0cc      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d90c      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b65      	ldr	r3, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d044      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d119      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d003      	beq.n	8004166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e06f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e067      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4934      	ldr	r1, [pc, #208]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004198:	f7fd fa84 	bl	80016a4 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fd fa80 	bl	80016a4 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e04f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d20c      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd f9e4 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023c00 	.word	0x40023c00
 8004264:	40023800 	.word	0x40023800
 8004268:	08006044 	.word	0x08006044
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b094      	sub	sp, #80	; 0x50
 800427a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	2300      	movs	r3, #0
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	2300      	movs	r3, #0
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428c:	4b79      	ldr	r3, [pc, #484]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d00d      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004298:	2b08      	cmp	r3, #8
 800429a:	f200 80e1 	bhi.w	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x3a>
 80042a6:	e0db      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042ac:	e0db      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_GetSysClockFreq+0x208>)
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b2:	e0d8      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
 80042e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e6:	4622      	mov	r2, r4
 80042e8:	462b      	mov	r3, r5
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f8:	0150      	lsls	r0, r2, #5
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4621      	mov	r1, r4
 8004300:	1a51      	subs	r1, r2, r1
 8004302:	6139      	str	r1, [r7, #16]
 8004304:	4629      	mov	r1, r5
 8004306:	eb63 0301 	sbc.w	r3, r3, r1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004318:	4659      	mov	r1, fp
 800431a:	018b      	lsls	r3, r1, #6
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004322:	4651      	mov	r1, sl
 8004324:	018a      	lsls	r2, r1, #6
 8004326:	4651      	mov	r1, sl
 8004328:	ebb2 0801 	subs.w	r8, r2, r1
 800432c:	4659      	mov	r1, fp
 800432e:	eb63 0901 	sbc.w	r9, r3, r1
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004346:	4690      	mov	r8, r2
 8004348:	4699      	mov	r9, r3
 800434a:	4623      	mov	r3, r4
 800434c:	eb18 0303 	adds.w	r3, r8, r3
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	462b      	mov	r3, r5
 8004354:	eb49 0303 	adc.w	r3, r9, r3
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004366:	4629      	mov	r1, r5
 8004368:	024b      	lsls	r3, r1, #9
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004370:	4621      	mov	r1, r4
 8004372:	024a      	lsls	r2, r1, #9
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	2200      	movs	r2, #0
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004384:	f7fb ff84 	bl	8000290 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004390:	e058      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b38      	ldr	r3, [pc, #224]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	2200      	movs	r2, #0
 800439a:	4618      	mov	r0, r3
 800439c:	4611      	mov	r1, r2
 800439e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	2300      	movs	r3, #0
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	f04f 0000 	mov.w	r0, #0
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043be:	0150      	lsls	r0, r2, #5
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4641      	mov	r1, r8
 80043c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ca:	4649      	mov	r1, r9
 80043cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e4:	ebb2 040a 	subs.w	r4, r2, sl
 80043e8:	eb63 050b 	sbc.w	r5, r3, fp
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	00eb      	lsls	r3, r5, #3
 80043f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	4643      	mov	r3, r8
 8004402:	18e3      	adds	r3, r4, r3
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	464b      	mov	r3, r9
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441a:	4629      	mov	r1, r5
 800441c:	028b      	lsls	r3, r1, #10
 800441e:	4621      	mov	r1, r4
 8004420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004424:	4621      	mov	r1, r4
 8004426:	028a      	lsls	r2, r1, #10
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	2200      	movs	r2, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	61fa      	str	r2, [r7, #28]
 8004434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004438:	f7fb ff2a 	bl	8000290 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	3301      	adds	r3, #1
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445e:	e002      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004468:	4618      	mov	r0, r3
 800446a:	3750      	adds	r7, #80	; 0x50
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800449c:	f7ff fff0 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0a9b      	lsrs	r3, r3, #10
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08006054 	.word	0x08006054

080044c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044c4:	f7ff ffdc 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0b5b      	lsrs	r3, r3, #13
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	08006054 	.word	0x08006054

080044e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e041      	b.n	800457e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc feee 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f000 f95e 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d001      	beq.n	80045a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e046      	b.n	800462e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_TIM_Base_Start+0xb4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d01d      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_TIM_Base_Start+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_TIM_Base_Start+0xbc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_TIM_Base_Start+0xc0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_TIM_Base_Start+0xc4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_TIM_Base_Start+0xc8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_Base_Start+0x70>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_TIM_Base_Start+0xcc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d010      	beq.n	800462c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e007      	b.n	800462c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIM_ConfigClockSource+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e0b4      	b.n	80047de <HAL_TIM_ConfigClockSource+0x186>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ac:	d03e      	beq.n	800472c <HAL_TIM_ConfigClockSource+0xd4>
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b2:	f200 8087 	bhi.w	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	f000 8086 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x172>
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d87f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d01a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xa6>
 80046c8:	2b70      	cmp	r3, #112	; 0x70
 80046ca:	d87b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b60      	cmp	r3, #96	; 0x60
 80046ce:	d050      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x11a>
 80046d0:	2b60      	cmp	r3, #96	; 0x60
 80046d2:	d877      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b50      	cmp	r3, #80	; 0x50
 80046d6:	d03c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xfa>
 80046d8:	2b50      	cmp	r3, #80	; 0x50
 80046da:	d873      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d058      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x13a>
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d86f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b30      	cmp	r3, #48	; 0x30
 80046e6:	d064      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b30      	cmp	r3, #48	; 0x30
 80046ea:	d86b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d060      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d867      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d05a      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	e062      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f000 f985 	bl	8004a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	609a      	str	r2, [r3, #8]
      break;
 800472a:	e04f      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f000 f96e 	bl	8004a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e03c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f8e2 	bl	8004928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2150      	movs	r1, #80	; 0x50
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f93b 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004770:	e02c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f901 	bl	8004986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2160      	movs	r1, #96	; 0x60
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f92b 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004790:	e01c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 f8c2 	bl	8004928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f91b 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f000 f912 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 80047c2:	e003      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d027      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d023      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000

08004928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 030a 	bic.w	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0210 	bic.w	r2, r3, #16
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f043 0307 	orr.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e05a      	b.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d01d      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10c      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40010400 	.word	0x40010400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40001800 	.word	0x40001800

08004b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e03f      	b.n	8004be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fbda 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f829 	bl	8004bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b0c0      	sub	sp, #256	; 0x100
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	ea40 0301 	orr.w	r3, r0, r1
 8004c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c48:	f021 010c 	bic.w	r1, r1, #12
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	6999      	ldr	r1, [r3, #24]
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	ea40 0301 	orr.w	r3, r0, r1
 8004c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8f      	ldr	r3, [pc, #572]	; (8004ebc <UART_SetConfig+0x2cc>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <UART_SetConfig+0xa0>
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	; (8004ec0 <UART_SetConfig+0x2d0>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7ff fc16 	bl	80044c0 <HAL_RCC_GetPCLK2Freq>
 8004c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9a:	f7ff fbfd 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8004c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cac:	f040 810c 	bne.w	8004ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	eb12 0801 	adds.w	r8, r2, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb43 0901 	adc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb49 0303 	adc.w	r3, r9, r3
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	18db      	adds	r3, r3, r3
 8004d22:	653b      	str	r3, [r7, #80]	; 0x50
 8004d24:	4613      	mov	r3, r2
 8004d26:	eb42 0303 	adc.w	r3, r2, r3
 8004d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d34:	f7fb faac 	bl	8000290 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d60:	415b      	adcs	r3, r3
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d68:	4641      	mov	r1, r8
 8004d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb43 0b01 	adc.w	fp, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d88:	4692      	mov	sl, r2
 8004d8a:	469b      	mov	fp, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d96:	464b      	mov	r3, r9
 8004d98:	eb4b 0303 	adc.w	r3, fp, r3
 8004d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004db4:	460b      	mov	r3, r1
 8004db6:	18db      	adds	r3, r3, r3
 8004db8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dba:	4613      	mov	r3, r2
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dca:	f7fb fa61 	bl	8000290 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	; 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dea:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004dec:	fba3 2302 	umull	r2, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df8:	441c      	add	r4, r3
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e14:	415b      	adcs	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6339      	str	r1, [r7, #48]	; 0x30
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e50:	464b      	mov	r3, r9
 8004e52:	460a      	mov	r2, r1
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e86:	f7fb fa03 	bl	8000290 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	; 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	; 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0207 	and.w	r2, r3, #7
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb8:	e105      	b.n	80050c6 <UART_SetConfig+0x4d6>
 8004eba:	bf00      	nop
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	40011400 	.word	0x40011400
 8004ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	6239      	str	r1, [r7, #32]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1854      	adds	r4, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb43 0501 	adc.w	r5, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f10:	464b      	mov	r3, r9
 8004f12:	eb45 0303 	adc.w	r3, r5, r3
 8004f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f36:	4629      	mov	r1, r5
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f40:	4621      	mov	r1, r4
 8004f42:	008a      	lsls	r2, r1, #2
 8004f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f48:	f7fb f9a2 	bl	8000290 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <UART_SetConfig+0x4e4>)
 8004f52:	fba3 2302 	umull	r2, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	011c      	lsls	r4, r3, #4
 8004f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	1891      	adds	r1, r2, r2
 8004f72:	61b9      	str	r1, [r7, #24]
 8004f74:	415b      	adcs	r3, r3
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	1851      	adds	r1, r2, r1
 8004f80:	6139      	str	r1, [r7, #16]
 8004f82:	4649      	mov	r1, r9
 8004f84:	414b      	adcs	r3, r1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f94:	4659      	mov	r1, fp
 8004f96:	00cb      	lsls	r3, r1, #3
 8004f98:	4651      	mov	r1, sl
 8004f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	00ca      	lsls	r2, r1, #3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4642      	mov	r2, r8
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fe6:	f7fb f953 	bl	8000290 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <UART_SetConfig+0x4e4>)
 8004ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	2164      	movs	r1, #100	; 0x64
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	3332      	adds	r3, #50	; 0x32
 8005002:	4a34      	ldr	r2, [pc, #208]	; (80050d4 <UART_SetConfig+0x4e4>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800500e:	441c      	add	r4, r3
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005014:	2200      	movs	r2, #0
 8005016:	673b      	str	r3, [r7, #112]	; 0x70
 8005018:	677a      	str	r2, [r7, #116]	; 0x74
 800501a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800501e:	4642      	mov	r2, r8
 8005020:	464b      	mov	r3, r9
 8005022:	1891      	adds	r1, r2, r2
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	415b      	adcs	r3, r3
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800502e:	4641      	mov	r1, r8
 8005030:	1851      	adds	r1, r2, r1
 8005032:	6039      	str	r1, [r7, #0]
 8005034:	4649      	mov	r1, r9
 8005036:	414b      	adcs	r3, r1
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005046:	4659      	mov	r1, fp
 8005048:	00cb      	lsls	r3, r1, #3
 800504a:	4651      	mov	r1, sl
 800504c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005050:	4651      	mov	r1, sl
 8005052:	00ca      	lsls	r2, r1, #3
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	4603      	mov	r3, r0
 800505a:	4642      	mov	r2, r8
 800505c:	189b      	adds	r3, r3, r2
 800505e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005060:	464b      	mov	r3, r9
 8005062:	460a      	mov	r2, r1
 8005064:	eb42 0303 	adc.w	r3, r2, r3
 8005068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	663b      	str	r3, [r7, #96]	; 0x60
 8005074:	667a      	str	r2, [r7, #100]	; 0x64
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005082:	4649      	mov	r1, r9
 8005084:	008b      	lsls	r3, r1, #2
 8005086:	4641      	mov	r1, r8
 8005088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508c:	4641      	mov	r1, r8
 800508e:	008a      	lsls	r2, r1, #2
 8005090:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005094:	f7fb f8fc 	bl	8000290 <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <UART_SetConfig+0x4e4>)
 800509e:	fba3 1302 	umull	r1, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2164      	movs	r1, #100	; 0x64
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	3332      	adds	r3, #50	; 0x32
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <UART_SetConfig+0x4e4>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4422      	add	r2, r4
 80050c4:	609a      	str	r2, [r3, #8]
}
 80050c6:	bf00      	nop
 80050c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	51eb851f 	.word	0x51eb851f

080050d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d8:	b084      	sub	sp, #16
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	f107 001c 	add.w	r0, r7, #28
 80050e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d122      	bne.n	8005136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 faa2 	bl	8005674 <USB_CoreReset>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e01a      	b.n	800516c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa96 	bl	8005674 <USB_CoreReset>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800514c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
 800515e:	e005      	b.n	800516c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10b      	bne.n	800518a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f043 0206 	orr.w	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005196:	b004      	add	sp, #16
 8005198:	4770      	bx	lr

0800519a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d115      	bne.n	800520a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fc fa66 	bl	80016bc <HAL_Delay>
      ms++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa2e 	bl	8005658 <USB_GetMode>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d01e      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b31      	cmp	r3, #49	; 0x31
 8005206:	d9f0      	bls.n	80051ea <USB_SetCurrentMode+0x2e>
 8005208:	e01a      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800521c:	2001      	movs	r0, #1
 800521e:	f7fc fa4d 	bl	80016bc <HAL_Delay>
      ms++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa15 	bl	8005658 <USB_GetMode>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b31      	cmp	r3, #49	; 0x31
 8005238:	d9f0      	bls.n	800521c <USB_SetCurrentMode+0x60>
 800523a:	e001      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e005      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b32      	cmp	r3, #50	; 0x32
 8005244:	d101      	bne.n	800524a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e009      	b.n	8005288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3340      	adds	r3, #64	; 0x40
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	2200      	movs	r2, #0
 8005280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0e      	cmp	r3, #14
 800528c:	d9f2      	bls.n	8005274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11c      	bne.n	80052ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
 80052cc:	e00b      	b.n	80052e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	4619      	mov	r1, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	461a      	mov	r2, r3
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10c      	bne.n	8005326 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f965 	bl	80055e4 <USB_SetDevSpeed>
 800531a:	e008      	b.n	800532e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f960 	bl	80055e4 <USB_SetDevSpeed>
 8005324:	e003      	b.n	800532e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005326:	2103      	movs	r1, #3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f95b 	bl	80055e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800532e:	2110      	movs	r1, #16
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8f3 	bl	800551c <USB_FlushTxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f91f 	bl	8005584 <USB_FlushRxFifo>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e043      	b.n	8005402 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d118      	bne.n	80053c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e013      	b.n	80053d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b7      	bcc.n	800537a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e043      	b.n	8005498 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d118      	bne.n	800545a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e008      	b.n	800546c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3b7      	bcc.n	8005410 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 0210 	orr.w	r2, r3, #16
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <USB_DevInit+0x2c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005500:	f043 0304 	orr.w	r3, r3, #4
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr
 8005518:	803c3800 	.word	0x803c3800

0800551c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <USB_FlushTxFifo+0x64>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e01b      	b.n	8005574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	daf2      	bge.n	800552a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	019b      	lsls	r3, r3, #6
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <USB_FlushTxFifo+0x64>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e006      	b.n	8005574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b20      	cmp	r3, #32
 8005570:	d0f0      	beq.n	8005554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	00030d40 	.word	0x00030d40

08005584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <USB_FlushRxFifo+0x5c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e018      	b.n	80055d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	daf2      	bge.n	8005590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2210      	movs	r2, #16
 80055b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <USB_FlushRxFifo+0x5c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e006      	b.n	80055d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d0f0      	beq.n	80055b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	00030d40 	.word	0x00030d40

080055e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0301 	and.w	r3, r3, #1
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <USB_CoreReset+0x64>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e01b      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	daf2      	bge.n	8005680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <USB_CoreReset+0x64>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d0f0      	beq.n	80056aa <USB_CoreReset+0x36>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	00030d40 	.word	0x00030d40

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	; (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4d0d      	ldr	r5, [pc, #52]	; (8005720 <__libc_init_array+0x38>)
 80056ec:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	2600      	movs	r6, #0
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	4d0b      	ldr	r5, [pc, #44]	; (8005728 <__libc_init_array+0x40>)
 80056fa:	4c0c      	ldr	r4, [pc, #48]	; (800572c <__libc_init_array+0x44>)
 80056fc:	f000 fc8e 	bl	800601c <_init>
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	2600      	movs	r6, #0
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	080060a0 	.word	0x080060a0
 8005724:	080060a0 	.word	0x080060a0
 8005728:	080060a0 	.word	0x080060a0
 800572c:	080060a4 	.word	0x080060a4

08005730 <memset>:
 8005730:	4402      	add	r2, r0
 8005732:	4603      	mov	r3, r0
 8005734:	4293      	cmp	r3, r2
 8005736:	d100      	bne.n	800573a <memset+0xa>
 8005738:	4770      	bx	lr
 800573a:	f803 1b01 	strb.w	r1, [r3], #1
 800573e:	e7f9      	b.n	8005734 <memset+0x4>

08005740 <siprintf>:
 8005740:	b40e      	push	{r1, r2, r3}
 8005742:	b500      	push	{lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	ab1d      	add	r3, sp, #116	; 0x74
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9006      	str	r0, [sp, #24]
 800574c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005750:	4809      	ldr	r0, [pc, #36]	; (8005778 <siprintf+0x38>)
 8005752:	9107      	str	r1, [sp, #28]
 8005754:	9104      	str	r1, [sp, #16]
 8005756:	4909      	ldr	r1, [pc, #36]	; (800577c <siprintf+0x3c>)
 8005758:	f853 2b04 	ldr.w	r2, [r3], #4
 800575c:	9105      	str	r1, [sp, #20]
 800575e:	6800      	ldr	r0, [r0, #0]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	a902      	add	r1, sp, #8
 8005764:	f000 f868 	bl	8005838 <_svfiprintf_r>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	b01c      	add	sp, #112	; 0x70
 8005770:	f85d eb04 	ldr.w	lr, [sp], #4
 8005774:	b003      	add	sp, #12
 8005776:	4770      	bx	lr
 8005778:	2000000c 	.word	0x2000000c
 800577c:	ffff0208 	.word	0xffff0208

08005780 <__ssputs_r>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	688e      	ldr	r6, [r1, #8]
 8005786:	429e      	cmp	r6, r3
 8005788:	4682      	mov	sl, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4690      	mov	r8, r2
 800578e:	461f      	mov	r7, r3
 8005790:	d838      	bhi.n	8005804 <__ssputs_r+0x84>
 8005792:	898a      	ldrh	r2, [r1, #12]
 8005794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005798:	d032      	beq.n	8005800 <__ssputs_r+0x80>
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	6909      	ldr	r1, [r1, #16]
 800579e:	eba5 0901 	sub.w	r9, r5, r1
 80057a2:	6965      	ldr	r5, [r4, #20]
 80057a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057ac:	3301      	adds	r3, #1
 80057ae:	444b      	add	r3, r9
 80057b0:	106d      	asrs	r5, r5, #1
 80057b2:	429d      	cmp	r5, r3
 80057b4:	bf38      	it	cc
 80057b6:	461d      	movcc	r5, r3
 80057b8:	0553      	lsls	r3, r2, #21
 80057ba:	d531      	bpl.n	8005820 <__ssputs_r+0xa0>
 80057bc:	4629      	mov	r1, r5
 80057be:	f000 fb63 	bl	8005e88 <_malloc_r>
 80057c2:	4606      	mov	r6, r0
 80057c4:	b950      	cbnz	r0, 80057dc <__ssputs_r+0x5c>
 80057c6:	230c      	movs	r3, #12
 80057c8:	f8ca 3000 	str.w	r3, [sl]
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	464a      	mov	r2, r9
 80057e0:	f000 fabe 	bl	8005d60 <memcpy>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	6126      	str	r6, [r4, #16]
 80057f2:	6165      	str	r5, [r4, #20]
 80057f4:	444e      	add	r6, r9
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	6026      	str	r6, [r4, #0]
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	463e      	mov	r6, r7
 8005800:	42be      	cmp	r6, r7
 8005802:	d900      	bls.n	8005806 <__ssputs_r+0x86>
 8005804:	463e      	mov	r6, r7
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	4632      	mov	r2, r6
 800580a:	4641      	mov	r1, r8
 800580c:	f000 fab6 	bl	8005d7c <memmove>
 8005810:	68a3      	ldr	r3, [r4, #8]
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	60a3      	str	r3, [r4, #8]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	4433      	add	r3, r6
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e7db      	b.n	80057d8 <__ssputs_r+0x58>
 8005820:	462a      	mov	r2, r5
 8005822:	f000 fba5 	bl	8005f70 <_realloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	2800      	cmp	r0, #0
 800582a:	d1e1      	bne.n	80057f0 <__ssputs_r+0x70>
 800582c:	6921      	ldr	r1, [r4, #16]
 800582e:	4650      	mov	r0, sl
 8005830:	f000 fabe 	bl	8005db0 <_free_r>
 8005834:	e7c7      	b.n	80057c6 <__ssputs_r+0x46>
	...

08005838 <_svfiprintf_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	4698      	mov	r8, r3
 800583e:	898b      	ldrh	r3, [r1, #12]
 8005840:	061b      	lsls	r3, r3, #24
 8005842:	b09d      	sub	sp, #116	; 0x74
 8005844:	4607      	mov	r7, r0
 8005846:	460d      	mov	r5, r1
 8005848:	4614      	mov	r4, r2
 800584a:	d50e      	bpl.n	800586a <_svfiprintf_r+0x32>
 800584c:	690b      	ldr	r3, [r1, #16]
 800584e:	b963      	cbnz	r3, 800586a <_svfiprintf_r+0x32>
 8005850:	2140      	movs	r1, #64	; 0x40
 8005852:	f000 fb19 	bl	8005e88 <_malloc_r>
 8005856:	6028      	str	r0, [r5, #0]
 8005858:	6128      	str	r0, [r5, #16]
 800585a:	b920      	cbnz	r0, 8005866 <_svfiprintf_r+0x2e>
 800585c:	230c      	movs	r3, #12
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	e0d1      	b.n	8005a0a <_svfiprintf_r+0x1d2>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	616b      	str	r3, [r5, #20]
 800586a:	2300      	movs	r3, #0
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	2320      	movs	r3, #32
 8005870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005874:	f8cd 800c 	str.w	r8, [sp, #12]
 8005878:	2330      	movs	r3, #48	; 0x30
 800587a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a24 <_svfiprintf_r+0x1ec>
 800587e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005882:	f04f 0901 	mov.w	r9, #1
 8005886:	4623      	mov	r3, r4
 8005888:	469a      	mov	sl, r3
 800588a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800588e:	b10a      	cbz	r2, 8005894 <_svfiprintf_r+0x5c>
 8005890:	2a25      	cmp	r2, #37	; 0x25
 8005892:	d1f9      	bne.n	8005888 <_svfiprintf_r+0x50>
 8005894:	ebba 0b04 	subs.w	fp, sl, r4
 8005898:	d00b      	beq.n	80058b2 <_svfiprintf_r+0x7a>
 800589a:	465b      	mov	r3, fp
 800589c:	4622      	mov	r2, r4
 800589e:	4629      	mov	r1, r5
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7ff ff6d 	bl	8005780 <__ssputs_r>
 80058a6:	3001      	adds	r0, #1
 80058a8:	f000 80aa 	beq.w	8005a00 <_svfiprintf_r+0x1c8>
 80058ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ae:	445a      	add	r2, fp
 80058b0:	9209      	str	r2, [sp, #36]	; 0x24
 80058b2:	f89a 3000 	ldrb.w	r3, [sl]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80a2 	beq.w	8005a00 <_svfiprintf_r+0x1c8>
 80058bc:	2300      	movs	r3, #0
 80058be:	f04f 32ff 	mov.w	r2, #4294967295
 80058c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c6:	f10a 0a01 	add.w	sl, sl, #1
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	9307      	str	r3, [sp, #28]
 80058ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058d2:	931a      	str	r3, [sp, #104]	; 0x68
 80058d4:	4654      	mov	r4, sl
 80058d6:	2205      	movs	r2, #5
 80058d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058dc:	4851      	ldr	r0, [pc, #324]	; (8005a24 <_svfiprintf_r+0x1ec>)
 80058de:	f7fa fc87 	bl	80001f0 <memchr>
 80058e2:	9a04      	ldr	r2, [sp, #16]
 80058e4:	b9d8      	cbnz	r0, 800591e <_svfiprintf_r+0xe6>
 80058e6:	06d0      	lsls	r0, r2, #27
 80058e8:	bf44      	itt	mi
 80058ea:	2320      	movmi	r3, #32
 80058ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f0:	0711      	lsls	r1, r2, #28
 80058f2:	bf44      	itt	mi
 80058f4:	232b      	movmi	r3, #43	; 0x2b
 80058f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058fa:	f89a 3000 	ldrb.w	r3, [sl]
 80058fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005900:	d015      	beq.n	800592e <_svfiprintf_r+0xf6>
 8005902:	9a07      	ldr	r2, [sp, #28]
 8005904:	4654      	mov	r4, sl
 8005906:	2000      	movs	r0, #0
 8005908:	f04f 0c0a 	mov.w	ip, #10
 800590c:	4621      	mov	r1, r4
 800590e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005912:	3b30      	subs	r3, #48	; 0x30
 8005914:	2b09      	cmp	r3, #9
 8005916:	d94e      	bls.n	80059b6 <_svfiprintf_r+0x17e>
 8005918:	b1b0      	cbz	r0, 8005948 <_svfiprintf_r+0x110>
 800591a:	9207      	str	r2, [sp, #28]
 800591c:	e014      	b.n	8005948 <_svfiprintf_r+0x110>
 800591e:	eba0 0308 	sub.w	r3, r0, r8
 8005922:	fa09 f303 	lsl.w	r3, r9, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	9304      	str	r3, [sp, #16]
 800592a:	46a2      	mov	sl, r4
 800592c:	e7d2      	b.n	80058d4 <_svfiprintf_r+0x9c>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	1d19      	adds	r1, r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	9103      	str	r1, [sp, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	bfbb      	ittet	lt
 800593a:	425b      	neglt	r3, r3
 800593c:	f042 0202 	orrlt.w	r2, r2, #2
 8005940:	9307      	strge	r3, [sp, #28]
 8005942:	9307      	strlt	r3, [sp, #28]
 8005944:	bfb8      	it	lt
 8005946:	9204      	strlt	r2, [sp, #16]
 8005948:	7823      	ldrb	r3, [r4, #0]
 800594a:	2b2e      	cmp	r3, #46	; 0x2e
 800594c:	d10c      	bne.n	8005968 <_svfiprintf_r+0x130>
 800594e:	7863      	ldrb	r3, [r4, #1]
 8005950:	2b2a      	cmp	r3, #42	; 0x2a
 8005952:	d135      	bne.n	80059c0 <_svfiprintf_r+0x188>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	9203      	str	r2, [sp, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfb8      	it	lt
 8005960:	f04f 33ff 	movlt.w	r3, #4294967295
 8005964:	3402      	adds	r4, #2
 8005966:	9305      	str	r3, [sp, #20]
 8005968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a34 <_svfiprintf_r+0x1fc>
 800596c:	7821      	ldrb	r1, [r4, #0]
 800596e:	2203      	movs	r2, #3
 8005970:	4650      	mov	r0, sl
 8005972:	f7fa fc3d 	bl	80001f0 <memchr>
 8005976:	b140      	cbz	r0, 800598a <_svfiprintf_r+0x152>
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	eba0 000a 	sub.w	r0, r0, sl
 800597e:	fa03 f000 	lsl.w	r0, r3, r0
 8005982:	9b04      	ldr	r3, [sp, #16]
 8005984:	4303      	orrs	r3, r0
 8005986:	3401      	adds	r4, #1
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598e:	4826      	ldr	r0, [pc, #152]	; (8005a28 <_svfiprintf_r+0x1f0>)
 8005990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005994:	2206      	movs	r2, #6
 8005996:	f7fa fc2b 	bl	80001f0 <memchr>
 800599a:	2800      	cmp	r0, #0
 800599c:	d038      	beq.n	8005a10 <_svfiprintf_r+0x1d8>
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <_svfiprintf_r+0x1f4>)
 80059a0:	bb1b      	cbnz	r3, 80059ea <_svfiprintf_r+0x1b2>
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	3307      	adds	r3, #7
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	3308      	adds	r3, #8
 80059ac:	9303      	str	r3, [sp, #12]
 80059ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b0:	4433      	add	r3, r6
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
 80059b4:	e767      	b.n	8005886 <_svfiprintf_r+0x4e>
 80059b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ba:	460c      	mov	r4, r1
 80059bc:	2001      	movs	r0, #1
 80059be:	e7a5      	b.n	800590c <_svfiprintf_r+0xd4>
 80059c0:	2300      	movs	r3, #0
 80059c2:	3401      	adds	r4, #1
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	4619      	mov	r1, r3
 80059c8:	f04f 0c0a 	mov.w	ip, #10
 80059cc:	4620      	mov	r0, r4
 80059ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059d2:	3a30      	subs	r2, #48	; 0x30
 80059d4:	2a09      	cmp	r2, #9
 80059d6:	d903      	bls.n	80059e0 <_svfiprintf_r+0x1a8>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0c5      	beq.n	8005968 <_svfiprintf_r+0x130>
 80059dc:	9105      	str	r1, [sp, #20]
 80059de:	e7c3      	b.n	8005968 <_svfiprintf_r+0x130>
 80059e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e4:	4604      	mov	r4, r0
 80059e6:	2301      	movs	r3, #1
 80059e8:	e7f0      	b.n	80059cc <_svfiprintf_r+0x194>
 80059ea:	ab03      	add	r3, sp, #12
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	462a      	mov	r2, r5
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <_svfiprintf_r+0x1f8>)
 80059f2:	a904      	add	r1, sp, #16
 80059f4:	4638      	mov	r0, r7
 80059f6:	f3af 8000 	nop.w
 80059fa:	1c42      	adds	r2, r0, #1
 80059fc:	4606      	mov	r6, r0
 80059fe:	d1d6      	bne.n	80059ae <_svfiprintf_r+0x176>
 8005a00:	89ab      	ldrh	r3, [r5, #12]
 8005a02:	065b      	lsls	r3, r3, #25
 8005a04:	f53f af2c 	bmi.w	8005860 <_svfiprintf_r+0x28>
 8005a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a0a:	b01d      	add	sp, #116	; 0x74
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	ab03      	add	r3, sp, #12
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	462a      	mov	r2, r5
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <_svfiprintf_r+0x1f8>)
 8005a18:	a904      	add	r1, sp, #16
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f000 f87a 	bl	8005b14 <_printf_i>
 8005a20:	e7eb      	b.n	80059fa <_svfiprintf_r+0x1c2>
 8005a22:	bf00      	nop
 8005a24:	08006064 	.word	0x08006064
 8005a28:	0800606e 	.word	0x0800606e
 8005a2c:	00000000 	.word	0x00000000
 8005a30:	08005781 	.word	0x08005781
 8005a34:	0800606a 	.word	0x0800606a

08005a38 <_printf_common>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	4699      	mov	r9, r3
 8005a40:	688a      	ldr	r2, [r1, #8]
 8005a42:	690b      	ldr	r3, [r1, #16]
 8005a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfb8      	it	lt
 8005a4c:	4613      	movlt	r3, r2
 8005a4e:	6033      	str	r3, [r6, #0]
 8005a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a54:	4607      	mov	r7, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b10a      	cbz	r2, 8005a5e <_printf_common+0x26>
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	0699      	lsls	r1, r3, #26
 8005a62:	bf42      	ittt	mi
 8005a64:	6833      	ldrmi	r3, [r6, #0]
 8005a66:	3302      	addmi	r3, #2
 8005a68:	6033      	strmi	r3, [r6, #0]
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	f015 0506 	ands.w	r5, r5, #6
 8005a70:	d106      	bne.n	8005a80 <_printf_common+0x48>
 8005a72:	f104 0a19 	add.w	sl, r4, #25
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	6832      	ldr	r2, [r6, #0]
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dc26      	bgt.n	8005ace <_printf_common+0x96>
 8005a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a84:	1e13      	subs	r3, r2, #0
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	0692      	lsls	r2, r2, #26
 8005a8e:	d42b      	bmi.n	8005ae8 <_printf_common+0xb0>
 8005a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a94:	4649      	mov	r1, r9
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d01e      	beq.n	8005adc <_printf_common+0xa4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	68e5      	ldr	r5, [r4, #12]
 8005aa2:	6832      	ldr	r2, [r6, #0]
 8005aa4:	f003 0306 	and.w	r3, r3, #6
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	bf08      	it	eq
 8005aac:	1aad      	subeq	r5, r5, r2
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	6922      	ldr	r2, [r4, #16]
 8005ab2:	bf0c      	ite	eq
 8005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab8:	2500      	movne	r5, #0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bfc4      	itt	gt
 8005abe:	1a9b      	subgt	r3, r3, r2
 8005ac0:	18ed      	addgt	r5, r5, r3
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	42b5      	cmp	r5, r6
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xc8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xa8>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xac>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c6      	b.n	8005a76 <_printf_common+0x3e>
 8005ae8:	18e1      	adds	r1, r4, r3
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	2030      	movs	r0, #48	; 0x30
 8005aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af2:	4422      	add	r2, r4
 8005af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005afc:	3302      	adds	r3, #2
 8005afe:	e7c7      	b.n	8005a90 <_printf_common+0x58>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xa4>
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7d9      	b.n	8005ac6 <_printf_common+0x8e>
	...

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	7e0f      	ldrb	r7, [r1, #24]
 8005b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b1c:	2f78      	cmp	r7, #120	; 0x78
 8005b1e:	4691      	mov	r9, r2
 8005b20:	4680      	mov	r8, r0
 8005b22:	460c      	mov	r4, r1
 8005b24:	469a      	mov	sl, r3
 8005b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	; 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d8 	beq.w	8005ce6 <_printf_i+0x1d2>
 8005b36:	2f58      	cmp	r7, #88	; 0x58
 8005b38:	f000 80a3 	beq.w	8005c82 <_printf_i+0x16e>
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a101      	add	r1, pc, #4	; (adr r1, 8005b54 <_printf_i+0x40>)
 8005b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005ccd 	.word	0x08005ccd
 8005b84:	08005bf1 	.word	0x08005bf1
 8005b88:	08005caf 	.word	0x08005caf
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005cef 	.word	0x08005cef
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005cb7 	.word	0x08005cb7
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0a3      	b.n	8005d08 <_printf_i+0x1f4>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	6829      	ldr	r1, [r5, #0]
 8005bc4:	0606      	lsls	r6, r0, #24
 8005bc6:	f101 0304 	add.w	r3, r1, #4
 8005bca:	d50a      	bpl.n	8005be2 <_printf_i+0xce>
 8005bcc:	680e      	ldr	r6, [r1, #0]
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	da03      	bge.n	8005bdc <_printf_i+0xc8>
 8005bd4:	232d      	movs	r3, #45	; 0x2d
 8005bd6:	4276      	negs	r6, r6
 8005bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bdc:	485e      	ldr	r0, [pc, #376]	; (8005d58 <_printf_i+0x244>)
 8005bde:	230a      	movs	r3, #10
 8005be0:	e019      	b.n	8005c16 <_printf_i+0x102>
 8005be2:	680e      	ldr	r6, [r1, #0]
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bea:	bf18      	it	ne
 8005bec:	b236      	sxthne	r6, r6
 8005bee:	e7ef      	b.n	8005bd0 <_printf_i+0xbc>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	0601      	lsls	r1, r0, #24
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0xec>
 8005bfc:	681e      	ldr	r6, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0xf2>
 8005c00:	0646      	lsls	r6, r0, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0xe8>
 8005c04:	881e      	ldrh	r6, [r3, #0]
 8005c06:	4854      	ldr	r0, [pc, #336]	; (8005d58 <_printf_i+0x244>)
 8005c08:	2f6f      	cmp	r7, #111	; 0x6f
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2308      	moveq	r3, #8
 8005c0e:	230a      	movne	r3, #10
 8005c10:	2100      	movs	r1, #0
 8005c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c16:	6865      	ldr	r5, [r4, #4]
 8005c18:	60a5      	str	r5, [r4, #8]
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	bfa2      	ittt	ge
 8005c1e:	6821      	ldrge	r1, [r4, #0]
 8005c20:	f021 0104 	bicge.w	r1, r1, #4
 8005c24:	6021      	strge	r1, [r4, #0]
 8005c26:	b90e      	cbnz	r6, 8005c2c <_printf_i+0x118>
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	d04d      	beq.n	8005cc8 <_printf_i+0x1b4>
 8005c2c:	4615      	mov	r5, r2
 8005c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c32:	fb03 6711 	mls	r7, r3, r1, r6
 8005c36:	5dc7      	ldrb	r7, [r0, r7]
 8005c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c3c:	4637      	mov	r7, r6
 8005c3e:	42bb      	cmp	r3, r7
 8005c40:	460e      	mov	r6, r1
 8005c42:	d9f4      	bls.n	8005c2e <_printf_i+0x11a>
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d10b      	bne.n	8005c60 <_printf_i+0x14c>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07de      	lsls	r6, r3, #31
 8005c4c:	d508      	bpl.n	8005c60 <_printf_i+0x14c>
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6861      	ldr	r1, [r4, #4]
 8005c52:	4299      	cmp	r1, r3
 8005c54:	bfde      	ittt	le
 8005c56:	2330      	movle	r3, #48	; 0x30
 8005c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c60:	1b52      	subs	r2, r2, r5
 8005c62:	6122      	str	r2, [r4, #16]
 8005c64:	f8cd a000 	str.w	sl, [sp]
 8005c68:	464b      	mov	r3, r9
 8005c6a:	aa03      	add	r2, sp, #12
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4640      	mov	r0, r8
 8005c70:	f7ff fee2 	bl	8005a38 <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d14c      	bne.n	8005d12 <_printf_i+0x1fe>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b004      	add	sp, #16
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	4835      	ldr	r0, [pc, #212]	; (8005d58 <_printf_i+0x244>)
 8005c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c88:	6829      	ldr	r1, [r5, #0]
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c90:	6029      	str	r1, [r5, #0]
 8005c92:	061d      	lsls	r5, r3, #24
 8005c94:	d514      	bpl.n	8005cc0 <_printf_i+0x1ac>
 8005c96:	07df      	lsls	r7, r3, #31
 8005c98:	bf44      	itt	mi
 8005c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9e:	6023      	strmi	r3, [r4, #0]
 8005ca0:	b91e      	cbnz	r6, 8005caa <_printf_i+0x196>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f023 0320 	bic.w	r3, r3, #32
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	2310      	movs	r3, #16
 8005cac:	e7b0      	b.n	8005c10 <_printf_i+0xfc>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f043 0320 	orr.w	r3, r3, #32
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	2378      	movs	r3, #120	; 0x78
 8005cb8:	4828      	ldr	r0, [pc, #160]	; (8005d5c <_printf_i+0x248>)
 8005cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cbe:	e7e3      	b.n	8005c88 <_printf_i+0x174>
 8005cc0:	0659      	lsls	r1, r3, #25
 8005cc2:	bf48      	it	mi
 8005cc4:	b2b6      	uxthmi	r6, r6
 8005cc6:	e7e6      	b.n	8005c96 <_printf_i+0x182>
 8005cc8:	4615      	mov	r5, r2
 8005cca:	e7bb      	b.n	8005c44 <_printf_i+0x130>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	6826      	ldr	r6, [r4, #0]
 8005cd0:	6961      	ldr	r1, [r4, #20]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6028      	str	r0, [r5, #0]
 8005cd6:	0635      	lsls	r5, r6, #24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x1cc>
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x1d2>
 8005ce0:	0670      	lsls	r0, r6, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x1c8>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4615      	mov	r5, r2
 8005cec:	e7ba      	b.n	8005c64 <_printf_i+0x150>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7fa fa78 	bl	80001f0 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1f2>
 8005d02:	1b40      	subs	r0, r0, r5
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	e7a8      	b.n	8005c64 <_printf_i+0x150>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0ab      	beq.n	8005c78 <_printf_i+0x164>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d413      	bmi.n	8005d4e <_printf_i+0x23a>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	4618      	movlt	r0, r3
 8005d30:	e7a4      	b.n	8005c7c <_printf_i+0x168>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d09b      	beq.n	8005c78 <_printf_i+0x164>
 8005d40:	3501      	adds	r5, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dcf2      	bgt.n	8005d32 <_printf_i+0x21e>
 8005d4c:	e7eb      	b.n	8005d26 <_printf_i+0x212>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	f104 0619 	add.w	r6, r4, #25
 8005d54:	e7f5      	b.n	8005d42 <_printf_i+0x22e>
 8005d56:	bf00      	nop
 8005d58:	08006075 	.word	0x08006075
 8005d5c:	08006086 	.word	0x08006086

08005d60 <memcpy>:
 8005d60:	440a      	add	r2, r1
 8005d62:	4291      	cmp	r1, r2
 8005d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d68:	d100      	bne.n	8005d6c <memcpy+0xc>
 8005d6a:	4770      	bx	lr
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d76:	4291      	cmp	r1, r2
 8005d78:	d1f9      	bne.n	8005d6e <memcpy+0xe>
 8005d7a:	bd10      	pop	{r4, pc}

08005d7c <memmove>:
 8005d7c:	4288      	cmp	r0, r1
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	eb01 0402 	add.w	r4, r1, r2
 8005d84:	d902      	bls.n	8005d8c <memmove+0x10>
 8005d86:	4284      	cmp	r4, r0
 8005d88:	4623      	mov	r3, r4
 8005d8a:	d807      	bhi.n	8005d9c <memmove+0x20>
 8005d8c:	1e43      	subs	r3, r0, #1
 8005d8e:	42a1      	cmp	r1, r4
 8005d90:	d008      	beq.n	8005da4 <memmove+0x28>
 8005d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d9a:	e7f8      	b.n	8005d8e <memmove+0x12>
 8005d9c:	4402      	add	r2, r0
 8005d9e:	4601      	mov	r1, r0
 8005da0:	428a      	cmp	r2, r1
 8005da2:	d100      	bne.n	8005da6 <memmove+0x2a>
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dae:	e7f7      	b.n	8005da0 <memmove+0x24>

08005db0 <_free_r>:
 8005db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005db2:	2900      	cmp	r1, #0
 8005db4:	d044      	beq.n	8005e40 <_free_r+0x90>
 8005db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dba:	9001      	str	r0, [sp, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005dc2:	bfb8      	it	lt
 8005dc4:	18e4      	addlt	r4, r4, r3
 8005dc6:	f000 f913 	bl	8005ff0 <__malloc_lock>
 8005dca:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <_free_r+0x94>)
 8005dcc:	9801      	ldr	r0, [sp, #4]
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	b933      	cbnz	r3, 8005de0 <_free_r+0x30>
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	6014      	str	r4, [r2, #0]
 8005dd6:	b003      	add	sp, #12
 8005dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ddc:	f000 b90e 	b.w	8005ffc <__malloc_unlock>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d908      	bls.n	8005df6 <_free_r+0x46>
 8005de4:	6825      	ldr	r5, [r4, #0]
 8005de6:	1961      	adds	r1, r4, r5
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf01      	itttt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	1949      	addeq	r1, r1, r5
 8005df2:	6021      	streq	r1, [r4, #0]
 8005df4:	e7ed      	b.n	8005dd2 <_free_r+0x22>
 8005df6:	461a      	mov	r2, r3
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b10b      	cbz	r3, 8005e00 <_free_r+0x50>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d9fa      	bls.n	8005df6 <_free_r+0x46>
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	1855      	adds	r5, r2, r1
 8005e04:	42a5      	cmp	r5, r4
 8005e06:	d10b      	bne.n	8005e20 <_free_r+0x70>
 8005e08:	6824      	ldr	r4, [r4, #0]
 8005e0a:	4421      	add	r1, r4
 8005e0c:	1854      	adds	r4, r2, r1
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	6011      	str	r1, [r2, #0]
 8005e12:	d1e0      	bne.n	8005dd6 <_free_r+0x26>
 8005e14:	681c      	ldr	r4, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	4421      	add	r1, r4
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	e7da      	b.n	8005dd6 <_free_r+0x26>
 8005e20:	d902      	bls.n	8005e28 <_free_r+0x78>
 8005e22:	230c      	movs	r3, #12
 8005e24:	6003      	str	r3, [r0, #0]
 8005e26:	e7d6      	b.n	8005dd6 <_free_r+0x26>
 8005e28:	6825      	ldr	r5, [r4, #0]
 8005e2a:	1961      	adds	r1, r4, r5
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	bf04      	itt	eq
 8005e30:	6819      	ldreq	r1, [r3, #0]
 8005e32:	685b      	ldreq	r3, [r3, #4]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	bf04      	itt	eq
 8005e38:	1949      	addeq	r1, r1, r5
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	6054      	str	r4, [r2, #4]
 8005e3e:	e7ca      	b.n	8005dd6 <_free_r+0x26>
 8005e40:	b003      	add	sp, #12
 8005e42:	bd30      	pop	{r4, r5, pc}
 8005e44:	20000990 	.word	0x20000990

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0e      	ldr	r6, [pc, #56]	; (8005e84 <sbrk_aligned+0x3c>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f000 f8bc 	bl	8005fd0 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f8b7 	bl	8005fd0 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <sbrk_aligned+0x34>
 8005e66:	1cc4      	adds	r4, r0, #3
 8005e68:	f024 0403 	bic.w	r4, r4, #3
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d007      	beq.n	8005e80 <sbrk_aligned+0x38>
 8005e70:	1a21      	subs	r1, r4, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f8ac 	bl	8005fd0 <_sbrk_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d101      	bne.n	8005e80 <sbrk_aligned+0x38>
 8005e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e80:	4620      	mov	r0, r4
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	20000994 	.word	0x20000994

08005e88 <_malloc_r>:
 8005e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8c:	1ccd      	adds	r5, r1, #3
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db01      	blt.n	8005ea4 <_malloc_r+0x1c>
 8005ea0:	42a9      	cmp	r1, r5
 8005ea2:	d905      	bls.n	8005eb0 <_malloc_r+0x28>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	4e2e      	ldr	r6, [pc, #184]	; (8005f6c <_malloc_r+0xe4>)
 8005eb2:	f000 f89d 	bl	8005ff0 <__malloc_lock>
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	461c      	mov	r4, r3
 8005eba:	bb34      	cbnz	r4, 8005f0a <_malloc_r+0x82>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ffc2 	bl	8005e48 <sbrk_aligned>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	d14d      	bne.n	8005f66 <_malloc_r+0xde>
 8005eca:	6834      	ldr	r4, [r6, #0]
 8005ecc:	4626      	mov	r6, r4
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d140      	bne.n	8005f54 <_malloc_r+0xcc>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	eb04 0803 	add.w	r8, r4, r3
 8005edc:	f000 f878 	bl	8005fd0 <_sbrk_r>
 8005ee0:	4580      	cmp	r8, r0
 8005ee2:	d13a      	bne.n	8005f5a <_malloc_r+0xd2>
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	3503      	adds	r5, #3
 8005ee8:	1a6d      	subs	r5, r5, r1
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ffa5 	bl	8005e48 <sbrk_aligned>
 8005efe:	3001      	adds	r0, #1
 8005f00:	d02b      	beq.n	8005f5a <_malloc_r+0xd2>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	442b      	add	r3, r5
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	e00e      	b.n	8005f28 <_malloc_r+0xa0>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	1b52      	subs	r2, r2, r5
 8005f0e:	d41e      	bmi.n	8005f4e <_malloc_r+0xc6>
 8005f10:	2a0b      	cmp	r2, #11
 8005f12:	d916      	bls.n	8005f42 <_malloc_r+0xba>
 8005f14:	1961      	adds	r1, r4, r5
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	6059      	strne	r1, [r3, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	bf08      	it	eq
 8005f22:	6031      	streq	r1, [r6, #0]
 8005f24:	5162      	str	r2, [r4, r5]
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f104 060b 	add.w	r6, r4, #11
 8005f2e:	f000 f865 	bl	8005ffc <__malloc_unlock>
 8005f32:	f026 0607 	bic.w	r6, r6, #7
 8005f36:	1d23      	adds	r3, r4, #4
 8005f38:	1af2      	subs	r2, r6, r3
 8005f3a:	d0b6      	beq.n	8005eaa <_malloc_r+0x22>
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	50a3      	str	r3, [r4, r2]
 8005f40:	e7b3      	b.n	8005eaa <_malloc_r+0x22>
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	bf0c      	ite	eq
 8005f48:	6032      	streq	r2, [r6, #0]
 8005f4a:	605a      	strne	r2, [r3, #4]
 8005f4c:	e7ec      	b.n	8005f28 <_malloc_r+0xa0>
 8005f4e:	4623      	mov	r3, r4
 8005f50:	6864      	ldr	r4, [r4, #4]
 8005f52:	e7b2      	b.n	8005eba <_malloc_r+0x32>
 8005f54:	4634      	mov	r4, r6
 8005f56:	6876      	ldr	r6, [r6, #4]
 8005f58:	e7b9      	b.n	8005ece <_malloc_r+0x46>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f000 f84c 	bl	8005ffc <__malloc_unlock>
 8005f64:	e7a1      	b.n	8005eaa <_malloc_r+0x22>
 8005f66:	6025      	str	r5, [r4, #0]
 8005f68:	e7de      	b.n	8005f28 <_malloc_r+0xa0>
 8005f6a:	bf00      	nop
 8005f6c:	20000990 	.word	0x20000990

08005f70 <_realloc_r>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	4614      	mov	r4, r2
 8005f78:	460e      	mov	r6, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x16>
 8005f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4611      	mov	r1, r2
 8005f82:	f7ff bf81 	b.w	8005e88 <_malloc_r>
 8005f86:	b92a      	cbnz	r2, 8005f94 <_realloc_r+0x24>
 8005f88:	f7ff ff12 	bl	8005db0 <_free_r>
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	f000 f838 	bl	8006008 <_malloc_usable_size_r>
 8005f98:	4284      	cmp	r4, r0
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	d802      	bhi.n	8005fa4 <_realloc_r+0x34>
 8005f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fa2:	d812      	bhi.n	8005fca <_realloc_r+0x5a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff ff6e 	bl	8005e88 <_malloc_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0ed      	beq.n	8005f8e <_realloc_r+0x1e>
 8005fb2:	42bc      	cmp	r4, r7
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	bf28      	it	cs
 8005fba:	463a      	movcs	r2, r7
 8005fbc:	f7ff fed0 	bl	8005d60 <memcpy>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fef4 	bl	8005db0 <_free_r>
 8005fc8:	e7e1      	b.n	8005f8e <_realloc_r+0x1e>
 8005fca:	4635      	mov	r5, r6
 8005fcc:	e7df      	b.n	8005f8e <_realloc_r+0x1e>
	...

08005fd0 <_sbrk_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_sbrk_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fb fa8a 	bl	80014f4 <_sbrk>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_sbrk_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_sbrk_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000998 	.word	0x20000998

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f000 b811 	b.w	8006018 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	2000099c 	.word	0x2000099c

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f000 b80c 	b.w	800601a <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	2000099c 	.word	0x2000099c

08006008 <_malloc_usable_size_r>:
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f18      	subs	r0, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfbc      	itt	lt
 8006012:	580b      	ldrlt	r3, [r1, r0]
 8006014:	18c0      	addlt	r0, r0, r3
 8006016:	4770      	bx	lr

08006018 <__retarget_lock_acquire_recursive>:
 8006018:	4770      	bx	lr

0800601a <__retarget_lock_release_recursive>:
 800601a:	4770      	bx	lr

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
