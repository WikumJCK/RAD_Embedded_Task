
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f538  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800f6e8  0800f6e8  0001f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f994  0800f994  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800f994  0800f994  0001f994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f99c  0800f99c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f99c  0800f99c  0001f99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9a0  0800f9a0  0001f9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800f9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00007178  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007288  20007288  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029af8  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d8  00000000  00000000  00049c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b8  00000000  00000000  0004ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fb8  00000000  00000000  000510c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a92b  00000000  00000000  00053080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029706  00000000  00000000  0007d9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f303f  00000000  00000000  000a70b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a0f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000949c  00000000  00000000  0019a140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f6d0 	.word	0x0800f6d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	0800f6d0 	.word	0x0800f6d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005aa:	f001 feec 	bl	8002386 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80005ae:	21cc      	movs	r1, #204	; 0xcc
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005b2:	f001 ff65 	bl	8002480 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80005b6:	2144      	movs	r1, #68	; 0x44
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005ba:	f001 ff61 	bl	8002480 <OneWire_WriteByte>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000016c 	.word	0x2000016c

080005c8 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <DS18B20_Read+0x144>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d301      	bcc.n	80005e2 <DS18B20_Read+0x1a>
		return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e090      	b.n	8000704 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4a49      	ldr	r2, [pc, #292]	; (8000710 <DS18B20_Read+0x148>)
 80005ec:	4413      	add	r3, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f93c 	bl	800086c <DS18B20_Is>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <DS18B20_Read+0x36>
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e082      	b.n	8000704 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 80005fe:	4845      	ldr	r0, [pc, #276]	; (8000714 <DS18B20_Read+0x14c>)
 8000600:	f001 ff14 	bl	800242c <OneWire_ReadBit>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800060a:	2300      	movs	r3, #0
 800060c:	e07a      	b.n	8000704 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <DS18B20_Read+0x14c>)
 8000610:	f001 feb9 	bl	8002386 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4a3d      	ldr	r2, [pc, #244]	; (8000710 <DS18B20_Read+0x148>)
 800061a:	4413      	add	r3, r2
 800061c:	4619      	mov	r1, r3
 800061e:	483d      	ldr	r0, [pc, #244]	; (8000714 <DS18B20_Read+0x14c>)
 8000620:	f002 f863 	bl	80026ea <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000624:	21be      	movs	r1, #190	; 0xbe
 8000626:	483b      	ldr	r0, [pc, #236]	; (8000714 <DS18B20_Read+0x14c>)
 8000628:	f001 ff2a 	bl	8002480 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800062c:	2300      	movs	r3, #0
 800062e:	74fb      	strb	r3, [r7, #19]
 8000630:	e00d      	b.n	800064e <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000632:	7cfc      	ldrb	r4, [r7, #19]
 8000634:	4837      	ldr	r0, [pc, #220]	; (8000714 <DS18B20_Read+0x14c>)
 8000636:	f001 ff41 	bl	80024bc <OneWire_ReadByte>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	f104 0318 	add.w	r3, r4, #24
 8000642:	443b      	add	r3, r7
 8000644:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	3301      	adds	r3, #1
 800064c:	74fb      	strb	r3, [r7, #19]
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	2b04      	cmp	r3, #4
 8000652:	d9ee      	bls.n	8000632 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000654:	7a3b      	ldrb	r3, [r7, #8]
 8000656:	b21a      	sxth	r2, r3
 8000658:	7a7b      	ldrb	r3, [r7, #9]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21b      	sxth	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b21b      	sxth	r3, r3
 8000662:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000664:	482b      	ldr	r0, [pc, #172]	; (8000714 <DS18B20_Read+0x14c>)
 8000666:	f001 fe8e 	bl	8002386 <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800066a:	7b3b      	ldrb	r3, [r7, #12]
 800066c:	115b      	asrs	r3, r3, #5
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3309      	adds	r3, #9
 8000678:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3b09      	subs	r3, #9
 800067e:	2b03      	cmp	r3, #3
 8000680:	d83a      	bhi.n	80006f8 <DS18B20_Read+0x130>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <DS18B20_Read+0xc0>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006c9 	.word	0x080006c9
 8000694:	080006e1 	.word	0x080006e1
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80006a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006aa:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80006ae:	e025      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80006b0:	8a3b      	ldrh	r3, [r7, #16]
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80006be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c2:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80006c6:	e019      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 80006c8:	8a3b      	ldrh	r3, [r7, #16]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80006d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006da:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80006de:	e00d      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 80006e0:	8a3b      	ldrh	r3, [r7, #16]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000718 <DS18B20_Read+0x150>
 80006ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f2:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80006f6:	e001      	b.n	80006fc <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <DS18B20_Read+0x154>)
 80006fa:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	20000180 	.word	0x20000180
 8000710:	2000012c 	.word	0x2000012c
 8000714:	2000016c 	.word	0x2000016c
 8000718:	3d800000 	.word	0x3d800000
 800071c:	437f0000 	.word	0x437f0000

08000720 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000730:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <DS18B20_SetResolution+0x140>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	429a      	cmp	r2, r3
 8000738:	d301      	bcc.n	800073e <DS18B20_SetResolution+0x1e>
		return 0;
 800073a:	2300      	movs	r3, #0
 800073c:	e08c      	b.n	8000858 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	4a48      	ldr	r2, [pc, #288]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000744:	4413      	add	r3, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f890 	bl	800086c <DS18B20_Is>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <DS18B20_SetResolution+0x36>
		return 0;
 8000752:	2300      	movs	r3, #0
 8000754:	e080      	b.n	8000858 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000758:	f001 fe15 	bl	8002386 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000762:	4413      	add	r3, r2
 8000764:	4619      	mov	r1, r3
 8000766:	4840      	ldr	r0, [pc, #256]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000768:	f001 ffbf 	bl	80026ea <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800076c:	21be      	movs	r1, #190	; 0xbe
 800076e:	483e      	ldr	r0, [pc, #248]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000770:	f001 fe86 	bl	8002480 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000774:	483c      	ldr	r0, [pc, #240]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000776:	f001 fea1 	bl	80024bc <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800077a:	483b      	ldr	r0, [pc, #236]	; (8000868 <DS18B20_SetResolution+0x148>)
 800077c:	f001 fe9e 	bl	80024bc <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000782:	f001 fe9b 	bl	80024bc <OneWire_ReadByte>
 8000786:	4603      	mov	r3, r0
 8000788:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800078a:	4837      	ldr	r0, [pc, #220]	; (8000868 <DS18B20_SetResolution+0x148>)
 800078c:	f001 fe96 	bl	80024bc <OneWire_ReadByte>
 8000790:	4603      	mov	r3, r0
 8000792:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000796:	f001 fe91 	bl	80024bc <OneWire_ReadByte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b09      	cmp	r3, #9
 80007a2:	d108      	bne.n	80007b6 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007aa:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f023 0320 	bic.w	r3, r3, #32
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e022      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	d108      	bne.n	80007ce <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e016      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b0b      	cmp	r3, #11
 80007d2:	d108      	bne.n	80007e6 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007da:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0320 	bic.w	r3, r3, #32
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e00a      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	d107      	bne.n	80007fc <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 80007fc:	481a      	ldr	r0, [pc, #104]	; (8000868 <DS18B20_SetResolution+0x148>)
 80007fe:	f001 fdc2 	bl	8002386 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000808:	4413      	add	r3, r2
 800080a:	4619      	mov	r1, r3
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <DS18B20_SetResolution+0x148>)
 800080e:	f001 ff6c 	bl	80026ea <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000812:	214e      	movs	r1, #78	; 0x4e
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000816:	f001 fe33 	bl	8002480 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	4619      	mov	r1, r3
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000820:	f001 fe2e 	bl	8002480 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <DS18B20_SetResolution+0x148>)
 800082a:	f001 fe29 	bl	8002480 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000834:	f001 fe24 	bl	8002480 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <DS18B20_SetResolution+0x148>)
 800083a:	f001 fda4 	bl	8002386 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000844:	4413      	add	r3, r2
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <DS18B20_SetResolution+0x148>)
 800084a:	f001 ff4e 	bl	80026ea <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800084e:	2148      	movs	r1, #72	; 0x48
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000852:	f001 fe15 	bl	8002480 <OneWire_WriteByte>

	return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000180 	.word	0x20000180
 8000864:	2000012c 	.word	0x2000012c
 8000868:	2000016c 	.word	0x2000016c

0800086c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b28      	cmp	r3, #40	; 0x28
 800087a:	d101      	bne.n	8000880 <DS18B20_Is+0x14>
		return 1;
 800087c:	2301      	movs	r3, #1
 800087e:	e000      	b.n	8000882 <DS18B20_Is+0x16>
	return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <DS18B20_AllDone+0x10>)
 8000896:	f001 fdc9 	bl	800242c <OneWire_ReadBit>
 800089a:	4603      	mov	r3, r0
}
 800089c:	4618      	mov	r0, r3
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000016c 	.word	0x2000016c

080008a4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80008aa:	f7ff fff1 	bl	8000890 <DS18B20_AllDone>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d02e      	beq.n	8000912 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	e026      	b.n	8000908 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <DS18B20_ReadAll+0x78>)
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4413      	add	r3, r2
 80008c2:	330c      	adds	r3, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <DS18B20_ReadAll+0x78>)
 80008ce:	4413      	add	r3, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffcb 	bl	800086c <DS18B20_Is>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d012      	beq.n	8000902 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	3308      	adds	r3, #8
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <DS18B20_ReadAll+0x78>)
 80008e4:	441a      	add	r2, r3
 80008e6:	79fc      	ldrb	r4, [r7, #7]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe6b 	bl	80005c8 <DS18B20_Read>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <DS18B20_ReadAll+0x78>)
 80008f8:	0123      	lsls	r3, r4, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	330c      	adds	r3, #12
 80008fe:	460a      	mov	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	3301      	adds	r3, #1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <DS18B20_ReadAll+0x7c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3d3      	bcc.n	80008ba <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	2000012c 	.word	0x2000012c
 8000920:	20000180 	.word	0x20000180

08000924 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <DS18B20_GetROM+0x54>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	429a      	cmp	r2, r3
 8000938:	d302      	bcc.n	8000940 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <DS18B20_GetROM+0x54>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e00d      	b.n	8000962 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8000946:	79f9      	ldrb	r1, [r7, #7]
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	4403      	add	r3, r0
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <DS18B20_GetROM+0x58>)
 8000952:	0109      	lsls	r1, r1, #4
 8000954:	4401      	add	r1, r0
 8000956:	440a      	add	r2, r1
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	3301      	adds	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d9ee      	bls.n	8000946 <DS18B20_GetROM+0x22>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000180 	.word	0x20000180
 800097c:	2000012c 	.word	0x2000012c

08000980 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <DS18B20_Quantity+0x14>)
 8000986:	781b      	ldrb	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000180 	.word	0x20000180

08000998 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <DS18B20_GetTemperature+0x40>)
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4413      	add	r3, r2
 80009ac:	330c      	adds	r3, #12
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <DS18B20_GetTemperature+0x20>
		return 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e008      	b.n	80009ca <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <DS18B20_GetTemperature+0x40>)
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	4413      	add	r3, r2
 80009c0:	3308      	adds	r3, #8
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	601a      	str	r2, [r3, #0]
	return 1;
 80009c8:	2301      	movs	r3, #1

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000012c 	.word	0x2000012c

080009dc <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	2300      	movs	r3, #0
 80009ec:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, Temp_SensorD5_GPIO_Port, Temp_SensorD5_Pin); // Init OneWire bus
 80009ee:	2220      	movs	r2, #32
 80009f0:	491f      	ldr	r1, [pc, #124]	; (8000a70 <DS18B20_Init+0x94>)
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <DS18B20_Init+0x98>)
 80009f4:	f001 feb6 	bl	8002764 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80009f8:	481e      	ldr	r0, [pc, #120]	; (8000a74 <DS18B20_Init+0x98>)
 80009fa:	f001 fe59 	bl	80026b0 <OneWire_First>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]
	while(next)
 8000a02:	e018      	b.n	8000a36 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a0e:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	73ba      	strb	r2, [r7, #14]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <DS18B20_Init+0xa0>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <DS18B20_Init+0x98>)
 8000a20:	f001 fe82 	bl	8002728 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <DS18B20_Init+0x98>)
 8000a26:	f001 fe53 	bl	80026d0 <OneWire_Next>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d803      	bhi.n	8000a3e <DS18B20_Init+0x62>
	while(next)
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1e3      	bne.n	8000a04 <DS18B20_Init+0x28>
 8000a3c:	e000      	b.n	8000a40 <DS18B20_Init+0x64>
			break;
 8000a3e:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e00a      	b.n	8000a5c <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe67 	bl	8000720 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8000a52:	f7ff fda7 	bl	80005a4 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	737b      	strb	r3, [r7, #13]
 8000a5c:	7b7a      	ldrb	r2, [r7, #13]
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3f0      	bcc.n	8000a46 <DS18B20_Init+0x6a>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	2000016c 	.word	0x2000016c
 8000a78:	20000180 	.word	0x20000180
 8000a7c:	2000012c 	.word	0x2000012c

08000a80 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2110      	movs	r1, #16
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <SELECT+0x14>)
 8000a8a:	f003 fe59 	bl	8004740 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000

08000a98 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DESELECT+0x14>)
 8000aa2:	f003 fe4d 	bl	8004740 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000

08000ab0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000aba:	bf00      	nop
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <SPI_TxByte+0x30>)
 8000abe:	f005 feee 	bl	800689e <HAL_SPI_GetState>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d1f9      	bne.n	8000abc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1,1000);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <SPI_TxByte+0x30>)
 8000ad2:	f005 fc06 	bl	80062e2 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000774 	.word	0x20000774

08000ae4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000aea:	23ff      	movs	r3, #255	; 0xff
 8000aec:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000af2:	bf00      	nop
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <SPI_RxByte+0x38>)
 8000af6:	f005 fed2 	bl	800689e <HAL_SPI_GetState>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d1f9      	bne.n	8000af4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1,1000);
 8000b00:	1dba      	adds	r2, r7, #6
 8000b02:	1df9      	adds	r1, r7, #7
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <SPI_RxByte+0x38>)
 8000b0e:	f005 fd24 	bl	800655a <HAL_SPI_TransmitReceive>
//  HAL_SPI_TransmitReceive_DMA(&hspi1, &dummy, &data, 1);
  return data;
 8000b12:	79bb      	ldrb	r3, [r7, #6]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000774 	.word	0x20000774

08000b20 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000b28:	f7ff ffdc 	bl	8000ae4 <SPI_RxByte>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	701a      	strb	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SD_ReadyWait+0x34>)
 8000b44:	2232      	movs	r2, #50	; 0x32
 8000b46:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000b48:	f7ff ffcc 	bl	8000ae4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000b4c:	f7ff ffca 	bl	8000ae4 <SPI_RxByte>
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d004      	beq.n	8000b64 <SD_ReadyWait+0x28>
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SD_ReadyWait+0x34>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1f3      	bne.n	8000b4c <SD_ReadyWait+0x10>

  return res;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000349d 	.word	0x2000349d

08000b74 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000b7a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000b80:	f7ff ff8a 	bl	8000a98 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	e005      	b.n	8000b96 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b8a:	20ff      	movs	r0, #255	; 0xff
 8000b8c:	f7ff ff90 	bl	8000ab0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	ddf6      	ble.n	8000b8a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000b9c:	f7ff ff70 	bl	8000a80 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000bb4:	2395      	movs	r3, #149	; 0x95
 8000bb6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e009      	b.n	8000bd2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff72 	bl	8000ab0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	ddf2      	ble.n	8000bbe <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000bd8:	e002      	b.n	8000be0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000be0:	f7ff ff80 	bl	8000ae4 <SPI_RxByte>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d002      	beq.n	8000bf0 <SD_PowerOn+0x7c>
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f4      	bne.n	8000bda <SD_PowerOn+0x66>
  }

  DESELECT();
 8000bf0:	f7ff ff52 	bl	8000a98 <DESELECT>
  SPI_TxByte(0XFF);
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	f7ff ff5b 	bl	8000ab0 <SPI_TxByte>

  PowerFlag = 1;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <SD_PowerOn+0x94>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000182 	.word	0x20000182

08000c0c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SD_PowerOff+0x14>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000182 	.word	0x20000182

08000c24 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <SD_CheckPower+0x14>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000182 	.word	0x20000182

08000c3c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SD_RxDataBlock+0x68>)
 8000c48:	220a      	movs	r2, #10
 8000c4a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d104      	bne.n	8000c64 <SD_RxDataBlock+0x28>
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SD_RxDataBlock+0x68>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f3      	bne.n	8000c4c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	2bfe      	cmp	r3, #254	; 0xfe
 8000c68:	d001      	beq.n	8000c6e <SD_RxDataBlock+0x32>
    return FALSE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e016      	b.n	8000c9c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff53 	bl	8000b20 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff4d 	bl	8000b20 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3b02      	subs	r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1ed      	bne.n	8000c6e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000c92:	f7ff ff27 	bl	8000ae4 <SPI_RxByte>
  SPI_RxByte();
 8000c96:	f7ff ff25 	bl	8000ae4 <SPI_RxByte>

  return TRUE;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000349c 	.word	0x2000349c

08000ca8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000cb8:	f7ff ff40 	bl	8000b3c <SD_ReadyWait>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d001      	beq.n	8000cc6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e040      	b.n	8000d48 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fef1 	bl	8000ab0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2bfd      	cmp	r3, #253	; 0xfd
 8000cd2:	d031      	beq.n	8000d38 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fee5 	bl	8000ab0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fede 	bl	8000ab0 <SPI_TxByte>
    } while (--wc);
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1eb      	bne.n	8000cd8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d00:	f7ff fef0 	bl	8000ae4 <SPI_RxByte>
    SPI_RxByte();
 8000d04:	f7ff feee 	bl	8000ae4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000d08:	e00b      	b.n	8000d22 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000d0a:	f7ff feeb 	bl	8000ae4 <SPI_RxByte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d006      	beq.n	8000d2a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	2b40      	cmp	r3, #64	; 0x40
 8000d26:	d9f0      	bls.n	8000d0a <SD_TxDataBlock+0x62>
 8000d28:	e000      	b.n	8000d2c <SD_TxDataBlock+0x84>
        break;
 8000d2a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000d2c:	bf00      	nop
 8000d2e:	f7ff fed9 	bl	8000ae4 <SPI_RxByte>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0fa      	beq.n	8000d2e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d101      	bne.n	8000d46 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d5c:	f7ff feee 	bl	8000b3c <SD_ReadyWait>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d001      	beq.n	8000d6a <SD_SendCmd+0x1a>
    return 0xFF;
 8000d66:	23ff      	movs	r3, #255	; 0xff
 8000d68:	e040      	b.n	8000dec <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe9f 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	0e1b      	lsrs	r3, r3, #24
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe99 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fe93 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe8d 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe88 	bl	8000ab0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b40      	cmp	r3, #64	; 0x40
 8000da8:	d101      	bne.n	8000dae <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000daa:	2395      	movs	r3, #149	; 0x95
 8000dac:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b48      	cmp	r3, #72	; 0x48
 8000db2:	d101      	bne.n	8000db8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000db4:	2387      	movs	r3, #135	; 0x87
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe78 	bl	8000ab0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b4c      	cmp	r3, #76	; 0x4c
 8000dc4:	d101      	bne.n	8000dca <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000dc6:	f7ff fe8d 	bl	8000ae4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000dce:	f7ff fe89 	bl	8000ae4 <SPI_RxByte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000dd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da05      	bge.n	8000dea <SD_SendCmd+0x9a>
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f1      	bne.n	8000dce <SD_SendCmd+0x7e>

  return res;
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0d5      	b.n	8000fb4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000e08:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <SD_disk_initialize+0x2a>
    return Stat;
 8000e16:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	e0ca      	b.n	8000fb4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000e1e:	f7ff fea9 	bl	8000b74 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000e22:	f7ff fe2d 	bl	8000a80 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2040      	movs	r0, #64	; 0x40
 8000e2e:	f7ff ff8f 	bl	8000d50 <SD_SendCmd>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	f040 80a5 	bne.w	8000f84 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000e3a:	4b61      	ldr	r3, [pc, #388]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000e3c:	2264      	movs	r2, #100	; 0x64
 8000e3e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e44:	2048      	movs	r0, #72	; 0x48
 8000e46:	f7ff ff83 	bl	8000d50 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d158      	bne.n	8000f02 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e00c      	b.n	8000e70 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000e56:	7bfc      	ldrb	r4, [r7, #15]
 8000e58:	f7ff fe44 	bl	8000ae4 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f104 0310 	add.w	r3, r4, #16
 8000e64:	443b      	add	r3, r7
 8000e66:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d9ef      	bls.n	8000e56 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e76:	7abb      	ldrb	r3, [r7, #10]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 8083 	bne.w	8000f84 <SD_disk_initialize+0x190>
 8000e7e:	7afb      	ldrb	r3, [r7, #11]
 8000e80:	2baa      	cmp	r3, #170	; 0xaa
 8000e82:	d17f      	bne.n	8000f84 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e84:	2100      	movs	r1, #0
 8000e86:	2077      	movs	r0, #119	; 0x77
 8000e88:	f7ff ff62 	bl	8000d50 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d807      	bhi.n	8000ea2 <SD_disk_initialize+0xae>
 8000e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e96:	2069      	movs	r0, #105	; 0x69
 8000e98:	f7ff ff5a 	bl	8000d50 <SD_SendCmd>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1eb      	bne.n	8000e84 <SD_disk_initialize+0x90>
 8000eac:	e000      	b.n	8000eb0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000eae:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d064      	beq.n	8000f84 <SD_disk_initialize+0x190>
 8000eba:	2100      	movs	r1, #0
 8000ebc:	207a      	movs	r0, #122	; 0x7a
 8000ebe:	f7ff ff47 	bl	8000d50 <SD_SendCmd>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d15d      	bne.n	8000f84 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e00c      	b.n	8000ee8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ece:	7bfc      	ldrb	r4, [r7, #15]
 8000ed0:	f7ff fe08 	bl	8000ae4 <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f104 0310 	add.w	r3, r4, #16
 8000edc:	443b      	add	r3, r7
 8000ede:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d9ef      	bls.n	8000ece <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000eee:	7a3b      	ldrb	r3, [r7, #8]
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SD_disk_initialize+0x108>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e000      	b.n	8000efe <SD_disk_initialize+0x10a>
 8000efc:	2302      	movs	r3, #2
 8000efe:	73bb      	strb	r3, [r7, #14]
 8000f00:	e040      	b.n	8000f84 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f02:	2100      	movs	r1, #0
 8000f04:	2077      	movs	r0, #119	; 0x77
 8000f06:	f7ff ff23 	bl	8000d50 <SD_SendCmd>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d808      	bhi.n	8000f22 <SD_disk_initialize+0x12e>
 8000f10:	2100      	movs	r1, #0
 8000f12:	2069      	movs	r0, #105	; 0x69
 8000f14:	f7ff ff1c 	bl	8000d50 <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d801      	bhi.n	8000f22 <SD_disk_initialize+0x12e>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e000      	b.n	8000f24 <SD_disk_initialize+0x130>
 8000f22:	2301      	movs	r3, #1
 8000f24:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d10e      	bne.n	8000f4a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2077      	movs	r0, #119	; 0x77
 8000f30:	f7ff ff0e 	bl	8000d50 <SD_SendCmd>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d80e      	bhi.n	8000f58 <SD_disk_initialize+0x164>
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2069      	movs	r0, #105	; 0x69
 8000f3e:	f7ff ff07 	bl	8000d50 <SD_SendCmd>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d107      	bne.n	8000f58 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000f48:	e00d      	b.n	8000f66 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2041      	movs	r0, #65	; 0x41
 8000f4e:	f7ff feff 	bl	8000d50 <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e1      	bne.n	8000f26 <SD_disk_initialize+0x132>
 8000f62:	e000      	b.n	8000f66 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000f64:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <SD_disk_initialize+0x18c>
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	2050      	movs	r0, #80	; 0x50
 8000f76:	f7ff feeb 	bl	8000d50 <SD_SendCmd>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <SD_disk_initialize+0x1d0>)
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000f8a:	f7ff fd85 	bl	8000a98 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000f8e:	f7ff fda9 	bl	8000ae4 <SPI_RxByte>

  if (type)
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d008      	beq.n	8000faa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e001      	b.n	8000fae <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000faa:	f7ff fe2f 	bl	8000c0c <SD_PowerOff>
  }

  return Stat;
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	2000349c 	.word	0x2000349c
 8000fc4:	20000181 	.word	0x20000181

08000fc8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SD_disk_status+0x14>
    return STA_NOINIT;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e002      	b.n	8000fe2 <SD_disk_status+0x1a>

  return Stat;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SD_disk_status+0x28>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <SD_disk_read+0x1c>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_read+0x20>
    return RES_PARERR;
 8001010:	2304      	movs	r3, #4
 8001012:	e051      	b.n	80010b8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <SD_disk_read+0xcc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001022:	2303      	movs	r3, #3
 8001024:	e048      	b.n	80010b8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <SD_disk_read+0xd0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	607b      	str	r3, [r7, #4]

  SELECT();
 8001038:	f7ff fd22 	bl	8000a80 <SELECT>

  if (count == 1)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d111      	bne.n	8001066 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2051      	movs	r0, #81	; 0x51
 8001046:	f7ff fe83 	bl	8000d50 <SD_SendCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <SD_disk_read+0xb0>
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fdf1 	bl	8000c3c <SD_RxDataBlock>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d021      	beq.n	80010a4 <SD_disk_read+0xb0>
      count = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	e01e      	b.n	80010a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2052      	movs	r0, #82	; 0x52
 800106a:	f7ff fe71 	bl	8000d50 <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d117      	bne.n	80010a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fddf 	bl	8000c3c <SD_RxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00a      	beq.n	800109a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800108a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ed      	bne.n	8001074 <SD_disk_read+0x80>
 8001098:	e000      	b.n	800109c <SD_disk_read+0xa8>
          break;
 800109a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	204c      	movs	r0, #76	; 0x4c
 80010a0:	f7ff fe56 	bl	8000d50 <SD_SendCmd>
    }
  }

  DESELECT();
 80010a4:	f7ff fcf8 	bl	8000a98 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80010a8:	f7ff fd1c 	bl	8000ae4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000181 	.word	0x20000181

080010c8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <SD_disk_write+0x1c>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80010e4:	2304      	movs	r3, #4
 80010e6:	e06b      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <SD_disk_write+0x100>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e062      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <SD_disk_write+0x100>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001108:	2302      	movs	r3, #2
 800110a:	e059      	b.n	80011c0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <SD_disk_write+0x104>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	607b      	str	r3, [r7, #4]

  SELECT();
 800111e:	f7ff fcaf 	bl	8000a80 <SELECT>

  if (count == 1)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d110      	bne.n	800114a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	2058      	movs	r0, #88	; 0x58
 800112c:	f7ff fe10 	bl	8000d50 <SD_SendCmd>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d13a      	bne.n	80011ac <SD_disk_write+0xe4>
 8001136:	21fe      	movs	r1, #254	; 0xfe
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f7ff fdb5 	bl	8000ca8 <SD_TxDataBlock>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d033      	beq.n	80011ac <SD_disk_write+0xe4>
      count = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	e030      	b.n	80011ac <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SD_disk_write+0x104>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2077      	movs	r0, #119	; 0x77
 800115a:	f7ff fdf9 	bl	8000d50 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	2057      	movs	r0, #87	; 0x57
 8001162:	f7ff fdf5 	bl	8000d50 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2059      	movs	r0, #89	; 0x59
 800116a:	f7ff fdf1 	bl	8000d50 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d11b      	bne.n	80011ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001174:	21fc      	movs	r1, #252	; 0xfc
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff fd96 	bl	8000ca8 <SD_TxDataBlock>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00a      	beq.n	8001198 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001188:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1ee      	bne.n	8001174 <SD_disk_write+0xac>
 8001196:	e000      	b.n	800119a <SD_disk_write+0xd2>
          break;
 8001198:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800119a:	21fd      	movs	r1, #253	; 0xfd
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fd83 	bl	8000ca8 <SD_TxDataBlock>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <SD_disk_write+0xe4>
      {
        count = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80011ac:	f7ff fc74 	bl	8000a98 <DESELECT>
  SPI_RxByte();
 80011b0:	f7ff fc98 	bl	8000ae4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000181 	.word	0x20000181

080011d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	460b      	mov	r3, r1
 80011de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80011ea:	2304      	movs	r3, #4
 80011ec:	e11b      	b.n	8001426 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d129      	bne.n	800124e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d017      	beq.n	8001232 <SD_disk_ioctl+0x62>
 8001202:	2b02      	cmp	r3, #2
 8001204:	dc1f      	bgt.n	8001246 <SD_disk_ioctl+0x76>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <SD_disk_ioctl+0x40>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00b      	beq.n	8001226 <SD_disk_ioctl+0x56>
 800120e:	e01a      	b.n	8001246 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001210:	f7ff fd08 	bl	8000c24 <SD_CheckPower>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800121a:	f7ff fcf7 	bl	8000c0c <SD_PowerOff>
      res = RES_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001224:	e0fd      	b.n	8001422 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001226:	f7ff fca5 	bl	8000b74 <SD_PowerOn>
      res = RES_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001230:	e0f7      	b.n	8001422 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	1c5c      	adds	r4, r3, #1
 8001236:	f7ff fcf5 	bl	8000c24 <SD_CheckPower>
 800123a:	4603      	mov	r3, r0
 800123c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001244:	e0ed      	b.n	8001422 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001246:	2304      	movs	r3, #4
 8001248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124c:	e0e9      	b.n	8001422 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <SD_disk_ioctl+0x260>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800125c:	2303      	movs	r3, #3
 800125e:	e0e2      	b.n	8001426 <SD_disk_ioctl+0x256>

    SELECT();
 8001260:	f7ff fc0e 	bl	8000a80 <SELECT>

    switch (ctrl)
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b0d      	cmp	r3, #13
 8001268:	f200 80cc 	bhi.w	8001404 <SD_disk_ioctl+0x234>
 800126c:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <SD_disk_ioctl+0xa4>)
 800126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001272:	bf00      	nop
 8001274:	0800136f 	.word	0x0800136f
 8001278:	080012ad 	.word	0x080012ad
 800127c:	0800135f 	.word	0x0800135f
 8001280:	08001405 	.word	0x08001405
 8001284:	08001405 	.word	0x08001405
 8001288:	08001405 	.word	0x08001405
 800128c:	08001405 	.word	0x08001405
 8001290:	08001405 	.word	0x08001405
 8001294:	08001405 	.word	0x08001405
 8001298:	08001405 	.word	0x08001405
 800129c:	08001405 	.word	0x08001405
 80012a0:	08001381 	.word	0x08001381
 80012a4:	080013a5 	.word	0x080013a5
 80012a8:	080013c9 	.word	0x080013c9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80012ac:	2100      	movs	r1, #0
 80012ae:	2049      	movs	r0, #73	; 0x49
 80012b0:	f7ff fd4e 	bl	8000d50 <SD_SendCmd>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80a8 	bne.w	800140c <SD_disk_ioctl+0x23c>
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2110      	movs	r1, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcba 	bl	8000c3c <SD_RxDataBlock>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 809e 	beq.w	800140c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10e      	bne.n	80012f8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012da:	7d7b      	ldrb	r3, [r7, #21]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	7d3b      	ldrb	r3, [r7, #20]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80012ee:	8bfb      	ldrh	r3, [r7, #30]
 80012f0:	029a      	lsls	r2, r3, #10
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e02e      	b.n	8001356 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	09db      	lsrs	r3, r3, #7
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b2da      	uxtb	r2, r3
 800130a:	7d7b      	ldrb	r3, [r7, #21]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 0306 	and.w	r3, r3, #6
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3302      	adds	r3, #2
 800131c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001320:	7d3b      	ldrb	r3, [r7, #20]
 8001322:	099b      	lsrs	r3, r3, #6
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b29a      	uxth	r2, r3
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	b29b      	uxth	r3, r3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29a      	uxth	r2, r3
 8001334:	7cbb      	ldrb	r3, [r7, #18]
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	b29b      	uxth	r3, r3
 800133a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001348:	8bfa      	ldrh	r2, [r7, #30]
 800134a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800134e:	3b09      	subs	r3, #9
 8001350:	409a      	lsls	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800135c:	e056      	b.n	800140c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800136c:	e055      	b.n	800141a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800136e:	f7ff fbe5 	bl	8000b3c <SD_ReadyWait>
 8001372:	4603      	mov	r3, r0
 8001374:	2bff      	cmp	r3, #255	; 0xff
 8001376:	d14b      	bne.n	8001410 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800137e:	e047      	b.n	8001410 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001380:	2100      	movs	r1, #0
 8001382:	2049      	movs	r0, #73	; 0x49
 8001384:	f7ff fce4 	bl	8000d50 <SD_SendCmd>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d142      	bne.n	8001414 <SD_disk_ioctl+0x244>
 800138e:	2110      	movs	r1, #16
 8001390:	6a38      	ldr	r0, [r7, #32]
 8001392:	f7ff fc53 	bl	8000c3c <SD_RxDataBlock>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d03b      	beq.n	8001414 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013a2:	e037      	b.n	8001414 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80013a4:	2100      	movs	r1, #0
 80013a6:	204a      	movs	r0, #74	; 0x4a
 80013a8:	f7ff fcd2 	bl	8000d50 <SD_SendCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d132      	bne.n	8001418 <SD_disk_ioctl+0x248>
 80013b2:	2110      	movs	r1, #16
 80013b4:	6a38      	ldr	r0, [r7, #32]
 80013b6:	f7ff fc41 	bl	8000c3c <SD_RxDataBlock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d02b      	beq.n	8001418 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013c6:	e027      	b.n	8001418 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80013c8:	2100      	movs	r1, #0
 80013ca:	207a      	movs	r0, #122	; 0x7a
 80013cc:	f7ff fcc0 	bl	8000d50 <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013dc:	e00b      	b.n	80013f6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80013de:	6a3c      	ldr	r4, [r7, #32]
 80013e0:	1c63      	adds	r3, r4, #1
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	f7ff fb7e 	bl	8000ae4 <SPI_RxByte>
 80013e8:	4603      	mov	r3, r0
 80013ea:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80013ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f0:	3301      	adds	r3, #1
 80013f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d9ef      	bls.n	80013de <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001404:	2304      	movs	r3, #4
 8001406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800140a:	e006      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 800140c:	bf00      	nop
 800140e:	e004      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001410:	bf00      	nop
 8001412:	e002      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001418:	bf00      	nop
    }

    DESELECT();
 800141a:	f7ff fb3d 	bl	8000a98 <DESELECT>
    SPI_RxByte();
 800141e:	f7ff fb61 	bl	8000ae4 <SPI_RxByte>
  }

  return res;
 8001422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001426:	4618      	mov	r0, r3
 8001428:	372c      	adds	r7, #44	; 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000

08001434 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <vApplicationGetIdleTaskMemory+0x2c>)
 8001444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <vApplicationGetIdleTaskMemory+0x30>)
 800144a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000184 	.word	0x20000184
 8001464:	20000238 	.word	0x20000238

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b0a8      	sub	sp, #160	; 0xa0
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f001 ff25 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f8a1 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 fb77 	bl	8001b68 <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f000 fb17 	bl	8001aac <MX_DMA_Init>
  MX_ETH_Init();
 800147e:	f000 f90b 	bl	8001698 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001482:	f000 fabb 	bl	80019fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001486:	f000 fae3 	bl	8001a50 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800148a:	f000 f9c9 	bl	8001820 <MX_TIM1_Init>
  MX_I2C2_Init();
 800148e:	f000 f951 	bl	8001734 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001492:	f000 f98f 	bl	80017b4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001496:	f008 f8af 	bl	80095f8 <MX_FATFS_Init>
  MX_TIM3_Init();
 800149a:	f000 fa61 	bl	8001960 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800149e:	4839      	ldr	r0, [pc, #228]	; (8001584 <main+0x11c>)
 80014a0:	f005 fb26 	bl	8006af0 <HAL_TIM_Base_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <main+0x120>)
 80014a6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80014b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00b f911 	bl	800c6de <osMessageCreate>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <main+0x124>)
 80014c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityAboveNormal, 0, 256);
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <main+0x128>)
 80014c4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 80014d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00a ffd5 	bl	800c48c <osThreadCreate>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <main+0x12c>)
 80014e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <main+0x130>)
 80014ea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 80014fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00a ffc2 	bl	800c48c <osThreadCreate>
 8001508:	4603      	mov	r3, r0
 800150a:	4a24      	ldr	r2, [pc, #144]	; (800159c <main+0x134>)
 800150c:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <main+0x138>)
 8001510:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001514:	461d      	mov	r5, r3
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800151e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 8001522:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00a ffaf 	bl	800c48c <osThreadCreate>
 800152e:	4603      	mov	r3, r0
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <main+0x13c>)
 8001532:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <main+0x140>)
 8001536:	f107 0420 	add.w	r4, r7, #32
 800153a:	461d      	mov	r5, r3
 800153c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00a ff9c 	bl	800c48c <osThreadCreate>
 8001554:	4603      	mov	r3, r0
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <main+0x144>)
 8001558:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityHigh, 0, 128);
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <main+0x148>)
 800155c:	1d3c      	adds	r4, r7, #4
 800155e:	461d      	mov	r5, r3
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00a ff8b 	bl	800c48c <osThreadCreate>
 8001576:	4603      	mov	r3, r0
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <main+0x14c>)
 800157a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800157c:	f00a ff7f 	bl	800c47e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001580:	e7fe      	b.n	8001580 <main+0x118>
 8001582:	bf00      	nop
 8001584:	2000088c 	.word	0x2000088c
 8001588:	0800f734 	.word	0x0800f734
 800158c:	20000fa0 	.word	0x20000fa0
 8001590:	0800f744 	.word	0x0800f744
 8001594:	20000f8c 	.word	0x20000f8c
 8001598:	0800f760 	.word	0x0800f760
 800159c:	20000f90 	.word	0x20000f90
 80015a0:	0800f77c 	.word	0x0800f77c
 80015a4:	20000f94 	.word	0x20000f94
 80015a8:	0800f798 	.word	0x0800f798
 80015ac:	20000f98 	.word	0x20000f98
 80015b0:	0800f7b4 	.word	0x0800f7b4
 80015b4:	20000f9c 	.word	0x20000f9c

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00d fbb2 	bl	800ed30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <SystemClock_Config+0xd8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <SystemClock_Config+0xd8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <SystemClock_Config+0xd8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xdc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <SystemClock_Config+0xdc>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SystemClock_Config+0xdc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800162c:	23a8      	movs	r3, #168	; 0xa8
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f895 	bl	800576c <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f000 fe2d 	bl	80022a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2105      	movs	r1, #5
 800166a:	4618      	mov	r0, r3
 800166c:	f004 faf6 	bl	8005c5c <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001676:	f000 fe16 	bl	80022a6 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_2);
 800167a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800167e:	2100      	movs	r1, #0
 8001680:	2001      	movs	r0, #1
 8001682:	f004 fbd1 	bl	8005e28 <HAL_RCC_MCOConfig>
}
 8001686:	bf00      	nop
 8001688:	3750      	adds	r7, #80	; 0x50
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ETH_Init+0x84>)
 800169e:	4a20      	ldr	r2, [pc, #128]	; (8001720 <MX_ETH_Init+0x88>)
 80016a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_ETH_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_ETH_Init+0x8c>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_ETH_Init+0x8c>)
 80016b0:	22e1      	movs	r2, #225	; 0xe1
 80016b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_ETH_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_ETH_Init+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_ETH_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_ETH_Init+0x84>)
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <MX_ETH_Init+0x8c>)
 80016ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_ETH_Init+0x84>)
 80016ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_ETH_Init+0x84>)
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <MX_ETH_Init+0x90>)
 80016d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_ETH_Init+0x84>)
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_ETH_Init+0x94>)
 80016de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_ETH_Init+0x84>)
 80016e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_ETH_Init+0x84>)
 80016ea:	f002 fb3d 	bl	8003d68 <HAL_ETH_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80016f4:	f000 fdd7 	bl	80022a6 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80016f8:	2238      	movs	r2, #56	; 0x38
 80016fa:	2100      	movs	r1, #0
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_ETH_Init+0x98>)
 80016fe:	f00d fb17 	bl	800ed30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_ETH_Init+0x98>)
 8001704:	2221      	movs	r2, #33	; 0x21
 8001706:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_ETH_Init+0x98>)
 800170a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800170e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_ETH_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200005b0 	.word	0x200005b0
 8001720:	40028000 	.word	0x40028000
 8001724:	2000344c 	.word	0x2000344c
 8001728:	20000510 	.word	0x20000510
 800172c:	20000470 	.word	0x20000470
 8001730:	20000438 	.word	0x20000438

08001734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_I2C2_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <MX_I2C2_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_I2C2_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_I2C2_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001772:	f003 f819 	bl	80047a8 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fd93 	bl	80022a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001784:	f003 fe5a 	bl	800543c <HAL_I2CEx_ConfigAnalogFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800178e:	f000 fd8a 	bl	80022a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001796:	f003 fe8d 	bl	80054b4 <HAL_I2CEx_ConfigDigitalFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 fd81 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000660 	.word	0x20000660
 80017ac:	40005800 	.word	0x40005800
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_SPI1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI1_Init+0x64>)
 8001800:	220a      	movs	r2, #10
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_SPI1_Init+0x64>)
 8001806:	f004 fce3 	bl	80061d0 <HAL_SPI_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 fd49 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000774 	.word	0x20000774
 800181c:	40013000 	.word	0x40013000

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	; 0x58
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00d fa69 	bl	800ed30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <MX_TIM1_Init+0x138>)
 8001860:	4a3e      	ldr	r2, [pc, #248]	; (800195c <MX_TIM1_Init+0x13c>)
 8001862:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <MX_TIM1_Init+0x138>)
 8001866:	22a7      	movs	r2, #167	; 0xa7
 8001868:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <MX_TIM1_Init+0x138>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_TIM1_Init+0x138>)
 8001872:	2263      	movs	r2, #99	; 0x63
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <MX_TIM1_Init+0x138>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <MX_TIM1_Init+0x138>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <MX_TIM1_Init+0x138>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	4833      	ldr	r0, [pc, #204]	; (8001958 <MX_TIM1_Init+0x138>)
 800188a:	f005 f8e1 	bl	8006a50 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001894:	f000 fd07 	bl	80022a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a2:	4619      	mov	r1, r3
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <MX_TIM1_Init+0x138>)
 80018a6:	f005 fce7 	bl	8007278 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018b0:	f000 fcf9 	bl	80022a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018b4:	4828      	ldr	r0, [pc, #160]	; (8001958 <MX_TIM1_Init+0x138>)
 80018b6:	f005 f9f3 	bl	8006ca0 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018c0:	f000 fcf1 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d0:	4619      	mov	r1, r3
 80018d2:	4821      	ldr	r0, [pc, #132]	; (8001958 <MX_TIM1_Init+0x138>)
 80018d4:	f006 f8d0 	bl	8007a78 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018de:	f000 fce2 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	; 0x60
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <MX_TIM1_Init+0x138>)
 8001908:	f005 fbf4 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001912:	f000 fcc8 	bl	80022a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x138>)
 800193a:	f006 f919 	bl	8007b70 <HAL_TIMEx_ConfigBreakDeadTime>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001944:	f000 fcaf 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x138>)
 800194a:	f001 fa0d 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	; 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000088c 	.word	0x2000088c
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_TIM3_Init+0x94>)
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <MX_TIM3_Init+0x98>)
 8001980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001984:	2253      	movs	r2, #83	; 0x53
 8001986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_TIM3_Init+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_TIM3_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019a4:	f005 f854 	bl	8006a50 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019ae:	f000 fc7a 	bl	80022a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019c0:	f005 fc5a 	bl	8007278 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019ca:	f000 fc6c 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019dc:	f006 f84c 	bl	8007a78 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019e6:	f000 fc5e 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200008d4 	.word	0x200008d4
 80019f8:	40000400 	.word	0x40000400

080019fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART3_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a34:	f006 f902 	bl	8007c3c <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f000 fc32 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000097c 	.word	0x2000097c
 8001a4c:	40004800 	.word	0x40004800

08001a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a94:	f003 fd4d 	bl	8005532 <HAL_PCD_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f000 fc02 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000a80 	.word	0x20000a80

08001aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	200c      	movs	r0, #12
 8001af0:	f001 fd02 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001af4:	200c      	movs	r0, #12
 8001af6:	f001 fd1b 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	200e      	movs	r0, #14
 8001b00:	f001 fcfa 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b04:	200e      	movs	r0, #14
 8001b06:	f001 fd13 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f001 fcf2 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f001 fd0b 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	202f      	movs	r0, #47	; 0x2f
 8001b20:	f001 fcea 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b24:	202f      	movs	r0, #47	; 0x2f
 8001b26:	f001 fd03 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	2039      	movs	r0, #57	; 0x39
 8001b30:	f001 fce2 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b34:	2039      	movs	r0, #57	; 0x39
 8001b36:	f001 fcfb 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	203a      	movs	r0, #58	; 0x3a
 8001b40:	f001 fcda 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b44:	203a      	movs	r0, #58	; 0x3a
 8001b46:	f001 fcf3 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2044      	movs	r0, #68	; 0x44
 8001b50:	f001 fcd2 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001b54:	2044      	movs	r0, #68	; 0x44
 8001b56:	f001 fceb 	bl	8003530 <HAL_NVIC_EnableIRQ>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a5f      	ldr	r2, [pc, #380]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <MX_GPIO_Init+0x1d8>)
 8001c66:	f002 fd6b 	bl	8004740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2140      	movs	r1, #64	; 0x40
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001c70:	f002 fd66 	bl	8004740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	482f      	ldr	r0, [pc, #188]	; (8001d48 <MX_GPIO_Init+0x1e0>)
 8001c8c:	f002 fb94 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8001c90:	2308      	movs	r3, #8
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482a      	ldr	r0, [pc, #168]	; (8001d4c <MX_GPIO_Init+0x1e4>)
 8001ca4:	f002 fb88 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ca8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481f      	ldr	r0, [pc, #124]	; (8001d40 <MX_GPIO_Init+0x1d8>)
 8001cc2:	f002 fb79 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4819      	ldr	r0, [pc, #100]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001cde:	f002 fb6b 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4813      	ldr	r0, [pc, #76]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001cf6:	f002 fb5f 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_GPIO_Init+0x1e0>)
 8001d18:	f002 fb4e 	bl	80043b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_SensorD5_Pin */
  GPIO_InitStruct.Pin = Temp_SensorD5_Pin;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_SensorD5_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <MX_GPIO_Init+0x1e8>)
 8001d30:	f002 fb42 	bl	80043b8 <HAL_GPIO_Init>

}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020c00 	.word	0x40020c00

08001d54 <bcdToDec>:
   return (uint8_t)( (val/10*16) + (val%10) );
 }

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	461a      	mov	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4413      	add	r3, r2
 }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <Get_Time>:
 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }

 void Get_Time (void)
 {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
 	uint8_t get_time[7];
 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 8001d8a:	23d0      	movs	r3, #208	; 0xd0
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	2307      	movs	r3, #7
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	463b      	mov	r3, r7
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <Get_Time+0x94>)
 8001d9c:	f002 fe48 	bl	8004a30 <HAL_I2C_Mem_Read_DMA>
 	time.seconds = bcdToDec(get_time[0]);
 8001da0:	783b      	ldrb	r3, [r7, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ffd6 	bl	8001d54 <bcdToDec>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <Get_Time+0x98>)
 8001dae:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ffce 	bl	8001d54 <bcdToDec>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <Get_Time+0x98>)
 8001dbe:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffc6 	bl	8001d54 <bcdToDec>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <Get_Time+0x98>)
 8001dce:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffbe 	bl	8001d54 <bcdToDec>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <Get_Time+0x98>)
 8001dde:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 8001de0:	793b      	ldrb	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ffb6 	bl	8001d54 <bcdToDec>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <Get_Time+0x98>)
 8001dee:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ffae 	bl	8001d54 <bcdToDec>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <Get_Time+0x98>)
 8001dfe:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ffa6 	bl	8001d54 <bcdToDec>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <Get_Time+0x98>)
 8001e0e:	719a      	strb	r2, [r3, #6]
 }
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000660 	.word	0x20000660
 8001e1c:	20000fd4 	.word	0x20000fd4

08001e20 <Start_RTC>:

/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//Uncomment following line to set the time
//Set_Time(00, 20, 15, 5, 16, 2, 24); //(sec,min,hour,day of week,day of month,month,year)
  /* Infinite loop */
	Get_Time();
 8001e28:	f7ff ffac 	bl	8001d84 <Get_Time>
	sprintf(time_buffer, "Time: %02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <Start_RTC+0x70>)
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <Start_RTC+0x70>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <Start_RTC+0x70>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4914      	ldr	r1, [pc, #80]	; (8001e94 <Start_RTC+0x74>)
 8001e42:	4815      	ldr	r0, [pc, #84]	; (8001e98 <Start_RTC+0x78>)
 8001e44:	f00d f88a 	bl	800ef5c <siprintf>
	osDelay(1);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f00a fb6b 	bl	800c524 <osDelay>
	time_available = 1;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <Start_RTC+0x7c>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  time_flag = 0;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <Start_RTC+0x80>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
	  Get_Time();
 8001e5a:	f7ff ff93 	bl	8001d84 <Get_Time>
	  sprintf(time_buffer, "Time: %02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <Start_RTC+0x70>)
 8001e60:	789b      	ldrb	r3, [r3, #2]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <Start_RTC+0x70>)
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <Start_RTC+0x70>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <Start_RTC+0x74>)
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <Start_RTC+0x78>)
 8001e76:	f00d f871 	bl	800ef5c <siprintf>
	  osDelay(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00a fb52 	bl	800c524 <osDelay>
	  time_flag = 1;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <Start_RTC+0x80>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
	  osDelay(1000);
 8001e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e8a:	f00a fb4b 	bl	800c524 <osDelay>
	  time_flag = 0;
 8001e8e:	e7e1      	b.n	8001e54 <Start_RTC+0x34>
 8001e90:	20000fd4 	.word	0x20000fd4
 8001e94:	0800f7d0 	.word	0x0800f7d0
 8001e98:	20000fc0 	.word	0x20000fc0
 8001e9c:	20000fbc 	.word	0x20000fbc
 8001ea0:	20000fbe 	.word	0x20000fbe

08001ea4 <send_uart_dma>:
  \r\nToggle GREEN LED     ----> 1 \
  \r\nToggle BLUE LED      ----> 2 \
  \r\nToggle RED LED       ----> 3 \
  \r\nType your option here : \n"};

void send_uart_dma(uint8_t* ptr, uint16_t len){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 8001eb0:	bf00      	nop
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <send_uart_dma+0x30>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0fb      	beq.n	8001eb2 <send_uart_dma+0xe>

	UART_SendFlag=0;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <send_uart_dma+0x30>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <send_uart_dma+0x34>)
 8001ec8:	f005 ff06 	bl	8007cd8 <HAL_UART_Transmit_DMA>

}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000001 	.word	0x20000001
 8001ed8:	2000097c 	.word	0x2000097c

08001edc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b0d      	cmp	r3, #13
 8001eea:	d007      	beq.n	8001efc <HAL_UART_RxCpltCallback+0x20>
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b0a      	cmp	r3, #10
 8001ef2:	d003      	beq.n	8001efc <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001efa:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b0d      	cmp	r3, #13
 8001f02:	d102      	bne.n	8001f0a <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_UART_RxCpltCallback+0x48>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <HAL_UART_RxCpltCallback+0x4c>)
 8001f10:	f005 ff60 	bl	8007dd4 <HAL_UART_Receive_DMA>

}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000fdb 	.word	0x20000fdb
 8001f20:	20000fdc 	.word	0x20000fdc
 8001f24:	20000fdd 	.word	0x20000fdd
 8001f28:	2000097c 	.word	0x2000097c

08001f2c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_UART_TxCpltCallback+0x1c>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000001 	.word	0x20000001

08001f4c <Start_UART_LED>:

/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001f54:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <Start_UART_LED+0x84>)
 8001f56:	f7fe f94b 	bl	80001f0 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <Start_UART_LED+0x84>)
 8001f62:	f7ff ff9f 	bl	8001ea4 <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <Start_UART_LED+0x88>)
 8001f6a:	481b      	ldr	r0, [pc, #108]	; (8001fd8 <Start_UART_LED+0x8c>)
 8001f6c:	f005 ff32 	bl	8007dd4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <Start_UART_LED+0x90>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d026      	beq.n	8001fc6 <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <Start_UART_LED+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
	      	//process command
	      	switch (cmd){
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <Start_UART_LED+0x94>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b33      	cmp	r3, #51	; 0x33
 8001f84:	d010      	beq.n	8001fa8 <Start_UART_LED+0x5c>
 8001f86:	2b33      	cmp	r3, #51	; 0x33
 8001f88:	dc14      	bgt.n	8001fb4 <Start_UART_LED+0x68>
 8001f8a:	2b31      	cmp	r3, #49	; 0x31
 8001f8c:	d002      	beq.n	8001f94 <Start_UART_LED+0x48>
 8001f8e:	2b32      	cmp	r3, #50	; 0x32
 8001f90:	d005      	beq.n	8001f9e <Start_UART_LED+0x52>
 8001f92:	e00f      	b.n	8001fb4 <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8001f94:	2101      	movs	r1, #1
 8001f96:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <Start_UART_LED+0x98>)
 8001f98:	f002 fbeb 	bl	8004772 <HAL_GPIO_TogglePin>
	      		break;
 8001f9c:	e00a      	b.n	8001fb4 <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <Start_UART_LED+0x98>)
 8001fa2:	f002 fbe6 	bl	8004772 <HAL_GPIO_TogglePin>
	      		break;
 8001fa6:	e005      	b.n	8001fb4 <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8001fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <Start_UART_LED+0x98>)
 8001fae:	f002 fbe0 	bl	8004772 <HAL_GPIO_TogglePin>
	      		break;
 8001fb2:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <Start_UART_LED+0x84>)
 8001fb6:	f7fe f91b 	bl	80001f0 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <Start_UART_LED+0x84>)
 8001fc2:	f7ff ff6f 	bl	8001ea4 <send_uart_dma>

	      	}

    osDelay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f00a faac 	bl	800c524 <osDelay>
	  if(cmdstate){
 8001fcc:	e7d0      	b.n	8001f70 <Start_UART_LED+0x24>
 8001fce:	bf00      	nop
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	20000fdb 	.word	0x20000fdb
 8001fd8:	2000097c 	.word	0x2000097c
 8001fdc:	20000fdd 	.word	0x20000fdd
 8001fe0:	20000fdc 	.word	0x20000fdc
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <bufsize>:
FATFS *pfs; //For checking the capacity
DWORD fre_clust;
uint32_t total, free_space;

//len of a buffer
int bufsize(char *buf){
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	int i=0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 8001ff4:	e002      	b.n	8001ffc <bufsize+0x14>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f6      	bne.n	8001ff6 <bufsize+0xe>
	return i;
 8002008:	68fb      	ldr	r3, [r7, #12]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <bufclear>:
//clear a buffer
void bufclear(void){
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e007      	b.n	8002034 <bufclear+0x1c>
		SD_buffer[i]= '\0';
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <bufclear+0x34>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3301      	adds	r3, #1
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203a:	dbf3      	blt.n	8002024 <bufclear+0xc>
	}
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000304c 	.word	0x2000304c

08002050 <Start_DataLogging>:
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
	fresult = f_mount(&fs,"",0);
 8002058:	2200      	movs	r2, #0
 800205a:	4935      	ldr	r1, [pc, #212]	; (8002130 <Start_DataLogging+0xe0>)
 800205c:	4835      	ldr	r0, [pc, #212]	; (8002134 <Start_DataLogging+0xe4>)
 800205e:	f009 f981 	bl	800b364 <f_mount>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <Start_DataLogging+0xe8>)
 8002068:	701a      	strb	r2, [r3, #0]
	unsigned long ptr = 0; // variable to save the cursor location
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	if (time_available>0 && fan_available>0 && time_flag>0){
 800206e:	4b33      	ldr	r3, [pc, #204]	; (800213c <Start_DataLogging+0xec>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d057      	beq.n	8002126 <Start_DataLogging+0xd6>
 8002076:	4b32      	ldr	r3, [pc, #200]	; (8002140 <Start_DataLogging+0xf0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d053      	beq.n	8002126 <Start_DataLogging+0xd6>
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <Start_DataLogging+0xf4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04f      	beq.n	8002126 <Start_DataLogging+0xd6>
	fresult = f_open(&fil,"datalog.txt",FA_OPEN_ALWAYS|FA_WRITE);
 8002086:	2212      	movs	r2, #18
 8002088:	492f      	ldr	r1, [pc, #188]	; (8002148 <Start_DataLogging+0xf8>)
 800208a:	4830      	ldr	r0, [pc, #192]	; (800214c <Start_DataLogging+0xfc>)
 800208c:	f009 f9ce 	bl	800b42c <f_open>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <Start_DataLogging+0xe8>)
 8002096:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil, ptr);
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	482c      	ldr	r0, [pc, #176]	; (800214c <Start_DataLogging+0xfc>)
 800209c:	f009 fe14 	bl	800bcc8 <f_lseek>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <Start_DataLogging+0xe8>)
 80020a6:	701a      	strb	r2, [r3, #0]
	fresult = f_puts(time_buffer,&fil);
 80020a8:	4928      	ldr	r1, [pc, #160]	; (800214c <Start_DataLogging+0xfc>)
 80020aa:	4829      	ldr	r0, [pc, #164]	; (8002150 <Start_DataLogging+0x100>)
 80020ac:	f00a f8f1 	bl	800c292 <f_puts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <Start_DataLogging+0xe8>)
 80020b6:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(time_buffer);
 80020b8:	4825      	ldr	r0, [pc, #148]	; (8002150 <Start_DataLogging+0x100>)
 80020ba:	f7ff ff95 	bl	8001fe8 <bufsize>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(", ",&fil);
 80020c8:	4920      	ldr	r1, [pc, #128]	; (800214c <Start_DataLogging+0xfc>)
 80020ca:	4822      	ldr	r0, [pc, #136]	; (8002154 <Start_DataLogging+0x104>)
 80020cc:	f00a f8e1 	bl	800c292 <f_puts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <Start_DataLogging+0xe8>)
 80020d6:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3302      	adds	r3, #2
 80020dc:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(fan_speed,&fil);
 80020de:	491b      	ldr	r1, [pc, #108]	; (800214c <Start_DataLogging+0xfc>)
 80020e0:	481d      	ldr	r0, [pc, #116]	; (8002158 <Start_DataLogging+0x108>)
 80020e2:	f00a f8d6 	bl	800c292 <f_puts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <Start_DataLogging+0xe8>)
 80020ec:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(fan_speed);
 80020ee:	481a      	ldr	r0, [pc, #104]	; (8002158 <Start_DataLogging+0x108>)
 80020f0:	f7ff ff7a 	bl	8001fe8 <bufsize>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
	fresult = f_puts("\n",&fil);
 80020fe:	4913      	ldr	r1, [pc, #76]	; (800214c <Start_DataLogging+0xfc>)
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <Start_DataLogging+0x10c>)
 8002102:	f00a f8c6 	bl	800c292 <f_puts>
 8002106:	4603      	mov	r3, r0
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <Start_DataLogging+0xe8>)
 800210c:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3302      	adds	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
	fresult = f_close(&fil);
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <Start_DataLogging+0xfc>)
 8002116:	f009 fda8 	bl	800bc6a <f_close>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <Start_DataLogging+0xe8>)
 8002120:	701a      	strb	r2, [r3, #0]
	bufclear();
 8002122:	f7ff ff79 	bl	8002018 <bufclear>
	}

    osDelay(50);
 8002126:	2032      	movs	r0, #50	; 0x32
 8002128:	f00a f9fc 	bl	800c524 <osDelay>
	if (time_available>0 && fan_available>0 && time_flag>0){
 800212c:	e79f      	b.n	800206e <Start_DataLogging+0x1e>
 800212e:	bf00      	nop
 8002130:	0800f7e8 	.word	0x0800f7e8
 8002134:	20000fe0 	.word	0x20000fe0
 8002138:	20003048 	.word	0x20003048
 800213c:	20000fbc 	.word	0x20000fbc
 8002140:	20000fbd 	.word	0x20000fbd
 8002144:	20000fbe 	.word	0x20000fbe
 8002148:	0800f7ec 	.word	0x0800f7ec
 800214c:	20002018 	.word	0x20002018
 8002150:	20000fc0 	.word	0x20000fc0
 8002154:	0800f7f8 	.word	0x0800f7f8
 8002158:	20000fa8 	.word	0x20000fa8
 800215c:	0800f7fc 	.word	0x0800f7fc

08002160 <Start_FanControl>:
#define MAXTEMP 35
#define MINTEMP 29

/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
	uint8_t dutyCycle = 50; //initialize fan speed
 8002168:	2332      	movs	r3, #50	; 0x32
 800216a:	73fb      	strb	r3, [r7, #15]
	TIM1->CCR1 = dutyCycle;
 800216c:	4a27      	ldr	r2, [pc, #156]	; (800220c <Start_FanControl+0xac>)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	6353      	str	r3, [r2, #52]	; 0x34
	sprintf(fan_speed,"Fan Speed : %02d",dutyCycle);
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	461a      	mov	r2, r3
 8002176:	4926      	ldr	r1, [pc, #152]	; (8002210 <Start_FanControl+0xb0>)
 8002178:	4826      	ldr	r0, [pc, #152]	; (8002214 <Start_FanControl+0xb4>)
 800217a:	f00c feef 	bl	800ef5c <siprintf>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800217e:	2100      	movs	r1, #0
 8002180:	4825      	ldr	r0, [pc, #148]	; (8002218 <Start_FanControl+0xb8>)
 8002182:	f004 fde7 	bl	8006d54 <HAL_TIM_PWM_Start>
	osDelay(1);
 8002186:	2001      	movs	r0, #1
 8002188:	f00a f9cc 	bl	800c524 <osDelay>
	fan_available = 1;
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <Start_FanControl+0xbc>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	if(temperature>MAXTEMP){
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <Start_FanControl+0xc0>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002224 <Start_FanControl+0xc4>
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	dd02      	ble.n	80021ac <Start_FanControl+0x4c>
		dutyCycle = 100;
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e021      	b.n	80021f0 <Start_FanControl+0x90>
	}
	else if(temperature<MINTEMP){
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <Start_FanControl+0xc0>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d502      	bpl.n	80021c6 <Start_FanControl+0x66>
		dutyCycle = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e014      	b.n	80021f0 <Start_FanControl+0x90>
	}
	else{
	dutyCycle = ((temperature - MINTEMP)/(MAXTEMP-MINTEMP))*100;
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <Start_FanControl+0xc0>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80021d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021d4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021dc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002228 <Start_FanControl+0xc8>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e8:	edc7 7a00 	vstr	s15, [r7]
 80021ec:	783b      	ldrb	r3, [r7, #0]
 80021ee:	73fb      	strb	r3, [r7, #15]
	}
	TIM1->CCR1 = dutyCycle;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <Start_FanControl+0xac>)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	6353      	str	r3, [r2, #52]	; 0x34
	sprintf(fan_speed,"Fan Speed : %02d",dutyCycle);
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4905      	ldr	r1, [pc, #20]	; (8002210 <Start_FanControl+0xb0>)
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <Start_FanControl+0xb4>)
 80021fe:	f00c fead 	bl	800ef5c <siprintf>
    osDelay(20);
 8002202:	2014      	movs	r0, #20
 8002204:	f00a f98e 	bl	800c524 <osDelay>
	if(temperature>MAXTEMP){
 8002208:	e7c3      	b.n	8002192 <Start_FanControl+0x32>
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000
 8002210:	0800f800 	.word	0x0800f800
 8002214:	20000fa8 	.word	0x20000fa8
 8002218:	2000088c 	.word	0x2000088c
 800221c:	20000fbd 	.word	0x20000fbd
 8002220:	20000fa4 	.word	0x20000fa4
 8002224:	420c0000 	.word	0x420c0000
 8002228:	42c80000 	.word	0x42c80000

0800222c <Start_Temp>:
*/


/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
	DS18B20_Init(DS18B20_Resolution_12bits); //Select sensor resolution
 8002234:	200c      	movs	r0, #12
 8002236:	f7fe fbd1 	bl	80009dc <DS18B20_Init>

  for(;;)
  {
	DS18B20_ReadAll();
 800223a:	f7fe fb33 	bl	80008a4 <DS18B20_ReadAll>
	DS18B20_StartAll();
 800223e:	f7fe f9b1 	bl	80005a4 <DS18B20_StartAll>
	uint8_t ROM_tmp[8];
	uint8_t i; 				//to save number of sensors
	  for(i = 0; i < DS18B20_Quantity(); i++)
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
 8002246:	e011      	b.n	800226c <Start_Temp+0x40>
		{
			if(DS18B20_GetTemperature(i, &temperature))
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	490e      	ldr	r1, [pc, #56]	; (8002284 <Start_Temp+0x58>)
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fba3 	bl	8000998 <DS18B20_GetTemperature>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <Start_Temp+0x3a>
			{
				  DS18B20_GetROM(i, ROM_tmp);
 8002258:	f107 020c 	add.w	r2, r7, #12
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fb5f 	bl	8000924 <DS18B20_GetROM>
	  for(i = 0; i < DS18B20_Quantity(); i++)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	3301      	adds	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
 800226c:	f7fe fb88 	bl	8000980 <DS18B20_Quantity>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	4293      	cmp	r3, r2
 8002278:	d3e6      	bcc.n	8002248 <Start_Temp+0x1c>
			}
		}

    osDelay(10);
 800227a:	200a      	movs	r0, #10
 800227c:	f00a f952 	bl	800c524 <osDelay>
  {
 8002280:	e7db      	b.n	800223a <Start_Temp+0xe>
 8002282:	bf00      	nop
 8002284:	20000fa4 	.word	0x20000fa4

08002288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d101      	bne.n	800229e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800229a:	f001 f831 	bl	8003300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022aa:	b672      	cpsid	i
}
 80022ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ae:	e7fe      	b.n	80022ae <Error_Handler+0x8>

080022b0 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <OneWire_Delay+0x30>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80022c2:	bf00      	nop
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <OneWire_Delay+0x30>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d9f9      	bls.n	80022c4 <OneWire_Delay+0x14>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200008d4 	.word	0x200008d4

080022e4 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f107 020c 	add.w	r2, r7, #12
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f002 f855 	bl	80043b8 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800231e:	2311      	movs	r3, #17
 8002320:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	889b      	ldrh	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f107 020c 	add.w	r2, r7, #12
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 f83c 	bl	80043b8 <HAL_GPIO_Init>
}
 8002340:	bf00      	nop
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	889b      	ldrh	r3, [r3, #4]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	619a      	str	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	889a      	ldrh	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffda 	bl	8002348 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffbe 	bl	8002316 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800239a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800239e:	f7ff ff87 	bl	80022b0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff9e 	bl	80022e4 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 80023a8:	2046      	movs	r0, #70	; 0x46
 80023aa:	f7ff ff81 	bl	80022b0 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f002 f9a9 	bl	8004710 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80023c2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80023c6:	f7ff ff73 	bl	80022b0 <OneWire_Delay>

	return i;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00f      	beq.n	8002406 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffae 	bl	8002348 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff92 	bl	8002316 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80023f2:	2006      	movs	r0, #6
 80023f4:	f7ff ff5c 	bl	80022b0 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff73 	bl	80022e4 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 80023fe:	2040      	movs	r0, #64	; 0x40
 8002400:	f7ff ff56 	bl	80022b0 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002404:	e00e      	b.n	8002424 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff9e 	bl	8002348 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff82 	bl	8002316 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002412:	203c      	movs	r0, #60	; 0x3c
 8002414:	f7ff ff4c 	bl	80022b0 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff63 	bl	80022e4 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 800241e:	200a      	movs	r0, #10
 8002420:	f7ff ff46 	bl	80022b0 <OneWire_Delay>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff85 	bl	8002348 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff69 	bl	8002316 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8002444:	2002      	movs	r0, #2
 8002446:	f7ff ff33 	bl	80022b0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4a 	bl	80022e4 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8002450:	200a      	movs	r0, #10
 8002452:	f7ff ff2d 	bl	80022b0 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	889b      	ldrh	r3, [r3, #4]
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f002 f955 	bl	8004710 <HAL_GPIO_ReadPin>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <OneWire_ReadBit+0x44>
		bit = 1;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8002470:	2032      	movs	r0, #50	; 0x32
 8002472:	f7ff ff1d 	bl	80022b0 <OneWire_Delay>

	return bit;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800248c:	2308      	movs	r3, #8
 800248e:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff9a 	bl	80023d4 <OneWire_WriteBit>
		byte >>= 1;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <OneWire_WriteByte+0x10>
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80024c4:	2308      	movs	r3, #8
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	2300      	movs	r3, #0
 80024ca:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffaa 	bl	800242c <OneWire_ReadBit>
 80024d8:	4603      	mov	r3, r0
 80024da:	01db      	lsls	r3, r3, #7
 80024dc:	b25a      	sxtb	r2, r3
 80024de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1eb      	bne.n	80024cc <OneWire_ReadByte+0x10>

	return byte;
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	71da      	strb	r2, [r3, #7]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800253c:	2301      	movs	r3, #1
 800253e:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7a1b      	ldrb	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 809a 	bne.w	8002682 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff19 	bl	8002386 <OneWire_Reset>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	71da      	strb	r2, [r3, #7]
			return 0;
 800256c:	2300      	movs	r3, #0
 800256e:	e09b      	b.n	80026a8 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff83 	bl	8002480 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff56 	bl	800242c <OneWire_ReadBit>
 8002580:	4603      	mov	r3, r0
 8002582:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff51 	bl	800242c <OneWire_ReadBit>
 800258a:	4603      	mov	r3, r0
 800258c:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800258e:	7a7b      	ldrb	r3, [r7, #9]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d102      	bne.n	800259a <OneWire_Search+0x76>
 8002594:	7a3b      	ldrb	r3, [r7, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d064      	beq.n	8002664 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800259a:	7a7a      	ldrb	r2, [r7, #9]
 800259c:	7a3b      	ldrb	r3, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d002      	beq.n	80025a8 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 80025a2:	7a7b      	ldrb	r3, [r7, #9]
 80025a4:	72bb      	strb	r3, [r7, #10]
 80025a6:	e026      	b.n	80025f6 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20d      	bcs.n	80025ce <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80025b2:	7b7b      	ldrb	r3, [r7, #13]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	7a5a      	ldrb	r2, [r3, #9]
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	4013      	ands	r3, r2
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	72bb      	strb	r3, [r7, #10]
 80025cc:	e008      	b.n	80025e0 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	799b      	ldrb	r3, [r3, #6]
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80025e0:	7abb      	ldrb	r3, [r7, #10]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d802      	bhi.n	80025f6 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7bba      	ldrb	r2, [r7, #14]
 80025f4:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 80025f6:	7abb      	ldrb	r3, [r7, #10]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10c      	bne.n	8002616 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 80025fc:	7b7b      	ldrb	r3, [r7, #13]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	7a59      	ldrb	r1, [r3, #9]
 8002604:	7b7b      	ldrb	r3, [r7, #13]
 8002606:	7afa      	ldrb	r2, [r7, #11]
 8002608:	430a      	orrs	r2, r1
 800260a:	b2d1      	uxtb	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	460a      	mov	r2, r1
 8002612:	725a      	strb	r2, [r3, #9]
 8002614:	e010      	b.n	8002638 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	7a5b      	ldrb	r3, [r3, #9]
 800261e:	b25a      	sxtb	r2, r3
 8002620:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002624:	43db      	mvns	r3, r3
 8002626:	b25b      	sxtb	r3, r3
 8002628:	4013      	ands	r3, r2
 800262a:	b25a      	sxtb	r2, r3
 800262c:	7b7b      	ldrb	r3, [r7, #13]
 800262e:	b2d1      	uxtb	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	460a      	mov	r2, r1
 8002636:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002638:	7abb      	ldrb	r3, [r7, #10]
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fec9 	bl	80023d4 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3301      	adds	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	3301      	adds	r3, #1
 8002658:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 800265a:	2301      	movs	r3, #1
 800265c:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d98a      	bls.n	800257a <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d90b      	bls.n	8002682 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7bba      	ldrb	r2, [r7, #14]
 800266e:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	799b      	ldrb	r3, [r3, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 800267e:	2301      	movs	r3, #1
 8002680:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8002682:	7b3b      	ldrb	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <OneWire_Search+0x16c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7a5b      	ldrb	r3, [r3, #9]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80026a6:	7b3b      	ldrb	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff20 	bl	80024fe <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80026be:	21f0      	movs	r1, #240	; 0xf0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff2f 	bl	8002524 <OneWire_Search>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80026d8:	21f0      	movs	r1, #240	; 0xf0
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff22 	bl	8002524 <OneWire_Search>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80026f4:	2155      	movs	r1, #85	; 0x55
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fec2 	bl	8002480 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e00a      	b.n	8002718 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff feb7 	bl	8002480 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3301      	adds	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b07      	cmp	r3, #7
 800271c:	d9f1      	bls.n	8002702 <OneWire_SelectWithPointer+0x18>
	}
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e00a      	b.n	800274e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	440b      	add	r3, r1
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	440a      	add	r2, r1
 8002744:	7a52      	ldrb	r2, [r2, #9]
 8002746:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b07      	cmp	r3, #7
 8002752:	d9f1      	bls.n	8002738 <OneWire_GetFullROM+0x10>
	}
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8002772:	4811      	ldr	r0, [pc, #68]	; (80027b8 <OneWire_Init+0x54>)
 8002774:	f004 f9bc 	bl	8006af0 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fdc6 	bl	8002316 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff fdec 	bl	8002368 <OneWire_OutputHigh>
	HAL_Delay(100);
 8002790:	2064      	movs	r0, #100	; 0x64
 8002792:	f000 fdd5 	bl	8003340 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fdd6 	bl	8002348 <OneWire_OutputLow>
	HAL_Delay(100);
 800279c:	2064      	movs	r0, #100	; 0x64
 800279e:	f000 fdcf 	bl	8003340 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff fde0 	bl	8002368 <OneWire_OutputHigh>
	HAL_Delay(200);
 80027a8:	20c8      	movs	r0, #200	; 0xc8
 80027aa:	f000 fdc9 	bl	8003340 <HAL_Delay>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200008d4 	.word	0x200008d4

080027bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_MspInit+0x54>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_MspInit+0x54>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_MspInit+0x54>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_MspInit+0x54>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_MspInit+0x54>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_MspInit+0x54>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	210f      	movs	r1, #15
 80027fe:	f06f 0001 	mvn.w	r0, #1
 8002802:	f000 fe79 	bl	80034f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_ETH_MspInit+0x174>)
 8002832:	4293      	cmp	r3, r2
 8002834:	f040 80a4 	bne.w	8002980 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_ETH_MspInit+0x178>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_ETH_MspInit+0x178>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_ETH_MspInit+0x178>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_ETH_MspInit+0x178>)
 800285e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_ETH_MspInit+0x178>)
 800287a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	4b3e      	ldr	r3, [pc, #248]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_ETH_MspInit+0x178>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a36      	ldr	r2, [pc, #216]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4a2f      	ldr	r2, [pc, #188]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028fc:	2332      	movs	r3, #50	; 0x32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800290c:	230b      	movs	r3, #11
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	481e      	ldr	r0, [pc, #120]	; (8002990 <HAL_ETH_MspInit+0x17c>)
 8002918:	f001 fd4e 	bl	80043b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800291c:	2386      	movs	r3, #134	; 0x86
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800292c:	230b      	movs	r3, #11
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4817      	ldr	r0, [pc, #92]	; (8002994 <HAL_ETH_MspInit+0x180>)
 8002938:	f001 fd3e 	bl	80043b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800293c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800294e:	230b      	movs	r3, #11
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <HAL_ETH_MspInit+0x184>)
 800295a:	f001 fd2d 	bl	80043b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800295e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002970:	230b      	movs	r3, #11
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4808      	ldr	r0, [pc, #32]	; (800299c <HAL_ETH_MspInit+0x188>)
 800297c:	f001 fd1c 	bl	80043b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	3738      	adds	r7, #56	; 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40028000 	.word	0x40028000
 800298c:	40023800 	.word	0x40023800
 8002990:	40020800 	.word	0x40020800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40021800 	.word	0x40021800

080029a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a47      	ldr	r2, [pc, #284]	; (8002adc <HAL_I2C_MspInit+0x13c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f040 8088 	bne.w	8002ad4 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029e0:	2303      	movs	r3, #3
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e4:	2312      	movs	r3, #18
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029f0:	2304      	movs	r3, #4
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	483a      	ldr	r0, [pc, #232]	; (8002ae4 <HAL_I2C_MspInit+0x144>)
 80029fc:	f001 fcdc 	bl	80043b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 8002a0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_I2C_MspInit+0x140>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8002a1c:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a1e:	4a33      	ldr	r2, [pc, #204]	; (8002aec <HAL_I2C_MspInit+0x14c>)
 8002a20:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a24:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002a28:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002a5c:	4822      	ldr	r0, [pc, #136]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a5e:	f000 fd75 	bl	800354c <HAL_DMA_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002a68:	f7ff fc1d 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_I2C_MspInit+0x148>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_I2C_MspInit+0x154>)
 8002a7c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a80:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002a84:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a98:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002aba:	f000 fd47 	bl	800354c <HAL_DMA_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8002ac4:	f7ff fbef 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_I2C_MspInit+0x150>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ad4:	bf00      	nop
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40005800 	.word	0x40005800
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	200006b4 	.word	0x200006b4
 8002aec:	40026058 	.word	0x40026058
 8002af0:	20000714 	.word	0x20000714
 8002af4:	400260b8 	.word	0x400260b8

08002af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_SPI_MspInit+0x17c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 80a8 	bne.w	8002c6c <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6313      	str	r3, [r2, #48]	; 0x30
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
 8002b64:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <HAL_SPI_MspInit+0x180>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b70:	2370      	movs	r3, #112	; 0x70
 8002b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b80:	2305      	movs	r3, #5
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	483c      	ldr	r0, [pc, #240]	; (8002c7c <HAL_SPI_MspInit+0x184>)
 8002b8c:	f001 fc14 	bl	80043b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b90:	2320      	movs	r3, #32
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4835      	ldr	r0, [pc, #212]	; (8002c80 <HAL_SPI_MspInit+0x188>)
 8002bac:	f001 fc04 	bl	80043b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bb2:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_SPI_MspInit+0x190>)
 8002bb4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bb8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002bbc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002be6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bea:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002bf2:	4824      	ldr	r0, [pc, #144]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002bf4:	f000 fcaa 	bl	800354c <HAL_DMA_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002bfe:	f7ff fb52 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002c06:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c08:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_SPI_MspInit+0x18c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_SPI_MspInit+0x198>)
 8002c12:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c16:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c1a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c48:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c50:	480e      	ldr	r0, [pc, #56]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c52:	f000 fc7b 	bl	800354c <HAL_DMA_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002c5c:	f7ff fb23 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c64:	649a      	str	r2, [r3, #72]	; 0x48
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_SPI_MspInit+0x194>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c6c:	bf00      	nop
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40013000 	.word	0x40013000
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400
 8002c84:	200007cc 	.word	0x200007cc
 8002c88:	40026440 	.word	0x40026440
 8002c8c:	2000082c 	.word	0x2000082c
 8002c90:	40026488 	.word	0x40026488

08002c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_TIM_Base_MspInit+0xc0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d13e      	bne.n	8002d24 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cc4:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <HAL_TIM_Base_MspInit+0xcc>)
 8002cc6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002cce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002d06:	4815      	ldr	r0, [pc, #84]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002d08:	f000 fc20 	bl	800354c <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002d12:	f7ff fac8 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_TIM_Base_MspInit+0xc8>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d22:	e012      	b.n	8002d4a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_TIM_Base_MspInit+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_TIM_Base_MspInit+0xc4>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	2000091c 	.word	0x2000091c
 8002d60:	40026428 	.word	0x40026428
 8002d64:	40000400 	.word	0x40000400

08002d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <HAL_TIM_MspPostInit+0x68>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d11e      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <HAL_TIM_MspPostInit+0x70>)
 8002dc4:	f001 faf8 	bl	80043b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dc8:	bf00      	nop
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_UART_MspInit+0x154>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f040 8093 	bne.w	8002f26 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4b44      	ldr	r3, [pc, #272]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a43      	ldr	r2, [pc, #268]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_UART_MspInit+0x158>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4838      	ldr	r0, [pc, #224]	; (8002f38 <HAL_UART_MspInit+0x15c>)
 8002e56:	f001 faaf 	bl	80043b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_UART_MspInit+0x164>)
 8002e5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e68:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6e:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e9c:	4827      	ldr	r0, [pc, #156]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002e9e:	f000 fb55 	bl	800354c <HAL_DMA_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002ea8:	f7ff f9fd 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_UART_MspInit+0x160>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002eba:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_UART_MspInit+0x16c>)
 8002ebc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ec0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002ec4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ef2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002efa:	4812      	ldr	r0, [pc, #72]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002efc:	f000 fb26 	bl	800354c <HAL_DMA_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002f06:	f7ff f9ce 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_UART_MspInit+0x168>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2105      	movs	r1, #5
 8002f1a:	2027      	movs	r0, #39	; 0x27
 8002f1c:	f000 faec 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f20:	2027      	movs	r0, #39	; 0x27
 8002f22:	f000 fb05 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3728      	adds	r7, #40	; 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40004800 	.word	0x40004800
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	200009c0 	.word	0x200009c0
 8002f40:	40026028 	.word	0x40026028
 8002f44:	20000a20 	.word	0x20000a20
 8002f48:	40026070 	.word	0x40026070

08002f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6c:	d13f      	bne.n	8002fee <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4815      	ldr	r0, [pc, #84]	; (8002ffc <HAL_PCD_MspInit+0xb0>)
 8002fa8:	f001 fa06 	bl	80043b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480e      	ldr	r0, [pc, #56]	; (8002ffc <HAL_PCD_MspInit+0xb0>)
 8002fc2:	f001 f9f9 	bl	80043b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	6353      	str	r3, [r2, #52]	; 0x34
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_PCD_MspInit+0xac>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000

08003000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08e      	sub	sp, #56	; 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_InitTick+0xe8>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <HAL_InitTick+0xe8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6413      	str	r3, [r2, #64]	; 0x40
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_InitTick+0xe8>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800302c:	f107 0210 	add.w	r2, r7, #16
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 f898 	bl	800616c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003046:	f003 f869 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 800304a:	6378      	str	r0, [r7, #52]	; 0x34
 800304c:	e004      	b.n	8003058 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800304e:	f003 f865 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8003052:	4603      	mov	r3, r0
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_InitTick+0xec>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9b      	lsrs	r3, r3, #18
 8003062:	3b01      	subs	r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_InitTick+0xf0>)
 8003068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800306c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_InitTick+0xf0>)
 8003070:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003074:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <HAL_InitTick+0xf0>)
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_InitTick+0xf0>)
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_InitTick+0xf0>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_InitTick+0xf0>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800308e:	4818      	ldr	r0, [pc, #96]	; (80030f0 <HAL_InitTick+0xf0>)
 8003090:	f003 fcde 	bl	8006a50 <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800309a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11b      	bne.n	80030da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80030a2:	4813      	ldr	r0, [pc, #76]	; (80030f0 <HAL_InitTick+0xf0>)
 80030a4:	f003 fd8c 	bl	8006bc0 <HAL_TIM_Base_Start_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80030ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d111      	bne.n	80030da <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b6:	201c      	movs	r0, #28
 80030b8:	f000 fa3a 	bl	8003530 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d808      	bhi.n	80030d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80030c2:	2200      	movs	r2, #0
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	201c      	movs	r0, #28
 80030c8:	f000 fa16 	bl	80034f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_InitTick+0xf4>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e002      	b.n	80030da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3738      	adds	r7, #56	; 0x38
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	20003454 	.word	0x20003454
 80030f4:	2000008c 	.word	0x2000008c

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <NMI_Handler+0x4>

080030fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <HardFault_Handler+0x4>

08003104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <MemManage_Handler+0x4>

0800310a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <BusFault_Handler+0x4>

08003110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <UsageFault_Handler+0x4>

08003116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream1_IRQHandler+0x10>)
 800312a:	f000 fba7 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200009c0 	.word	0x200009c0

08003138 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream3_IRQHandler+0x10>)
 800313e:	f000 fb9d 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200006b4 	.word	0x200006b4

0800314c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream4_IRQHandler+0x10>)
 8003152:	f000 fb93 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000a20 	.word	0x20000a20

08003160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM2_IRQHandler+0x10>)
 8003166:	f003 febd 	bl	8006ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20003454 	.word	0x20003454

08003174 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <USART3_IRQHandler+0x10>)
 800317a:	f004 fe5b 	bl	8007e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000097c 	.word	0x2000097c

08003188 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Stream7_IRQHandler+0x10>)
 800318e:	f000 fb75 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000714 	.word	0x20000714

0800319c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <DMA2_Stream1_IRQHandler+0x10>)
 80031a2:	f000 fb6b 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000091c 	.word	0x2000091c

080031b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <DMA2_Stream2_IRQHandler+0x10>)
 80031b6:	f000 fb61 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200007cc 	.word	0x200007cc

080031c4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA2_Stream5_IRQHandler+0x10>)
 80031ca:	f000 fb57 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000082c 	.word	0x2000082c

080031d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <_sbrk+0x5c>)
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <_sbrk+0x60>)
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <_sbrk+0x64>)
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <_sbrk+0x68>)
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <_sbrk+0x64>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d207      	bcs.n	8003218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003208:	f00b fd58 	bl	800ecbc <__errno>
 800320c:	4603      	mov	r3, r0
 800320e:	220c      	movs	r2, #12
 8003210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e009      	b.n	800322c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <_sbrk+0x64>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <_sbrk+0x64>)
 8003228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20030000 	.word	0x20030000
 8003238:	00000400 	.word	0x00000400
 800323c:	200034a0 	.word	0x200034a0
 8003240:	20007288 	.word	0x20007288

08003244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <SystemInit+0x20>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <SystemInit+0x20>)
 8003250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800326c:	480d      	ldr	r0, [pc, #52]	; (80032a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326e:	490e      	ldr	r1, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003270:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003284:	4c0b      	ldr	r4, [pc, #44]	; (80032b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003292:	f7ff ffd7 	bl	8003244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003296:	f00b fd17 	bl	800ecc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329a:	f7fe f8e5 	bl	8001468 <main>
  bx  lr    
 800329e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80032a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80032ac:	0800f9a4 	.word	0x0800f9a4
  ldr r2, =_sbss
 80032b0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80032b4:	20007288 	.word	0x20007288

080032b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC_IRQHandler>
	...

080032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_Init+0x40>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_Init+0x40>)
 80032c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_Init+0x40>)
 80032d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_Init+0x40>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e4:	2003      	movs	r0, #3
 80032e6:	f000 f8fc 	bl	80034e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ea:	200f      	movs	r0, #15
 80032ec:	f7ff fe88 	bl	8003000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fa64 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000090 	.word	0x20000090
 8003324:	200034a4 	.word	0x200034a4

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	200034a4 	.word	0x200034a4

08003340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff ffee 	bl	8003328 <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d005      	beq.n	8003366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_Delay+0x44>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003366:	bf00      	nop
 8003368:	f7ff ffde 	bl	8003328 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8f7      	bhi.n	8003368 <HAL_Delay+0x28>
  {
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000090 	.word	0x20000090

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4907      	ldr	r1, [pc, #28]	; (8003424 <__NVIC_EnableIRQ+0x38>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db0a      	blt.n	8003452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	490c      	ldr	r1, [pc, #48]	; (8003474 <__NVIC_SetPriority+0x4c>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	440b      	add	r3, r1
 800344c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003450:	e00a      	b.n	8003468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4908      	ldr	r1, [pc, #32]	; (8003478 <__NVIC_SetPriority+0x50>)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3b04      	subs	r3, #4
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	440b      	add	r3, r1
 8003466:	761a      	strb	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f1c3 0307 	rsb	r3, r3, #7
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf28      	it	cs
 800349a:	2304      	movcs	r3, #4
 800349c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d902      	bls.n	80034ac <NVIC_EncodePriority+0x30>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3b03      	subs	r3, #3
 80034aa:	e000      	b.n	80034ae <NVIC_EncodePriority+0x32>
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	401a      	ands	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c4:	f04f 31ff 	mov.w	r1, #4294967295
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43d9      	mvns	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	4313      	orrs	r3, r2
         );
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff4c 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350a:	f7ff ff61 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 800350e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	6978      	ldr	r0, [r7, #20]
 8003516:	f7ff ffb1 	bl	800347c <NVIC_EncodePriority>
 800351a:	4602      	mov	r2, r0
 800351c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff80 	bl	8003428 <__NVIC_SetPriority>
}
 8003528:	bf00      	nop
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff54 	bl	80033ec <__NVIC_EnableIRQ>
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003558:	f7ff fee6 	bl	8003328 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e099      	b.n	800369c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003588:	e00f      	b.n	80035aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358a:	f7ff fecd 	bl	8003328 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b05      	cmp	r3, #5
 8003596:	d908      	bls.n	80035aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2203      	movs	r2, #3
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e078      	b.n	800369c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e8      	bne.n	800358a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <HAL_DMA_Init+0x158>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b04      	cmp	r3, #4
 8003602:	d107      	bne.n	8003614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4313      	orrs	r3, r2
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0307 	bic.w	r3, r3, #7
 800362a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b04      	cmp	r3, #4
 800363c:	d117      	bne.n	800366e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb0d 	bl	8003c70 <DMA_CheckFifoParam>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800366a:	2301      	movs	r3, #1
 800366c:	e016      	b.n	800369c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fac4 	bl	8003c04 <DMA_CalcBaseAndBitshift>
 800367c:	4603      	mov	r3, r0
 800367e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	223f      	movs	r2, #63	; 0x3f
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	f010803f 	.word	0xf010803f

080036a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_DMA_Start_IT+0x26>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e040      	b.n	8003750 <HAL_DMA_Start_IT+0xa8>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d12f      	bne.n	8003742 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa56 	bl	8003ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	409a      	lsls	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0216 	orr.w	r2, r2, #22
 8003716:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e005      	b.n	800374e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003766:	f7ff fddf 	bl	8003328 <HAL_GetTick>
 800376a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d008      	beq.n	800378a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e052      	b.n	8003830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_Abort+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	e013      	b.n	8003804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037dc:	f7ff fda4 	bl	8003328 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d90c      	bls.n	8003804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2203      	movs	r2, #3
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e015      	b.n	8003830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e4      	bne.n	80037dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00c      	b.n	8003870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2205      	movs	r2, #5
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003888:	4b8e      	ldr	r3, [pc, #568]	; (8003ac4 <HAL_DMA_IRQHandler+0x248>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a8e      	ldr	r2, [pc, #568]	; (8003ac8 <HAL_DMA_IRQHandler+0x24c>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2208      	movs	r2, #8
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01a      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2208      	movs	r2, #8
 80038d6:	409a      	lsls	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	2201      	movs	r2, #1
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	2201      	movs	r2, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f043 0202 	orr.w	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	2204      	movs	r2, #4
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	2204      	movs	r2, #4
 8003942:	409a      	lsls	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	2210      	movs	r2, #16
 800395a:	409a      	lsls	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d043      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2210      	movs	r2, #16
 8003978:	409a      	lsls	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d024      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	e01f      	b.n	80039ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
 80039bc:	e016      	b.n	80039ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	2220      	movs	r2, #32
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808f 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8087 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2220      	movs	r2, #32
 8003a14:	409a      	lsls	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d136      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0216 	bic.w	r2, r2, #22
 8003a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x1da>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0208 	bic.w	r2, r2, #8
 8003a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	223f      	movs	r2, #63	; 0x3f
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d07e      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
        }
        return;
 8003a92:	e079      	b.n	8003b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01d      	beq.n	8003ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e02c      	b.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
 8003ac2:	bf00      	nop
 8003ac4:	20000088 	.word	0x20000088
 8003ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e01e      	b.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0210 	bic.w	r2, r2, #16
 8003afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d032      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2205      	movs	r2, #5
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d307      	bcc.n	8003b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f2      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x2cc>
 8003b62:	e000      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b88:	bf00      	nop
    }
  }
}
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d108      	bne.n	8003be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003be6:	e007      	b.n	8003bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3b10      	subs	r3, #16
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <DMA_CalcBaseAndBitshift+0x64>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <DMA_CalcBaseAndBitshift+0x68>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d909      	bls.n	8003c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	1d1a      	adds	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58
 8003c44:	e007      	b.n	8003c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	aaaaaaab 	.word	0xaaaaaaab
 8003c6c:	0800f878 	.word	0x0800f878

08003c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11f      	bne.n	8003cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d856      	bhi.n	8003d3e <DMA_CheckFifoParam+0xce>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <DMA_CheckFifoParam+0x28>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cbb 	.word	0x08003cbb
 8003ca0:	08003ca9 	.word	0x08003ca9
 8003ca4:	08003d3f 	.word	0x08003d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d046      	beq.n	8003d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb8:	e043      	b.n	8003d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc2:	d140      	bne.n	8003d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e03d      	b.n	8003d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	d121      	bne.n	8003d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d837      	bhi.n	8003d4a <DMA_CheckFifoParam+0xda>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x70>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003cf7 	.word	0x08003cf7
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d09 	.word	0x08003d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf4:	e030      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d025      	beq.n	8003d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d06:	e022      	b.n	8003d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d10:	d11f      	bne.n	8003d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d16:	e01c      	b.n	8003d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d903      	bls.n	8003d26 <DMA_CheckFifoParam+0xb6>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d003      	beq.n	8003d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d24:	e018      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2a:	e015      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e00b      	b.n	8003d56 <DMA_CheckFifoParam+0xe6>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e00a      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e008      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e006      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e004      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
    }
  } 
  
  return status; 
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop

08003d68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06c      	b.n	8003e54 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2223      	movs	r2, #35	; 0x23
 8003d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fe fd41 	bl	8002814 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_ETH_Init+0xf4>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a30      	ldr	r2, [pc, #192]	; (8003e5c <HAL_ETH_Init+0xf4>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_ETH_Init+0xf4>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <HAL_ETH_Init+0xf8>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <HAL_ETH_Init+0xf8>)
 8003db4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003db8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_ETH_Init+0xf8>)
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4927      	ldr	r1, [pc, #156]	; (8003e60 <HAL_ETH_Init+0xf8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_ETH_Init+0xf8>)
 8003dca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003de2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de4:	f7ff faa0 	bl	8003328 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dea:	e011      	b.n	8003e10 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dec:	f7ff fa9c 	bl	8003328 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dfa:	d909      	bls.n	8003e10 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	22e0      	movs	r2, #224	; 0xe0
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e021      	b.n	8003e54 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f958 	bl	80040d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f9ff 	bl	800422c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa55 	bl	80042de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f9bd 	bl	80041bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40013800 	.word	0x40013800

08003e64 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <ETH_SetMACConfig+0x15c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7c1b      	ldrb	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <ETH_SetMACConfig+0x28>
 8003e86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e8a:	e000      	b.n	8003e8e <ETH_SetMACConfig+0x2a>
 8003e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	7c5b      	ldrb	r3, [r3, #17]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <ETH_SetMACConfig+0x38>
 8003e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e9a:	e000      	b.n	8003e9e <ETH_SetMACConfig+0x3a>
 8003e9c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ea4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7fdb      	ldrb	r3, [r3, #31]
 8003eaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003eac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003eb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	7f92      	ldrb	r2, [r2, #30]
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	d102      	bne.n	8003ec2 <ETH_SetMACConfig+0x5e>
 8003ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ec0:	e000      	b.n	8003ec4 <ETH_SetMACConfig+0x60>
 8003ec2:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	7f1b      	ldrb	r3, [r3, #28]
 8003eca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ecc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	d102      	bne.n	8003eec <ETH_SetMACConfig+0x88>
 8003ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eea:	e000      	b.n	8003eee <ETH_SetMACConfig+0x8a>
 8003eec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	7bdb      	ldrb	r3, [r3, #15]
 8003ef4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ef6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003efc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f06:	4313      	orrs	r3, r2
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7ff fa0e 	bl	8003340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d101      	bne.n	8003f52 <ETH_SetMACConfig+0xee>
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	e000      	b.n	8003f54 <ETH_SetMACConfig+0xf0>
 8003f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003f62:	2a01      	cmp	r2, #1
 8003f64:	d101      	bne.n	8003f6a <ETH_SetMACConfig+0x106>
 8003f66:	2208      	movs	r2, #8
 8003f68:	e000      	b.n	8003f6c <ETH_SetMACConfig+0x108>
 8003f6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003f74:	2a01      	cmp	r2, #1
 8003f76:	d101      	bne.n	8003f7c <ETH_SetMACConfig+0x118>
 8003f78:	2204      	movs	r2, #4
 8003f7a:	e000      	b.n	8003f7e <ETH_SetMACConfig+0x11a>
 8003f7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003f86:	2a01      	cmp	r2, #1
 8003f88:	d101      	bne.n	8003f8e <ETH_SetMACConfig+0x12a>
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	e000      	b.n	8003f90 <ETH_SetMACConfig+0x12c>
 8003f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f90:	4313      	orrs	r3, r2
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f7ff f9c9 	bl	8003340 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	ff20810f 	.word	0xff20810f

08003fc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <ETH_SetDMAConfig+0x110>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	7b1b      	ldrb	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <ETH_SetDMAConfig+0x2c>
 8003fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fee:	e000      	b.n	8003ff2 <ETH_SetDMAConfig+0x2e>
 8003ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	7b5b      	ldrb	r3, [r3, #13]
 8003ff6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	7f52      	ldrb	r2, [r2, #29]
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	d102      	bne.n	8004008 <ETH_SetDMAConfig+0x44>
 8004002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004006:	e000      	b.n	800400a <ETH_SetDMAConfig+0x46>
 8004008:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800400a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	7b9b      	ldrb	r3, [r3, #14]
 8004010:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004012:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004018:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	7f1b      	ldrb	r3, [r3, #28]
 800401e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004020:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7f9b      	ldrb	r3, [r3, #30]
 8004026:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004028:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800402e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004036:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004038:	4313      	orrs	r3, r2
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004048:	461a      	mov	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800405a:	2001      	movs	r0, #1
 800405c:	f7ff f970 	bl	8003340 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004068:	461a      	mov	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	791b      	ldrb	r3, [r3, #4]
 8004072:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004078:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800407e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004084:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800408c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800408e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004096:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800409c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7ff f941 	bl	8003340 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f8de3f23 	.word	0xf8de3f23

080040d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0a6      	sub	sp, #152	; 0x98
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80040ec:	2300      	movs	r3, #0
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004114:	2300      	movs	r3, #0
 8004116:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800411e:	2300      	movs	r3, #0
 8004120:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800413a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004144:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800414c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe86 	bl	8003e64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004158:	2301      	movs	r3, #1
 800415a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800415c:	2301      	movs	r3, #1
 800415e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004166:	2301      	movs	r3, #1
 8004168:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800417a:	2300      	movs	r3, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004184:	2301      	movs	r3, #1
 8004186:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800418c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800418e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004192:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004198:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041a8:	f107 0308 	add.w	r3, r7, #8
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff08 	bl	8003fc4 <ETH_SetDMAConfig>
}
 80041b4:	bf00      	nop
 80041b6:	3798      	adds	r7, #152	; 0x98
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3305      	adds	r3, #5
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	3204      	adds	r2, #4
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <ETH_MACAddressConfig+0x68>)
 80041de:	4413      	add	r3, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3303      	adds	r3, #3
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	061a      	lsls	r2, r3, #24
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3302      	adds	r3, #2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	4313      	orrs	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <ETH_MACAddressConfig+0x6c>)
 800420e:	4413      	add	r3, r2
 8004210:	461a      	mov	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40028040 	.word	0x40028040
 8004228:	40028044 	.word	0x40028044

0800422c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e03e      	b.n	80042b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68d9      	ldr	r1, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	440b      	add	r3, r1
 800424a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	3206      	adds	r2, #6
 800426c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d80c      	bhi.n	800429c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68d9      	ldr	r1, [r3, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e004      	b.n	80042a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	461a      	mov	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d9bd      	bls.n	800423a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	611a      	str	r2, [r3, #16]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e046      	b.n	800437a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6919      	ldr	r1, [r3, #16]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004328:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004330:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	3212      	adds	r2, #18
 8004346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d80c      	bhi.n	800436a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6919      	ldr	r1, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60da      	str	r2, [r3, #12]
 8004368:	e004      	b.n	8004374 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d9b5      	bls.n	80042ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	60da      	str	r2, [r3, #12]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	e177      	b.n	80046c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043d4:	2201      	movs	r2, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	f040 8166 	bne.w	80046be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d005      	beq.n	800440a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004406:	2b02      	cmp	r3, #2
 8004408:	d130      	bne.n	800446c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	2203      	movs	r2, #3
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004440:	2201      	movs	r2, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 0201 	and.w	r2, r3, #1
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b03      	cmp	r3, #3
 8004476:	d017      	beq.n	80044a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	2203      	movs	r2, #3
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d123      	bne.n	80044fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	08da      	lsrs	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3208      	adds	r2, #8
 80044bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	220f      	movs	r2, #15
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	2203      	movs	r2, #3
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0203 	and.w	r2, r3, #3
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80c0 	beq.w	80046be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_GPIO_Init+0x324>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	4a65      	ldr	r2, [pc, #404]	; (80046dc <HAL_GPIO_Init+0x324>)
 8004548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800454c:	6453      	str	r3, [r2, #68]	; 0x44
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_GPIO_Init+0x324>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800455a:	4a61      	ldr	r2, [pc, #388]	; (80046e0 <HAL_GPIO_Init+0x328>)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	3302      	adds	r3, #2
 8004562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	220f      	movs	r2, #15
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_GPIO_Init+0x32c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d037      	beq.n	80045f6 <HAL_GPIO_Init+0x23e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a57      	ldr	r2, [pc, #348]	; (80046e8 <HAL_GPIO_Init+0x330>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d031      	beq.n	80045f2 <HAL_GPIO_Init+0x23a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a56      	ldr	r2, [pc, #344]	; (80046ec <HAL_GPIO_Init+0x334>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02b      	beq.n	80045ee <HAL_GPIO_Init+0x236>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a55      	ldr	r2, [pc, #340]	; (80046f0 <HAL_GPIO_Init+0x338>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d025      	beq.n	80045ea <HAL_GPIO_Init+0x232>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_GPIO_Init+0x33c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01f      	beq.n	80045e6 <HAL_GPIO_Init+0x22e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a53      	ldr	r2, [pc, #332]	; (80046f8 <HAL_GPIO_Init+0x340>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d019      	beq.n	80045e2 <HAL_GPIO_Init+0x22a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_GPIO_Init+0x344>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_GPIO_Init+0x226>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a51      	ldr	r2, [pc, #324]	; (8004700 <HAL_GPIO_Init+0x348>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00d      	beq.n	80045da <HAL_GPIO_Init+0x222>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a50      	ldr	r2, [pc, #320]	; (8004704 <HAL_GPIO_Init+0x34c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <HAL_GPIO_Init+0x21e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4f      	ldr	r2, [pc, #316]	; (8004708 <HAL_GPIO_Init+0x350>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_GPIO_Init+0x21a>
 80045ce:	2309      	movs	r3, #9
 80045d0:	e012      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045d2:	230a      	movs	r3, #10
 80045d4:	e010      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045d6:	2308      	movs	r3, #8
 80045d8:	e00e      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045da:	2307      	movs	r3, #7
 80045dc:	e00c      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045de:	2306      	movs	r3, #6
 80045e0:	e00a      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045e2:	2305      	movs	r3, #5
 80045e4:	e008      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045e6:	2304      	movs	r3, #4
 80045e8:	e006      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045ea:	2303      	movs	r3, #3
 80045ec:	e004      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e002      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_GPIO_Init+0x240>
 80045f6:	2300      	movs	r3, #0
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	f002 0203 	and.w	r2, r2, #3
 80045fe:	0092      	lsls	r2, r2, #2
 8004600:	4093      	lsls	r3, r2
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004608:	4935      	ldr	r1, [pc, #212]	; (80046e0 <HAL_GPIO_Init+0x328>)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	3302      	adds	r3, #2
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_GPIO_Init+0x354>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800463a:	4a34      	ldr	r2, [pc, #208]	; (800470c <HAL_GPIO_Init+0x354>)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004640:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_GPIO_Init+0x354>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004664:	4a29      	ldr	r2, [pc, #164]	; (800470c <HAL_GPIO_Init+0x354>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_GPIO_Init+0x354>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800468e:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_GPIO_Init+0x354>)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_GPIO_Init+0x354>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046b8:	4a14      	ldr	r2, [pc, #80]	; (800470c <HAL_GPIO_Init+0x354>)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b0f      	cmp	r3, #15
 80046c8:	f67f ae84 	bls.w	80043d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40013800 	.word	0x40013800
 80046e4:	40020000 	.word	0x40020000
 80046e8:	40020400 	.word	0x40020400
 80046ec:	40020800 	.word	0x40020800
 80046f0:	40020c00 	.word	0x40020c00
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40021400 	.word	0x40021400
 80046fc:	40021800 	.word	0x40021800
 8004700:	40021c00 	.word	0x40021c00
 8004704:	40022000 	.word	0x40022000
 8004708:	40022400 	.word	0x40022400
 800470c:	40013c00 	.word	0x40013c00

08004710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
 800472c:	e001      	b.n	8004732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	807b      	strh	r3, [r7, #2]
 800474c:	4613      	mov	r3, r2
 800474e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004750:	787b      	ldrb	r3, [r7, #1]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004756:	887a      	ldrh	r2, [r7, #2]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800475c:	e003      	b.n	8004766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800475e:	887b      	ldrh	r3, [r7, #2]
 8004760:	041a      	lsls	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	619a      	str	r2, [r3, #24]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004784:	887a      	ldrh	r2, [r7, #2]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4013      	ands	r3, r2
 800478a:	041a      	lsls	r2, r3, #16
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43d9      	mvns	r1, r3
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	400b      	ands	r3, r1
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e12b      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe f8e6 	bl	80029a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800480c:	f001 fc86 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8004810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4a81      	ldr	r2, [pc, #516]	; (8004a1c <HAL_I2C_Init+0x274>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d807      	bhi.n	800482c <HAL_I2C_Init+0x84>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a80      	ldr	r2, [pc, #512]	; (8004a20 <HAL_I2C_Init+0x278>)
 8004820:	4293      	cmp	r3, r2
 8004822:	bf94      	ite	ls
 8004824:	2301      	movls	r3, #1
 8004826:	2300      	movhi	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e006      	b.n	800483a <HAL_I2C_Init+0x92>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a7d      	ldr	r2, [pc, #500]	; (8004a24 <HAL_I2C_Init+0x27c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	bf94      	ite	ls
 8004834:	2301      	movls	r3, #1
 8004836:	2300      	movhi	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0e7      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a78      	ldr	r2, [pc, #480]	; (8004a28 <HAL_I2C_Init+0x280>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9b      	lsrs	r3, r3, #18
 800484c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_I2C_Init+0x274>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <HAL_I2C_Init+0xd4>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3301      	adds	r3, #1
 800487a:	e009      	b.n	8004890 <HAL_I2C_Init+0xe8>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	4a69      	ldr	r2, [pc, #420]	; (8004a2c <HAL_I2C_Init+0x284>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	3301      	adds	r3, #1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	430b      	orrs	r3, r1
 8004896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	495c      	ldr	r1, [pc, #368]	; (8004a1c <HAL_I2C_Init+0x274>)
 80048ac:	428b      	cmp	r3, r1
 80048ae:	d819      	bhi.n	80048e4 <HAL_I2C_Init+0x13c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e59      	subs	r1, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048c4:	400b      	ands	r3, r1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_I2C_Init+0x138>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e59      	subs	r1, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048de:	e051      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e0:	2304      	movs	r3, #4
 80048e2:	e04f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <HAL_I2C_Init+0x168>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1e58      	subs	r0, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e012      	b.n	8004936 <HAL_I2C_Init+0x18e>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	0099      	lsls	r1, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Init+0x196>
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <HAL_I2C_Init+0x1bc>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e58      	subs	r0, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	440b      	add	r3, r1
 8004954:	fbb0 f3f3 	udiv	r3, r0, r3
 8004958:	3301      	adds	r3, #1
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	e00f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e58      	subs	r0, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	0099      	lsls	r1, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	6809      	ldr	r1, [r1, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6911      	ldr	r1, [r2, #16]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68d2      	ldr	r2, [r2, #12]
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	000186a0 	.word	0x000186a0
 8004a20:	001e847f 	.word	0x001e847f
 8004a24:	003d08ff 	.word	0x003d08ff
 8004a28:	431bde83 	.word	0x431bde83
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	; 0x30
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	4608      	mov	r0, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	817b      	strh	r3, [r7, #10]
 8004a42:	460b      	mov	r3, r1
 8004a44:	813b      	strh	r3, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a4a:	f7fe fc6d 	bl	8003328 <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	f040 8176 	bne.w	8004d4e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a62:	4b95      	ldr	r3, [pc, #596]	; (8004cb8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	4a94      	ldr	r2, [pc, #592]	; (8004cbc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0a1a      	lsrs	r2, r3, #8
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e14c      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d0db      	beq.n	8004a7c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e13e      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d007      	beq.n	8004af8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2222      	movs	r2, #34	; 0x22
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004b3a:	897a      	ldrh	r2, [r7, #10]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004b40:	893a      	ldrh	r2, [r7, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80cc 	beq.w	8004cf4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02d      	beq.n	8004bc0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	4a56      	ldr	r2, [pc, #344]	; (8004cc4 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	4a55      	ldr	r2, [pc, #340]	; (8004cc8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	2200      	movs	r2, #0
 8004b8a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2200      	movs	r2, #0
 8004b92:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	f7fe fd7d 	bl	80036a8 <HAL_DMA_Start_IT>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 8087 	bne.w	8004ccc <HAL_I2C_Mem_Read_DMA+0x29c>
 8004bbe:	e013      	b.n	8004be8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0b3      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004be8:	88f8      	ldrh	r0, [r7, #6]
 8004bea:	893a      	ldrh	r2, [r7, #8]
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	2323      	movs	r3, #35	; 0x23
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8df 	bl	8004dbc <I2C_RequestMemoryRead>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d023      	beq.n	8004c4c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fe15 	bl	8003838 <HAL_DMA_Abort_IT>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2200      	movs	r2, #0
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e081      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e007      	b.n	8004c76 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e049      	b.n	8004d4a <HAL_I2C_Mem_Read_DMA+0x31a>
 8004cb6:	bf00      	nop
 8004cb8:	20000088 	.word	0x20000088
 8004cbc:	14f8b589 	.word	0x14f8b589
 8004cc0:	ffff0000 	.word	0xffff0000
 8004cc4:	08004f8d 	.word	0x08004f8d
 8004cc8:	08005137 	.word	0x08005137
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f043 0210 	orr.w	r2, r3, #16
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e02d      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004cf4:	88f8      	ldrh	r0, [r7, #6]
 8004cf6:	893a      	ldrh	r2, [r7, #8]
 8004cf8:	8979      	ldrh	r1, [r7, #10]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	2323      	movs	r3, #35	; 0x23
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4603      	mov	r3, r0
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f859 	bl	8004dbc <I2C_RequestMemoryRead>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e01d      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3728      	adds	r7, #40	; 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f9d4 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1c:	d103      	bne.n	8004e26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0aa      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	4952      	ldr	r1, [pc, #328]	; (8004f88 <I2C_RequestMemoryRead+0x1cc>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fa0c 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e097      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	6a39      	ldr	r1, [r7, #32]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fa76 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d107      	bne.n	8004e8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e076      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d105      	bne.n	8004ea4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e021      	b.n	8004ee8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ea4:	893b      	ldrh	r3, [r7, #8]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	6a39      	ldr	r1, [r7, #32]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa50 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d107      	bne.n	8004eda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e050      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	6a39      	ldr	r1, [r7, #32]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa35 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d107      	bne.n	8004f10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e035      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f93d 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e013      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	6a3a      	ldr	r2, [r7, #32]
 8004f6c:	4906      	ldr	r1, [pc, #24]	; (8004f88 <I2C_RequestMemoryRead+0x1cc>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f975 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	00010002 	.word	0x00010002

08004f8c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004fe6:	2b21      	cmp	r3, #33	; 0x21
 8004fe8:	d007      	beq.n	8004ffa <I2C_DMAXferCplt+0x6e>
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004ff0:	2b22      	cmp	r3, #34	; 0x22
 8004ff2:	d131      	bne.n	8005058 <I2C_DMAXferCplt+0xcc>
 8004ff4:	7cbb      	ldrb	r3, [r7, #18]
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d12e      	bne.n	8005058 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005008:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2200      	movs	r2, #0
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	2b29      	cmp	r3, #41	; 0x29
 8005014:	d10a      	bne.n	800502c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2221      	movs	r2, #33	; 0x21
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2228      	movs	r2, #40	; 0x28
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005024:	6978      	ldr	r0, [r7, #20]
 8005026:	f7ff fea1 	bl	8004d6c <HAL_I2C_SlaveTxCpltCallback>
 800502a:	e00c      	b.n	8005046 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b2a      	cmp	r3, #42	; 0x2a
 8005030:	d109      	bne.n	8005046 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2222      	movs	r2, #34	; 0x22
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2228      	movs	r2, #40	; 0x28
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7ff fe9d 	bl	8004d80 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005054:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005056:	e06a      	b.n	800512e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d064      	beq.n	800512e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800508c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005094:	d009      	beq.n	80050aa <I2C_DMAXferCplt+0x11e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d006      	beq.n	80050aa <I2C_DMAXferCplt+0x11e>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050a2:	d002      	beq.n	80050aa <I2C_DMAXferCplt+0x11e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d107      	bne.n	80050ba <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050c8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2200      	movs	r2, #0
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f7ff fe5d 	bl	8004da8 <HAL_I2C_ErrorCallback>
}
 80050ee:	e01e      	b.n	800512e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d10a      	bne.n	800511a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff fe3e 	bl	8004d94 <HAL_I2C_MemRxCpltCallback>
}
 8005118:	e009      	b.n	800512e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2212      	movs	r2, #18
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005128:	6978      	ldr	r0, [r7, #20]
 800512a:	f7ff fe15 	bl	8004d58 <HAL_I2C_MasterRxCpltCallback>
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	2200      	movs	r2, #0
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	2200      	movs	r2, #0
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fe fd13 	bl	8003b90 <HAL_DMA_GetError>
 800516a:	4603      	mov	r3, r0
 800516c:	2b02      	cmp	r3, #2
 800516e:	d01b      	beq.n	80051a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0210 	orr.w	r2, r3, #16
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fe00 	bl	8004da8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	e025      	b.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d021      	beq.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fe f8ad 	bl	8003328 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e023      	b.n	8005256 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10d      	bne.n	8005234 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	e00c      	b.n	800524e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	43da      	mvns	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d0b6      	beq.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800526c:	e051      	b.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d123      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005296:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e046      	b.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d021      	beq.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fe f82b 	bl	8003328 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d116      	bne.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e020      	b.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10c      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	43da      	mvns	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e00b      	b.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	43da      	mvns	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d18d      	bne.n	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005368:	e02d      	b.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f837 	bl	80053de <I2C_IsAcknowledgeFailed>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e02d      	b.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d021      	beq.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fd ffd1 	bl	8003328 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e007      	b.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d1ca      	bne.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d11b      	bne.n	800542e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0204 	orr.w	r2, r3, #4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b20      	cmp	r3, #32
 8005450:	d129      	bne.n	80054a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2224      	movs	r2, #36	; 0x24
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0210 	bic.w	r2, r2, #16
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d12a      	bne.n	8005524 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2224      	movs	r2, #36	; 0x24
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	f023 030f 	bic.w	r3, r3, #15
 80054f4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	89fb      	ldrh	r3, [r7, #14]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	89fa      	ldrh	r2, [r7, #14]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005534:	b08f      	sub	sp, #60	; 0x3c
 8005536:	af0a      	add	r7, sp, #40	; 0x28
 8005538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e10f      	b.n	8005764 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd fcf4 	bl	8002f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2203      	movs	r2, #3
 8005568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f003 fd97 	bl	80090b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	687e      	ldr	r6, [r7, #4]
 8005590:	466d      	mov	r5, sp
 8005592:	f106 0410 	add.w	r4, r6, #16
 8005596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800559c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80055a6:	1d33      	adds	r3, r6, #4
 80055a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055aa:	6838      	ldr	r0, [r7, #0]
 80055ac:	f003 fd22 	bl	8008ff4 <USB_CoreInit>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0d0      	b.n	8005764 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f003 fd85 	bl	80090d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	e04a      	b.n	800566a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	333d      	adds	r3, #61	; 0x3d
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	333c      	adds	r3, #60	; 0x3c
 80055f8:	7bfa      	ldrb	r2, [r7, #15]
 80055fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055fc:	7bfa      	ldrb	r2, [r7, #15]
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	b298      	uxth	r0, r3
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	3344      	adds	r3, #68	; 0x44
 8005610:	4602      	mov	r2, r0
 8005612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3340      	adds	r3, #64	; 0x40
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3348      	adds	r3, #72	; 0x48
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	334c      	adds	r3, #76	; 0x4c
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005650:	7bfa      	ldrb	r2, [r7, #15]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3354      	adds	r3, #84	; 0x54
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	3301      	adds	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3af      	bcc.n	80055d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	e044      	b.n	8005704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005690:	7bfa      	ldrb	r2, [r7, #15]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	3301      	adds	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d3b5      	bcc.n	800567a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	687e      	ldr	r6, [r7, #4]
 8005716:	466d      	mov	r5, sp
 8005718:	f106 0410 	add.w	r4, r6, #16
 800571c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800571e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005728:	e885 0003 	stmia.w	r5, {r0, r1}
 800572c:	1d33      	adds	r3, r6, #4
 800572e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005730:	6838      	ldr	r0, [r7, #0]
 8005732:	f003 fd1d 	bl	8009170 <USB_DevInit>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e00d      	b.n	8005764 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f003 fee8 	bl	8009532 <USB_DevDisconnect>

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800576c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e267      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d075      	beq.n	8005876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800578a:	4b88      	ldr	r3, [pc, #544]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b04      	cmp	r3, #4
 8005794:	d00c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b85      	ldr	r3, [pc, #532]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d112      	bne.n	80057c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a2:	4b82      	ldr	r3, [pc, #520]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ae:	d10b      	bne.n	80057c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	4b7e      	ldr	r3, [pc, #504]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05b      	beq.n	8005874 <HAL_RCC_OscConfig+0x108>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d157      	bne.n	8005874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e242      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x74>
 80057d2:	4b76      	ldr	r3, [pc, #472]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e01d      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x98>
 80057ea:	4b70      	ldr	r3, [pc, #448]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6f      	ldr	r2, [pc, #444]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6c      	ldr	r2, [pc, #432]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 8005804:	4b69      	ldr	r3, [pc, #420]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a68      	ldr	r2, [pc, #416]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b66      	ldr	r3, [pc, #408]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a65      	ldr	r2, [pc, #404]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fd fd80 	bl	8003328 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd fd7c 	bl	8003328 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e207      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0xc0>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fd fd6c 	bl	8003328 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd fd68 	bl	8003328 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1f3      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0xe8>
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d063      	beq.n	800594a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005882:	4b4a      	ldr	r3, [pc, #296]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588e:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005896:	2b08      	cmp	r3, #8
 8005898:	d11c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589a:	4b44      	ldr	r3, [pc, #272]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	4b41      	ldr	r3, [pc, #260]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_RCC_OscConfig+0x152>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e1c7      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058be:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4937      	ldr	r1, [pc, #220]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	e03a      	b.n	800594a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058dc:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCC_OscConfig+0x244>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fd fd21 	bl	8003328 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ea:	f7fd fd1d 	bl	8003328 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e1a8      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0f0      	beq.n	80058ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4925      	ldr	r1, [pc, #148]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]
 800591c:	e015      	b.n	800594a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <HAL_RCC_OscConfig+0x244>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd fd00 	bl	8003328 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592c:	f7fd fcfc 	bl	8003328 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e187      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d036      	beq.n	80059c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800595e:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <HAL_RCC_OscConfig+0x248>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005964:	f7fd fce0 	bl	8003328 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800596c:	f7fd fcdc 	bl	8003328 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e167      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_OscConfig+0x240>)
 8005980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x200>
 800598a:	e01b      	b.n	80059c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_RCC_OscConfig+0x248>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fd fcc9 	bl	8003328 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005998:	e00e      	b.n	80059b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800599a:	f7fd fcc5 	bl	8003328 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d907      	bls.n	80059b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e150      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	42470000 	.word	0x42470000
 80059b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b8:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ea      	bne.n	800599a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8097 	beq.w	8005b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d6:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10f      	bne.n	8005a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	4b7d      	ldr	r3, [pc, #500]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a7c      	ldr	r2, [pc, #496]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6413      	str	r3, [r2, #64]	; 0x40
 80059f2:	4b7a      	ldr	r3, [pc, #488]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a02:	4b77      	ldr	r3, [pc, #476]	; (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d118      	bne.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a0e:	4b74      	ldr	r3, [pc, #464]	; (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a73      	ldr	r2, [pc, #460]	; (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a1a:	f7fd fc85 	bl	8003328 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a22:	f7fd fc81 	bl	8003328 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e10c      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_OscConfig+0x2ea>
 8005a48:	4b64      	ldr	r3, [pc, #400]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	4a63      	ldr	r2, [pc, #396]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6713      	str	r3, [r2, #112]	; 0x70
 8005a54:	e01c      	b.n	8005a90 <HAL_RCC_OscConfig+0x324>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x30c>
 8005a5e:	4b5f      	ldr	r3, [pc, #380]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a5e      	ldr	r2, [pc, #376]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6a:	4b5c      	ldr	r3, [pc, #368]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a5b      	ldr	r2, [pc, #364]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	e00b      	b.n	8005a90 <HAL_RCC_OscConfig+0x324>
 8005a78:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	4a57      	ldr	r2, [pc, #348]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	6713      	str	r3, [r2, #112]	; 0x70
 8005a84:	4b55      	ldr	r3, [pc, #340]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	4a54      	ldr	r2, [pc, #336]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a8a:	f023 0304 	bic.w	r3, r3, #4
 8005a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fd fc46 	bl	8003328 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fd fc42 	bl	8003328 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e0cb      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab6:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ee      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x334>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac4:	f7fd fc30 	bl	8003328 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005acc:	f7fd fc2c 	bl	8003328 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0b5      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ee      	bne.n	8005acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af4:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80a1 	beq.w	8005c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b0a:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d05c      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d141      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1e:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fd fc00 	bl	8003328 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fd fbfc 	bl	8003328 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e087      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	3b01      	subs	r3, #1
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	491b      	ldr	r1, [pc, #108]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7a:	f7fd fbd5 	bl	8003328 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fd fbd1 	bl	8003328 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e05c      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x416>
 8005ba0:	e054      	b.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fd fbbe 	bl	8003328 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fd fbba 	bl	8003328 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e045      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x444>
 8005bce:	e03d      	b.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e038      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCC_OscConfig+0x4ec>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d028      	beq.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d121      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d11a      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d111      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	3b01      	subs	r3, #1
 8005c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800

08005c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0cc      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d90c      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b65      	ldr	r3, [pc, #404]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b63      	ldr	r3, [pc, #396]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d001      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0b8      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d020      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb0:	4b59      	ldr	r3, [pc, #356]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4a58      	ldr	r2, [pc, #352]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc8:	4b53      	ldr	r3, [pc, #332]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a52      	ldr	r2, [pc, #328]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd4:	4b50      	ldr	r3, [pc, #320]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	494d      	ldr	r1, [pc, #308]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d044      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d119      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e07f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d003      	beq.n	8005d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e06f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2a:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e067      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3a:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 0203 	bic.w	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4934      	ldr	r1, [pc, #208]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fd faec 	bl	8003328 <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f7fd fae8 	bl	8003328 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e04f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 020c 	and.w	r2, r3, #12
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1eb      	bne.n	8005d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d20c      	bcs.n	8005da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e032      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4916      	ldr	r1, [pc, #88]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	490e      	ldr	r1, [pc, #56]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005de2:	f000 f889 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	490a      	ldr	r1, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	5ccb      	ldrb	r3, [r1, r3]
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_ClockConfig+0x1c8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fd f8fc 	bl	8003000 <HAL_InitTick>

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40023c00 	.word	0x40023c00
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	0800f860 	.word	0x0800f860
 8005e20:	20000088 	.word	0x20000088
 8005e24:	2000008c 	.word	0x2000008c

08005e28 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08c      	sub	sp, #48	; 0x30
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d129      	bne.n	8005e8e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4a:	4b28      	ldr	r3, [pc, #160]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e60:	2303      	movs	r3, #3
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e6c:	f107 031c 	add.w	r3, r7, #28
 8005e70:	4619      	mov	r1, r3
 8005e72:	481f      	ldr	r0, [pc, #124]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e74:	f7fe faa0 	bl	80043b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005e78:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	4919      	ldr	r1, [pc, #100]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005e8c:	e029      	b.n	8005ee2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	4b16      	ldr	r3, [pc, #88]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005ec0:	f107 031c 	add.w	r3, r7, #28
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	480b      	ldr	r0, [pc, #44]	; (8005ef4 <HAL_RCC_MCOConfig+0xcc>)
 8005ec8:	f7fe fa76 	bl	80043b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	00d9      	lsls	r1, r3, #3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	430b      	orrs	r3, r1
 8005edc:	4903      	ldr	r1, [pc, #12]	; (8005eec <HAL_RCC_MCOConfig+0xc4>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
}
 8005ee2:	bf00      	nop
 8005ee4:	3730      	adds	r7, #48	; 0x30
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40020000 	.word	0x40020000
 8005ef4:	40020800 	.word	0x40020800

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b094      	sub	sp, #80	; 0x50
 8005efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
 8005f04:	2300      	movs	r3, #0
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f08:	2300      	movs	r3, #0
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f10:	4b79      	ldr	r3, [pc, #484]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	f200 80e1 	bhi.w	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x34>
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f2a:	e0db      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b73      	ldr	r3, [pc, #460]	; (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f30:	e0db      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f32:	4b73      	ldr	r3, [pc, #460]	; (8006100 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f36:	e0d8      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f38:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f42:	4b6d      	ldr	r3, [pc, #436]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d063      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	2200      	movs	r2, #0
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	2300      	movs	r3, #0
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
 8005f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4621      	mov	r1, r4
 8005f84:	1a51      	subs	r1, r2, r1
 8005f86:	6139      	str	r1, [r7, #16]
 8005f88:	4629      	mov	r1, r5
 8005f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	018b      	lsls	r3, r1, #6
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	018a      	lsls	r2, r1, #6
 8005faa:	4651      	mov	r1, sl
 8005fac:	ebb2 0801 	subs.w	r8, r2, r1
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fca:	4690      	mov	r8, r2
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	eb18 0303 	adds.w	r3, r8, r3
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	eb49 0303 	adc.w	r3, r9, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fea:	4629      	mov	r1, r5
 8005fec:	024b      	lsls	r3, r1, #9
 8005fee:	4621      	mov	r1, r4
 8005ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	024a      	lsls	r2, r1, #9
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffe:	2200      	movs	r2, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006008:	f7fa f94a 	bl	80002a0 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4613      	mov	r3, r2
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006014:	e058      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006016:	4b38      	ldr	r3, [pc, #224]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2200      	movs	r2, #0
 800601e:	4618      	mov	r0, r3
 8006020:	4611      	mov	r1, r2
 8006022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	0159      	lsls	r1, r3, #5
 800603e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006042:	0150      	lsls	r0, r2, #5
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4641      	mov	r1, r8
 800604a:	ebb2 0a01 	subs.w	sl, r2, r1
 800604e:	4649      	mov	r1, r9
 8006050:	eb63 0b01 	sbc.w	fp, r3, r1
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006068:	ebb2 040a 	subs.w	r4, r2, sl
 800606c:	eb63 050b 	sbc.w	r5, r3, fp
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	00eb      	lsls	r3, r5, #3
 800607a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607e:	00e2      	lsls	r2, r4, #3
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	4643      	mov	r3, r8
 8006086:	18e3      	adds	r3, r4, r3
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	464b      	mov	r3, r9
 800608c:	eb45 0303 	adc.w	r3, r5, r3
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609e:	4629      	mov	r1, r5
 80060a0:	028b      	lsls	r3, r1, #10
 80060a2:	4621      	mov	r1, r4
 80060a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a8:	4621      	mov	r1, r4
 80060aa:	028a      	lsls	r2, r1, #10
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b2:	2200      	movs	r2, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	61fa      	str	r2, [r7, #28]
 80060b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060bc:	f7fa f8f0 	bl	80002a0 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	3301      	adds	r3, #1
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e2:	e002      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3750      	adds	r7, #80	; 0x50
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	007a1200 	.word	0x007a1200

08006104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <HAL_RCC_GetHCLKFreq+0x14>)
 800610a:	681b      	ldr	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20000088 	.word	0x20000088

0800611c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006120:	f7ff fff0 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0a9b      	lsrs	r3, r3, #10
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	0800f870 	.word	0x0800f870

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006148:	f7ff ffdc 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0b5b      	lsrs	r3, r3, #13
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4903      	ldr	r1, [pc, #12]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40023800 	.word	0x40023800
 8006168:	0800f870 	.word	0x0800f870

0800616c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	220f      	movs	r2, #15
 800617a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <HAL_RCC_GetClockConfig+0x5c>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 0203 	and.w	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006188:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <HAL_RCC_GetClockConfig+0x5c>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <HAL_RCC_GetClockConfig+0x5c>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <HAL_RCC_GetClockConfig+0x5c>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_RCC_GetClockConfig+0x60>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 020f 	and.w	r2, r3, #15
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	601a      	str	r2, [r3, #0]
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40023c00 	.word	0x40023c00

080061d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e07b      	b.n	80062da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f2:	d009      	beq.n	8006208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
 80061fa:	e005      	b.n	8006208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc fc68 	bl	8002af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	ea42 0103 	orr.w	r1, r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	f003 0104 	and.w	r1, r3, #4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0210 	and.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b088      	sub	sp, #32
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_SPI_Transmit+0x22>
 8006300:	2302      	movs	r3, #2
 8006302:	e126      	b.n	8006552 <HAL_SPI_Transmit+0x270>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800630c:	f7fd f80c 	bl	8003328 <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006322:	2302      	movs	r3, #2
 8006324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006326:	e10b      	b.n	8006540 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Transmit+0x52>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006338:	e102      	b.n	8006540 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2203      	movs	r2, #3
 800633e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006380:	d10f      	bne.n	80063a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d007      	beq.n	80063c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c8:	d14b      	bne.n	8006462 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Transmit+0xf6>
 80063d2:	8afb      	ldrh	r3, [r7, #22]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d13e      	bne.n	8006456 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063fc:	e02b      	b.n	8006456 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b02      	cmp	r3, #2
 800640a:	d112      	bne.n	8006432 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006430:	e011      	b.n	8006456 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006432:	f7fc ff79 	bl	8003328 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d803      	bhi.n	800644a <HAL_SPI_Transmit+0x168>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d102      	bne.n	8006450 <HAL_SPI_Transmit+0x16e>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006454:	e074      	b.n	8006540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ce      	bne.n	80063fe <HAL_SPI_Transmit+0x11c>
 8006460:	e04c      	b.n	80064fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_SPI_Transmit+0x18e>
 800646a:	8afb      	ldrh	r3, [r7, #22]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d140      	bne.n	80064f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006496:	e02c      	b.n	80064f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d113      	bne.n	80064ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80064cc:	e011      	b.n	80064f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ce:	f7fc ff2b 	bl	8003328 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d803      	bhi.n	80064e6 <HAL_SPI_Transmit+0x204>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_Transmit+0x20a>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064f0:	e026      	b.n	8006540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1cd      	bne.n	8006498 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fa63 	bl	80069cc <SPI_EndRxTxTransaction>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e000      	b.n	8006540 <HAL_SPI_Transmit+0x25e>
  }

error:
 800653e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006550:	7ffb      	ldrb	r3, [r7, #31]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08c      	sub	sp, #48	; 0x30
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006568:	2301      	movs	r3, #1
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x26>
 800657c:	2302      	movs	r3, #2
 800657e:	e18a      	b.n	8006896 <HAL_SPI_TransmitReceive+0x33c>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006588:	f7fc fece 	bl	8003328 <HAL_GetTick>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800659e:	887b      	ldrh	r3, [r7, #2]
 80065a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d00f      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x70>
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b0:	d107      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x68>
 80065ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d003      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065c2:	2302      	movs	r3, #2
 80065c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065c8:	e15b      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x82>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x82>
 80065d6:	887b      	ldrh	r3, [r7, #2]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e2:	e14e      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d003      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2205      	movs	r2, #5
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	887a      	ldrh	r2, [r7, #2]
 8006608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	887a      	ldrh	r2, [r7, #2]
 800660e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	887a      	ldrh	r2, [r7, #2]
 800661a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	887a      	ldrh	r2, [r7, #2]
 8006620:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d007      	beq.n	800664c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006654:	d178      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x10a>
 800665e:	8b7b      	ldrh	r3, [r7, #26]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d166      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006688:	e053      	b.n	8006732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d11b      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x176>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x176>
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d113      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	881a      	ldrh	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	1c9a      	adds	r2, r3, #2
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d119      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x1b8>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d014      	beq.n	8006712 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	b292      	uxth	r2, r2
 80066f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800670e:	2301      	movs	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006712:	f7fc fe09 	bl	8003328 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671e:	429a      	cmp	r2, r3
 8006720:	d807      	bhi.n	8006732 <HAL_SPI_TransmitReceive+0x1d8>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d003      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006730:	e0a7      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1a6      	bne.n	800668a <HAL_SPI_TransmitReceive+0x130>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1a1      	bne.n	800668a <HAL_SPI_TransmitReceive+0x130>
 8006746:	e07c      	b.n	8006842 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_SPI_TransmitReceive+0x1fc>
 8006750:	8b7b      	ldrh	r3, [r7, #26]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d16b      	bne.n	800682e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	7812      	ldrb	r2, [r2, #0]
 8006762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677c:	e057      	b.n	800682e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d11c      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x26c>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_SPI_TransmitReceive+0x26c>
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d114      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d119      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x2ae>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d014      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006804:	2301      	movs	r3, #1
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006808:	f7fc fd8e 	bl	8003328 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006814:	429a      	cmp	r2, r3
 8006816:	d803      	bhi.n	8006820 <HAL_SPI_TransmitReceive+0x2c6>
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d102      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x2cc>
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800682c:	e029      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1a2      	bne.n	800677e <HAL_SPI_TransmitReceive+0x224>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d19d      	bne.n	800677e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f8c0 	bl	80069cc <SPI_EndRxTxTransaction>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800685e:	e010      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	e000      	b.n	8006882 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006896:	4618      	mov	r0, r3
 8006898:	3730      	adds	r7, #48	; 0x30
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ac:	b2db      	uxtb	r3, r3
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068cc:	f7fc fd2c 	bl	8003328 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4413      	add	r3, r2
 80068da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068dc:	f7fc fd24 	bl	8003328 <HAL_GetTick>
 80068e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068e2:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	015b      	lsls	r3, r3, #5
 80068e8:	0d1b      	lsrs	r3, r3, #20
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068f2:	e054      	b.n	800699e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d050      	beq.n	800699e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068fc:	f7fc fd14 	bl	8003328 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	d902      	bls.n	8006912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d13d      	bne.n	800698e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800692a:	d111      	bne.n	8006950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d004      	beq.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693e:	d107      	bne.n	8006950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006958:	d10f      	bne.n	800697a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e017      	b.n	80069be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	3b01      	subs	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4013      	ands	r3, r2
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d19b      	bne.n	80068f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000088 	.word	0x20000088

080069cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <SPI_EndRxTxTransaction+0x7c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <SPI_EndRxTxTransaction+0x80>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	0d5b      	lsrs	r3, r3, #21
 80069e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f6:	d112      	bne.n	8006a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff5a 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e00f      	b.n	8006a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a34:	2b80      	cmp	r3, #128	; 0x80
 8006a36:	d0f2      	beq.n	8006a1e <SPI_EndRxTxTransaction+0x52>
 8006a38:	e000      	b.n	8006a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8006a3a:	bf00      	nop
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000088 	.word	0x20000088
 8006a4c:	165e9f81 	.word	0x165e9f81

08006a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e041      	b.n	8006ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fc f90c 	bl	8002c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fce2 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e046      	b.n	8006b96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <HAL_TIM_Base_Start+0xb4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b22:	d01d      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_TIM_Base_Start+0xb8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start+0xbc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIM_Base_Start+0xc0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <HAL_TIM_Base_Start+0xc4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <HAL_TIM_Base_Start+0xc8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_TIM_Base_Start+0xcc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d111      	bne.n	8006b84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d010      	beq.n	8006b94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	e007      	b.n	8006b94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40010400 	.word	0x40010400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40001800 	.word	0x40001800

08006bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d001      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e04e      	b.n	8006c76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a23      	ldr	r2, [pc, #140]	; (8006c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c02:	d01d      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1e      	ldr	r2, [pc, #120]	; (8006c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1c      	ldr	r2, [pc, #112]	; (8006c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x80>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d111      	bne.n	8006c64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	d010      	beq.n	8006c74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c62:	e007      	b.n	8006c74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40010400 	.word	0x40010400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40001800 	.word	0x40001800

08006ca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e041      	b.n	8006d36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f839 	bl	8006d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f000 fbba 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <HAL_TIM_PWM_Start+0x24>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e022      	b.n	8006dbe <HAL_TIM_PWM_Start+0x6a>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d109      	bne.n	8006d92 <HAL_TIM_PWM_Start+0x3e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	bf14      	ite	ne
 8006d8a:	2301      	movne	r3, #1
 8006d8c:	2300      	moveq	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	e015      	b.n	8006dbe <HAL_TIM_PWM_Start+0x6a>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d109      	bne.n	8006dac <HAL_TIM_PWM_Start+0x58>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e008      	b.n	8006dbe <HAL_TIM_PWM_Start+0x6a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	bf14      	ite	ne
 8006db8:	2301      	movne	r3, #1
 8006dba:	2300      	moveq	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e07c      	b.n	8006ec0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0x82>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd4:	e013      	b.n	8006dfe <HAL_TIM_PWM_Start+0xaa>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start+0x92>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de4:	e00b      	b.n	8006dfe <HAL_TIM_PWM_Start+0xaa>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_PWM_Start+0xa2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df4:	e003      	b.n	8006dfe <HAL_TIM_PWM_Start+0xaa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2201      	movs	r2, #1
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fe10 	bl	8007a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <HAL_TIM_PWM_Start+0x174>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIM_PWM_Start+0xcc>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <HAL_TIM_PWM_Start+0x178>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_PWM_Start+0xd0>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <HAL_TIM_PWM_Start+0xd2>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <HAL_TIM_PWM_Start+0x174>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4c:	d01d      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <HAL_TIM_PWM_Start+0x17c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_TIM_PWM_Start+0x180>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <HAL_TIM_PWM_Start+0x184>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <HAL_TIM_PWM_Start+0x178>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a18      	ldr	r2, [pc, #96]	; (8006edc <HAL_TIM_PWM_Start+0x188>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x136>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <HAL_TIM_PWM_Start+0x18c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b06      	cmp	r3, #6
 8006e9a:	d010      	beq.n	8006ebe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	e007      	b.n	8006ebe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400
 8006ed0:	40000400 	.word	0x40000400
 8006ed4:	40000800 	.word	0x40000800
 8006ed8:	40000c00 	.word	0x40000c00
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40001800 	.word	0x40001800

08006ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d122      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d11b      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0202 	mvn.w	r2, #2
 8006f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa77 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa69 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa7a 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d122      	bne.n	8006f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d11b      	bne.n	8006f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0204 	mvn.w	r2, #4
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa4d 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa3f 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa50 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d122      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0208 	mvn.w	r2, #8
 8006fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa23 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa15 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa26 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d122      	bne.n	800703c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b10      	cmp	r3, #16
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0210 	mvn.w	r2, #16
 800700c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2208      	movs	r2, #8
 8007012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9f9 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9eb 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9fc 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10e      	bne.n	8007068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0201 	mvn.w	r2, #1
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fb f910 	bl	8002288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d10e      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d107      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800708c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fdca 	bl	8007c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d10e      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9c1 	bl	8007442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d107      	bne.n	80070ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0220 	mvn.w	r2, #32
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fd94 	bl	8007c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800710e:	2302      	movs	r3, #2
 8007110:	e0ae      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b0c      	cmp	r3, #12
 800711e:	f200 809f 	bhi.w	8007260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	0800715d 	.word	0x0800715d
 800712c:	08007261 	.word	0x08007261
 8007130:	08007261 	.word	0x08007261
 8007134:	08007261 	.word	0x08007261
 8007138:	0800719d 	.word	0x0800719d
 800713c:	08007261 	.word	0x08007261
 8007140:	08007261 	.word	0x08007261
 8007144:	08007261 	.word	0x08007261
 8007148:	080071df 	.word	0x080071df
 800714c:	08007261 	.word	0x08007261
 8007150:	08007261 	.word	0x08007261
 8007154:	08007261 	.word	0x08007261
 8007158:	0800721f 	.word	0x0800721f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fa18 	bl	8007598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0204 	bic.w	r2, r2, #4
 8007186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6999      	ldr	r1, [r3, #24]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	619a      	str	r2, [r3, #24]
      break;
 800719a:	e064      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fa68 	bl	8007678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6999      	ldr	r1, [r3, #24]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	619a      	str	r2, [r3, #24]
      break;
 80071dc:	e043      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fabd 	bl	8007764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0208 	orr.w	r2, r2, #8
 80071f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0204 	bic.w	r2, r2, #4
 8007208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69d9      	ldr	r1, [r3, #28]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	61da      	str	r2, [r3, #28]
      break;
 800721c:	e023      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fb11 	bl	800784c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69d9      	ldr	r1, [r3, #28]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	021a      	lsls	r2, r3, #8
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	61da      	str	r2, [r3, #28]
      break;
 800725e:	e002      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_TIM_ConfigClockSource+0x1c>
 8007290:	2302      	movs	r3, #2
 8007292:	e0b4      	b.n	80073fe <HAL_TIM_ConfigClockSource+0x186>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072cc:	d03e      	beq.n	800734c <HAL_TIM_ConfigClockSource+0xd4>
 80072ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d2:	f200 8087 	bhi.w	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	f000 8086 	beq.w	80073ea <HAL_TIM_ConfigClockSource+0x172>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e2:	d87f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b70      	cmp	r3, #112	; 0x70
 80072e6:	d01a      	beq.n	800731e <HAL_TIM_ConfigClockSource+0xa6>
 80072e8:	2b70      	cmp	r3, #112	; 0x70
 80072ea:	d87b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b60      	cmp	r3, #96	; 0x60
 80072ee:	d050      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x11a>
 80072f0:	2b60      	cmp	r3, #96	; 0x60
 80072f2:	d877      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b50      	cmp	r3, #80	; 0x50
 80072f6:	d03c      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xfa>
 80072f8:	2b50      	cmp	r3, #80	; 0x50
 80072fa:	d873      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	d058      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	d86f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b30      	cmp	r3, #48	; 0x30
 8007306:	d064      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d86b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d060      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d867      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d05c      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b10      	cmp	r3, #16
 800731a:	d05a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 800731c:	e062      	b.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6899      	ldr	r1, [r3, #8]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f000 fb5d 	bl	80079ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	609a      	str	r2, [r3, #8]
      break;
 800734a:	e04f      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	6899      	ldr	r1, [r3, #8]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f000 fb46 	bl	80079ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800736e:	609a      	str	r2, [r3, #8]
      break;
 8007370:	e03c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 faba 	bl	80078f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2150      	movs	r1, #80	; 0x50
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fb13 	bl	80079b6 <TIM_ITRx_SetConfig>
      break;
 8007390:	e02c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fad9 	bl	8007956 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2160      	movs	r1, #96	; 0x60
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb03 	bl	80079b6 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e01c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fa9a 	bl	80078f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2140      	movs	r1, #64	; 0x40
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 faf3 	bl	80079b6 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e00c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f000 faea 	bl	80079b6 <TIM_ITRx_SetConfig>
      break;
 80073e2:	e003      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e000      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a40      	ldr	r2, [pc, #256]	; (800756c <TIM_Base_SetConfig+0x114>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d00f      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3d      	ldr	r2, [pc, #244]	; (8007570 <TIM_Base_SetConfig+0x118>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a3c      	ldr	r2, [pc, #240]	; (8007574 <TIM_Base_SetConfig+0x11c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <TIM_Base_SetConfig+0x120>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a3a      	ldr	r2, [pc, #232]	; (800757c <TIM_Base_SetConfig+0x124>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2f      	ldr	r2, [pc, #188]	; (800756c <TIM_Base_SetConfig+0x114>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d02b      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d027      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2c      	ldr	r2, [pc, #176]	; (8007570 <TIM_Base_SetConfig+0x118>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d023      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2b      	ldr	r2, [pc, #172]	; (8007574 <TIM_Base_SetConfig+0x11c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01f      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2a      	ldr	r2, [pc, #168]	; (8007578 <TIM_Base_SetConfig+0x120>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01b      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a29      	ldr	r2, [pc, #164]	; (800757c <TIM_Base_SetConfig+0x124>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d017      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a28      	ldr	r2, [pc, #160]	; (8007580 <TIM_Base_SetConfig+0x128>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a27      	ldr	r2, [pc, #156]	; (8007584 <TIM_Base_SetConfig+0x12c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a26      	ldr	r2, [pc, #152]	; (8007588 <TIM_Base_SetConfig+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a25      	ldr	r2, [pc, #148]	; (800758c <TIM_Base_SetConfig+0x134>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a24      	ldr	r2, [pc, #144]	; (8007590 <TIM_Base_SetConfig+0x138>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a23      	ldr	r2, [pc, #140]	; (8007594 <TIM_Base_SetConfig+0x13c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d108      	bne.n	800751c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a0a      	ldr	r2, [pc, #40]	; (800756c <TIM_Base_SetConfig+0x114>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a0c      	ldr	r2, [pc, #48]	; (800757c <TIM_Base_SetConfig+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d103      	bne.n	8007558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	615a      	str	r2, [r3, #20]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40010400 	.word	0x40010400
 8007580:	40014000 	.word	0x40014000
 8007584:	40014400 	.word	0x40014400
 8007588:	40014800 	.word	0x40014800
 800758c:	40001800 	.word	0x40001800
 8007590:	40001c00 	.word	0x40001c00
 8007594:	40002000 	.word	0x40002000

08007598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f023 0201 	bic.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 0302 	bic.w	r3, r3, #2
 80075e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a20      	ldr	r2, [pc, #128]	; (8007670 <TIM_OC1_SetConfig+0xd8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC1_SetConfig+0x64>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <TIM_OC1_SetConfig+0xdc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10c      	bne.n	8007616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0308 	bic.w	r3, r3, #8
 8007602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f023 0304 	bic.w	r3, r3, #4
 8007614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <TIM_OC1_SetConfig+0xd8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_OC1_SetConfig+0x8e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a14      	ldr	r2, [pc, #80]	; (8007674 <TIM_OC1_SetConfig+0xdc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d111      	bne.n	800764a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800762c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	621a      	str	r2, [r3, #32]
}
 8007664:	bf00      	nop
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	40010000 	.word	0x40010000
 8007674:	40010400 	.word	0x40010400

08007678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f023 0210 	bic.w	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0320 	bic.w	r3, r3, #32
 80076c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a22      	ldr	r2, [pc, #136]	; (800775c <TIM_OC2_SetConfig+0xe4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_OC2_SetConfig+0x68>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <TIM_OC2_SetConfig+0xe8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10d      	bne.n	80076fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a17      	ldr	r2, [pc, #92]	; (800775c <TIM_OC2_SetConfig+0xe4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_OC2_SetConfig+0x94>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a16      	ldr	r2, [pc, #88]	; (8007760 <TIM_OC2_SetConfig+0xe8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d113      	bne.n	8007734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40010400 	.word	0x40010400

08007764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a21      	ldr	r2, [pc, #132]	; (8007844 <TIM_OC3_SetConfig+0xe0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_OC3_SetConfig+0x66>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a20      	ldr	r2, [pc, #128]	; (8007848 <TIM_OC3_SetConfig+0xe4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10d      	bne.n	80077e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a16      	ldr	r2, [pc, #88]	; (8007844 <TIM_OC3_SetConfig+0xe0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d003      	beq.n	80077f6 <TIM_OC3_SetConfig+0x92>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <TIM_OC3_SetConfig+0xe4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d113      	bne.n	800781e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400

0800784c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a12      	ldr	r2, [pc, #72]	; (80078f0 <TIM_OC4_SetConfig+0xa4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_OC4_SetConfig+0x68>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <TIM_OC4_SetConfig+0xa8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d109      	bne.n	80078c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	019b      	lsls	r3, r3, #6
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40010400 	.word	0x40010400

080078f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f023 0201 	bic.w	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 030a 	bic.w	r3, r3, #10
 8007934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007956:	b480      	push	{r7}
 8007958:	b087      	sub	sp, #28
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0210 	bic.w	r2, r3, #16
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	031b      	lsls	r3, r3, #12
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f043 0307 	orr.w	r3, r3, #7
 80079d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	609a      	str	r2, [r3, #8]
}
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	021a      	lsls	r2, r3, #8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	609a      	str	r2, [r3, #8]
}
 8007a20:	bf00      	nop
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2201      	movs	r2, #1
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	fa01 f303 	lsl.w	r3, r1, r3
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e05a      	b.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a21      	ldr	r2, [pc, #132]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d022      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007adc:	d01d      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d018      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1b      	ldr	r2, [pc, #108]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1a      	ldr	r2, [pc, #104]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d10c      	bne.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800
 8007b60:	40000c00 	.word	0x40000c00
 8007b64:	40010400 	.word	0x40010400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	40001800 	.word	0x40001800

08007b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e03d      	b.n	8007c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e03f      	b.n	8007cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fb f8ba 	bl	8002ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	; 0x24
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ff43 	bl	8008b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08c      	sub	sp, #48	; 0x30
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d165      	bne.n	8007dbe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <HAL_UART_Transmit_DMA+0x26>
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e05e      	b.n	8007dc0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_UART_Transmit_DMA+0x38>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e057      	b.n	8007dc0 <HAL_UART_Transmit_DMA+0xe8>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2221      	movs	r2, #33	; 0x21
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	4a22      	ldr	r2, [pc, #136]	; (8007dc8 <HAL_UART_Transmit_DMA+0xf0>)
 8007d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <HAL_UART_Transmit_DMA+0xf4>)
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	4a20      	ldr	r2, [pc, #128]	; (8007dd0 <HAL_UART_Transmit_DMA+0xf8>)
 8007d4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d54:	2200      	movs	r2, #0
 8007d56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d58:	f107 0308 	add.w	r3, r7, #8
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	f7fb fc9a 	bl	80036a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d7c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	617b      	str	r3, [r7, #20]
   return(result);
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3314      	adds	r3, #20
 8007da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da6:	627a      	str	r2, [r7, #36]	; 0x24
 8007da8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6a39      	ldr	r1, [r7, #32]
 8007dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e000      	b.n	8007dc0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007dbe:	2302      	movs	r3, #2
  }
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3730      	adds	r7, #48	; 0x30
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	080083a5 	.word	0x080083a5
 8007dcc:	0800843f 	.word	0x0800843f
 8007dd0:	080085b7 	.word	0x080085b7

08007dd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d11d      	bne.n	8007e2a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <HAL_UART_Receive_DMA+0x26>
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e016      	b.n	8007e2c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_UART_Receive_DMA+0x38>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e00f      	b.n	8007e2c <HAL_UART_Receive_DMA+0x58>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fc13 	bl	800864c <UART_Start_Receive_DMA>
 8007e26:	4603      	mov	r3, r0
 8007e28:	e000      	b.n	8007e2c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e2a:	2302      	movs	r3, #2
  }
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b0ba      	sub	sp, #232	; 0xe8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10f      	bne.n	8007e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <HAL_UART_IRQHandler+0x66>
 8007e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fd7f 	bl	8008996 <UART_Receive_IT>
      return;
 8007e98:	e256      	b.n	8008348 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80de 	beq.w	8008060 <HAL_UART_IRQHandler+0x22c>
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80d1 	beq.w	8008060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xae>
 8007eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_UART_IRQHandler+0xd2>
 8007eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	f043 0202 	orr.w	r2, r3, #2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <HAL_UART_IRQHandler+0xf6>
 8007f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f043 0204 	orr.w	r2, r3, #4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <HAL_UART_IRQHandler+0x126>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f043 0208 	orr.w	r2, r3, #8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 81ed 	beq.w	800833e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_UART_IRQHandler+0x14e>
 8007f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fd0a 	bl	8008996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	bf0c      	ite	eq
 8007f90:	2301      	moveq	r3, #1
 8007f92:	2300      	movne	r3, #0
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <HAL_UART_IRQHandler+0x17a>
 8007fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d04f      	beq.n	800804e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fc12 	bl	80087d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d141      	bne.n	8008046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1d9      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d013      	beq.n	800803e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	4a7d      	ldr	r2, [pc, #500]	; (8008210 <HAL_UART_IRQHandler+0x3dc>)
 800801c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	4618      	mov	r0, r3
 8008024:	f7fb fc08 	bl	8003838 <HAL_DMA_Abort_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d016      	beq.n	800805c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	e00e      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f99a 	bl	8008378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	e00a      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f996 	bl	8008378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	e006      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f992 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800805a:	e170      	b.n	800833e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805c:	bf00      	nop
    return;
 800805e:	e16e      	b.n	800833e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	f040 814a 	bne.w	80082fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800806a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8143 	beq.w	80082fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 813c 	beq.w	80082fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008086:	2300      	movs	r3, #0
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	f040 80b4 	bne.w	8008214 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8140 	beq.w	8008342 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080ca:	429a      	cmp	r2, r3
 80080cc:	f080 8139 	bcs.w	8008342 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	f000 8088 	beq.w	80081f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	330c      	adds	r3, #12
 80080ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008112:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800811e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800812a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d9      	bne.n	80080e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3314      	adds	r3, #20
 8008138:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008156:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800815a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800815e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e1      	bne.n	8008132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800817e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3314      	adds	r3, #20
 800818e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008192:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008194:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e3      	bne.n	800816e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c6:	f023 0310 	bic.w	r3, r3, #16
 80081ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80081da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e3      	bne.n	80081b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fb fab1 	bl	8003758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081fe:	b29b      	uxth	r3, r3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8c0 	bl	800838c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800820c:	e099      	b.n	8008342 <HAL_UART_IRQHandler+0x50e>
 800820e:	bf00      	nop
 8008210:	0800889f 	.word	0x0800889f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800821c:	b29b      	uxth	r3, r3
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 808b 	beq.w	8008346 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8086 	beq.w	8008346 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330c      	adds	r3, #12
 800825a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800825e:	647a      	str	r2, [r7, #68]	; 0x44
 8008260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e3      	bne.n	800823a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	623b      	str	r3, [r7, #32]
   return(result);
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3314      	adds	r3, #20
 8008292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008296:	633a      	str	r2, [r7, #48]	; 0x30
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800829c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e3      	bne.n	8008272 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0310 	bic.w	r3, r3, #16
 80082ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	330c      	adds	r3, #12
 80082d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082dc:	61fa      	str	r2, [r7, #28]
 80082de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	69b9      	ldr	r1, [r7, #24]
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e3      	bne.n	80082b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f848 	bl	800838c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082fc:	e023      	b.n	8008346 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_UART_IRQHandler+0x4ea>
 800830a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fad5 	bl	80088c6 <UART_Transmit_IT>
    return;
 800831c:	e014      	b.n	8008348 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00e      	beq.n	8008348 <HAL_UART_IRQHandler+0x514>
 800832a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d008      	beq.n	8008348 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fb15 	bl	8008966 <UART_EndTransmit_IT>
    return;
 800833c:	e004      	b.n	8008348 <HAL_UART_IRQHandler+0x514>
    return;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <HAL_UART_IRQHandler+0x514>
      return;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_UART_IRQHandler+0x514>
      return;
 8008346:	bf00      	nop
  }
}
 8008348:	37e8      	adds	r7, #232	; 0xe8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop

08008350 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b090      	sub	sp, #64	; 0x40
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d137      	bne.n	8008430 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80083c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c2:	2200      	movs	r2, #0
 80083c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3314      	adds	r3, #20
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	623b      	str	r3, [r7, #32]
   return(result);
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3314      	adds	r3, #20
 80083e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e6:	633a      	str	r2, [r7, #48]	; 0x30
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e5      	bne.n	80083c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60fb      	str	r3, [r7, #12]
   return(result);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841a:	61fa      	str	r2, [r7, #28]
 800841c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69b9      	ldr	r1, [r7, #24]
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	617b      	str	r3, [r7, #20]
   return(result);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800842e:	e002      	b.n	8008436 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008430:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008432:	f7f9 fd7b 	bl	8001f2c <HAL_UART_TxCpltCallback>
}
 8008436:	bf00      	nop
 8008438:	3740      	adds	r7, #64	; 0x40
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff ff7f 	bl	8008350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b09c      	sub	sp, #112	; 0x70
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d172      	bne.n	800855c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008478:	2200      	movs	r2, #0
 800847a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800848c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008492:	66bb      	str	r3, [r7, #104]	; 0x68
 8008494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800849c:	65ba      	str	r2, [r7, #88]	; 0x58
 800849e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e5      	bne.n	800847c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
 80084c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3314      	adds	r3, #20
 80084ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084d0:	647a      	str	r2, [r7, #68]	; 0x44
 80084d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e5      	bne.n	80084b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	623b      	str	r3, [r7, #32]
   return(result);
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fa:	663b      	str	r3, [r7, #96]	; 0x60
 80084fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3314      	adds	r3, #20
 8008502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008504:	633a      	str	r2, [r7, #48]	; 0x30
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800850a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e5      	bne.n	80084e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	2b01      	cmp	r3, #1
 8008526:	d119      	bne.n	800855c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	60fb      	str	r3, [r7, #12]
   return(result);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0310 	bic.w	r3, r3, #16
 800853e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008548:	61fa      	str	r2, [r7, #28]
 800854a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	69b9      	ldr	r1, [r7, #24]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	617b      	str	r3, [r7, #20]
   return(result);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	2b01      	cmp	r3, #1
 8008562:	d106      	bne.n	8008572 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008566:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008568:	4619      	mov	r1, r3
 800856a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800856c:	f7ff ff0e 	bl	800838c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008570:	e002      	b.n	8008578 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008572:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008574:	f7f9 fcb2 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 8008578:	bf00      	nop
 800857a:	3770      	adds	r7, #112	; 0x70
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	2b01      	cmp	r3, #1
 8008594:	d108      	bne.n	80085a8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fef3 	bl	800838c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085a6:	e002      	b.n	80085ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fedb 	bl	8008364 <HAL_UART_RxHalfCpltCallback>
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	bf0c      	ite	eq
 80085d6:	2301      	moveq	r3, #1
 80085d8:	2300      	movne	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b21      	cmp	r3, #33	; 0x21
 80085e8:	d108      	bne.n	80085fc <UART_DMAError+0x46>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80085f6:	68b8      	ldr	r0, [r7, #8]
 80085f8:	f000 f8c6 	bl	8008788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b40      	cmp	r3, #64	; 0x40
 8008608:	bf0c      	ite	eq
 800860a:	2301      	moveq	r3, #1
 800860c:	2300      	movne	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b22      	cmp	r3, #34	; 0x22
 800861c:	d108      	bne.n	8008630 <UART_DMAError+0x7a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f000 f8d4 	bl	80087d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f043 0210 	orr.w	r2, r3, #16
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800863c:	68b8      	ldr	r0, [r7, #8]
 800863e:	f7ff fe9b 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b098      	sub	sp, #96	; 0x60
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2222      	movs	r2, #34	; 0x22
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	4a40      	ldr	r2, [pc, #256]	; (800877c <UART_Start_Receive_DMA+0x130>)
 800867a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	4a3f      	ldr	r2, [pc, #252]	; (8008780 <UART_Start_Receive_DMA+0x134>)
 8008682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4a3e      	ldr	r2, [pc, #248]	; (8008784 <UART_Start_Receive_DMA+0x138>)
 800868a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	2200      	movs	r2, #0
 8008692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	f7fa fffc 	bl	80036a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d019      	beq.n	800870a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	330c      	adds	r3, #12
 80086f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80086fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	657b      	str	r3, [r7, #84]	; 0x54
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800872a:	63ba      	str	r2, [r7, #56]	; 0x38
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e5      	bne.n	800870a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3314      	adds	r3, #20
 8008744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800875e:	627a      	str	r2, [r7, #36]	; 0x24
 8008760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6a39      	ldr	r1, [r7, #32]
 8008764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	61fb      	str	r3, [r7, #28]
   return(result);
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e5      	bne.n	800873e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3760      	adds	r7, #96	; 0x60
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	0800845b 	.word	0x0800845b
 8008780:	08008581 	.word	0x08008581
 8008784:	080085b7 	.word	0x080085b7

08008788 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	330c      	adds	r3, #12
 8008796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	61ba      	str	r2, [r7, #24]
 80087b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6979      	ldr	r1, [r7, #20]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e5      	bne.n	8008790 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087cc:	bf00      	nop
 80087ce:	3724      	adds	r7, #36	; 0x24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b095      	sub	sp, #84	; 0x54
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008800:	643a      	str	r2, [r7, #64]	; 0x40
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3314      	adds	r3, #20
 800881a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	61fb      	str	r3, [r7, #28]
   return(result);
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f023 0301 	bic.w	r3, r3, #1
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	d119      	bne.n	8008884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008870:	61ba      	str	r2, [r7, #24]
 8008872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	613b      	str	r3, [r7, #16]
   return(result);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008892:	bf00      	nop
 8008894:	3754      	adds	r7, #84	; 0x54
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fd5d 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b21      	cmp	r3, #33	; 0x21
 80088d8:	d13e      	bne.n	8008958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d114      	bne.n	800890e <UART_Transmit_IT+0x48>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d110      	bne.n	800890e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	1c9a      	adds	r2, r3, #2
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	621a      	str	r2, [r3, #32]
 800890c:	e008      	b.n	8008920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	1c59      	adds	r1, r3, #1
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6211      	str	r1, [r2, #32]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29b      	uxth	r3, r3
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4619      	mov	r1, r3
 800892e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10f      	bne.n	8008954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7f9 fad0 	bl	8001f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b08c      	sub	sp, #48	; 0x30
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b22      	cmp	r3, #34	; 0x22
 80089a8:	f040 80ab 	bne.w	8008b02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	d117      	bne.n	80089e6 <UART_Receive_IT+0x50>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d113      	bne.n	80089e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28
 80089e4:	e026      	b.n	8008a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f8:	d007      	beq.n	8008a0a <UART_Receive_IT+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <UART_Receive_IT+0x82>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e008      	b.n	8008a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	4619      	mov	r1, r3
 8008a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d15a      	bne.n	8008afe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0220 	bic.w	r2, r2, #32
 8008a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d135      	bne.n	8008af4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f023 0310 	bic.w	r3, r3, #16
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	623a      	str	r2, [r7, #32]
 8008ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	69f9      	ldr	r1, [r7, #28]
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d10a      	bne.n	8008ae6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fc4d 	bl	800838c <HAL_UARTEx_RxEventCallback>
 8008af2:	e002      	b.n	8008afa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7f9 f9f1 	bl	8001edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e002      	b.n	8008b04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3730      	adds	r7, #48	; 0x30
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b10:	b0c0      	sub	sp, #256	; 0x100
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	68d9      	ldr	r1, [r3, #12]
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	ea40 0301 	orr.w	r3, r0, r1
 8008b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b64:	f021 010c 	bic.w	r1, r1, #12
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b72:	430b      	orrs	r3, r1
 8008b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b86:	6999      	ldr	r1, [r3, #24]
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	ea40 0301 	orr.w	r3, r0, r1
 8008b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b8f      	ldr	r3, [pc, #572]	; (8008dd8 <UART_SetConfig+0x2cc>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d005      	beq.n	8008bac <UART_SetConfig+0xa0>
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b8d      	ldr	r3, [pc, #564]	; (8008ddc <UART_SetConfig+0x2d0>)
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d104      	bne.n	8008bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bac:	f7fd faca 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8008bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bb4:	e003      	b.n	8008bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bb6:	f7fd fab1 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8008bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc8:	f040 810c 	bne.w	8008de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bde:	4622      	mov	r2, r4
 8008be0:	462b      	mov	r3, r5
 8008be2:	1891      	adds	r1, r2, r2
 8008be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008be6:	415b      	adcs	r3, r3
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bee:	4621      	mov	r1, r4
 8008bf0:	eb12 0801 	adds.w	r8, r2, r1
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	eb43 0901 	adc.w	r9, r3, r1
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c0e:	4690      	mov	r8, r2
 8008c10:	4699      	mov	r9, r3
 8008c12:	4623      	mov	r3, r4
 8008c14:	eb18 0303 	adds.w	r3, r8, r3
 8008c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	eb49 0303 	adc.w	r3, r9, r3
 8008c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	18db      	adds	r3, r3, r3
 8008c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c40:	4613      	mov	r3, r2
 8008c42:	eb42 0303 	adc.w	r3, r2, r3
 8008c46:	657b      	str	r3, [r7, #84]	; 0x54
 8008c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c50:	f7f7 fb26 	bl	80002a0 <__aeabi_uldivmod>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4b61      	ldr	r3, [pc, #388]	; (8008de0 <UART_SetConfig+0x2d4>)
 8008c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	011c      	lsls	r4, r3, #4
 8008c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	1891      	adds	r1, r2, r2
 8008c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c7c:	415b      	adcs	r3, r3
 8008c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c84:	4641      	mov	r1, r8
 8008c86:	eb12 0a01 	adds.w	sl, r2, r1
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ca4:	4692      	mov	sl, r2
 8008ca6:	469b      	mov	fp, r3
 8008ca8:	4643      	mov	r3, r8
 8008caa:	eb1a 0303 	adds.w	r3, sl, r3
 8008cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8008cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	18db      	adds	r3, r3, r3
 8008cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	eb42 0303 	adc.w	r3, r2, r3
 8008cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ce6:	f7f7 fadb 	bl	80002a0 <__aeabi_uldivmod>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4b3b      	ldr	r3, [pc, #236]	; (8008de0 <UART_SetConfig+0x2d4>)
 8008cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	2264      	movs	r2, #100	; 0x64
 8008cfa:	fb02 f303 	mul.w	r3, r2, r3
 8008cfe:	1acb      	subs	r3, r1, r3
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d06:	4b36      	ldr	r3, [pc, #216]	; (8008de0 <UART_SetConfig+0x2d4>)
 8008d08:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d14:	441c      	add	r4, r3
 8008d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d28:	4642      	mov	r2, r8
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	1891      	adds	r1, r2, r2
 8008d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d30:	415b      	adcs	r3, r3
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d38:	4641      	mov	r1, r8
 8008d3a:	1851      	adds	r1, r2, r1
 8008d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d3e:	4649      	mov	r1, r9
 8008d40:	414b      	adcs	r3, r1
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d50:	4659      	mov	r1, fp
 8008d52:	00cb      	lsls	r3, r1, #3
 8008d54:	4651      	mov	r1, sl
 8008d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d5a:	4651      	mov	r1, sl
 8008d5c:	00ca      	lsls	r2, r1, #3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	4603      	mov	r3, r0
 8008d64:	4642      	mov	r2, r8
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d6c:	464b      	mov	r3, r9
 8008d6e:	460a      	mov	r2, r1
 8008d70:	eb42 0303 	adc.w	r3, r2, r3
 8008d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	18db      	adds	r3, r3, r3
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d92:	4613      	mov	r3, r2
 8008d94:	eb42 0303 	adc.w	r3, r2, r3
 8008d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008da2:	f7f7 fa7d 	bl	80002a0 <__aeabi_uldivmod>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <UART_SetConfig+0x2d4>)
 8008dac:	fba3 1302 	umull	r1, r3, r3, r2
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	2164      	movs	r1, #100	; 0x64
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	3332      	adds	r3, #50	; 0x32
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <UART_SetConfig+0x2d4>)
 8008dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	f003 0207 	and.w	r2, r3, #7
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4422      	add	r2, r4
 8008dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dd4:	e105      	b.n	8008fe2 <UART_SetConfig+0x4d6>
 8008dd6:	bf00      	nop
 8008dd8:	40011000 	.word	0x40011000
 8008ddc:	40011400 	.word	0x40011400
 8008de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008df6:	4642      	mov	r2, r8
 8008df8:	464b      	mov	r3, r9
 8008dfa:	1891      	adds	r1, r2, r2
 8008dfc:	6239      	str	r1, [r7, #32]
 8008dfe:	415b      	adcs	r3, r3
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e06:	4641      	mov	r1, r8
 8008e08:	1854      	adds	r4, r2, r1
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	eb43 0501 	adc.w	r5, r3, r1
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	00eb      	lsls	r3, r5, #3
 8008e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e1e:	00e2      	lsls	r2, r4, #3
 8008e20:	4614      	mov	r4, r2
 8008e22:	461d      	mov	r5, r3
 8008e24:	4643      	mov	r3, r8
 8008e26:	18e3      	adds	r3, r4, r3
 8008e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	eb45 0303 	adc.w	r3, r5, r3
 8008e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	f04f 0300 	mov.w	r3, #0
 8008e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e52:	4629      	mov	r1, r5
 8008e54:	008b      	lsls	r3, r1, #2
 8008e56:	4621      	mov	r1, r4
 8008e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	008a      	lsls	r2, r1, #2
 8008e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e64:	f7f7 fa1c 	bl	80002a0 <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4b60      	ldr	r3, [pc, #384]	; (8008ff0 <UART_SetConfig+0x4e4>)
 8008e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	011c      	lsls	r4, r3, #4
 8008e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	1891      	adds	r1, r2, r2
 8008e8e:	61b9      	str	r1, [r7, #24]
 8008e90:	415b      	adcs	r3, r3
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e98:	4641      	mov	r1, r8
 8008e9a:	1851      	adds	r1, r2, r1
 8008e9c:	6139      	str	r1, [r7, #16]
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	414b      	adcs	r3, r1
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008eb0:	4659      	mov	r1, fp
 8008eb2:	00cb      	lsls	r3, r1, #3
 8008eb4:	4651      	mov	r1, sl
 8008eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eba:	4651      	mov	r1, sl
 8008ebc:	00ca      	lsls	r2, r1, #3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	189b      	adds	r3, r3, r2
 8008ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ecc:	464b      	mov	r3, r9
 8008ece:	460a      	mov	r2, r1
 8008ed0:	eb42 0303 	adc.w	r3, r2, r3
 8008ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	008b      	lsls	r3, r1, #2
 8008ef4:	4641      	mov	r1, r8
 8008ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008efa:	4641      	mov	r1, r8
 8008efc:	008a      	lsls	r2, r1, #2
 8008efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f02:	f7f7 f9cd 	bl	80002a0 <__aeabi_uldivmod>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4b39      	ldr	r3, [pc, #228]	; (8008ff0 <UART_SetConfig+0x4e4>)
 8008f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	2164      	movs	r1, #100	; 0x64
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	3332      	adds	r3, #50	; 0x32
 8008f1e:	4a34      	ldr	r2, [pc, #208]	; (8008ff0 <UART_SetConfig+0x4e4>)
 8008f20:	fba2 2303 	umull	r2, r3, r2, r3
 8008f24:	095b      	lsrs	r3, r3, #5
 8008f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f2a:	441c      	add	r4, r3
 8008f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f30:	2200      	movs	r2, #0
 8008f32:	673b      	str	r3, [r7, #112]	; 0x70
 8008f34:	677a      	str	r2, [r7, #116]	; 0x74
 8008f36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f3a:	4642      	mov	r2, r8
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	1891      	adds	r1, r2, r2
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	415b      	adcs	r3, r3
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	1851      	adds	r1, r2, r1
 8008f4e:	6039      	str	r1, [r7, #0]
 8008f50:	4649      	mov	r1, r9
 8008f52:	414b      	adcs	r3, r1
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f62:	4659      	mov	r1, fp
 8008f64:	00cb      	lsls	r3, r1, #3
 8008f66:	4651      	mov	r1, sl
 8008f68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6c:	4651      	mov	r1, sl
 8008f6e:	00ca      	lsls	r2, r1, #3
 8008f70:	4610      	mov	r0, r2
 8008f72:	4619      	mov	r1, r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	4642      	mov	r2, r8
 8008f78:	189b      	adds	r3, r3, r2
 8008f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	460a      	mov	r2, r1
 8008f80:	eb42 0303 	adc.w	r3, r2, r3
 8008f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f90:	667a      	str	r2, [r7, #100]	; 0x64
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	008b      	lsls	r3, r1, #2
 8008fa2:	4641      	mov	r1, r8
 8008fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa8:	4641      	mov	r1, r8
 8008faa:	008a      	lsls	r2, r1, #2
 8008fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fb0:	f7f7 f976 	bl	80002a0 <__aeabi_uldivmod>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <UART_SetConfig+0x4e4>)
 8008fba:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	2164      	movs	r1, #100	; 0x64
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	3332      	adds	r3, #50	; 0x32
 8008fcc:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <UART_SetConfig+0x4e4>)
 8008fce:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	f003 020f 	and.w	r2, r3, #15
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4422      	add	r2, r4
 8008fe0:	609a      	str	r2, [r3, #8]
}
 8008fe2:	bf00      	nop
 8008fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fee:	bf00      	nop
 8008ff0:	51eb851f 	.word	0x51eb851f

08008ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	f107 001c 	add.w	r0, r7, #28
 8009002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b01      	cmp	r3, #1
 800900a:	d122      	bne.n	8009052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d105      	bne.n	8009046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 faa2 	bl	8009590 <USB_CoreReset>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
 8009050:	e01a      	b.n	8009088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa96 	bl	8009590 <USB_CoreReset>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
 800907a:	e005      	b.n	8009088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10b      	bne.n	80090a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f043 0206 	orr.w	r2, r3, #6
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090b2:	b004      	add	sp, #16
 80090b4:	4770      	bx	lr

080090b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f023 0201 	bic.w	r2, r3, #1
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d115      	bne.n	8009126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009106:	2001      	movs	r0, #1
 8009108:	f7fa f91a 	bl	8003340 <HAL_Delay>
      ms++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa2e 	bl	8009574 <USB_GetMode>
 8009118:	4603      	mov	r3, r0
 800911a:	2b01      	cmp	r3, #1
 800911c:	d01e      	beq.n	800915c <USB_SetCurrentMode+0x84>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b31      	cmp	r3, #49	; 0x31
 8009122:	d9f0      	bls.n	8009106 <USB_SetCurrentMode+0x2e>
 8009124:	e01a      	b.n	800915c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d115      	bne.n	8009158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009138:	2001      	movs	r0, #1
 800913a:	f7fa f901 	bl	8003340 <HAL_Delay>
      ms++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa15 	bl	8009574 <USB_GetMode>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <USB_SetCurrentMode+0x84>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b31      	cmp	r3, #49	; 0x31
 8009154:	d9f0      	bls.n	8009138 <USB_SetCurrentMode+0x60>
 8009156:	e001      	b.n	800915c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e005      	b.n	8009168 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b32      	cmp	r3, #50	; 0x32
 8009160:	d101      	bne.n	8009166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009170:	b084      	sub	sp, #16
 8009172:	b580      	push	{r7, lr}
 8009174:	b086      	sub	sp, #24
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800917e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	e009      	b.n	80091a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3340      	adds	r3, #64	; 0x40
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	2200      	movs	r2, #0
 800919c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3301      	adds	r3, #1
 80091a2:	613b      	str	r3, [r7, #16]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b0e      	cmp	r3, #14
 80091a8:	d9f2      	bls.n	8009190 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11c      	bne.n	80091ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091be:	f043 0302 	orr.w	r3, r3, #2
 80091c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	639a      	str	r2, [r3, #56]	; 0x38
 80091e8:	e00b      	b.n	8009202 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009208:	461a      	mov	r2, r3
 800920a:	2300      	movs	r3, #0
 800920c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009214:	4619      	mov	r1, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921c:	461a      	mov	r2, r3
 800921e:	680b      	ldr	r3, [r1, #0]
 8009220:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10c      	bne.n	8009242 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800922e:	2100      	movs	r1, #0
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f965 	bl	8009500 <USB_SetDevSpeed>
 8009236:	e008      	b.n	800924a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009238:	2101      	movs	r1, #1
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f960 	bl	8009500 <USB_SetDevSpeed>
 8009240:	e003      	b.n	800924a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009242:	2103      	movs	r1, #3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f95b 	bl	8009500 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800924a:	2110      	movs	r1, #16
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f8f3 	bl	8009438 <USB_FlushTxFifo>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f91f 	bl	80094a0 <USB_FlushRxFifo>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009272:	461a      	mov	r2, r3
 8009274:	2300      	movs	r3, #0
 8009276:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927e:	461a      	mov	r2, r3
 8009280:	2300      	movs	r3, #0
 8009282:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928a:	461a      	mov	r2, r3
 800928c:	2300      	movs	r3, #0
 800928e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009290:	2300      	movs	r3, #0
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	e043      	b.n	800931e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ac:	d118      	bne.n	80092e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c0:	461a      	mov	r2, r3
 80092c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	e013      	b.n	80092f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d6:	461a      	mov	r2, r3
 80092d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	e008      	b.n	80092f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	461a      	mov	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fe:	461a      	mov	r2, r3
 8009300:	2300      	movs	r3, #0
 8009302:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	461a      	mov	r2, r3
 8009312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	3301      	adds	r3, #1
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	429a      	cmp	r2, r3
 8009324:	d3b7      	bcc.n	8009296 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e043      	b.n	80093b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800933e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009342:	d118      	bne.n	8009376 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	461a      	mov	r2, r3
 8009358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	e013      	b.n	8009388 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	461a      	mov	r2, r3
 800936e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	e008      	b.n	8009388 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	461a      	mov	r2, r3
 8009384:	2300      	movs	r3, #0
 8009386:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009394:	461a      	mov	r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	461a      	mov	r2, r3
 80093a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	3301      	adds	r3, #1
 80093b2:	613b      	str	r3, [r7, #16]
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3b7      	bcc.n	800932c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	f043 0210 	orr.w	r2, r3, #16
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <USB_DevInit+0x2c4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f043 0208 	orr.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800940e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009410:	2b01      	cmp	r3, #1
 8009412:	d107      	bne.n	8009424 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009430:	b004      	add	sp, #16
 8009432:	4770      	bx	lr
 8009434:	803c3800 	.word	0x803c3800

08009438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a13      	ldr	r2, [pc, #76]	; (800949c <USB_FlushTxFifo+0x64>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e01b      	b.n	8009490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	daf2      	bge.n	8009446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	019b      	lsls	r3, r3, #6
 8009468:	f043 0220 	orr.w	r2, r3, #32
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a08      	ldr	r2, [pc, #32]	; (800949c <USB_FlushTxFifo+0x64>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d901      	bls.n	8009482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e006      	b.n	8009490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b20      	cmp	r3, #32
 800948c:	d0f0      	beq.n	8009470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	00030d40 	.word	0x00030d40

080094a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4a11      	ldr	r2, [pc, #68]	; (80094fc <USB_FlushRxFifo+0x5c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d901      	bls.n	80094be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e018      	b.n	80094f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	daf2      	bge.n	80094ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2210      	movs	r2, #16
 80094ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a08      	ldr	r2, [pc, #32]	; (80094fc <USB_FlushRxFifo+0x5c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d901      	bls.n	80094e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e006      	b.n	80094f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b10      	cmp	r3, #16
 80094ec:	d0f0      	beq.n	80094d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	00030d40 	.word	0x00030d40

08009500 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009520:	4313      	orrs	r3, r2
 8009522:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800954c:	f023 0303 	bic.w	r3, r3, #3
 8009550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	f003 0301 	and.w	r3, r3, #1
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3301      	adds	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4a13      	ldr	r2, [pc, #76]	; (80095f4 <USB_CoreReset+0x64>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d901      	bls.n	80095ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e01b      	b.n	80095e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	daf2      	bge.n	800959c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	f043 0201 	orr.w	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <USB_CoreReset+0x64>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d901      	bls.n	80095d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e006      	b.n	80095e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d0f0      	beq.n	80095c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	00030d40 	.word	0x00030d40

080095f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <MX_FATFS_Init+0x18>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <MX_FATFS_Init+0x1c>)
 8009600:	f002 feb8 	bl	800c374 <FATFS_LinkDriver>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	4b03      	ldr	r3, [pc, #12]	; (8009618 <MX_FATFS_Init+0x20>)
 800960a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}
 8009610:	200034ac 	.word	0x200034ac
 8009614:	20000094 	.word	0x20000094
 8009618:	200034a8 	.word	0x200034a8

0800961c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009620:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009622:	4618      	mov	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	4618      	mov	r0, r3
 800963a:	f7f7 fbdb 	bl	8000df4 <SD_disk_initialize>
 800963e:	4603      	mov	r3, r0
 8009640:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	4603      	mov	r3, r0
 8009652:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f7 fcb6 	bl	8000fc8 <SD_disk_status>
 800965c:	4603      	mov	r3, r0
 800965e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 8009678:	7bf8      	ldrb	r0, [r7, #15]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	68b9      	ldr	r1, [r7, #8]
 8009680:	f7f7 fcb8 	bl	8000ff4 <SD_disk_read>
 8009684:	4603      	mov	r3, r0
 8009686:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	607a      	str	r2, [r7, #4]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 80096a0:	7bf8      	ldrb	r0, [r7, #15]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	f7f7 fd0e 	bl	80010c8 <SD_disk_write>
 80096ac:	4603      	mov	r3, r0
 80096ae:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	603a      	str	r2, [r7, #0]
 80096c2:	71fb      	strb	r3, [r7, #7]
 80096c4:	460b      	mov	r3, r1
 80096c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv,cmd,buff);
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	79b9      	ldrb	r1, [r7, #6]
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f7 fd7e 	bl	80011d0 <SD_disk_ioctl>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	4a08      	ldr	r2, [pc, #32]	; (8009710 <disk_status+0x30>)
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	79fa      	ldrb	r2, [r7, #7]
 80096f8:	4905      	ldr	r1, [pc, #20]	; (8009710 <disk_status+0x30>)
 80096fa:	440a      	add	r2, r1
 80096fc:	7a12      	ldrb	r2, [r2, #8]
 80096fe:	4610      	mov	r0, r2
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	200034d8 	.word	0x200034d8

08009714 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	4a0d      	ldr	r2, [pc, #52]	; (800975c <disk_initialize+0x48>)
 8009726:	5cd3      	ldrb	r3, [r2, r3]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d111      	bne.n	8009750 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	4a0b      	ldr	r2, [pc, #44]	; (800975c <disk_initialize+0x48>)
 8009730:	2101      	movs	r1, #1
 8009732:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <disk_initialize+0x48>)
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	79fa      	ldrb	r2, [r7, #7]
 8009742:	4906      	ldr	r1, [pc, #24]	; (800975c <disk_initialize+0x48>)
 8009744:	440a      	add	r2, r1
 8009746:	7a12      	ldrb	r2, [r2, #8]
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	200034d8 	.word	0x200034d8

08009760 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607a      	str	r2, [r7, #4]
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	4a0a      	ldr	r2, [pc, #40]	; (800979c <disk_read+0x3c>)
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	689c      	ldr	r4, [r3, #8]
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	4a07      	ldr	r2, [pc, #28]	; (800979c <disk_read+0x3c>)
 8009780:	4413      	add	r3, r2
 8009782:	7a18      	ldrb	r0, [r3, #8]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	47a0      	blx	r4
 800978c:	4603      	mov	r3, r0
 800978e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
}
 8009792:	4618      	mov	r0, r3
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	bd90      	pop	{r4, r7, pc}
 800979a:	bf00      	nop
 800979c:	200034d8 	.word	0x200034d8

080097a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <disk_write+0x3c>)
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	68dc      	ldr	r4, [r3, #12]
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4a07      	ldr	r2, [pc, #28]	; (80097dc <disk_write+0x3c>)
 80097c0:	4413      	add	r3, r2
 80097c2:	7a18      	ldrb	r0, [r3, #8]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	47a0      	blx	r4
 80097cc:	4603      	mov	r3, r0
 80097ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd90      	pop	{r4, r7, pc}
 80097da:	bf00      	nop
 80097dc:	200034d8 	.word	0x200034d8

080097e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	603a      	str	r2, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
 80097ec:	460b      	mov	r3, r1
 80097ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	4a09      	ldr	r2, [pc, #36]	; (8009818 <disk_ioctl+0x38>)
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	79fa      	ldrb	r2, [r7, #7]
 80097fe:	4906      	ldr	r1, [pc, #24]	; (8009818 <disk_ioctl+0x38>)
 8009800:	440a      	add	r2, r1
 8009802:	7a10      	ldrb	r0, [r2, #8]
 8009804:	79b9      	ldrb	r1, [r7, #6]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4798      	blx	r3
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
  return res;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200034d8 	.word	0x200034d8

0800981c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3301      	adds	r3, #1
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	b21a      	sxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b21b      	sxth	r3, r3
 8009838:	4313      	orrs	r3, r2
 800983a:	b21b      	sxth	r3, r3
 800983c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800983e:	89fb      	ldrh	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3303      	adds	r3, #3
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	3202      	adds	r2, #2
 8009864:	7812      	ldrb	r2, [r2, #0]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	3201      	adds	r2, #1
 8009872:	7812      	ldrb	r2, [r2, #0]
 8009874:	4313      	orrs	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	021b      	lsls	r3, r3, #8
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	4313      	orrs	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
	return rv;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	887a      	ldrh	r2, [r7, #2]
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	887b      	ldrh	r3, [r7, #2]
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	887a      	ldrh	r2, [r7, #2]
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	701a      	strb	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	607a      	str	r2, [r7, #4]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	0a1b      	lsrs	r3, r3, #8
 80098f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	b2d2      	uxtb	r2, r2
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	0a1b      	lsrs	r3, r3, #8
 8009906:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	701a      	strb	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	1c53      	adds	r3, r2, #1
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	1c59      	adds	r1, r3, #1
 8009944:	6179      	str	r1, [r7, #20]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3b01      	subs	r3, #1
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f1      	bne.n	800993a <mem_cpy+0x1a>
	}
}
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009962:	b480      	push	{r7}
 8009964:	b087      	sub	sp, #28
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	617a      	str	r2, [r7, #20]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3b01      	subs	r3, #1
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f3      	bne.n	8009972 <mem_set+0x10>
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009998:	b480      	push	{r7}
 800999a:	b089      	sub	sp, #36	; 0x24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	61fa      	str	r2, [r7, #28]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	61ba      	str	r2, [r7, #24]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	1acb      	subs	r3, r1, r3
 80099c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <mem_cmp+0x40>
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0eb      	beq.n	80099b0 <mem_cmp+0x18>

	return r;
 80099d8:	697b      	ldr	r3, [r7, #20]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3724      	adds	r7, #36	; 0x24
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099f0:	e002      	b.n	80099f8 <chk_chr+0x12>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3301      	adds	r3, #1
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <chk_chr+0x26>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d1f2      	bne.n	80099f2 <chk_chr+0xc>
	return *str;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <lock_fs+0x22>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f002 fcdb 	bl	800c3ea <ff_req_grant>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <lock_fs+0x22>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <lock_fs+0x24>
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <unlock_fs+0x2e>
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	2b0c      	cmp	r3, #12
 8009a5e:	d00a      	beq.n	8009a76 <unlock_fs+0x2e>
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	2b0b      	cmp	r3, #11
 8009a64:	d007      	beq.n	8009a76 <unlock_fs+0x2e>
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	2b0f      	cmp	r3, #15
 8009a6a:	d004      	beq.n	8009a76 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f002 fccf 	bl	800c414 <ff_rel_grant>
	}
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60bb      	str	r3, [r7, #8]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	e029      	b.n	8009ae8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a94:	4a27      	ldr	r2, [pc, #156]	; (8009b34 <chk_lock+0xb4>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	011b      	lsls	r3, r3, #4
 8009a9a:	4413      	add	r3, r2
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01d      	beq.n	8009ade <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009aa2:	4a24      	ldr	r2, [pc, #144]	; (8009b34 <chk_lock+0xb4>)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	4413      	add	r3, r2
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d116      	bne.n	8009ae2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ab4:	4a1f      	ldr	r2, [pc, #124]	; (8009b34 <chk_lock+0xb4>)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	4413      	add	r3, r2
 8009abc:	3304      	adds	r3, #4
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d10c      	bne.n	8009ae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <chk_lock+0xb4>)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	011b      	lsls	r3, r3, #4
 8009ace:	4413      	add	r3, r2
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d102      	bne.n	8009ae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009adc:	e007      	b.n	8009aee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d9d2      	bls.n	8009a94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d109      	bne.n	8009b08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <chk_lock+0x80>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d101      	bne.n	8009b04 <chk_lock+0x84>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e010      	b.n	8009b26 <chk_lock+0xa6>
 8009b04:	2312      	movs	r3, #18
 8009b06:	e00e      	b.n	8009b26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <chk_lock+0xa0>
 8009b0e:	4a09      	ldr	r2, [pc, #36]	; (8009b34 <chk_lock+0xb4>)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	4413      	add	r3, r2
 8009b16:	330c      	adds	r3, #12
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1e:	d101      	bne.n	8009b24 <chk_lock+0xa4>
 8009b20:	2310      	movs	r3, #16
 8009b22:	e000      	b.n	8009b26 <chk_lock+0xa6>
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	200034b8 	.word	0x200034b8

08009b38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	e002      	b.n	8009b4a <enq_lock+0x12>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d806      	bhi.n	8009b5e <enq_lock+0x26>
 8009b50:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <enq_lock+0x40>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	4413      	add	r3, r2
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f2      	bne.n	8009b44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	bf14      	ite	ne
 8009b64:	2301      	movne	r3, #1
 8009b66:	2300      	moveq	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	200034b8 	.word	0x200034b8

08009b7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	e01f      	b.n	8009bcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b8c:	4a41      	ldr	r2, [pc, #260]	; (8009c94 <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	4413      	add	r3, r2
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d113      	bne.n	8009bc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b9e:	4a3d      	ldr	r2, [pc, #244]	; (8009c94 <inc_lock+0x118>)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d109      	bne.n	8009bc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009bb2:	4a38      	ldr	r2, [pc, #224]	; (8009c94 <inc_lock+0x118>)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	4413      	add	r3, r2
 8009bba:	3308      	adds	r3, #8
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d006      	beq.n	8009bd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d9dc      	bls.n	8009b8c <inc_lock+0x10>
 8009bd2:	e000      	b.n	8009bd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009bd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d132      	bne.n	8009c42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e002      	b.n	8009be8 <inc_lock+0x6c>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d806      	bhi.n	8009bfc <inc_lock+0x80>
 8009bee:	4a29      	ldr	r2, [pc, #164]	; (8009c94 <inc_lock+0x118>)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	011b      	lsls	r3, r3, #4
 8009bf4:	4413      	add	r3, r2
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f2      	bne.n	8009be2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d101      	bne.n	8009c06 <inc_lock+0x8a>
 8009c02:	2300      	movs	r3, #0
 8009c04:	e040      	b.n	8009c88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4922      	ldr	r1, [pc, #136]	; (8009c94 <inc_lock+0x118>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	440b      	add	r3, r1
 8009c12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	491e      	ldr	r1, [pc, #120]	; (8009c94 <inc_lock+0x118>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	440b      	add	r3, r1
 8009c20:	3304      	adds	r3, #4
 8009c22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	695a      	ldr	r2, [r3, #20]
 8009c28:	491a      	ldr	r1, [pc, #104]	; (8009c94 <inc_lock+0x118>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	440b      	add	r3, r1
 8009c30:	3308      	adds	r3, #8
 8009c32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009c34:	4a17      	ldr	r2, [pc, #92]	; (8009c94 <inc_lock+0x118>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	330c      	adds	r3, #12
 8009c3e:	2200      	movs	r2, #0
 8009c40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <inc_lock+0xe0>
 8009c48:	4a12      	ldr	r2, [pc, #72]	; (8009c94 <inc_lock+0x118>)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	011b      	lsls	r3, r3, #4
 8009c4e:	4413      	add	r3, r2
 8009c50:	330c      	adds	r3, #12
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <inc_lock+0xe0>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e015      	b.n	8009c88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d108      	bne.n	8009c74 <inc_lock+0xf8>
 8009c62:	4a0c      	ldr	r2, [pc, #48]	; (8009c94 <inc_lock+0x118>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	4413      	add	r3, r2
 8009c6a:	330c      	adds	r3, #12
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	e001      	b.n	8009c78 <inc_lock+0xfc>
 8009c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c78:	4906      	ldr	r1, [pc, #24]	; (8009c94 <inc_lock+0x118>)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	440b      	add	r3, r1
 8009c80:	330c      	adds	r3, #12
 8009c82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	200034b8 	.word	0x200034b8

08009c98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d825      	bhi.n	8009cf8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009cac:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <dec_lock+0x74>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	4413      	add	r3, r2
 8009cb4:	330c      	adds	r3, #12
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009cba:	89fb      	ldrh	r3, [r7, #14]
 8009cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc0:	d101      	bne.n	8009cc6 <dec_lock+0x2e>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009cc6:	89fb      	ldrh	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <dec_lock+0x3a>
 8009ccc:	89fb      	ldrh	r3, [r7, #14]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009cd2:	4a0e      	ldr	r2, [pc, #56]	; (8009d0c <dec_lock+0x74>)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	4413      	add	r3, r2
 8009cda:	330c      	adds	r3, #12
 8009cdc:	89fa      	ldrh	r2, [r7, #14]
 8009cde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ce0:	89fb      	ldrh	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <dec_lock+0x5a>
 8009ce6:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <dec_lock+0x74>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	4413      	add	r3, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	737b      	strb	r3, [r7, #13]
 8009cf6:	e001      	b.n	8009cfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009cfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200034b8 	.word	0x200034b8

08009d10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e010      	b.n	8009d40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009d1e:	4a0d      	ldr	r2, [pc, #52]	; (8009d54 <clear_lock+0x44>)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	4413      	add	r3, r2
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d105      	bne.n	8009d3a <clear_lock+0x2a>
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <clear_lock+0x44>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	4413      	add	r3, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d9eb      	bls.n	8009d1e <clear_lock+0xe>
	}
}
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	200034b8 	.word	0x200034b8

08009d58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	78db      	ldrb	r3, [r3, #3]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d034      	beq.n	8009dd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7858      	ldrb	r0, [r3, #1]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	f7ff fd0e 	bl	80097a0 <disk_write>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	73fb      	strb	r3, [r7, #15]
 8009d8e:	e022      	b.n	8009dd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d217      	bcs.n	8009dd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	789b      	ldrb	r3, [r3, #2]
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	e010      	b.n	8009dd0 <sync_window+0x78>
					wsect += fs->fsize;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4413      	add	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7858      	ldrb	r0, [r3, #1]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	f7ff fceb 	bl	80097a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d8eb      	bhi.n	8009dae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d01b      	beq.n	8009e30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ffad 	bl	8009d58 <sync_window>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d113      	bne.n	8009e30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7858      	ldrb	r0, [r3, #1]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e12:	2301      	movs	r3, #1
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	f7ff fca3 	bl	8009760 <disk_read>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009e20:	f04f 33ff 	mov.w	r3, #4294967295
 8009e24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ff87 	bl	8009d58 <sync_window>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d159      	bne.n	8009f08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d149      	bne.n	8009ef0 <sync_fs+0xb4>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	791b      	ldrb	r3, [r3, #4]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d145      	bne.n	8009ef0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	899b      	ldrh	r3, [r3, #12]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	2100      	movs	r1, #0
 8009e72:	f7ff fd76 	bl	8009962 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3338      	adds	r3, #56	; 0x38
 8009e7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff fd05 	bl	8009892 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3338      	adds	r3, #56	; 0x38
 8009e8c:	4921      	ldr	r1, [pc, #132]	; (8009f14 <sync_fs+0xd8>)
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff fd1a 	bl	80098c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3338      	adds	r3, #56	; 0x38
 8009e98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e9c:	491e      	ldr	r1, [pc, #120]	; (8009f18 <sync_fs+0xdc>)
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff fd12 	bl	80098c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3338      	adds	r3, #56	; 0x38
 8009ea8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f7ff fd08 	bl	80098c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3338      	adds	r3, #56	; 0x38
 8009ebc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f7ff fcfe 	bl	80098c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	7858      	ldrb	r0, [r3, #1]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f7ff fc5b 	bl	80097a0 <disk_write>
			fs->fsi_flag = 0;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fc71 	bl	80097e0 <disk_ioctl>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <sync_fs+0xcc>
 8009f04:	2301      	movs	r3, #1
 8009f06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	41615252 	.word	0x41615252
 8009f18:	61417272 	.word	0x61417272

08009f1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	3b02      	subs	r3, #2
 8009f2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	3b02      	subs	r3, #2
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d301      	bcc.n	8009f3c <clust2sect+0x20>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e008      	b.n	8009f4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	895b      	ldrh	r3, [r3, #10]
 8009f40:	461a      	mov	r2, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	fb03 f202 	mul.w	r2, r3, r2
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4c:	4413      	add	r3, r2
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d904      	bls.n	8009f7a <get_fat+0x20>
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d302      	bcc.n	8009f80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	e0bb      	b.n	800a0f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f80:	f04f 33ff 	mov.w	r3, #4294967295
 8009f84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	f000 8083 	beq.w	800a096 <get_fat+0x13c>
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	f300 80a7 	bgt.w	800a0e4 <get_fat+0x18a>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d002      	beq.n	8009fa0 <get_fat+0x46>
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d056      	beq.n	800a04c <get_fat+0xf2>
 8009f9e:	e0a1      	b.n	800a0e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6938      	ldr	r0, [r7, #16]
 8009fc4:	f7ff ff0c 	bl	8009de0 <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 808d 	bne.w	800a0ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	60fa      	str	r2, [r7, #12]
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	8992      	ldrh	r2, [r2, #12]
 8009fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fde:	fb01 f202 	mul.w	r2, r1, r2
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009fec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	899b      	ldrh	r3, [r3, #12]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ffe:	4413      	add	r3, r2
 800a000:	4619      	mov	r1, r3
 800a002:	6938      	ldr	r0, [r7, #16]
 800a004:	f7ff feec 	bl	8009de0 <move_window>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d16f      	bne.n	800a0ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	899b      	ldrh	r3, [r3, #12]
 800a012:	461a      	mov	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	fbb3 f1f2 	udiv	r1, r3, r2
 800a01a:	fb01 f202 	mul.w	r2, r1, r2
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4413      	add	r3, r2
 800a024:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a028:	021b      	lsls	r3, r3, #8
 800a02a:	461a      	mov	r2, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <get_fat+0xe8>
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	e002      	b.n	800a048 <get_fat+0xee>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a048:	617b      	str	r3, [r7, #20]
			break;
 800a04a:	e055      	b.n	800a0f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	899b      	ldrh	r3, [r3, #12]
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	b29b      	uxth	r3, r3
 800a058:	4619      	mov	r1, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a060:	4413      	add	r3, r2
 800a062:	4619      	mov	r1, r3
 800a064:	6938      	ldr	r0, [r7, #16]
 800a066:	f7ff febb 	bl	8009de0 <move_window>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d140      	bne.n	800a0f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	8992      	ldrh	r2, [r2, #12]
 800a07e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a082:	fb00 f202 	mul.w	r2, r0, r2
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	440b      	add	r3, r1
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fbc6 	bl	800981c <ld_word>
 800a090:	4603      	mov	r3, r0
 800a092:	617b      	str	r3, [r7, #20]
			break;
 800a094:	e030      	b.n	800a0f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	899b      	ldrh	r3, [r3, #12]
 800a09e:	089b      	lsrs	r3, r3, #2
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0aa:	4413      	add	r3, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6938      	ldr	r0, [r7, #16]
 800a0b0:	f7ff fe96 	bl	8009de0 <move_window>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11d      	bne.n	800a0f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	8992      	ldrh	r2, [r2, #12]
 800a0c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0cc:	fb00 f202 	mul.w	r2, r0, r2
 800a0d0:	1a9b      	subs	r3, r3, r2
 800a0d2:	440b      	add	r3, r1
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff fbb9 	bl	800984c <ld_dword>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0e0:	617b      	str	r3, [r7, #20]
			break;
 800a0e2:	e009      	b.n	800a0f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	e006      	b.n	800a0f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ea:	bf00      	nop
 800a0ec:	e004      	b.n	800a0f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0f6:	bf00      	nop
		}
	}

	return val;
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a102:	b590      	push	{r4, r7, lr}
 800a104:	b089      	sub	sp, #36	; 0x24
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a10e:	2302      	movs	r3, #2
 800a110:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b01      	cmp	r3, #1
 800a116:	f240 8102 	bls.w	800a31e <put_fat+0x21c>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	429a      	cmp	r2, r3
 800a122:	f080 80fc 	bcs.w	800a31e <put_fat+0x21c>
		switch (fs->fs_type) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	f000 80b6 	beq.w	800a29c <put_fat+0x19a>
 800a130:	2b03      	cmp	r3, #3
 800a132:	f300 80fd 	bgt.w	800a330 <put_fat+0x22e>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d003      	beq.n	800a142 <put_fat+0x40>
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	f000 8083 	beq.w	800a246 <put_fat+0x144>
 800a140:	e0f6      	b.n	800a330 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	61bb      	str	r3, [r7, #24]
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	085b      	lsrs	r3, r3, #1
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	4413      	add	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	899b      	ldrh	r3, [r3, #12]
 800a158:	4619      	mov	r1, r3
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a160:	4413      	add	r3, r2
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fe3b 	bl	8009de0 <move_window>
 800a16a:	4603      	mov	r3, r0
 800a16c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 80d6 	bne.w	800a322 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	61ba      	str	r2, [r7, #24]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	8992      	ldrh	r2, [r2, #12]
 800a186:	fbb3 f0f2 	udiv	r0, r3, r2
 800a18a:	fb00 f202 	mul.w	r2, r0, r2
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	440b      	add	r3, r1
 800a192:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00d      	beq.n	800a1ba <put_fat+0xb8>
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	b25b      	sxtb	r3, r3
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	b25a      	sxtb	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b25b      	sxtb	r3, r3
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	e001      	b.n	800a1be <put_fat+0xbc>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	899b      	ldrh	r3, [r3, #12]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d8:	4413      	add	r3, r2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fdff 	bl	8009de0 <move_window>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1e6:	7ffb      	ldrb	r3, [r7, #31]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 809c 	bne.w	800a326 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	899b      	ldrh	r3, [r3, #12]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a200:	fb00 f202 	mul.w	r2, r0, r2
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	440b      	add	r3, r1
 800a208:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d003      	beq.n	800a21c <put_fat+0x11a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	091b      	lsrs	r3, r3, #4
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	e00e      	b.n	800a23a <put_fat+0x138>
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f023 030f 	bic.w	r3, r3, #15
 800a226:	b25a      	sxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	b25b      	sxtb	r3, r3
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	b25b      	sxtb	r3, r3
 800a234:	4313      	orrs	r3, r2
 800a236:	b25b      	sxtb	r3, r3
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2201      	movs	r2, #1
 800a242:	70da      	strb	r2, [r3, #3]
			break;
 800a244:	e074      	b.n	800a330 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	899b      	ldrh	r3, [r3, #12]
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	b29b      	uxth	r3, r3
 800a252:	4619      	mov	r1, r3
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	fbb3 f3f1 	udiv	r3, r3, r1
 800a25a:	4413      	add	r3, r2
 800a25c:	4619      	mov	r1, r3
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fdbe 	bl	8009de0 <move_window>
 800a264:	4603      	mov	r3, r0
 800a266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a268:	7ffb      	ldrb	r3, [r7, #31]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d15d      	bne.n	800a32a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	8992      	ldrh	r2, [r2, #12]
 800a27c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a280:	fb00 f202 	mul.w	r2, r0, r2
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	440b      	add	r3, r1
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	b292      	uxth	r2, r2
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff faff 	bl	8009892 <st_word>
			fs->wflag = 1;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	70da      	strb	r2, [r3, #3]
			break;
 800a29a:	e049      	b.n	800a330 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	089b      	lsrs	r3, r3, #2
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fd93 	bl	8009de0 <move_window>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2be:	7ffb      	ldrb	r3, [r7, #31]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d134      	bne.n	800a32e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	8992      	ldrh	r2, [r2, #12]
 800a2d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2dc:	fb00 f202 	mul.w	r2, r0, r2
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fab1 	bl	800984c <ld_dword>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2f0:	4323      	orrs	r3, r4
 800a2f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	8992      	ldrh	r2, [r2, #12]
 800a302:	fbb3 f0f2 	udiv	r0, r3, r2
 800a306:	fb00 f202 	mul.w	r2, r0, r2
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	440b      	add	r3, r1
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff fad9 	bl	80098c8 <st_dword>
			fs->wflag = 1;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	70da      	strb	r2, [r3, #3]
			break;
 800a31c:	e008      	b.n	800a330 <put_fat+0x22e>
		}
	}
 800a31e:	bf00      	nop
 800a320:	e006      	b.n	800a330 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a322:	bf00      	nop
 800a324:	e004      	b.n	800a330 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a32e:	bf00      	nop
	return res;
 800a330:	7ffb      	ldrb	r3, [r7, #31]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3724      	adds	r7, #36	; 0x24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}

0800a33a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b088      	sub	sp, #32
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d904      	bls.n	800a360 <remove_chain+0x26>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d301      	bcc.n	800a364 <remove_chain+0x2a>
 800a360:	2302      	movs	r3, #2
 800a362:	e04b      	b.n	800a3fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00c      	beq.n	800a384 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	69b8      	ldr	r0, [r7, #24]
 800a372:	f7ff fec6 	bl	800a102 <put_fat>
 800a376:	4603      	mov	r3, r0
 800a378:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a37a:	7ffb      	ldrb	r3, [r7, #31]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <remove_chain+0x4a>
 800a380:	7ffb      	ldrb	r3, [r7, #31]
 800a382:	e03b      	b.n	800a3fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a384:	68b9      	ldr	r1, [r7, #8]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fde7 	bl	8009f5a <get_fat>
 800a38c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d031      	beq.n	800a3f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <remove_chain+0x64>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e02e      	b.n	800a3fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d101      	bne.n	800a3aa <remove_chain+0x70>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e028      	b.n	800a3fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	69b8      	ldr	r0, [r7, #24]
 800a3b0:	f7ff fea7 	bl	800a102 <put_fat>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a3b8:	7ffb      	ldrb	r3, [r7, #31]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <remove_chain+0x88>
 800a3be:	7ffb      	ldrb	r3, [r7, #31]
 800a3c0:	e01c      	b.n	800a3fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	3b02      	subs	r3, #2
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d20b      	bcs.n	800a3e8 <remove_chain+0xae>
			fs->free_clst++;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	791b      	ldrb	r3, [r3, #4]
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3c6      	bcc.n	800a384 <remove_chain+0x4a>
 800a3f6:	e000      	b.n	800a3fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a3f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10d      	bne.n	800a436 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <create_chain+0x2c>
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d31b      	bcc.n	800a468 <create_chain+0x64>
 800a430:	2301      	movs	r3, #1
 800a432:	61bb      	str	r3, [r7, #24]
 800a434:	e018      	b.n	800a468 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff fd8e 	bl	8009f5a <get_fat>
 800a43e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d801      	bhi.n	800a44a <create_chain+0x46>
 800a446:	2301      	movs	r3, #1
 800a448:	e070      	b.n	800a52c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a450:	d101      	bne.n	800a456 <create_chain+0x52>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	e06a      	b.n	800a52c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d201      	bcs.n	800a464 <create_chain+0x60>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	e063      	b.n	800a52c <create_chain+0x128>
		scl = clst;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	3301      	adds	r3, #1
 800a470:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d307      	bcc.n	800a48c <create_chain+0x88>
				ncl = 2;
 800a47c:	2302      	movs	r3, #2
 800a47e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a480:	69fa      	ldr	r2, [r7, #28]
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	429a      	cmp	r2, r3
 800a486:	d901      	bls.n	800a48c <create_chain+0x88>
 800a488:	2300      	movs	r3, #0
 800a48a:	e04f      	b.n	800a52c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a48c:	69f9      	ldr	r1, [r7, #28]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fd63 	bl	8009f5a <get_fat>
 800a494:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00e      	beq.n	800a4ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d003      	beq.n	800a4aa <create_chain+0xa6>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d101      	bne.n	800a4ae <create_chain+0xaa>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	e03e      	b.n	800a52c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d1da      	bne.n	800a46c <create_chain+0x68>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e038      	b.n	800a52c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a4ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c0:	69f9      	ldr	r1, [r7, #28]
 800a4c2:	6938      	ldr	r0, [r7, #16]
 800a4c4:	f7ff fe1d 	bl	800a102 <put_fat>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <create_chain+0xe2>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d006      	beq.n	800a4e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a4d8:	69fa      	ldr	r2, [r7, #28]
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6938      	ldr	r0, [r7, #16]
 800a4de:	f7ff fe10 	bl	800a102 <put_fat>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d116      	bne.n	800a51a <create_chain+0x116>
		fs->last_clst = ncl;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	3b02      	subs	r3, #2
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d804      	bhi.n	800a50a <create_chain+0x106>
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	1e5a      	subs	r2, r3, #1
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	791b      	ldrb	r3, [r3, #4]
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	711a      	strb	r2, [r3, #4]
 800a518:	e007      	b.n	800a52a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d102      	bne.n	800a526 <create_chain+0x122>
 800a520:	f04f 33ff 	mov.w	r3, #4294967295
 800a524:	e000      	b.n	800a528 <create_chain+0x124>
 800a526:	2301      	movs	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a52a:	69fb      	ldr	r3, [r7, #28]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	3304      	adds	r3, #4
 800a54a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	899b      	ldrh	r3, [r3, #12]
 800a550:	461a      	mov	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	fbb3 f3f2 	udiv	r3, r3, r2
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	8952      	ldrh	r2, [r2, #10]
 800a55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a560:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	613a      	str	r2, [r7, #16]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <clmt_clust+0x42>
 800a572:	2300      	movs	r3, #0
 800a574:	e010      	b.n	800a598 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d307      	bcc.n	800a58e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	3304      	adds	r3, #4
 800a58a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a58c:	e7e9      	b.n	800a562 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a58e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
}
 800a598:	4618      	mov	r0, r3
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5ba:	d204      	bcs.n	800a5c6 <dir_sdi+0x22>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	f003 031f 	and.w	r3, r3, #31
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e071      	b.n	800a6ae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d106      	bne.n	800a5ea <dir_sdi+0x46>
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d902      	bls.n	800a5ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	095b      	lsrs	r3, r3, #5
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	8912      	ldrh	r2, [r2, #8]
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d301      	bcc.n	800a600 <dir_sdi+0x5c>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	e056      	b.n	800a6ae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	61da      	str	r2, [r3, #28]
 800a608:	e02d      	b.n	800a666 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	895b      	ldrh	r3, [r3, #10]
 800a60e:	461a      	mov	r2, r3
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	899b      	ldrh	r3, [r3, #12]
 800a614:	fb02 f303 	mul.w	r3, r2, r3
 800a618:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a61a:	e019      	b.n	800a650 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6979      	ldr	r1, [r7, #20]
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff fc9a 	bl	8009f5a <get_fat>
 800a626:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d101      	bne.n	800a634 <dir_sdi+0x90>
 800a630:	2301      	movs	r3, #1
 800a632:	e03c      	b.n	800a6ae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d904      	bls.n	800a644 <dir_sdi+0xa0>
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	429a      	cmp	r2, r3
 800a642:	d301      	bcc.n	800a648 <dir_sdi+0xa4>
 800a644:	2302      	movs	r3, #2
 800a646:	e032      	b.n	800a6ae <dir_sdi+0x10a>
			ofs -= csz;
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	429a      	cmp	r2, r3
 800a656:	d2e1      	bcs.n	800a61c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a658:	6979      	ldr	r1, [r7, #20]
 800a65a:	6938      	ldr	r0, [r7, #16]
 800a65c:	f7ff fc5e 	bl	8009f1c <clust2sect>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <dir_sdi+0xd4>
 800a674:	2302      	movs	r3, #2
 800a676:	e01a      	b.n	800a6ae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	69da      	ldr	r2, [r3, #28]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	899b      	ldrh	r3, [r3, #12]
 800a680:	4619      	mov	r1, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	fbb3 f3f1 	udiv	r3, r3, r1
 800a688:	441a      	add	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	899b      	ldrh	r3, [r3, #12]
 800a698:	461a      	mov	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6a0:	fb00 f202 	mul.w	r2, r0, r2
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	18ca      	adds	r2, r1, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	3320      	adds	r3, #32
 800a6cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <dir_next+0x28>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6dc:	d301      	bcc.n	800a6e2 <dir_next+0x2c>
 800a6de:	2304      	movs	r3, #4
 800a6e0:	e0bb      	b.n	800a85a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	899b      	ldrh	r3, [r3, #12]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ee:	fb01 f202 	mul.w	r2, r1, r2
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 809d 	bne.w	800a834 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10b      	bne.n	800a724 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	8912      	ldrh	r2, [r2, #8]
 800a714:	4293      	cmp	r3, r2
 800a716:	f0c0 808d 	bcc.w	800a834 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	61da      	str	r2, [r3, #28]
 800a720:	2304      	movs	r3, #4
 800a722:	e09a      	b.n	800a85a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	899b      	ldrh	r3, [r3, #12]
 800a728:	461a      	mov	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	8952      	ldrh	r2, [r2, #10]
 800a734:	3a01      	subs	r2, #1
 800a736:	4013      	ands	r3, r2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d17b      	bne.n	800a834 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f7ff fc08 	bl	8009f5a <get_fat>
 800a74a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d801      	bhi.n	800a756 <dir_next+0xa0>
 800a752:	2302      	movs	r3, #2
 800a754:	e081      	b.n	800a85a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d101      	bne.n	800a762 <dir_next+0xac>
 800a75e:	2301      	movs	r3, #1
 800a760:	e07b      	b.n	800a85a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d359      	bcc.n	800a820 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	61da      	str	r2, [r3, #28]
 800a778:	2304      	movs	r3, #4
 800a77a:	e06e      	b.n	800a85a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7ff fe3d 	bl	800a404 <create_chain>
 800a78a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <dir_next+0xe0>
 800a792:	2307      	movs	r3, #7
 800a794:	e061      	b.n	800a85a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d101      	bne.n	800a7a0 <dir_next+0xea>
 800a79c:	2302      	movs	r3, #2
 800a79e:	e05c      	b.n	800a85a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a6:	d101      	bne.n	800a7ac <dir_next+0xf6>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e056      	b.n	800a85a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff fad3 	bl	8009d58 <sync_window>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <dir_next+0x106>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e04e      	b.n	800a85a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	899b      	ldrh	r3, [r3, #12]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f7ff f8ca 	bl	8009962 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	6979      	ldr	r1, [r7, #20]
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7ff fba1 	bl	8009f1c <clust2sect>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	635a      	str	r2, [r3, #52]	; 0x34
 800a7e0:	e012      	b.n	800a808 <dir_next+0x152>
						fs->wflag = 1;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff fab5 	bl	8009d58 <sync_window>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <dir_next+0x142>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e030      	b.n	800a85a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	635a      	str	r2, [r3, #52]	; 0x34
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	461a      	mov	r2, r3
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	4293      	cmp	r3, r2
 800a812:	d3e6      	bcc.n	800a7e2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a826:	6979      	ldr	r1, [r7, #20]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff fb77 	bl	8009f1c <clust2sect>
 800a82e:	4602      	mov	r2, r0
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	461a      	mov	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	fbb3 f0f2 	udiv	r0, r3, r2
 800a84c:	fb00 f202 	mul.w	r2, r0, r2
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	18ca      	adds	r2, r1, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b086      	sub	sp, #24
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a872:	2100      	movs	r1, #0
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fe95 	bl	800a5a4 <dir_sdi>
 800a87a:	4603      	mov	r3, r0
 800a87c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d12b      	bne.n	800a8dc <dir_alloc+0x7a>
		n = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	4619      	mov	r1, r3
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff faa6 	bl	8009de0 <move_window>
 800a894:	4603      	mov	r3, r0
 800a896:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d11d      	bne.n	800a8da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2be5      	cmp	r3, #229	; 0xe5
 800a8a6:	d004      	beq.n	800a8b2 <dir_alloc+0x50>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d107      	bne.n	800a8c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d102      	bne.n	800a8c6 <dir_alloc+0x64>
 800a8c0:	e00c      	b.n	800a8dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff fef4 	bl	800a6b6 <dir_next>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0d7      	beq.n	800a888 <dir_alloc+0x26>
 800a8d8:	e000      	b.n	800a8dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a8da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d101      	bne.n	800a8e6 <dir_alloc+0x84>
 800a8e2:	2307      	movs	r3, #7
 800a8e4:	75fb      	strb	r3, [r7, #23]
	return res;
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	331a      	adds	r3, #26
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe ff8c 	bl	800981c <ld_word>
 800a904:	4603      	mov	r3, r0
 800a906:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d109      	bne.n	800a924 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	3314      	adds	r3, #20
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe ff81 	bl	800981c <ld_word>
 800a91a:	4603      	mov	r3, r0
 800a91c:	041b      	lsls	r3, r3, #16
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a924:	68fb      	ldr	r3, [r7, #12]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	60f8      	str	r0, [r7, #12]
 800a936:	60b9      	str	r1, [r7, #8]
 800a938:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	331a      	adds	r3, #26
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	b292      	uxth	r2, r2
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe ffa4 	bl	8009892 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d109      	bne.n	800a966 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f103 0214 	add.w	r2, r3, #20
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	0c1b      	lsrs	r3, r3, #16
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f7fe ff96 	bl	8009892 <st_word>
	}
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fe10 	bl	800a5a4 <dir_sdi>
 800a984:	4603      	mov	r3, r0
 800a986:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <dir_find+0x24>
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	e03e      	b.n	800aa10 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	4619      	mov	r1, r3
 800a998:	6938      	ldr	r0, [r7, #16]
 800a99a:	f7ff fa21 	bl	8009de0 <move_window>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d12f      	bne.n	800aa08 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <dir_find+0x4e>
 800a9b6:	2304      	movs	r3, #4
 800a9b8:	75fb      	strb	r3, [r7, #23]
 800a9ba:	e028      	b.n	800aa0e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	330b      	adds	r3, #11
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	330b      	adds	r3, #11
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <dir_find+0x86>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a18      	ldr	r0, [r3, #32]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3324      	adds	r3, #36	; 0x24
 800a9e6:	220b      	movs	r2, #11
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f7fe ffd5 	bl	8009998 <mem_cmp>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fe5d 	bl	800a6b6 <dir_next>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0c5      	beq.n	800a992 <dir_find+0x24>
 800aa06:	e002      	b.n	800aa0e <dir_find+0xa0>
		if (res != FR_OK) break;
 800aa08:	bf00      	nop
 800aa0a:	e000      	b.n	800aa0e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa0c:	bf00      	nop

	return res;
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa26:	2101      	movs	r1, #1
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff1a 	bl	800a862 <dir_alloc>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d11c      	bne.n	800aa72 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f7ff f9ce 	bl	8009de0 <move_window>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d111      	bne.n	800aa72 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	2220      	movs	r2, #32
 800aa54:	2100      	movs	r1, #0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe ff83 	bl	8009962 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a18      	ldr	r0, [r3, #32]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3324      	adds	r3, #36	; 0x24
 800aa64:	220b      	movs	r2, #11
 800aa66:	4619      	mov	r1, r3
 800aa68:	f7fe ff5a 	bl	8009920 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aa92:	220b      	movs	r2, #11
 800aa94:	2120      	movs	r1, #32
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f7fe ff63 	bl	8009962 <mem_set>
	si = i = 0; ni = 8;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	61fa      	str	r2, [r7, #28]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	4413      	add	r3, r2
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aab6:	7efb      	ldrb	r3, [r7, #27]
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	d94e      	bls.n	800ab5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aabc:	7efb      	ldrb	r3, [r7, #27]
 800aabe:	2b2f      	cmp	r3, #47	; 0x2f
 800aac0:	d006      	beq.n	800aad0 <create_name+0x54>
 800aac2:	7efb      	ldrb	r3, [r7, #27]
 800aac4:	2b5c      	cmp	r3, #92	; 0x5c
 800aac6:	d110      	bne.n	800aaea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aac8:	e002      	b.n	800aad0 <create_name+0x54>
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	3301      	adds	r3, #1
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b2f      	cmp	r3, #47	; 0x2f
 800aada:	d0f6      	beq.n	800aaca <create_name+0x4e>
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	4413      	add	r3, r2
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b5c      	cmp	r3, #92	; 0x5c
 800aae6:	d0f0      	beq.n	800aaca <create_name+0x4e>
			break;
 800aae8:	e038      	b.n	800ab5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aaea:	7efb      	ldrb	r3, [r7, #27]
 800aaec:	2b2e      	cmp	r3, #46	; 0x2e
 800aaee:	d003      	beq.n	800aaf8 <create_name+0x7c>
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d30c      	bcc.n	800ab12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b0b      	cmp	r3, #11
 800aafc:	d002      	beq.n	800ab04 <create_name+0x88>
 800aafe:	7efb      	ldrb	r3, [r7, #27]
 800ab00:	2b2e      	cmp	r3, #46	; 0x2e
 800ab02:	d001      	beq.n	800ab08 <create_name+0x8c>
 800ab04:	2306      	movs	r3, #6
 800ab06:	e044      	b.n	800ab92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ab08:	2308      	movs	r3, #8
 800ab0a:	613b      	str	r3, [r7, #16]
 800ab0c:	230b      	movs	r3, #11
 800ab0e:	617b      	str	r3, [r7, #20]
			continue;
 800ab10:	e022      	b.n	800ab58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da04      	bge.n	800ab24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ab1a:	7efb      	ldrb	r3, [r7, #27]
 800ab1c:	3b80      	subs	r3, #128	; 0x80
 800ab1e:	4a1f      	ldr	r2, [pc, #124]	; (800ab9c <create_name+0x120>)
 800ab20:	5cd3      	ldrb	r3, [r2, r3]
 800ab22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ab24:	7efb      	ldrb	r3, [r7, #27]
 800ab26:	4619      	mov	r1, r3
 800ab28:	481d      	ldr	r0, [pc, #116]	; (800aba0 <create_name+0x124>)
 800ab2a:	f7fe ff5c 	bl	80099e6 <chk_chr>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <create_name+0xbc>
 800ab34:	2306      	movs	r3, #6
 800ab36:	e02c      	b.n	800ab92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ab38:	7efb      	ldrb	r3, [r7, #27]
 800ab3a:	2b60      	cmp	r3, #96	; 0x60
 800ab3c:	d905      	bls.n	800ab4a <create_name+0xce>
 800ab3e:	7efb      	ldrb	r3, [r7, #27]
 800ab40:	2b7a      	cmp	r3, #122	; 0x7a
 800ab42:	d802      	bhi.n	800ab4a <create_name+0xce>
 800ab44:	7efb      	ldrb	r3, [r7, #27]
 800ab46:	3b20      	subs	r3, #32
 800ab48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	613a      	str	r2, [r7, #16]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	4413      	add	r3, r2
 800ab54:	7efa      	ldrb	r2, [r7, #27]
 800ab56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ab58:	e7a6      	b.n	800aaa8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	441a      	add	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <create_name+0xf4>
 800ab6c:	2306      	movs	r3, #6
 800ab6e:	e010      	b.n	800ab92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2be5      	cmp	r3, #229	; 0xe5
 800ab76:	d102      	bne.n	800ab7e <create_name+0x102>
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2205      	movs	r2, #5
 800ab7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab7e:	7efb      	ldrb	r3, [r7, #27]
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d801      	bhi.n	800ab88 <create_name+0x10c>
 800ab84:	2204      	movs	r2, #4
 800ab86:	e000      	b.n	800ab8a <create_name+0x10e>
 800ab88:	2200      	movs	r2, #0
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	330b      	adds	r3, #11
 800ab8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ab90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0800f880 	.word	0x0800f880
 800aba0:	0800f814 	.word	0x0800f814

0800aba4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800abb8:	e002      	b.n	800abc0 <follow_path+0x1c>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b2f      	cmp	r3, #47	; 0x2f
 800abc6:	d0f8      	beq.n	800abba <follow_path+0x16>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b5c      	cmp	r3, #92	; 0x5c
 800abce:	d0f4      	beq.n	800abba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	2200      	movs	r2, #0
 800abd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b1f      	cmp	r3, #31
 800abdc:	d80a      	bhi.n	800abf4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2280      	movs	r2, #128	; 0x80
 800abe2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800abe6:	2100      	movs	r1, #0
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fcdb 	bl	800a5a4 <dir_sdi>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]
 800abf2:	e048      	b.n	800ac86 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abf4:	463b      	mov	r3, r7
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff ff3f 	bl	800aa7c <create_name>
 800abfe:	4603      	mov	r3, r0
 800ac00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d139      	bne.n	800ac7c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7ff feb0 	bl	800a96e <dir_find>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d12c      	bne.n	800ac80 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac26:	7afb      	ldrb	r3, [r7, #11]
 800ac28:	f003 0304 	and.w	r3, r3, #4
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d127      	bne.n	800ac80 <follow_path+0xdc>
 800ac30:	2305      	movs	r3, #5
 800ac32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac34:	e024      	b.n	800ac80 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac36:	7afb      	ldrb	r3, [r7, #11]
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d121      	bne.n	800ac84 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	799b      	ldrb	r3, [r3, #6]
 800ac44:	f003 0310 	and.w	r3, r3, #16
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac4c:	2305      	movs	r3, #5
 800ac4e:	75fb      	strb	r3, [r7, #23]
 800ac50:	e019      	b.n	800ac86 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	8992      	ldrh	r2, [r2, #12]
 800ac60:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac64:	fb00 f202 	mul.w	r2, r0, r2
 800ac68:	1a9b      	subs	r3, r3, r2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f7ff fe3e 	bl	800a8f0 <ld_clust>
 800ac74:	4602      	mov	r2, r0
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac7a:	e7bb      	b.n	800abf4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac7c:	bf00      	nop
 800ac7e:	e002      	b.n	800ac86 <follow_path+0xe2>
				break;
 800ac80:	bf00      	nop
 800ac82:	e000      	b.n	800ac86 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac84:	bf00      	nop
			}
		}
	}

	return res;
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d031      	beq.n	800ad0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	e002      	b.n	800acb4 <get_ldnumber+0x24>
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	3301      	adds	r3, #1
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b20      	cmp	r3, #32
 800acba:	d903      	bls.n	800acc4 <get_ldnumber+0x34>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	2b3a      	cmp	r3, #58	; 0x3a
 800acc2:	d1f4      	bne.n	800acae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b3a      	cmp	r3, #58	; 0x3a
 800acca:	d11c      	bne.n	800ad06 <get_ldnumber+0x76>
			tp = *path;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	60fa      	str	r2, [r7, #12]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	3b30      	subs	r3, #48	; 0x30
 800acdc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b09      	cmp	r3, #9
 800ace2:	d80e      	bhi.n	800ad02 <get_ldnumber+0x72>
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d10a      	bne.n	800ad02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d107      	bne.n	800ad02 <get_ldnumber+0x72>
					vol = (int)i;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	3301      	adds	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	e002      	b.n	800ad0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad0a:	693b      	ldr	r3, [r7, #16]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	371c      	adds	r7, #28
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	70da      	strb	r2, [r3, #3]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff f854 	bl	8009de0 <move_window>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <check_fs+0x2a>
 800ad3e:	2304      	movs	r3, #4
 800ad40:	e038      	b.n	800adb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3338      	adds	r3, #56	; 0x38
 800ad46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe fd66 	bl	800981c <ld_word>
 800ad50:	4603      	mov	r3, r0
 800ad52:	461a      	mov	r2, r3
 800ad54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d001      	beq.n	800ad60 <check_fs+0x48>
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e029      	b.n	800adb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad66:	2be9      	cmp	r3, #233	; 0xe9
 800ad68:	d009      	beq.n	800ad7e <check_fs+0x66>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad70:	2beb      	cmp	r3, #235	; 0xeb
 800ad72:	d11e      	bne.n	800adb2 <check_fs+0x9a>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad7a:	2b90      	cmp	r3, #144	; 0x90
 800ad7c:	d119      	bne.n	800adb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3338      	adds	r3, #56	; 0x38
 800ad82:	3336      	adds	r3, #54	; 0x36
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fe fd61 	bl	800984c <ld_dword>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad90:	4a0a      	ldr	r2, [pc, #40]	; (800adbc <check_fs+0xa4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d101      	bne.n	800ad9a <check_fs+0x82>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e00c      	b.n	800adb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3338      	adds	r3, #56	; 0x38
 800ad9e:	3352      	adds	r3, #82	; 0x52
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe fd53 	bl	800984c <ld_dword>
 800ada6:	4603      	mov	r3, r0
 800ada8:	4a05      	ldr	r2, [pc, #20]	; (800adc0 <check_fs+0xa8>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d101      	bne.n	800adb2 <check_fs+0x9a>
 800adae:	2300      	movs	r3, #0
 800adb0:	e000      	b.n	800adb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800adb2:	2302      	movs	r3, #2
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	00544146 	.word	0x00544146
 800adc0:	33544146 	.word	0x33544146

0800adc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b096      	sub	sp, #88	; 0x58
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7ff ff59 	bl	800ac90 <get_ldnumber>
 800adde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ade0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	da01      	bge.n	800adea <find_volume+0x26>
 800ade6:	230b      	movs	r3, #11
 800ade8:	e26a      	b.n	800b2c0 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800adea:	4aa3      	ldr	r2, [pc, #652]	; (800b078 <find_volume+0x2b4>)
 800adec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <find_volume+0x3a>
 800adfa:	230c      	movs	r3, #12
 800adfc:	e260      	b.n	800b2c0 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800adfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae00:	f7fe fe0c 	bl	8009a1c <lock_fs>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <find_volume+0x4a>
 800ae0a:	230f      	movs	r3, #15
 800ae0c:	e258      	b.n	800b2c0 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	f023 0301 	bic.w	r3, r3, #1
 800ae1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01a      	beq.n	800ae5a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	785b      	ldrb	r3, [r3, #1]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe fc59 	bl	80096e0 <disk_status>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10c      	bne.n	800ae5a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <find_volume+0x92>
 800ae46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ae52:	230a      	movs	r3, #10
 800ae54:	e234      	b.n	800b2c0 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800ae56:	2300      	movs	r3, #0
 800ae58:	e232      	b.n	800b2c0 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	785b      	ldrb	r3, [r3, #1]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fc51 	bl	8009714 <disk_initialize>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae84:	2303      	movs	r3, #3
 800ae86:	e21b      	b.n	800b2c0 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <find_volume+0xda>
 800ae8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ae9a:	230a      	movs	r3, #10
 800ae9c:	e210      	b.n	800b2c0 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	7858      	ldrb	r0, [r3, #1]
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	330c      	adds	r3, #12
 800aea6:	461a      	mov	r2, r3
 800aea8:	2102      	movs	r1, #2
 800aeaa:	f7fe fc99 	bl	80097e0 <disk_ioctl>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <find_volume+0xf4>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e203      	b.n	800b2c0 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	899b      	ldrh	r3, [r3, #12]
 800aebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec0:	d80d      	bhi.n	800aede <find_volume+0x11a>
 800aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec4:	899b      	ldrh	r3, [r3, #12]
 800aec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeca:	d308      	bcc.n	800aede <find_volume+0x11a>
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	899b      	ldrh	r3, [r3, #12]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	899b      	ldrh	r3, [r3, #12]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	4013      	ands	r3, r2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <find_volume+0x11e>
 800aede:	2301      	movs	r3, #1
 800aee0:	e1ee      	b.n	800b2c0 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aeea:	f7ff ff15 	bl	800ad18 <check_fs>
 800aeee:	4603      	mov	r3, r0
 800aef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d149      	bne.n	800af90 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aefc:	2300      	movs	r3, #0
 800aefe:	643b      	str	r3, [r7, #64]	; 0x40
 800af00:	e01e      	b.n	800af40 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800af08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af10:	4413      	add	r3, r2
 800af12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	3304      	adds	r3, #4
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <find_volume+0x168>
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	3308      	adds	r3, #8
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe fc92 	bl	800984c <ld_dword>
 800af28:	4602      	mov	r2, r0
 800af2a:	e000      	b.n	800af2e <find_volume+0x16a>
 800af2c:	2200      	movs	r2, #0
 800af2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	3358      	adds	r3, #88	; 0x58
 800af34:	443b      	add	r3, r7
 800af36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3c:	3301      	adds	r3, #1
 800af3e:	643b      	str	r3, [r7, #64]	; 0x40
 800af40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af42:	2b03      	cmp	r3, #3
 800af44:	d9dd      	bls.n	800af02 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af46:	2300      	movs	r3, #0
 800af48:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <find_volume+0x192>
 800af50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af52:	3b01      	subs	r3, #1
 800af54:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	3358      	adds	r3, #88	; 0x58
 800af5c:	443b      	add	r3, r7
 800af5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af66:	2b00      	cmp	r3, #0
 800af68:	d005      	beq.n	800af76 <find_volume+0x1b2>
 800af6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af6e:	f7ff fed3 	bl	800ad18 <check_fs>
 800af72:	4603      	mov	r3, r0
 800af74:	e000      	b.n	800af78 <find_volume+0x1b4>
 800af76:	2303      	movs	r3, #3
 800af78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af80:	2b01      	cmp	r3, #1
 800af82:	d905      	bls.n	800af90 <find_volume+0x1cc>
 800af84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af86:	3301      	adds	r3, #1
 800af88:	643b      	str	r3, [r7, #64]	; 0x40
 800af8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d9e2      	bls.n	800af56 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af94:	2b04      	cmp	r3, #4
 800af96:	d101      	bne.n	800af9c <find_volume+0x1d8>
 800af98:	2301      	movs	r3, #1
 800af9a:	e191      	b.n	800b2c0 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d901      	bls.n	800afa8 <find_volume+0x1e4>
 800afa4:	230d      	movs	r3, #13
 800afa6:	e18b      	b.n	800b2c0 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	3338      	adds	r3, #56	; 0x38
 800afac:	330b      	adds	r3, #11
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fc34 	bl	800981c <ld_word>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	899b      	ldrh	r3, [r3, #12]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d001      	beq.n	800afc4 <find_volume+0x200>
 800afc0:	230d      	movs	r3, #13
 800afc2:	e17d      	b.n	800b2c0 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	3338      	adds	r3, #56	; 0x38
 800afc8:	3316      	adds	r3, #22
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fc26 	bl	800981c <ld_word>
 800afd0:	4603      	mov	r3, r0
 800afd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800afd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <find_volume+0x224>
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	3338      	adds	r3, #56	; 0x38
 800afde:	3324      	adds	r3, #36	; 0x24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fc33 	bl	800984c <ld_dword>
 800afe6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	789b      	ldrb	r3, [r3, #2]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d005      	beq.n	800b00c <find_volume+0x248>
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	789b      	ldrb	r3, [r3, #2]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d001      	beq.n	800b00c <find_volume+0x248>
 800b008:	230d      	movs	r3, #13
 800b00a:	e159      	b.n	800b2c0 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	789b      	ldrb	r3, [r3, #2]
 800b010:	461a      	mov	r2, r3
 800b012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b020:	b29a      	uxth	r2, r3
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	895b      	ldrh	r3, [r3, #10]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d008      	beq.n	800b040 <find_volume+0x27c>
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	895b      	ldrh	r3, [r3, #10]
 800b032:	461a      	mov	r2, r3
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	895b      	ldrh	r3, [r3, #10]
 800b038:	3b01      	subs	r3, #1
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <find_volume+0x280>
 800b040:	230d      	movs	r3, #13
 800b042:	e13d      	b.n	800b2c0 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	3338      	adds	r3, #56	; 0x38
 800b048:	3311      	adds	r3, #17
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fbe6 	bl	800981c <ld_word>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	891b      	ldrh	r3, [r3, #8]
 800b05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b05e:	8992      	ldrh	r2, [r2, #12]
 800b060:	0952      	lsrs	r2, r2, #5
 800b062:	b292      	uxth	r2, r2
 800b064:	fbb3 f1f2 	udiv	r1, r3, r2
 800b068:	fb01 f202 	mul.w	r2, r1, r2
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <find_volume+0x2b8>
 800b074:	230d      	movs	r3, #13
 800b076:	e123      	b.n	800b2c0 <find_volume+0x4fc>
 800b078:	200034b0 	.word	0x200034b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	3338      	adds	r3, #56	; 0x38
 800b080:	3313      	adds	r3, #19
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fbca 	bl	800981c <ld_word>
 800b088:	4603      	mov	r3, r0
 800b08a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b08c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <find_volume+0x2dc>
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	3338      	adds	r3, #56	; 0x38
 800b096:	3320      	adds	r3, #32
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fbd7 	bl	800984c <ld_dword>
 800b09e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	3338      	adds	r3, #56	; 0x38
 800b0a4:	330e      	adds	r3, #14
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fbb8 	bl	800981c <ld_word>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <find_volume+0x2f6>
 800b0b6:	230d      	movs	r3, #13
 800b0b8:	e102      	b.n	800b2c0 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0be:	4413      	add	r3, r2
 800b0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0c2:	8911      	ldrh	r1, [r2, #8]
 800b0c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0c6:	8992      	ldrh	r2, [r2, #12]
 800b0c8:	0952      	lsrs	r2, r2, #5
 800b0ca:	b292      	uxth	r2, r2
 800b0cc:	fbb1 f2f2 	udiv	r2, r1, r2
 800b0d0:	b292      	uxth	r2, r2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d201      	bcs.n	800b0e2 <find_volume+0x31e>
 800b0de:	230d      	movs	r3, #13
 800b0e0:	e0ee      	b.n	800b2c0 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ea:	8952      	ldrh	r2, [r2, #10]
 800b0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <find_volume+0x338>
 800b0f8:	230d      	movs	r3, #13
 800b0fa:	e0e1      	b.n	800b2c0 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b108:	4293      	cmp	r3, r2
 800b10a:	d802      	bhi.n	800b112 <find_volume+0x34e>
 800b10c:	2302      	movs	r3, #2
 800b10e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b118:	4293      	cmp	r3, r2
 800b11a:	d802      	bhi.n	800b122 <find_volume+0x35e>
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	1c9a      	adds	r2, r3, #2
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b12e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b134:	441a      	add	r2, r3
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b13a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	441a      	add	r2, r3
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d11e      	bne.n	800b18a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	3338      	adds	r3, #56	; 0x38
 800b150:	332a      	adds	r3, #42	; 0x2a
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fb62 	bl	800981c <ld_word>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <find_volume+0x39e>
 800b15e:	230d      	movs	r3, #13
 800b160:	e0ae      	b.n	800b2c0 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	891b      	ldrh	r3, [r3, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <find_volume+0x3aa>
 800b16a:	230d      	movs	r3, #13
 800b16c:	e0a8      	b.n	800b2c0 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	3338      	adds	r3, #56	; 0x38
 800b172:	332c      	adds	r3, #44	; 0x2c
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fb69 	bl	800984c <ld_dword>
 800b17a:	4602      	mov	r2, r0
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	647b      	str	r3, [r7, #68]	; 0x44
 800b188:	e01f      	b.n	800b1ca <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	891b      	ldrh	r3, [r3, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <find_volume+0x3d2>
 800b192:	230d      	movs	r3, #13
 800b194:	e094      	b.n	800b2c0 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19c:	441a      	add	r2, r3
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d103      	bne.n	800b1b2 <find_volume+0x3ee>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	005b      	lsls	r3, r3, #1
 800b1b0:	e00a      	b.n	800b1c8 <find_volume+0x404>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	69da      	ldr	r2, [r3, #28]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	085a      	lsrs	r2, r3, #1
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b1c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	6a1a      	ldr	r2, [r3, #32]
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	899b      	ldrh	r3, [r3, #12]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d6:	440b      	add	r3, r1
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1dc:	8989      	ldrh	r1, [r1, #12]
 800b1de:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d201      	bcs.n	800b1ea <find_volume+0x426>
 800b1e6:	230d      	movs	r3, #13
 800b1e8:	e06a      	b.n	800b2c0 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f0:	619a      	str	r2, [r3, #24]
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	699a      	ldr	r2, [r3, #24]
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	2280      	movs	r2, #128	; 0x80
 800b1fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b204:	2b03      	cmp	r3, #3
 800b206:	d149      	bne.n	800b29c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	3338      	adds	r3, #56	; 0x38
 800b20c:	3330      	adds	r3, #48	; 0x30
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fe fb04 	bl	800981c <ld_word>
 800b214:	4603      	mov	r3, r0
 800b216:	2b01      	cmp	r3, #1
 800b218:	d140      	bne.n	800b29c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b21c:	3301      	adds	r3, #1
 800b21e:	4619      	mov	r1, r3
 800b220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b222:	f7fe fddd 	bl	8009de0 <move_window>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d137      	bne.n	800b29c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	2200      	movs	r2, #0
 800b230:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	3338      	adds	r3, #56	; 0x38
 800b236:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe faee 	bl	800981c <ld_word>
 800b240:	4603      	mov	r3, r0
 800b242:	461a      	mov	r2, r3
 800b244:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b248:	429a      	cmp	r2, r3
 800b24a:	d127      	bne.n	800b29c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	3338      	adds	r3, #56	; 0x38
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe fafb 	bl	800984c <ld_dword>
 800b256:	4603      	mov	r3, r0
 800b258:	4a1b      	ldr	r2, [pc, #108]	; (800b2c8 <find_volume+0x504>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d11e      	bne.n	800b29c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	3338      	adds	r3, #56	; 0x38
 800b262:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe faf0 	bl	800984c <ld_dword>
 800b26c:	4603      	mov	r3, r0
 800b26e:	4a17      	ldr	r2, [pc, #92]	; (800b2cc <find_volume+0x508>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d113      	bne.n	800b29c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	3338      	adds	r3, #56	; 0x38
 800b278:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fae5 	bl	800984c <ld_dword>
 800b282:	4602      	mov	r2, r0
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	3338      	adds	r3, #56	; 0x38
 800b28c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fadb 	bl	800984c <ld_dword>
 800b296:	4602      	mov	r2, r0
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <find_volume+0x50c>)
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <find_volume+0x50c>)
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <find_volume+0x50c>)
 800b2b2:	881a      	ldrh	r2, [r3, #0]
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2ba:	f7fe fd29 	bl	8009d10 <clear_lock>
#endif
	return FR_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3758      	adds	r7, #88	; 0x58
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	41615252 	.word	0x41615252
 800b2cc:	61417272 	.word	0x61417272
 800b2d0:	200034b4 	.word	0x200034b4

0800b2d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b2de:	2309      	movs	r3, #9
 800b2e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d02e      	beq.n	800b346 <validate+0x72>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d02a      	beq.n	800b346 <validate+0x72>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d025      	beq.n	800b346 <validate+0x72>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	889a      	ldrh	r2, [r3, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	88db      	ldrh	r3, [r3, #6]
 800b304:	429a      	cmp	r2, r3
 800b306:	d11e      	bne.n	800b346 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fb85 	bl	8009a1c <lock_fs>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d014      	beq.n	800b342 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	785b      	ldrb	r3, [r3, #1]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe f9de 	bl	80096e0 <disk_status>
 800b324:	4603      	mov	r3, r0
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <validate+0x60>
				res = FR_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
 800b332:	e008      	b.n	800b346 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2100      	movs	r1, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fb84 	bl	8009a48 <unlock_fs>
 800b340:	e001      	b.n	800b346 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b342:	230f      	movs	r3, #15
 800b344:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <validate+0x7e>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	e000      	b.n	800b354 <validate+0x80>
 800b352:	2300      	movs	r3, #0
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	6013      	str	r3, [r2, #0]
	return res;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b376:	f107 0310 	add.w	r3, r7, #16
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fc88 	bl	800ac90 <get_ldnumber>
 800b380:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	2b00      	cmp	r3, #0
 800b386:	da01      	bge.n	800b38c <f_mount+0x28>
 800b388:	230b      	movs	r3, #11
 800b38a:	e048      	b.n	800b41e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b38c:	4a26      	ldr	r2, [pc, #152]	; (800b428 <f_mount+0xc4>)
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b394:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00f      	beq.n	800b3bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b39c:	69b8      	ldr	r0, [r7, #24]
 800b39e:	f7fe fcb7 	bl	8009d10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f001 f813 	bl	800c3d2 <ff_del_syncobj>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <f_mount+0x52>
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e033      	b.n	800b41e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00f      	beq.n	800b3e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3310      	adds	r3, #16
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	f000 ffdd 	bl	800c392 <ff_cre_syncobj>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <f_mount+0x7e>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e01d      	b.n	800b41e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4910      	ldr	r1, [pc, #64]	; (800b428 <f_mount+0xc4>)
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <f_mount+0x94>
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d001      	beq.n	800b3fc <f_mount+0x98>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e010      	b.n	800b41e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3fc:	f107 010c 	add.w	r1, r7, #12
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	2200      	movs	r2, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff fcdc 	bl	800adc4 <find_volume>
 800b40c:	4603      	mov	r3, r0
 800b40e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	7dfa      	ldrb	r2, [r7, #23]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fb16 	bl	8009a48 <unlock_fs>
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	200034b0 	.word	0x200034b0

0800b42c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b098      	sub	sp, #96	; 0x60
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <f_open+0x18>
 800b440:	2309      	movs	r3, #9
 800b442:	e1c2      	b.n	800b7ca <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b44c:	79fa      	ldrb	r2, [r7, #7]
 800b44e:	f107 0110 	add.w	r1, r7, #16
 800b452:	f107 0308 	add.w	r3, r7, #8
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff fcb4 	bl	800adc4 <find_volume>
 800b45c:	4603      	mov	r3, r0
 800b45e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b466:	2b00      	cmp	r3, #0
 800b468:	f040 819f 	bne.w	800b7aa <f_open+0x37e>
		dj.obj.fs = fs;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	f107 0314 	add.w	r3, r7, #20
 800b476:	4611      	mov	r1, r2
 800b478:	4618      	mov	r0, r3
 800b47a:	f7ff fb93 	bl	800aba4 <follow_path>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d11a      	bne.n	800b4c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b48c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b490:	b25b      	sxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	da03      	bge.n	800b49e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b496:	2306      	movs	r3, #6
 800b498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b49c:	e011      	b.n	800b4c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	f023 0301 	bic.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	2301      	movne	r3, #1
 800b4aa:	2300      	moveq	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f107 0314 	add.w	r3, r7, #20
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fae2 	bl	8009a80 <chk_lock>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	f003 031c 	and.w	r3, r3, #28
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d07f      	beq.n	800b5cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d017      	beq.n	800b504 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d10e      	bne.n	800b4fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4dc:	f7fe fb2c 	bl	8009b38 <enq_lock>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d006      	beq.n	800b4f4 <f_open+0xc8>
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff fa94 	bl	800aa18 <dir_register>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	e000      	b.n	800b4f6 <f_open+0xca>
 800b4f4:	2312      	movs	r3, #18
 800b4f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	f043 0308 	orr.w	r3, r3, #8
 800b500:	71fb      	strb	r3, [r7, #7]
 800b502:	e010      	b.n	800b526 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b504:	7ebb      	ldrb	r3, [r7, #26]
 800b506:	f003 0311 	and.w	r3, r3, #17
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <f_open+0xea>
					res = FR_DENIED;
 800b50e:	2307      	movs	r3, #7
 800b510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b514:	e007      	b.n	800b526 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	f003 0304 	and.w	r3, r3, #4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <f_open+0xfa>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d168      	bne.n	800b600 <f_open+0x1d4>
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	f003 0308 	and.w	r3, r3, #8
 800b534:	2b00      	cmp	r3, #0
 800b536:	d063      	beq.n	800b600 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b538:	f7fe f870 	bl	800961c <get_fattime>
 800b53c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b540:	330e      	adds	r3, #14
 800b542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe f9bf 	bl	80098c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54c:	3316      	adds	r3, #22
 800b54e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe f9b9 	bl	80098c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	330b      	adds	r3, #11
 800b55a:	2220      	movs	r2, #32
 800b55c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b562:	4611      	mov	r1, r2
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff f9c3 	bl	800a8f0 <ld_clust>
 800b56a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b570:	2200      	movs	r2, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff f9db 	bl	800a92e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57a:	331c      	adds	r3, #28
 800b57c:	2100      	movs	r1, #0
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe f9a2 	bl	80098c8 <st_dword>
					fs->wflag = 1;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	2201      	movs	r2, #1
 800b588:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d037      	beq.n	800b600 <f_open+0x1d4>
						dw = fs->winsect;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b594:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b596:	f107 0314 	add.w	r3, r7, #20
 800b59a:	2200      	movs	r2, #0
 800b59c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fecb 	bl	800a33a <remove_chain>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b5aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d126      	bne.n	800b600 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe fc12 	bl	8009de0 <move_window>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5c6:	3a01      	subs	r2, #1
 800b5c8:	615a      	str	r2, [r3, #20]
 800b5ca:	e019      	b.n	800b600 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d115      	bne.n	800b600 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5d4:	7ebb      	ldrb	r3, [r7, #26]
 800b5d6:	f003 0310 	and.w	r3, r3, #16
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5de:	2304      	movs	r3, #4
 800b5e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5e4:	e00c      	b.n	800b600 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d007      	beq.n	800b600 <f_open+0x1d4>
 800b5f0:	7ebb      	ldrb	r3, [r7, #26]
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d002      	beq.n	800b600 <f_open+0x1d4>
						res = FR_DENIED;
 800b5fa:	2307      	movs	r3, #7
 800b5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b604:	2b00      	cmp	r3, #0
 800b606:	d128      	bne.n	800b65a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b608:	79fb      	ldrb	r3, [r7, #7]
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b618:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	f023 0301 	bic.w	r3, r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bf14      	ite	ne
 800b632:	2301      	movne	r3, #1
 800b634:	2300      	moveq	r3, #0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	461a      	mov	r2, r3
 800b63a:	f107 0314 	add.w	r3, r7, #20
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fa9b 	bl	8009b7c <inc_lock>
 800b646:	4602      	mov	r2, r0
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <f_open+0x22e>
 800b654:	2302      	movs	r3, #2
 800b656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f040 80a3 	bne.w	800b7aa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b668:	4611      	mov	r1, r2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff f940 	bl	800a8f0 <ld_clust>
 800b670:	4602      	mov	r2, r0
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	331c      	adds	r3, #28
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe f8e6 	bl	800984c <ld_dword>
 800b680:	4602      	mov	r2, r0
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	88da      	ldrh	r2, [r3, #6]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	79fa      	ldrb	r2, [r7, #7]
 800b69e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3330      	adds	r3, #48	; 0x30
 800b6b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe f950 	bl	8009962 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d06e      	beq.n	800b7aa <f_open+0x37e>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d06a      	beq.n	800b7aa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	68da      	ldr	r2, [r3, #12]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	895b      	ldrh	r3, [r3, #10]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	899b      	ldrh	r3, [r3, #12]
 800b6e6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6f8:	e016      	b.n	800b728 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fc2b 	bl	8009f5a <get_fat>
 800b704:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d802      	bhi.n	800b712 <f_open+0x2e6>
 800b70c:	2302      	movs	r3, #2
 800b70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b718:	d102      	bne.n	800b720 <f_open+0x2f4>
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	657b      	str	r3, [r7, #84]	; 0x54
 800b728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d103      	bne.n	800b738 <f_open+0x30c>
 800b730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b734:	429a      	cmp	r2, r3
 800b736:	d8e0      	bhi.n	800b6fa <f_open+0x2ce>
				}
				fp->clust = clst;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b73c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b73e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b742:	2b00      	cmp	r3, #0
 800b744:	d131      	bne.n	800b7aa <f_open+0x37e>
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	899b      	ldrh	r3, [r3, #12]
 800b74a:	461a      	mov	r2, r3
 800b74c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b74e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b752:	fb01 f202 	mul.w	r2, r1, r2
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d026      	beq.n	800b7aa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fbdb 	bl	8009f1c <clust2sect>
 800b766:	6478      	str	r0, [r7, #68]	; 0x44
 800b768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <f_open+0x34a>
						res = FR_INT_ERR;
 800b76e:	2302      	movs	r3, #2
 800b770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b774:	e019      	b.n	800b7aa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	899b      	ldrh	r3, [r3, #12]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b77e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b784:	441a      	add	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	7858      	ldrb	r0, [r3, #1]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a1a      	ldr	r2, [r3, #32]
 800b798:	2301      	movs	r3, #1
 800b79a:	f7fd ffe1 	bl	8009760 <disk_read>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <f_open+0x37e>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <f_open+0x38c>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe f941 	bl	8009a48 <unlock_fs>
 800b7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3760      	adds	r7, #96	; 0x60
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b08c      	sub	sp, #48	; 0x30
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	607a      	str	r2, [r7, #4]
 800b7de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f107 0210 	add.w	r2, r7, #16
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff fd6e 	bl	800b2d4 <validate>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d107      	bne.n	800b816 <f_write+0x44>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	7d5b      	ldrb	r3, [r3, #21]
 800b80a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b80e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <f_write+0x58>
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b81c:	4611      	mov	r1, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe f912 	bl	8009a48 <unlock_fs>
 800b824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b828:	e192      	b.n	800bb50 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	7d1b      	ldrb	r3, [r3, #20]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <f_write+0x72>
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2107      	movs	r1, #7
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f904 	bl	8009a48 <unlock_fs>
 800b840:	2307      	movs	r3, #7
 800b842:	e185      	b.n	800bb50 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	699a      	ldr	r2, [r3, #24]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	441a      	add	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	f080 816a 	bcs.w	800bb2a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	43db      	mvns	r3, r3
 800b85c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b85e:	e164      	b.n	800bb2a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	8992      	ldrh	r2, [r2, #12]
 800b868:	fbb3 f1f2 	udiv	r1, r3, r2
 800b86c:	fb01 f202 	mul.w	r2, r1, r2
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	2b00      	cmp	r3, #0
 800b874:	f040 810f 	bne.w	800ba96 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	8992      	ldrh	r2, [r2, #12]
 800b880:	fbb3 f3f2 	udiv	r3, r3, r2
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	8952      	ldrh	r2, [r2, #10]
 800b888:	3a01      	subs	r2, #1
 800b88a:	4013      	ands	r3, r2
 800b88c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d14d      	bne.n	800b930 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10c      	bne.n	800b8b6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11a      	bne.n	800b8de <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fda9 	bl	800a404 <create_chain>
 800b8b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8b4:	e013      	b.n	800b8de <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7fe fe35 	bl	800a534 <clmt_clust>
 800b8ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8cc:	e007      	b.n	800b8de <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe fd94 	bl	800a404 <create_chain>
 800b8dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8127 	beq.w	800bb34 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d109      	bne.n	800b900 <f_write+0x12e>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	755a      	strb	r2, [r3, #21]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe f8a6 	bl	8009a48 <unlock_fs>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e127      	b.n	800bb50 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b906:	d109      	bne.n	800b91c <f_write+0x14a>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2201      	movs	r2, #1
 800b90c:	755a      	strb	r2, [r3, #21]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2101      	movs	r1, #1
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe f898 	bl	8009a48 <unlock_fs>
 800b918:	2301      	movs	r3, #1
 800b91a:	e119      	b.n	800bb50 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b920:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d102      	bne.n	800b930 <f_write+0x15e>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	7d1b      	ldrb	r3, [r3, #20]
 800b934:	b25b      	sxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	da1d      	bge.n	800b976 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	7858      	ldrb	r0, [r3, #1]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1a      	ldr	r2, [r3, #32]
 800b948:	2301      	movs	r3, #1
 800b94a:	f7fd ff29 	bl	80097a0 <disk_write>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <f_write+0x196>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2201      	movs	r2, #1
 800b958:	755a      	strb	r2, [r3, #21]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	2101      	movs	r1, #1
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe f872 	bl	8009a48 <unlock_fs>
 800b964:	2301      	movs	r3, #1
 800b966:	e0f3      	b.n	800bb50 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	7d1b      	ldrb	r3, [r3, #20]
 800b96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b970:	b2da      	uxtb	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	69db      	ldr	r3, [r3, #28]
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fe facc 	bl	8009f1c <clust2sect>
 800b984:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d109      	bne.n	800b9a0 <f_write+0x1ce>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2202      	movs	r2, #2
 800b990:	755a      	strb	r2, [r3, #21]
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2102      	movs	r1, #2
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe f856 	bl	8009a48 <unlock_fs>
 800b99c:	2302      	movs	r3, #2
 800b99e:	e0d7      	b.n	800bb50 <f_write+0x37e>
			sect += csect;
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	899b      	ldrh	r3, [r3, #12]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d048      	beq.n	800ba4e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	8952      	ldrh	r2, [r2, #10]
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d905      	bls.n	800b9d6 <f_write+0x204>
					cc = fs->csize - csect;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	895b      	ldrh	r3, [r3, #10]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	7858      	ldrb	r0, [r3, #1]
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	69f9      	ldr	r1, [r7, #28]
 800b9e0:	f7fd fede 	bl	80097a0 <disk_write>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <f_write+0x22c>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	755a      	strb	r2, [r3, #21]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe f827 	bl	8009a48 <unlock_fs>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0a8      	b.n	800bb50 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1a      	ldr	r2, [r3, #32]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d918      	bls.n	800ba3e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6a1a      	ldr	r2, [r3, #32]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	8992      	ldrh	r2, [r2, #12]
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	69fa      	ldr	r2, [r7, #28]
 800ba24:	18d1      	adds	r1, r2, r3
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	899b      	ldrh	r3, [r3, #12]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7fd ff78 	bl	8009920 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	7d1b      	ldrb	r3, [r3, #20]
 800ba34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	461a      	mov	r2, r3
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	fb02 f303 	mul.w	r3, r2, r3
 800ba4a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ba4c:	e050      	b.n	800baf0 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d01b      	beq.n	800ba90 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	699a      	ldr	r2, [r3, #24]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d215      	bcs.n	800ba90 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	7858      	ldrb	r0, [r3, #1]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba6e:	2301      	movs	r3, #1
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	f7fd fe75 	bl	8009760 <disk_read>
 800ba76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	755a      	strb	r2, [r3, #21]
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2101      	movs	r1, #1
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd ffde 	bl	8009a48 <unlock_fs>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e05f      	b.n	800bb50 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	899b      	ldrh	r3, [r3, #12]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	8992      	ldrh	r2, [r2, #12]
 800baa4:	fbb3 f1f2 	udiv	r1, r3, r2
 800baa8:	fb01 f202 	mul.w	r2, r1, r2
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	1ac3      	subs	r3, r0, r3
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d901      	bls.n	800babe <f_write+0x2ec>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	8992      	ldrh	r2, [r2, #12]
 800bacc:	fbb3 f0f2 	udiv	r0, r3, r2
 800bad0:	fb00 f202 	mul.w	r2, r0, r2
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	440b      	add	r3, r1
 800bad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bada:	69f9      	ldr	r1, [r7, #28]
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd ff1f 	bl	8009920 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	7d1b      	ldrb	r3, [r3, #20]
 800bae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baea:	b2da      	uxtb	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800baf0:	69fa      	ldr	r2, [r7, #28]
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	4413      	add	r3, r2
 800baf6:	61fb      	str	r3, [r7, #28]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	699a      	ldr	r2, [r3, #24]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	441a      	add	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	619a      	str	r2, [r3, #24]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	bf38      	it	cc
 800bb10:	461a      	movcc	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	441a      	add	r2, r3
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f47f ae97 	bne.w	800b860 <f_write+0x8e>
 800bb32:	e000      	b.n	800bb36 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb34:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	7d1b      	ldrb	r3, [r3, #20]
 800bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2100      	movs	r1, #0
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fd ff7d 	bl	8009a48 <unlock_fs>
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3730      	adds	r7, #48	; 0x30
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f107 0208 	add.w	r2, r7, #8
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff fbb3 	bl	800b2d4 <validate>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d16d      	bne.n	800bc54 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7d1b      	ldrb	r3, [r3, #20]
 800bb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d067      	beq.n	800bc54 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7d1b      	ldrb	r3, [r3, #20]
 800bb88:	b25b      	sxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	da1a      	bge.n	800bbc4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	7858      	ldrb	r0, [r3, #1]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1a      	ldr	r2, [r3, #32]
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f7fd fdff 	bl	80097a0 <disk_write>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d006      	beq.n	800bbb6 <f_sync+0x5e>
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd ff4b 	bl	8009a48 <unlock_fs>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e055      	b.n	800bc62 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7d1b      	ldrb	r3, [r3, #20]
 800bbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bbc4:	f7fd fd2a 	bl	800961c <get_fattime>
 800bbc8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f7fe f904 	bl	8009de0 <move_window>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d138      	bne.n	800bc54 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	330b      	adds	r3, #11
 800bbec:	781a      	ldrb	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	330b      	adds	r3, #11
 800bbf2:	f042 0220 	orr.w	r2, r2, #32
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	461a      	mov	r2, r3
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	f7fe fe92 	bl	800a92e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f103 021c 	add.w	r2, r3, #28
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f7fd fe56 	bl	80098c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3316      	adds	r3, #22
 800bc20:	6939      	ldr	r1, [r7, #16]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fd fe50 	bl	80098c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3312      	adds	r3, #18
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd fe2f 	bl	8009892 <st_word>
					fs->wflag = 1;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2201      	movs	r2, #1
 800bc38:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe f8fd 	bl	8009e3c <sync_fs>
 800bc42:	4603      	mov	r3, r0
 800bc44:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	7dfa      	ldrb	r2, [r7, #23]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd fef4 	bl	8009a48 <unlock_fs>
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ff70 	bl	800bb58 <f_sync>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d11d      	bne.n	800bcbe <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f107 0208 	add.w	r2, r7, #8
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fb22 	bl	800b2d4 <validate>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d111      	bne.n	800bcbe <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fd fffa 	bl	8009c98 <dec_lock>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d102      	bne.n	800bcb4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fd fec5 	bl	8009a48 <unlock_fs>
#endif
		}
	}
	return res;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b090      	sub	sp, #64	; 0x40
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f107 0208 	add.w	r2, r7, #8
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff fafa 	bl	800b2d4 <validate>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bce6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d103      	bne.n	800bcf6 <f_lseek+0x2e>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	7d5b      	ldrb	r3, [r3, #21]
 800bcf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bcf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d009      	beq.n	800bd12 <f_lseek+0x4a>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd fe9e 	bl	8009a48 <unlock_fs>
 800bd0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd10:	e244      	b.n	800c19c <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 80f2 	beq.w	800bf00 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	d164      	bne.n	800bdee <f_lseek+0x126>
			tbl = fp->cltbl;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	627a      	str	r2, [r7, #36]	; 0x24
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	2302      	movs	r3, #2
 800bd36:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d044      	beq.n	800bdce <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	613b      	str	r3, [r7, #16]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	3302      	adds	r3, #2
 800bd50:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	3301      	adds	r3, #1
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe f8fa 	bl	8009f5a <get_fat>
 800bd66:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d809      	bhi.n	800bd82 <f_lseek+0xba>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2202      	movs	r2, #2
 800bd72:	755a      	strb	r2, [r3, #21]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2102      	movs	r1, #2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fd fe65 	bl	8009a48 <unlock_fs>
 800bd7e:	2302      	movs	r3, #2
 800bd80:	e20c      	b.n	800c19c <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d109      	bne.n	800bd9e <f_lseek+0xd6>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	755a      	strb	r2, [r3, #21]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2101      	movs	r1, #1
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fd fe57 	bl	8009a48 <unlock_fs>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e1fe      	b.n	800c19c <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3301      	adds	r3, #1
 800bda2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d0d4      	beq.n	800bd52 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d809      	bhi.n	800bdc4 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	1d1a      	adds	r2, r3, #4
 800bdb4:	627a      	str	r2, [r7, #36]	; 0x24
 800bdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	1d1a      	adds	r2, r3, #4
 800bdbe:	627a      	str	r2, [r7, #36]	; 0x24
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d3ba      	bcc.n	800bd44 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bdd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d803      	bhi.n	800bde6 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e1d1      	b.n	800c18a <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bde6:	2311      	movs	r3, #17
 800bde8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bdec:	e1cd      	b.n	800c18a <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d902      	bls.n	800bdfe <f_lseek+0x136>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 81bf 	beq.w	800c18a <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	3b01      	subs	r3, #1
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7fe fb8e 	bl	800a534 <clmt_clust>
 800be18:	4602      	mov	r2, r0
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	69db      	ldr	r3, [r3, #28]
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	f7fe f878 	bl	8009f1c <clust2sect>
 800be2c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d109      	bne.n	800be48 <f_lseek+0x180>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	755a      	strb	r2, [r3, #21]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2102      	movs	r1, #2
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fd fe02 	bl	8009a48 <unlock_fs>
 800be44:	2302      	movs	r3, #2
 800be46:	e1a9      	b.n	800c19c <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	8992      	ldrh	r2, [r2, #12]
 800be50:	fbb3 f3f2 	udiv	r3, r3, r2
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	8952      	ldrh	r2, [r2, #10]
 800be58:	3a01      	subs	r2, #1
 800be5a:	4013      	ands	r3, r2
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	4413      	add	r3, r2
 800be60:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	8992      	ldrh	r2, [r2, #12]
 800be6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800be6e:	fb01 f202 	mul.w	r2, r1, r2
 800be72:	1a9b      	subs	r3, r3, r2
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 8188 	beq.w	800c18a <f_lseek+0x4c2>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	429a      	cmp	r2, r3
 800be82:	f000 8182 	beq.w	800c18a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	7d1b      	ldrb	r3, [r3, #20]
 800be8a:	b25b      	sxtb	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	da1d      	bge.n	800becc <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	7858      	ldrb	r0, [r3, #1]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1a      	ldr	r2, [r3, #32]
 800be9e:	2301      	movs	r3, #1
 800bea0:	f7fd fc7e 	bl	80097a0 <disk_write>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d009      	beq.n	800bebe <f_lseek+0x1f6>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	755a      	strb	r2, [r3, #21]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2101      	movs	r1, #1
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fd fdc7 	bl	8009a48 <unlock_fs>
 800beba:	2301      	movs	r3, #1
 800bebc:	e16e      	b.n	800c19c <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7d1b      	ldrb	r3, [r3, #20]
 800bec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	7858      	ldrb	r0, [r3, #1]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bed6:	2301      	movs	r3, #1
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	f7fd fc41 	bl	8009760 <disk_read>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <f_lseek+0x230>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	755a      	strb	r2, [r3, #21]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2101      	movs	r1, #1
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fd fdaa 	bl	8009a48 <unlock_fs>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e151      	b.n	800c19c <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	621a      	str	r2, [r3, #32]
 800befe:	e144      	b.n	800c18a <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d908      	bls.n	800bf1c <f_lseek+0x254>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	7d1b      	ldrb	r3, [r3, #20]
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d102      	bne.n	800bf1c <f_lseek+0x254>
			ofs = fp->obj.objsize;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	637b      	str	r3, [r7, #52]	; 0x34
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf2a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 80ce 	beq.w	800c0d0 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	895b      	ldrh	r3, [r3, #10]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	899b      	ldrh	r3, [r3, #12]
 800bf3e:	fb02 f303 	mul.w	r3, r2, r3
 800bf42:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d01b      	beq.n	800bf82 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	1e5a      	subs	r2, r3, #1
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	1e59      	subs	r1, r3, #1
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d30f      	bcc.n	800bf82 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	425b      	negs	r3, r3
 800bf6a:	401a      	ands	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf80:	e02c      	b.n	800bfdc <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d123      	bne.n	800bfd6 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2100      	movs	r1, #0
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fa36 	bl	800a404 <create_chain>
 800bf98:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d109      	bne.n	800bfb4 <f_lseek+0x2ec>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	755a      	strb	r2, [r3, #21]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd fd4c 	bl	8009a48 <unlock_fs>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e0f3      	b.n	800c19c <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfba:	d109      	bne.n	800bfd0 <f_lseek+0x308>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	755a      	strb	r2, [r3, #21]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fd3e 	bl	8009a48 <unlock_fs>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e0e5      	b.n	800c19c <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfda:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d076      	beq.n	800c0d0 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800bfe2:	e044      	b.n	800c06e <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	699a      	ldr	r2, [r3, #24]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	441a      	add	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7d1b      	ldrb	r3, [r3, #20]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00b      	beq.n	800c01c <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe f9fb 	bl	800a404 <create_chain>
 800c00e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	d108      	bne.n	800c028 <f_lseek+0x360>
							ofs = 0; break;
 800c016:	2300      	movs	r3, #0
 800c018:	603b      	str	r3, [r7, #0]
 800c01a:	e02c      	b.n	800c076 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c020:	4618      	mov	r0, r3
 800c022:	f7fd ff9a 	bl	8009f5a <get_fat>
 800c026:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02e:	d109      	bne.n	800c044 <f_lseek+0x37c>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	755a      	strb	r2, [r3, #21]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2101      	movs	r1, #1
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fd fd04 	bl	8009a48 <unlock_fs>
 800c040:	2301      	movs	r3, #1
 800c042:	e0ab      	b.n	800c19c <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	2b01      	cmp	r3, #1
 800c048:	d904      	bls.n	800c054 <f_lseek+0x38c>
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c050:	429a      	cmp	r2, r3
 800c052:	d309      	bcc.n	800c068 <f_lseek+0x3a0>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2202      	movs	r2, #2
 800c058:	755a      	strb	r2, [r3, #21]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2102      	movs	r1, #2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd fcf2 	bl	8009a48 <unlock_fs>
 800c064:	2302      	movs	r3, #2
 800c066:	e099      	b.n	800c19c <f_lseek+0x4d4>
					fp->clust = clst;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c06c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	429a      	cmp	r2, r3
 800c074:	d8b6      	bhi.n	800bfe4 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	699a      	ldr	r2, [r3, #24]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	441a      	add	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	899b      	ldrh	r3, [r3, #12]
 800c086:	461a      	mov	r2, r3
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c08e:	fb01 f202 	mul.w	r2, r1, r2
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01b      	beq.n	800c0d0 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fd ff3d 	bl	8009f1c <clust2sect>
 800c0a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d109      	bne.n	800c0be <f_lseek+0x3f6>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	755a      	strb	r2, [r3, #21]
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2102      	movs	r1, #2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fd fcc7 	bl	8009a48 <unlock_fs>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	e06e      	b.n	800c19c <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	899b      	ldrh	r3, [r3, #12]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0cc:	4413      	add	r3, r2
 800c0ce:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d90a      	bls.n	800c0f2 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	699a      	ldr	r2, [r3, #24]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7d1b      	ldrb	r3, [r3, #20]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	8992      	ldrh	r2, [r2, #12]
 800c0fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0fe:	fb01 f202 	mul.w	r2, r1, r2
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d040      	beq.n	800c18a <f_lseek+0x4c2>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10e:	429a      	cmp	r2, r3
 800c110:	d03b      	beq.n	800c18a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7d1b      	ldrb	r3, [r3, #20]
 800c116:	b25b      	sxtb	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	da1d      	bge.n	800c158 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	7858      	ldrb	r0, [r3, #1]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1a      	ldr	r2, [r3, #32]
 800c12a:	2301      	movs	r3, #1
 800c12c:	f7fd fb38 	bl	80097a0 <disk_write>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <f_lseek+0x482>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	755a      	strb	r2, [r3, #21]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2101      	movs	r1, #1
 800c140:	4618      	mov	r0, r3
 800c142:	f7fd fc81 	bl	8009a48 <unlock_fs>
 800c146:	2301      	movs	r3, #1
 800c148:	e028      	b.n	800c19c <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	7d1b      	ldrb	r3, [r3, #20]
 800c14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c152:	b2da      	uxtb	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	7858      	ldrb	r0, [r3, #1]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c162:	2301      	movs	r3, #1
 800c164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c166:	f7fd fafb 	bl	8009760 <disk_read>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <f_lseek+0x4bc>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	755a      	strb	r2, [r3, #21]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2101      	movs	r1, #1
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fd fc64 	bl	8009a48 <unlock_fs>
 800c180:	2301      	movs	r3, #1
 800c182:	e00b      	b.n	800c19c <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c188:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd fc58 	bl	8009a48 <unlock_fs>
 800c198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3740      	adds	r7, #64	; 0x40
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	2b0a      	cmp	r3, #10
 800c1b4:	d103      	bne.n	800c1be <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c1b6:	210d      	movs	r1, #13
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff fff3 	bl	800c1a4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	db25      	blt.n	800c216 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	60fa      	str	r2, [r7, #12]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	78fa      	ldrb	r2, [r7, #3]
 800c1d6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b3c      	cmp	r3, #60	; 0x3c
 800c1dc:	dd12      	ble.n	800c204 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f103 010c 	add.w	r1, r3, #12
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	f107 0308 	add.w	r3, r7, #8
 800c1ee:	f7ff faf0 	bl	800b7d2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d101      	bne.n	800c1fe <putc_bfd+0x5a>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e001      	b.n	800c202 <putc_bfd+0x5e>
 800c1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c202:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	1c5a      	adds	r2, r3, #1
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	609a      	str	r2, [r3, #8]
 800c214:	e000      	b.n	800c218 <putc_bfd+0x74>
	if (i < 0) return;
 800c216:	bf00      	nop
}
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	db16      	blt.n	800c25c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f103 010c 	add.w	r1, r3, #12
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	461a      	mov	r2, r3
 800c23e:	f107 030c 	add.w	r3, r7, #12
 800c242:	f7ff fac6 	bl	800b7d2 <f_write>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d107      	bne.n	800c25c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	4293      	cmp	r3, r2
 800c254:	d102      	bne.n	800c25c <putc_flush+0x3e>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	e001      	b.n	800c260 <putc_flush+0x42>
	return EOF;
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	605a      	str	r2, [r3, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	609a      	str	r2, [r3, #8]
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b096      	sub	sp, #88	; 0x58
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c29c:	f107 030c 	add.w	r3, r7, #12
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff ffe0 	bl	800c268 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c2a8:	e009      	b.n	800c2be <f_puts+0x2c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	781a      	ldrb	r2, [r3, #0]
 800c2b2:	f107 030c 	add.w	r3, r7, #12
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff ff73 	bl	800c1a4 <putc_bfd>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1f1      	bne.n	800c2aa <f_puts+0x18>
	return putc_flush(&pb);
 800c2c6:	f107 030c 	add.w	r3, r7, #12
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff ffa7 	bl	800c21e <putc_flush>
 800c2d0:	4603      	mov	r3, r0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3758      	adds	r7, #88	; 0x58
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c2f2:	4b1f      	ldr	r3, [pc, #124]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c2f4:	7a5b      	ldrb	r3, [r3, #9]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d131      	bne.n	800c360 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c2fc:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c2fe:	7a5b      	ldrb	r3, [r3, #9]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	461a      	mov	r2, r3
 800c304:	4b1a      	ldr	r3, [pc, #104]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c306:	2100      	movs	r1, #0
 800c308:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c30a:	4b19      	ldr	r3, [pc, #100]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c30c:	7a5b      	ldrb	r3, [r3, #9]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	4a17      	ldr	r2, [pc, #92]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c31a:	4b15      	ldr	r3, [pc, #84]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c31c:	7a5b      	ldrb	r3, [r3, #9]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	461a      	mov	r2, r3
 800c322:	4b13      	ldr	r3, [pc, #76]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c324:	4413      	add	r3, r2
 800c326:	79fa      	ldrb	r2, [r7, #7]
 800c328:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c32a:	4b11      	ldr	r3, [pc, #68]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c32c:	7a5b      	ldrb	r3, [r3, #9]
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	b2d1      	uxtb	r1, r2
 800c334:	4a0e      	ldr	r2, [pc, #56]	; (800c370 <FATFS_LinkDriverEx+0x94>)
 800c336:	7251      	strb	r1, [r2, #9]
 800c338:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c33a:	7dbb      	ldrb	r3, [r7, #22]
 800c33c:	3330      	adds	r3, #48	; 0x30
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3301      	adds	r3, #1
 800c348:	223a      	movs	r2, #58	; 0x3a
 800c34a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	3302      	adds	r3, #2
 800c350:	222f      	movs	r2, #47	; 0x2f
 800c352:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3303      	adds	r3, #3
 800c358:	2200      	movs	r2, #0
 800c35a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c360:	7dfb      	ldrb	r3, [r7, #23]
}
 800c362:	4618      	mov	r0, r3
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	200034d8 	.word	0x200034d8

0800c374 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c37e:	2200      	movs	r2, #0
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff ffaa 	bl	800c2dc <FATFS_LinkDriverEx>
 800c388:	4603      	mov	r3, r0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b086      	sub	sp, #24
 800c396:	af00      	add	r7, sp, #0
 800c398:	4603      	mov	r3, r0
 800c39a:	6039      	str	r1, [r7, #0]
 800c39c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60fb      	str	r3, [r7, #12]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f8cd 	bl	800c54c <osSemaphoreCreate>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bf14      	ite	ne
 800c3c0:	2301      	movne	r3, #1
 800c3c2:	2300      	moveq	r3, #0
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	617b      	str	r3, [r7, #20]

    return ret;
 800c3c8:	697b      	ldr	r3, [r7, #20]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f96c 	bl	800c6b8 <osSemaphoreDelete>
#endif
    return 1;
 800c3e0:	2301      	movs	r3, #1
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c3f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f8d8 	bl	800c5b0 <osSemaphoreWait>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c406:	2301      	movs	r3, #1
 800c408:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c40a:	68fb      	ldr	r3, [r7, #12]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f915 	bl	800c64c <osSemaphoreRelease>
#endif
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b085      	sub	sp, #20
 800c42e:	af00      	add	r7, sp, #0
 800c430:	4603      	mov	r3, r0
 800c432:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c43c:	2b84      	cmp	r3, #132	; 0x84
 800c43e:	d005      	beq.n	800c44c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c440:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	4413      	add	r3, r2
 800c448:	3303      	adds	r3, #3
 800c44a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c44c:	68fb      	ldr	r3, [r7, #12]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c460:	f3ef 8305 	mrs	r3, IPSR
 800c464:	607b      	str	r3, [r7, #4]
  return(result);
 800c466:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c468:	2b00      	cmp	r3, #0
 800c46a:	bf14      	ite	ne
 800c46c:	2301      	movne	r3, #1
 800c46e:	2300      	moveq	r3, #0
 800c470:	b2db      	uxtb	r3, r3
}
 800c472:	4618      	mov	r0, r3
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c482:	f001 f9af 	bl	800d7e4 <vTaskStartScheduler>
  
  return osOK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48e:	b089      	sub	sp, #36	; 0x24
 800c490:	af04      	add	r7, sp, #16
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d020      	beq.n	800c4e0 <osThreadCreate+0x54>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d01c      	beq.n	800c4e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685c      	ldr	r4, [r3, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681d      	ldr	r5, [r3, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691e      	ldr	r6, [r3, #16]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff ffb6 	bl	800c42a <makeFreeRtosPriority>
 800c4be:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4c8:	9202      	str	r2, [sp, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	9100      	str	r1, [sp, #0]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 ffa7 	bl	800d428 <xTaskCreateStatic>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	e01c      	b.n	800c51a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685c      	ldr	r4, [r3, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4ec:	b29e      	uxth	r6, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff ff98 	bl	800c42a <makeFreeRtosPriority>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	9200      	str	r2, [sp, #0]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	4632      	mov	r2, r6
 800c508:	4629      	mov	r1, r5
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 ffe9 	bl	800d4e2 <xTaskCreate>
 800c510:	4603      	mov	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d001      	beq.n	800c51a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	e000      	b.n	800c51c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c51a:	68fb      	ldr	r3, [r7, #12]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c524 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <osDelay+0x16>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	e000      	b.n	800c53c <osDelay+0x18>
 800c53a:	2301      	movs	r3, #1
 800c53c:	4618      	mov	r0, r3
 800c53e:	f001 f91d 	bl	800d77c <vTaskDelay>
  
  return osOK;
 800c542:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af02      	add	r7, sp, #8
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00f      	beq.n	800c57e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d10a      	bne.n	800c57a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	2203      	movs	r2, #3
 800c56a:	9200      	str	r2, [sp, #0]
 800c56c:	2200      	movs	r2, #0
 800c56e:	2100      	movs	r1, #0
 800c570:	2001      	movs	r0, #1
 800c572:	f000 f9f9 	bl	800c968 <xQueueGenericCreateStatic>
 800c576:	4603      	mov	r3, r0
 800c578:	e016      	b.n	800c5a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e014      	b.n	800c5a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d110      	bne.n	800c5a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c584:	2203      	movs	r2, #3
 800c586:	2100      	movs	r1, #0
 800c588:	2001      	movs	r0, #1
 800c58a:	f000 fa65 	bl	800ca58 <xQueueGenericCreate>
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d005      	beq.n	800c5a2 <osSemaphoreCreate+0x56>
 800c596:	2300      	movs	r3, #0
 800c598:	2200      	movs	r2, #0
 800c59a:	2100      	movs	r1, #0
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 fab5 	bl	800cb0c <xQueueGenericSend>
      return sema;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	e000      	b.n	800c5a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c5a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c5c4:	2380      	movs	r3, #128	; 0x80
 800c5c6:	e03a      	b.n	800c63e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d2:	d103      	bne.n	800c5dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d8:	60fb      	str	r3, [r7, #12]
 800c5da:	e009      	b.n	800c5f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d006      	beq.n	800c5f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c5f0:	f7ff ff33 	bl	800c45a <inHandlerMode>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d017      	beq.n	800c62a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c5fa:	f107 0308 	add.w	r3, r7, #8
 800c5fe:	461a      	mov	r2, r3
 800c600:	2100      	movs	r1, #0
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fd1a 	bl	800d03c <xQueueReceiveFromISR>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d001      	beq.n	800c612 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c60e:	23ff      	movs	r3, #255	; 0xff
 800c610:	e015      	b.n	800c63e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d011      	beq.n	800c63c <osSemaphoreWait+0x8c>
 800c618:	4b0b      	ldr	r3, [pc, #44]	; (800c648 <osSemaphoreWait+0x98>)
 800c61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	e008      	b.n	800c63c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fbf9 	bl	800ce24 <xQueueSemaphoreTake>
 800c632:	4603      	mov	r3, r0
 800c634:	2b01      	cmp	r3, #1
 800c636:	d001      	beq.n	800c63c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c638:	23ff      	movs	r3, #255	; 0xff
 800c63a:	e000      	b.n	800c63e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c654:	2300      	movs	r3, #0
 800c656:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c658:	2300      	movs	r3, #0
 800c65a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c65c:	f7ff fefd 	bl	800c45a <inHandlerMode>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d016      	beq.n	800c694 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c666:	f107 0308 	add.w	r3, r7, #8
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fb4b 	bl	800cd08 <xQueueGiveFromISR>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d001      	beq.n	800c67c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c678:	23ff      	movs	r3, #255	; 0xff
 800c67a:	e017      	b.n	800c6ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d013      	beq.n	800c6aa <osSemaphoreRelease+0x5e>
 800c682:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <osSemaphoreRelease+0x68>)
 800c684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	e00a      	b.n	800c6aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c694:	2300      	movs	r3, #0
 800c696:	2200      	movs	r2, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fa36 	bl	800cb0c <xQueueGenericSend>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d001      	beq.n	800c6aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c6a6:	23ff      	movs	r3, #255	; 0xff
 800c6a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	e000ed04 	.word	0xe000ed04

0800c6b8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c6c0:	f7ff fecb 	bl	800c45a <inHandlerMode>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c6ca:	2382      	movs	r3, #130	; 0x82
 800c6cc:	e003      	b.n	800c6d6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fd34 	bl	800d13c <vQueueDelete>

  return osOK; 
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c6de:	b590      	push	{r4, r7, lr}
 800c6e0:	b085      	sub	sp, #20
 800c6e2:	af02      	add	r7, sp, #8
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d011      	beq.n	800c714 <osMessageCreate+0x36>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00d      	beq.n	800c714 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6859      	ldr	r1, [r3, #4]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	2400      	movs	r4, #0
 800c70a:	9400      	str	r4, [sp, #0]
 800c70c:	f000 f92c 	bl	800c968 <xQueueGenericCreateStatic>
 800c710:	4603      	mov	r3, r0
 800c712:	e008      	b.n	800c726 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	4619      	mov	r1, r3
 800c720:	f000 f99a 	bl	800ca58 <xQueueGenericCreate>
 800c724:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c726:	4618      	mov	r0, r3
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}

0800c72e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f103 0208 	add.w	r2, r3, #8
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f04f 32ff 	mov.w	r2, #4294967295
 800c746:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f103 0208 	add.w	r2, r3, #8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f103 0208 	add.w	r2, r3, #8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	1c5a      	adds	r2, r3, #1
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	601a      	str	r2, [r3, #0]
}
 800c7c4:	bf00      	nop
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e6:	d103      	bne.n	800c7f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	e00c      	b.n	800c80a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	e002      	b.n	800c7fe <vListInsert+0x2e>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	429a      	cmp	r2, r3
 800c808:	d2f6      	bcs.n	800c7f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c842:	b480      	push	{r7}
 800c844:	b085      	sub	sp, #20
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	6892      	ldr	r2, [r2, #8]
 800c858:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	6852      	ldr	r2, [r2, #4]
 800c862:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d103      	bne.n	800c876 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	689a      	ldr	r2, [r3, #8]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	1e5a      	subs	r2, r3, #1
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
	...

0800c898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8c2:	f001 feef 	bl	800e6a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	68f9      	ldr	r1, [r7, #12]
 800c8d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8d2:	fb01 f303 	mul.w	r3, r1, r3
 800c8d6:	441a      	add	r2, r3
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	68f9      	ldr	r1, [r7, #12]
 800c8f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8f8:	fb01 f303 	mul.w	r3, r1, r3
 800c8fc:	441a      	add	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	22ff      	movs	r2, #255	; 0xff
 800c906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	22ff      	movs	r2, #255	; 0xff
 800c90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d114      	bne.n	800c942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d01a      	beq.n	800c956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3310      	adds	r3, #16
 800c924:	4618      	mov	r0, r3
 800c926:	f001 f9af 	bl	800dc88 <xTaskRemoveFromEventList>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d012      	beq.n	800c956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c930:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <xQueueGenericReset+0xcc>)
 800c932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	e009      	b.n	800c956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3310      	adds	r3, #16
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff fef1 	bl	800c72e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3324      	adds	r3, #36	; 0x24
 800c950:	4618      	mov	r0, r3
 800c952:	f7ff feec 	bl	800c72e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c956:	f001 fed5 	bl	800e704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c95a:	2301      	movs	r3, #1
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08e      	sub	sp, #56	; 0x38
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <xQueueGenericCreateStatic+0x52>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <xQueueGenericCreateStatic+0x56>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueGenericCreateStatic+0x58>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	623b      	str	r3, [r7, #32]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <xQueueGenericCreateStatic+0x7e>
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <xQueueGenericCreateStatic+0x82>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <xQueueGenericCreateStatic+0x84>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	61fb      	str	r3, [r7, #28]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca06:	2348      	movs	r3, #72	; 0x48
 800ca08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b48      	cmp	r3, #72	; 0x48
 800ca0e:	d00a      	beq.n	800ca26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	61bb      	str	r3, [r7, #24]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00d      	beq.n	800ca4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	4613      	mov	r3, r2
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	68b9      	ldr	r1, [r7, #8]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 f83f 	bl	800cacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3730      	adds	r7, #48	; 0x30
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b08a      	sub	sp, #40	; 0x28
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10a      	bne.n	800ca82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	613b      	str	r3, [r7, #16]
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	fb02 f303 	mul.w	r3, r2, r3
 800ca8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	3348      	adds	r3, #72	; 0x48
 800ca90:	4618      	mov	r0, r3
 800ca92:	f001 ff29 	bl	800e8e8 <pvPortMalloc>
 800ca96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d011      	beq.n	800cac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	3348      	adds	r3, #72	; 0x48
 800caa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cab0:	79fa      	ldrb	r2, [r7, #7]
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	4613      	mov	r3, r2
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	68b9      	ldr	r1, [r7, #8]
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f805 	bl	800cacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cac2:	69bb      	ldr	r3, [r7, #24]
	}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3720      	adds	r7, #32
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d103      	bne.n	800cae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	69ba      	ldr	r2, [r7, #24]
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	e002      	b.n	800caee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cafa:	2101      	movs	r1, #1
 800cafc:	69b8      	ldr	r0, [r7, #24]
 800cafe:	f7ff fecb 	bl	800c898 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb02:	bf00      	nop
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08e      	sub	sp, #56	; 0x38
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <xQueueGenericSend+0x32>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d103      	bne.n	800cb4c <xQueueGenericSend+0x40>
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <xQueueGenericSend+0x44>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e000      	b.n	800cb52 <xQueueGenericSend+0x46>
 800cb50:	2300      	movs	r3, #0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10a      	bne.n	800cb6c <xQueueGenericSend+0x60>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb68:	bf00      	nop
 800cb6a:	e7fe      	b.n	800cb6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d103      	bne.n	800cb7a <xQueueGenericSend+0x6e>
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d101      	bne.n	800cb7e <xQueueGenericSend+0x72>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e000      	b.n	800cb80 <xQueueGenericSend+0x74>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <xQueueGenericSend+0x8e>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	623b      	str	r3, [r7, #32]
}
 800cb96:	bf00      	nop
 800cb98:	e7fe      	b.n	800cb98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb9a:	f001 fa35 	bl	800e008 <xTaskGetSchedulerState>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <xQueueGenericSend+0x9e>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <xQueueGenericSend+0xa2>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e000      	b.n	800cbb0 <xQueueGenericSend+0xa4>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <xQueueGenericSend+0xbe>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	61fb      	str	r3, [r7, #28]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbca:	f001 fd6b 	bl	800e6a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d302      	bcc.n	800cbe0 <xQueueGenericSend+0xd4>
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d129      	bne.n	800cc34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	68b9      	ldr	r1, [r7, #8]
 800cbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbe6:	f000 fae4 	bl	800d1b2 <prvCopyDataToQueue>
 800cbea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d010      	beq.n	800cc16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	3324      	adds	r3, #36	; 0x24
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 f845 	bl	800dc88 <xTaskRemoveFromEventList>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d013      	beq.n	800cc2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc04:	4b3f      	ldr	r3, [pc, #252]	; (800cd04 <xQueueGenericSend+0x1f8>)
 800cc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	e00a      	b.n	800cc2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d007      	beq.n	800cc2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc1c:	4b39      	ldr	r3, [pc, #228]	; (800cd04 <xQueueGenericSend+0x1f8>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc2c:	f001 fd6a 	bl	800e704 <vPortExitCritical>
				return pdPASS;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e063      	b.n	800ccfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d103      	bne.n	800cc42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc3a:	f001 fd63 	bl	800e704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e05c      	b.n	800ccfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f001 f87d 	bl	800dd4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc52:	2301      	movs	r3, #1
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc56:	f001 fd55 	bl	800e704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc5a:	f000 fe2d 	bl	800d8b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc5e:	f001 fd21 	bl	800e6a4 <vPortEnterCritical>
 800cc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc68:	b25b      	sxtb	r3, r3
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d103      	bne.n	800cc78 <xQueueGenericSend+0x16c>
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc7e:	b25b      	sxtb	r3, r3
 800cc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc84:	d103      	bne.n	800cc8e <xQueueGenericSend+0x182>
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc8e:	f001 fd39 	bl	800e704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc92:	1d3a      	adds	r2, r7, #4
 800cc94:	f107 0314 	add.w	r3, r7, #20
 800cc98:	4611      	mov	r1, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f001 f86c 	bl	800dd78 <xTaskCheckForTimeOut>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d124      	bne.n	800ccf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cca8:	f000 fb7b 	bl	800d3a2 <prvIsQueueFull>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d018      	beq.n	800cce4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 ffc0 	bl	800dc40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccc2:	f000 fb06 	bl	800d2d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccc6:	f000 fe05 	bl	800d8d4 <xTaskResumeAll>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f47f af7c 	bne.w	800cbca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccd2:	4b0c      	ldr	r3, [pc, #48]	; (800cd04 <xQueueGenericSend+0x1f8>)
 800ccd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	e772      	b.n	800cbca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cce6:	f000 faf4 	bl	800d2d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccea:	f000 fdf3 	bl	800d8d4 <xTaskResumeAll>
 800ccee:	e76c      	b.n	800cbca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccf2:	f000 faee 	bl	800d2d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccf6:	f000 fded 	bl	800d8d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ccfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3738      	adds	r7, #56	; 0x38
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	e000ed04 	.word	0xe000ed04

0800cd08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08e      	sub	sp, #56	; 0x38
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10a      	bne.n	800cd32 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	623b      	str	r3, [r7, #32]
}
 800cd2e:	bf00      	nop
 800cd30:	e7fe      	b.n	800cd30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00a      	beq.n	800cd50 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	61fb      	str	r3, [r7, #28]
}
 800cd4c:	bf00      	nop
 800cd4e:	e7fe      	b.n	800cd4e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d103      	bne.n	800cd60 <xQueueGiveFromISR+0x58>
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <xQueueGiveFromISR+0x5c>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <xQueueGiveFromISR+0x5e>
 800cd64:	2300      	movs	r3, #0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	61bb      	str	r3, [r7, #24]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd80:	f001 fd72 	bl	800e868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd84:	f3ef 8211 	mrs	r2, BASEPRI
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	617a      	str	r2, [r7, #20]
 800cd9a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cd9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d22b      	bcs.n	800ce08 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdca:	d112      	bne.n	800cdf2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d016      	beq.n	800ce02 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	3324      	adds	r3, #36	; 0x24
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 ff55 	bl	800dc88 <xTaskRemoveFromEventList>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00e      	beq.n	800ce02 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00b      	beq.n	800ce02 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2201      	movs	r2, #1
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	e007      	b.n	800ce02 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	b25a      	sxtb	r2, r3
 800cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce02:	2301      	movs	r3, #1
 800ce04:	637b      	str	r3, [r7, #52]	; 0x34
 800ce06:	e001      	b.n	800ce0c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3738      	adds	r7, #56	; 0x38
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
	...

0800ce24 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08e      	sub	sp, #56	; 0x38
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce36:	2300      	movs	r3, #0
 800ce38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	623b      	str	r3, [r7, #32]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00a      	beq.n	800ce74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	61fb      	str	r3, [r7, #28]
}
 800ce70:	bf00      	nop
 800ce72:	e7fe      	b.n	800ce72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce74:	f001 f8c8 	bl	800e008 <xTaskGetSchedulerState>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d102      	bne.n	800ce84 <xQueueSemaphoreTake+0x60>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <xQueueSemaphoreTake+0x64>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e000      	b.n	800ce8a <xQueueSemaphoreTake+0x66>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10a      	bne.n	800cea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	61bb      	str	r3, [r7, #24]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cea4:	f001 fbfe 	bl	800e6a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d024      	beq.n	800cefe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	1e5a      	subs	r2, r3, #1
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d104      	bne.n	800cece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cec4:	f001 fa48 	bl	800e358 <pvTaskIncrementMutexHeldCount>
 800cec8:	4602      	mov	r2, r0
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00f      	beq.n	800cef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	3310      	adds	r3, #16
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 fed4 	bl	800dc88 <xTaskRemoveFromEventList>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d007      	beq.n	800cef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cee6:	4b54      	ldr	r3, [pc, #336]	; (800d038 <xQueueSemaphoreTake+0x214>)
 800cee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cef6:	f001 fc05 	bl	800e704 <vPortExitCritical>
				return pdPASS;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e097      	b.n	800d02e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d111      	bne.n	800cf28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	617b      	str	r3, [r7, #20]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf20:	f001 fbf0 	bl	800e704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e082      	b.n	800d02e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d106      	bne.n	800cf3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf2e:	f107 030c 	add.w	r3, r7, #12
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ff0a 	bl	800dd4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf3c:	f001 fbe2 	bl	800e704 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf40:	f000 fcba 	bl	800d8b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf44:	f001 fbae 	bl	800e6a4 <vPortEnterCritical>
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf4e:	b25b      	sxtb	r3, r3
 800cf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf54:	d103      	bne.n	800cf5e <xQueueSemaphoreTake+0x13a>
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf64:	b25b      	sxtb	r3, r3
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6a:	d103      	bne.n	800cf74 <xQueueSemaphoreTake+0x150>
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf74:	f001 fbc6 	bl	800e704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf78:	463a      	mov	r2, r7
 800cf7a:	f107 030c 	add.w	r3, r7, #12
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fef9 	bl	800dd78 <xTaskCheckForTimeOut>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d132      	bne.n	800cff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf8e:	f000 f9f2 	bl	800d376 <prvIsQueueEmpty>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d026      	beq.n	800cfe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d109      	bne.n	800cfb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cfa0:	f001 fb80 	bl	800e6a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f001 f84b 	bl	800e044 <xTaskPriorityInherit>
 800cfae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfb0:	f001 fba8 	bl	800e704 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	3324      	adds	r3, #36	; 0x24
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	4611      	mov	r1, r2
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fe3f 	bl	800dc40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc4:	f000 f985 	bl	800d2d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfc8:	f000 fc84 	bl	800d8d4 <xTaskResumeAll>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f47f af68 	bne.w	800cea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cfd4:	4b18      	ldr	r3, [pc, #96]	; (800d038 <xQueueSemaphoreTake+0x214>)
 800cfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	e75e      	b.n	800cea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cfe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfe8:	f000 f973 	bl	800d2d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfec:	f000 fc72 	bl	800d8d4 <xTaskResumeAll>
 800cff0:	e758      	b.n	800cea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cff4:	f000 f96d 	bl	800d2d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cff8:	f000 fc6c 	bl	800d8d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cffe:	f000 f9ba 	bl	800d376 <prvIsQueueEmpty>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	f43f af4d 	beq.w	800cea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00d      	beq.n	800d02c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d010:	f001 fb48 	bl	800e6a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d016:	f000 f8b4 	bl	800d182 <prvGetDisinheritPriorityAfterTimeout>
 800d01a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d022:	4618      	mov	r0, r3
 800d024:	f001 f90a 	bl	800e23c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d028:	f001 fb6c 	bl	800e704 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d02c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3738      	adds	r7, #56	; 0x38
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	e000ed04 	.word	0xe000ed04

0800d03c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08e      	sub	sp, #56	; 0x38
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10a      	bne.n	800d068 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	623b      	str	r3, [r7, #32]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d103      	bne.n	800d076 <xQueueReceiveFromISR+0x3a>
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <xQueueReceiveFromISR+0x3e>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <xQueueReceiveFromISR+0x40>
 800d07a:	2300      	movs	r3, #0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	61fb      	str	r3, [r7, #28]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d096:	f001 fbe7 	bl	800e868 <vPortValidateInterruptPriority>
	__asm volatile
 800d09a:	f3ef 8211 	mrs	r2, BASEPRI
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	61ba      	str	r2, [r7, #24]
 800d0b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d0b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d02f      	beq.n	800d122 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0cc:	68b9      	ldr	r1, [r7, #8]
 800d0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d0:	f000 f8d9 	bl	800d286 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	1e5a      	subs	r2, r3, #1
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e4:	d112      	bne.n	800d10c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d016      	beq.n	800d11c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	3310      	adds	r3, #16
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fdc8 	bl	800dc88 <xTaskRemoveFromEventList>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00e      	beq.n	800d11c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	e007      	b.n	800d11c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d110:	3301      	adds	r3, #1
 800d112:	b2db      	uxtb	r3, r3
 800d114:	b25a      	sxtb	r2, r3
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d11c:	2301      	movs	r3, #1
 800d11e:	637b      	str	r3, [r7, #52]	; 0x34
 800d120:	e001      	b.n	800d126 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d122:	2300      	movs	r3, #0
 800d124:	637b      	str	r3, [r7, #52]	; 0x34
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f383 8811 	msr	BASEPRI, r3
}
 800d130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d134:	4618      	mov	r0, r3
 800d136:	3738      	adds	r7, #56	; 0x38
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vQueueDelete+0x28>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60bb      	str	r3, [r7, #8]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f000 f935 	bl	800d3d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d170:	2b00      	cmp	r3, #0
 800d172:	d102      	bne.n	800d17a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f001 fc83 	bl	800ea80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d17a:	bf00      	nop
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d182:	b480      	push	{r7}
 800d184:	b085      	sub	sp, #20
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d006      	beq.n	800d1a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f1c3 0307 	rsb	r3, r3, #7
 800d19c:	60fb      	str	r3, [r7, #12]
 800d19e:	e001      	b.n	800d1a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
	}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b086      	sub	sp, #24
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10d      	bne.n	800d1ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d14d      	bne.n	800d274 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 ffa7 	bl	800e130 <xTaskPriorityDisinherit>
 800d1e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	609a      	str	r2, [r3, #8]
 800d1ea:	e043      	b.n	800d274 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d119      	bne.n	800d226 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6858      	ldr	r0, [r3, #4]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	f001 fd89 	bl	800ed14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20a:	441a      	add	r2, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d32b      	bcc.n	800d274 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	605a      	str	r2, [r3, #4]
 800d224:	e026      	b.n	800d274 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68d8      	ldr	r0, [r3, #12]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22e:	461a      	mov	r2, r3
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	f001 fd6f 	bl	800ed14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68da      	ldr	r2, [r3, #12]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	425b      	negs	r3, r3
 800d240:	441a      	add	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d207      	bcs.n	800d262 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25a:	425b      	negs	r3, r3
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d105      	bne.n	800d274 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	3b01      	subs	r3, #1
 800d272:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d27c:	697b      	ldr	r3, [r7, #20]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b082      	sub	sp, #8
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	d018      	beq.n	800d2ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	441a      	add	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d303      	bcc.n	800d2ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68d9      	ldr	r1, [r3, #12]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	6838      	ldr	r0, [r7, #0]
 800d2c6:	f001 fd25 	bl	800ed14 <memcpy>
	}
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2da:	f001 f9e3 	bl	800e6a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2e6:	e011      	b.n	800d30c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d012      	beq.n	800d316 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3324      	adds	r3, #36	; 0x24
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 fcc7 	bl	800dc88 <xTaskRemoveFromEventList>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d001      	beq.n	800d304 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d300:	f000 fd9c 	bl	800de3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	3b01      	subs	r3, #1
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d310:	2b00      	cmp	r3, #0
 800d312:	dce9      	bgt.n	800d2e8 <prvUnlockQueue+0x16>
 800d314:	e000      	b.n	800d318 <prvUnlockQueue+0x46>
					break;
 800d316:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	22ff      	movs	r2, #255	; 0xff
 800d31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d320:	f001 f9f0 	bl	800e704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d324:	f001 f9be 	bl	800e6a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d32e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d330:	e011      	b.n	800d356 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d012      	beq.n	800d360 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3310      	adds	r3, #16
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 fca2 	bl	800dc88 <xTaskRemoveFromEventList>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d34a:	f000 fd77 	bl	800de3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d34e:	7bbb      	ldrb	r3, [r7, #14]
 800d350:	3b01      	subs	r3, #1
 800d352:	b2db      	uxtb	r3, r3
 800d354:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	dce9      	bgt.n	800d332 <prvUnlockQueue+0x60>
 800d35e:	e000      	b.n	800d362 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d360:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	22ff      	movs	r2, #255	; 0xff
 800d366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d36a:	f001 f9cb 	bl	800e704 <vPortExitCritical>
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d37e:	f001 f991 	bl	800e6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	2b00      	cmp	r3, #0
 800d388:	d102      	bne.n	800d390 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d38a:	2301      	movs	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]
 800d38e:	e001      	b.n	800d394 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d390:	2300      	movs	r3, #0
 800d392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d394:	f001 f9b6 	bl	800e704 <vPortExitCritical>

	return xReturn;
 800d398:	68fb      	ldr	r3, [r7, #12]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3aa:	f001 f97b 	bl	800e6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d102      	bne.n	800d3c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e001      	b.n	800d3c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3c4:	f001 f99e 	bl	800e704 <vPortExitCritical>

	return xReturn;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
	...

0800d3d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e016      	b.n	800d410 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d3e2:	4a10      	ldr	r2, [pc, #64]	; (800d424 <vQueueUnregisterQueue+0x50>)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d10b      	bne.n	800d40a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d3f2:	4a0c      	ldr	r2, [pc, #48]	; (800d424 <vQueueUnregisterQueue+0x50>)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d3fc:	4a09      	ldr	r2, [pc, #36]	; (800d424 <vQueueUnregisterQueue+0x50>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	00db      	lsls	r3, r3, #3
 800d402:	4413      	add	r3, r2
 800d404:	2200      	movs	r2, #0
 800d406:	605a      	str	r2, [r3, #4]
				break;
 800d408:	e006      	b.n	800d418 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3301      	adds	r3, #1
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b07      	cmp	r3, #7
 800d414:	d9e5      	bls.n	800d3e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d416:	bf00      	nop
 800d418:	bf00      	nop
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	200034e4 	.word	0x200034e4

0800d428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08e      	sub	sp, #56	; 0x38
 800d42c:	af04      	add	r7, sp, #16
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10a      	bne.n	800d452 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	623b      	str	r3, [r7, #32]
}
 800d44e:	bf00      	nop
 800d450:	e7fe      	b.n	800d450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <xTaskCreateStatic+0x46>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	61fb      	str	r3, [r7, #28]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d46e:	23b4      	movs	r3, #180	; 0xb4
 800d470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2bb4      	cmp	r3, #180	; 0xb4
 800d476:	d00a      	beq.n	800d48e <xTaskCreateStatic+0x66>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	61bb      	str	r3, [r7, #24]
}
 800d48a:	bf00      	nop
 800d48c:	e7fe      	b.n	800d48c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d48e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	2b00      	cmp	r3, #0
 800d494:	d01e      	beq.n	800d4d4 <xTaskCreateStatic+0xac>
 800d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01b      	beq.n	800d4d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	f107 0314 	add.w	r3, r7, #20
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f000 f850 	bl	800d56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ce:	f000 f8eb 	bl	800d6a8 <prvAddNewTaskToReadyList>
 800d4d2:	e001      	b.n	800d4d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4d8:	697b      	ldr	r3, [r7, #20]
	}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3728      	adds	r7, #40	; 0x28
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b08c      	sub	sp, #48	; 0x30
 800d4e6:	af04      	add	r7, sp, #16
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	60b9      	str	r1, [r7, #8]
 800d4ec:	603b      	str	r3, [r7, #0]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f001 f9f6 	bl	800e8e8 <pvPortMalloc>
 800d4fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00e      	beq.n	800d522 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d504:	20b4      	movs	r0, #180	; 0xb4
 800d506:	f001 f9ef 	bl	800e8e8 <pvPortMalloc>
 800d50a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	631a      	str	r2, [r3, #48]	; 0x30
 800d518:	e005      	b.n	800d526 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d51a:	6978      	ldr	r0, [r7, #20]
 800d51c:	f001 fab0 	bl	800ea80 <vPortFree>
 800d520:	e001      	b.n	800d526 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d017      	beq.n	800d55c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d534:	88fa      	ldrh	r2, [r7, #6]
 800d536:	2300      	movs	r3, #0
 800d538:	9303      	str	r3, [sp, #12]
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 f80e 	bl	800d56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d550:	69f8      	ldr	r0, [r7, #28]
 800d552:	f000 f8a9 	bl	800d6a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d556:	2301      	movs	r3, #1
 800d558:	61bb      	str	r3, [r7, #24]
 800d55a:	e002      	b.n	800d562 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d55c:	f04f 33ff 	mov.w	r3, #4294967295
 800d560:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d562:	69bb      	ldr	r3, [r7, #24]
	}
 800d564:	4618      	mov	r0, r3
 800d566:	3720      	adds	r7, #32
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d584:	3b01      	subs	r3, #1
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	f023 0307 	bic.w	r3, r3, #7
 800d592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00a      	beq.n	800d5b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	617b      	str	r3, [r7, #20]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d01f      	beq.n	800d5fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	61fb      	str	r3, [r7, #28]
 800d5be:	e012      	b.n	800d5e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	7819      	ldrb	r1, [r3, #0]
 800d5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	3334      	adds	r3, #52	; 0x34
 800d5d0:	460a      	mov	r2, r1
 800d5d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	4413      	add	r3, r2
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d006      	beq.n	800d5ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	61fb      	str	r3, [r7, #28]
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	2b0f      	cmp	r3, #15
 800d5ea:	d9e9      	bls.n	800d5c0 <prvInitialiseNewTask+0x54>
 800d5ec:	e000      	b.n	800d5f0 <prvInitialiseNewTask+0x84>
			{
				break;
 800d5ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d5f8:	e003      	b.n	800d602 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	2b06      	cmp	r3, #6
 800d606:	d901      	bls.n	800d60c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d608:	2306      	movs	r3, #6
 800d60a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d616:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	2200      	movs	r2, #0
 800d61c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	3304      	adds	r3, #4
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff f8a3 	bl	800c76e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	3318      	adds	r3, #24
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff f89e 	bl	800c76e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	f1c3 0207 	rsb	r2, r3, #7
 800d63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	2200      	movs	r2, #0
 800d654:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	334c      	adds	r3, #76	; 0x4c
 800d65c:	2260      	movs	r2, #96	; 0x60
 800d65e:	2100      	movs	r1, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f001 fb65 	bl	800ed30 <memset>
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	4a0c      	ldr	r2, [pc, #48]	; (800d69c <prvInitialiseNewTask+0x130>)
 800d66a:	651a      	str	r2, [r3, #80]	; 0x50
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	4a0c      	ldr	r2, [pc, #48]	; (800d6a0 <prvInitialiseNewTask+0x134>)
 800d670:	655a      	str	r2, [r3, #84]	; 0x54
 800d672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d674:	4a0b      	ldr	r2, [pc, #44]	; (800d6a4 <prvInitialiseNewTask+0x138>)
 800d676:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	68f9      	ldr	r1, [r7, #12]
 800d67c:	69b8      	ldr	r0, [r7, #24]
 800d67e:	f000 fee5 	bl	800e44c <pxPortInitialiseStack>
 800d682:	4602      	mov	r2, r0
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d694:	bf00      	nop
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0800f920 	.word	0x0800f920
 800d6a0:	0800f940 	.word	0x0800f940
 800d6a4:	0800f900 	.word	0x0800f900

0800d6a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6b0:	f000 fff8 	bl	800e6a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6b4:	4b2a      	ldr	r3, [pc, #168]	; (800d760 <prvAddNewTaskToReadyList+0xb8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	4a29      	ldr	r2, [pc, #164]	; (800d760 <prvAddNewTaskToReadyList+0xb8>)
 800d6bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6be:	4b29      	ldr	r3, [pc, #164]	; (800d764 <prvAddNewTaskToReadyList+0xbc>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d109      	bne.n	800d6da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6c6:	4a27      	ldr	r2, [pc, #156]	; (800d764 <prvAddNewTaskToReadyList+0xbc>)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6cc:	4b24      	ldr	r3, [pc, #144]	; (800d760 <prvAddNewTaskToReadyList+0xb8>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d110      	bne.n	800d6f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6d4:	f000 fbd6 	bl	800de84 <prvInitialiseTaskLists>
 800d6d8:	e00d      	b.n	800d6f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6da:	4b23      	ldr	r3, [pc, #140]	; (800d768 <prvAddNewTaskToReadyList+0xc0>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6e2:	4b20      	ldr	r3, [pc, #128]	; (800d764 <prvAddNewTaskToReadyList+0xbc>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d802      	bhi.n	800d6f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6f0:	4a1c      	ldr	r2, [pc, #112]	; (800d764 <prvAddNewTaskToReadyList+0xbc>)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6f6:	4b1d      	ldr	r3, [pc, #116]	; (800d76c <prvAddNewTaskToReadyList+0xc4>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	4a1b      	ldr	r2, [pc, #108]	; (800d76c <prvAddNewTaskToReadyList+0xc4>)
 800d6fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	2201      	movs	r2, #1
 800d706:	409a      	lsls	r2, r3
 800d708:	4b19      	ldr	r3, [pc, #100]	; (800d770 <prvAddNewTaskToReadyList+0xc8>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	4a18      	ldr	r2, [pc, #96]	; (800d770 <prvAddNewTaskToReadyList+0xc8>)
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4a15      	ldr	r2, [pc, #84]	; (800d774 <prvAddNewTaskToReadyList+0xcc>)
 800d720:	441a      	add	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3304      	adds	r3, #4
 800d726:	4619      	mov	r1, r3
 800d728:	4610      	mov	r0, r2
 800d72a:	f7ff f82d 	bl	800c788 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d72e:	f000 ffe9 	bl	800e704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d732:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <prvAddNewTaskToReadyList+0xc0>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00e      	beq.n	800d758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d73a:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <prvAddNewTaskToReadyList+0xbc>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	429a      	cmp	r2, r3
 800d746:	d207      	bcs.n	800d758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <prvAddNewTaskToReadyList+0xd0>)
 800d74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	20003624 	.word	0x20003624
 800d764:	20003524 	.word	0x20003524
 800d768:	20003630 	.word	0x20003630
 800d76c:	20003640 	.word	0x20003640
 800d770:	2000362c 	.word	0x2000362c
 800d774:	20003528 	.word	0x20003528
 800d778:	e000ed04 	.word	0xe000ed04

0800d77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d017      	beq.n	800d7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <vTaskDelay+0x60>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <vTaskDelay+0x30>
	__asm volatile
 800d796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79a:	f383 8811 	msr	BASEPRI, r3
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	f3bf 8f4f 	dsb	sy
 800d7a6:	60bb      	str	r3, [r7, #8]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d7ac:	f000 f884 	bl	800d8b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fde4 	bl	800e380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7b8:	f000 f88c 	bl	800d8d4 <xTaskResumeAll>
 800d7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d107      	bne.n	800d7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <vTaskDelay+0x64>)
 800d7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	2000364c 	.word	0x2000364c
 800d7e0:	e000ed04 	.word	0xe000ed04

0800d7e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08a      	sub	sp, #40	; 0x28
 800d7e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7f2:	463a      	mov	r2, r7
 800d7f4:	1d39      	adds	r1, r7, #4
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f3 fe1a 	bl	8001434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	9202      	str	r2, [sp, #8]
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	2300      	movs	r3, #0
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	2300      	movs	r3, #0
 800d810:	460a      	mov	r2, r1
 800d812:	4921      	ldr	r1, [pc, #132]	; (800d898 <vTaskStartScheduler+0xb4>)
 800d814:	4821      	ldr	r0, [pc, #132]	; (800d89c <vTaskStartScheduler+0xb8>)
 800d816:	f7ff fe07 	bl	800d428 <xTaskCreateStatic>
 800d81a:	4603      	mov	r3, r0
 800d81c:	4a20      	ldr	r2, [pc, #128]	; (800d8a0 <vTaskStartScheduler+0xbc>)
 800d81e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d820:	4b1f      	ldr	r3, [pc, #124]	; (800d8a0 <vTaskStartScheduler+0xbc>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d828:	2301      	movs	r3, #1
 800d82a:	617b      	str	r3, [r7, #20]
 800d82c:	e001      	b.n	800d832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d82e:	2300      	movs	r3, #0
 800d830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d11b      	bne.n	800d870 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	613b      	str	r3, [r7, #16]
}
 800d84a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d84c:	4b15      	ldr	r3, [pc, #84]	; (800d8a4 <vTaskStartScheduler+0xc0>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	334c      	adds	r3, #76	; 0x4c
 800d852:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <vTaskStartScheduler+0xc4>)
 800d854:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d856:	4b15      	ldr	r3, [pc, #84]	; (800d8ac <vTaskStartScheduler+0xc8>)
 800d858:	f04f 32ff 	mov.w	r2, #4294967295
 800d85c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d85e:	4b14      	ldr	r3, [pc, #80]	; (800d8b0 <vTaskStartScheduler+0xcc>)
 800d860:	2201      	movs	r2, #1
 800d862:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d864:	4b13      	ldr	r3, [pc, #76]	; (800d8b4 <vTaskStartScheduler+0xd0>)
 800d866:	2200      	movs	r2, #0
 800d868:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d86a:	f000 fe79 	bl	800e560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d86e:	e00e      	b.n	800d88e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d876:	d10a      	bne.n	800d88e <vTaskStartScheduler+0xaa>
	__asm volatile
 800d878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	60fb      	str	r3, [r7, #12]
}
 800d88a:	bf00      	nop
 800d88c:	e7fe      	b.n	800d88c <vTaskStartScheduler+0xa8>
}
 800d88e:	bf00      	nop
 800d890:	3718      	adds	r7, #24
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	0800f858 	.word	0x0800f858
 800d89c:	0800de55 	.word	0x0800de55
 800d8a0:	20003648 	.word	0x20003648
 800d8a4:	20003524 	.word	0x20003524
 800d8a8:	200000ac 	.word	0x200000ac
 800d8ac:	20003644 	.word	0x20003644
 800d8b0:	20003630 	.word	0x20003630
 800d8b4:	20003628 	.word	0x20003628

0800d8b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d8bc:	4b04      	ldr	r3, [pc, #16]	; (800d8d0 <vTaskSuspendAll+0x18>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	4a03      	ldr	r2, [pc, #12]	; (800d8d0 <vTaskSuspendAll+0x18>)
 800d8c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d8c6:	bf00      	nop
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	2000364c 	.word	0x2000364c

0800d8d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8e2:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <xTaskResumeAll+0x114>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10a      	bne.n	800d900 <xTaskResumeAll+0x2c>
	__asm volatile
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	603b      	str	r3, [r7, #0]
}
 800d8fc:	bf00      	nop
 800d8fe:	e7fe      	b.n	800d8fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d900:	f000 fed0 	bl	800e6a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d904:	4b38      	ldr	r3, [pc, #224]	; (800d9e8 <xTaskResumeAll+0x114>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3b01      	subs	r3, #1
 800d90a:	4a37      	ldr	r2, [pc, #220]	; (800d9e8 <xTaskResumeAll+0x114>)
 800d90c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d90e:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <xTaskResumeAll+0x114>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d161      	bne.n	800d9da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d916:	4b35      	ldr	r3, [pc, #212]	; (800d9ec <xTaskResumeAll+0x118>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d05d      	beq.n	800d9da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d91e:	e02e      	b.n	800d97e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d920:	4b33      	ldr	r3, [pc, #204]	; (800d9f0 <xTaskResumeAll+0x11c>)
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3318      	adds	r3, #24
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe ff88 	bl	800c842 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3304      	adds	r3, #4
 800d936:	4618      	mov	r0, r3
 800d938:	f7fe ff83 	bl	800c842 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d940:	2201      	movs	r2, #1
 800d942:	409a      	lsls	r2, r3
 800d944:	4b2b      	ldr	r3, [pc, #172]	; (800d9f4 <xTaskResumeAll+0x120>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4313      	orrs	r3, r2
 800d94a:	4a2a      	ldr	r2, [pc, #168]	; (800d9f4 <xTaskResumeAll+0x120>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4a27      	ldr	r2, [pc, #156]	; (800d9f8 <xTaskResumeAll+0x124>)
 800d95c:	441a      	add	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3304      	adds	r3, #4
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f7fe ff0f 	bl	800c788 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96e:	4b23      	ldr	r3, [pc, #140]	; (800d9fc <xTaskResumeAll+0x128>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	429a      	cmp	r2, r3
 800d976:	d302      	bcc.n	800d97e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d978:	4b21      	ldr	r3, [pc, #132]	; (800da00 <xTaskResumeAll+0x12c>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d97e:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <xTaskResumeAll+0x11c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1cc      	bne.n	800d920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d98c:	f000 fb1c 	bl	800dfc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d990:	4b1c      	ldr	r3, [pc, #112]	; (800da04 <xTaskResumeAll+0x130>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d010      	beq.n	800d9be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d99c:	f000 f836 	bl	800da0c <xTaskIncrementTick>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d9a6:	4b16      	ldr	r3, [pc, #88]	; (800da00 <xTaskResumeAll+0x12c>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1f1      	bne.n	800d99c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d9b8:	4b12      	ldr	r3, [pc, #72]	; (800da04 <xTaskResumeAll+0x130>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9be:	4b10      	ldr	r3, [pc, #64]	; (800da00 <xTaskResumeAll+0x12c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d009      	beq.n	800d9da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskResumeAll+0x134>)
 800d9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9da:	f000 fe93 	bl	800e704 <vPortExitCritical>

	return xAlreadyYielded;
 800d9de:	68bb      	ldr	r3, [r7, #8]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	2000364c 	.word	0x2000364c
 800d9ec:	20003624 	.word	0x20003624
 800d9f0:	200035e4 	.word	0x200035e4
 800d9f4:	2000362c 	.word	0x2000362c
 800d9f8:	20003528 	.word	0x20003528
 800d9fc:	20003524 	.word	0x20003524
 800da00:	20003638 	.word	0x20003638
 800da04:	20003634 	.word	0x20003634
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da12:	2300      	movs	r3, #0
 800da14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da16:	4b4e      	ldr	r3, [pc, #312]	; (800db50 <xTaskIncrementTick+0x144>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f040 808e 	bne.w	800db3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da20:	4b4c      	ldr	r3, [pc, #304]	; (800db54 <xTaskIncrementTick+0x148>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da28:	4a4a      	ldr	r2, [pc, #296]	; (800db54 <xTaskIncrementTick+0x148>)
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d120      	bne.n	800da76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800da34:	4b48      	ldr	r3, [pc, #288]	; (800db58 <xTaskIncrementTick+0x14c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00a      	beq.n	800da54 <xTaskIncrementTick+0x48>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	603b      	str	r3, [r7, #0]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <xTaskIncrementTick+0x46>
 800da54:	4b40      	ldr	r3, [pc, #256]	; (800db58 <xTaskIncrementTick+0x14c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	4b40      	ldr	r3, [pc, #256]	; (800db5c <xTaskIncrementTick+0x150>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a3e      	ldr	r2, [pc, #248]	; (800db58 <xTaskIncrementTick+0x14c>)
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	4a3e      	ldr	r2, [pc, #248]	; (800db5c <xTaskIncrementTick+0x150>)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6013      	str	r3, [r2, #0]
 800da68:	4b3d      	ldr	r3, [pc, #244]	; (800db60 <xTaskIncrementTick+0x154>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3301      	adds	r3, #1
 800da6e:	4a3c      	ldr	r2, [pc, #240]	; (800db60 <xTaskIncrementTick+0x154>)
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	f000 faa9 	bl	800dfc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da76:	4b3b      	ldr	r3, [pc, #236]	; (800db64 <xTaskIncrementTick+0x158>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d348      	bcc.n	800db12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da80:	4b35      	ldr	r3, [pc, #212]	; (800db58 <xTaskIncrementTick+0x14c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d104      	bne.n	800da94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da8a:	4b36      	ldr	r3, [pc, #216]	; (800db64 <xTaskIncrementTick+0x158>)
 800da8c:	f04f 32ff 	mov.w	r2, #4294967295
 800da90:	601a      	str	r2, [r3, #0]
					break;
 800da92:	e03e      	b.n	800db12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da94:	4b30      	ldr	r3, [pc, #192]	; (800db58 <xTaskIncrementTick+0x14c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d203      	bcs.n	800dab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800daac:	4a2d      	ldr	r2, [pc, #180]	; (800db64 <xTaskIncrementTick+0x158>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dab2:	e02e      	b.n	800db12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	3304      	adds	r3, #4
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fe fec2 	bl	800c842 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	3318      	adds	r3, #24
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe feb9 	bl	800c842 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	2201      	movs	r2, #1
 800dad6:	409a      	lsls	r2, r3
 800dad8:	4b23      	ldr	r3, [pc, #140]	; (800db68 <xTaskIncrementTick+0x15c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4313      	orrs	r3, r2
 800dade:	4a22      	ldr	r2, [pc, #136]	; (800db68 <xTaskIncrementTick+0x15c>)
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae6:	4613      	mov	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4413      	add	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4a1f      	ldr	r2, [pc, #124]	; (800db6c <xTaskIncrementTick+0x160>)
 800daf0:	441a      	add	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	3304      	adds	r3, #4
 800daf6:	4619      	mov	r1, r3
 800daf8:	4610      	mov	r0, r2
 800dafa:	f7fe fe45 	bl	800c788 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db02:	4b1b      	ldr	r3, [pc, #108]	; (800db70 <xTaskIncrementTick+0x164>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	429a      	cmp	r2, r3
 800db0a:	d3b9      	bcc.n	800da80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800db0c:	2301      	movs	r3, #1
 800db0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db10:	e7b6      	b.n	800da80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db12:	4b17      	ldr	r3, [pc, #92]	; (800db70 <xTaskIncrementTick+0x164>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db18:	4914      	ldr	r1, [pc, #80]	; (800db6c <xTaskIncrementTick+0x160>)
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	440b      	add	r3, r1
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b01      	cmp	r3, #1
 800db28:	d901      	bls.n	800db2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800db2a:	2301      	movs	r3, #1
 800db2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800db2e:	4b11      	ldr	r3, [pc, #68]	; (800db74 <xTaskIncrementTick+0x168>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d007      	beq.n	800db46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800db36:	2301      	movs	r3, #1
 800db38:	617b      	str	r3, [r7, #20]
 800db3a:	e004      	b.n	800db46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db3c:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <xTaskIncrementTick+0x16c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	4a0d      	ldr	r2, [pc, #52]	; (800db78 <xTaskIncrementTick+0x16c>)
 800db44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db46:	697b      	ldr	r3, [r7, #20]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	2000364c 	.word	0x2000364c
 800db54:	20003628 	.word	0x20003628
 800db58:	200035dc 	.word	0x200035dc
 800db5c:	200035e0 	.word	0x200035e0
 800db60:	2000363c 	.word	0x2000363c
 800db64:	20003644 	.word	0x20003644
 800db68:	2000362c 	.word	0x2000362c
 800db6c:	20003528 	.word	0x20003528
 800db70:	20003524 	.word	0x20003524
 800db74:	20003638 	.word	0x20003638
 800db78:	20003634 	.word	0x20003634

0800db7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db82:	4b29      	ldr	r3, [pc, #164]	; (800dc28 <vTaskSwitchContext+0xac>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db8a:	4b28      	ldr	r3, [pc, #160]	; (800dc2c <vTaskSwitchContext+0xb0>)
 800db8c:	2201      	movs	r2, #1
 800db8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db90:	e044      	b.n	800dc1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800db92:	4b26      	ldr	r3, [pc, #152]	; (800dc2c <vTaskSwitchContext+0xb0>)
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db98:	4b25      	ldr	r3, [pc, #148]	; (800dc30 <vTaskSwitchContext+0xb4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	fab3 f383 	clz	r3, r3
 800dba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dba6:	7afb      	ldrb	r3, [r7, #11]
 800dba8:	f1c3 031f 	rsb	r3, r3, #31
 800dbac:	617b      	str	r3, [r7, #20]
 800dbae:	4921      	ldr	r1, [pc, #132]	; (800dc34 <vTaskSwitchContext+0xb8>)
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	4413      	add	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	440b      	add	r3, r1
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	607b      	str	r3, [r7, #4]
}
 800dbd4:	bf00      	nop
 800dbd6:	e7fe      	b.n	800dbd6 <vTaskSwitchContext+0x5a>
 800dbd8:	697a      	ldr	r2, [r7, #20]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4a14      	ldr	r2, [pc, #80]	; (800dc34 <vTaskSwitchContext+0xb8>)
 800dbe4:	4413      	add	r3, r2
 800dbe6:	613b      	str	r3, [r7, #16]
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	685a      	ldr	r2, [r3, #4]
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	605a      	str	r2, [r3, #4]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	3308      	adds	r3, #8
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d104      	bne.n	800dc08 <vTaskSwitchContext+0x8c>
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	605a      	str	r2, [r3, #4]
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	4a0a      	ldr	r2, [pc, #40]	; (800dc38 <vTaskSwitchContext+0xbc>)
 800dc10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc12:	4b09      	ldr	r3, [pc, #36]	; (800dc38 <vTaskSwitchContext+0xbc>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	334c      	adds	r3, #76	; 0x4c
 800dc18:	4a08      	ldr	r2, [pc, #32]	; (800dc3c <vTaskSwitchContext+0xc0>)
 800dc1a:	6013      	str	r3, [r2, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	2000364c 	.word	0x2000364c
 800dc2c:	20003638 	.word	0x20003638
 800dc30:	2000362c 	.word	0x2000362c
 800dc34:	20003528 	.word	0x20003528
 800dc38:	20003524 	.word	0x20003524
 800dc3c:	200000ac 	.word	0x200000ac

0800dc40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10a      	bne.n	800dc66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	60fb      	str	r3, [r7, #12]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc66:	4b07      	ldr	r3, [pc, #28]	; (800dc84 <vTaskPlaceOnEventList+0x44>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3318      	adds	r3, #24
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7fe fdae 	bl	800c7d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc74:	2101      	movs	r1, #1
 800dc76:	6838      	ldr	r0, [r7, #0]
 800dc78:	f000 fb82 	bl	800e380 <prvAddCurrentTaskToDelayedList>
}
 800dc7c:	bf00      	nop
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	20003524 	.word	0x20003524

0800dc88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10a      	bne.n	800dcb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	60fb      	str	r3, [r7, #12]
}
 800dcb0:	bf00      	nop
 800dcb2:	e7fe      	b.n	800dcb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	3318      	adds	r3, #24
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe fdc2 	bl	800c842 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcbe:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <xTaskRemoveFromEventList+0xac>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d11c      	bne.n	800dd00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fdb9 	bl	800c842 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	409a      	lsls	r2, r3
 800dcd8:	4b17      	ldr	r3, [pc, #92]	; (800dd38 <xTaskRemoveFromEventList+0xb0>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	4a16      	ldr	r2, [pc, #88]	; (800dd38 <xTaskRemoveFromEventList+0xb0>)
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4a13      	ldr	r2, [pc, #76]	; (800dd3c <xTaskRemoveFromEventList+0xb4>)
 800dcf0:	441a      	add	r2, r3
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	f7fe fd45 	bl	800c788 <vListInsertEnd>
 800dcfe:	e005      	b.n	800dd0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	3318      	adds	r3, #24
 800dd04:	4619      	mov	r1, r3
 800dd06:	480e      	ldr	r0, [pc, #56]	; (800dd40 <xTaskRemoveFromEventList+0xb8>)
 800dd08:	f7fe fd3e 	bl	800c788 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd10:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <xTaskRemoveFromEventList+0xbc>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d905      	bls.n	800dd26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd1e:	4b0a      	ldr	r3, [pc, #40]	; (800dd48 <xTaskRemoveFromEventList+0xc0>)
 800dd20:	2201      	movs	r2, #1
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	e001      	b.n	800dd2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dd26:	2300      	movs	r3, #0
 800dd28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd2a:	697b      	ldr	r3, [r7, #20]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	2000364c 	.word	0x2000364c
 800dd38:	2000362c 	.word	0x2000362c
 800dd3c:	20003528 	.word	0x20003528
 800dd40:	200035e4 	.word	0x200035e4
 800dd44:	20003524 	.word	0x20003524
 800dd48:	20003638 	.word	0x20003638

0800dd4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd54:	4b06      	ldr	r3, [pc, #24]	; (800dd70 <vTaskInternalSetTimeOutState+0x24>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd5c:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <vTaskInternalSetTimeOutState+0x28>)
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	605a      	str	r2, [r3, #4]
}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr
 800dd70:	2000363c 	.word	0x2000363c
 800dd74:	20003628 	.word	0x20003628

0800dd78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10a      	bne.n	800dd9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	613b      	str	r3, [r7, #16]
}
 800dd9a:	bf00      	nop
 800dd9c:	e7fe      	b.n	800dd9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10a      	bne.n	800ddba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	60fb      	str	r3, [r7, #12]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ddba:	f000 fc73 	bl	800e6a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddbe:	4b1d      	ldr	r3, [pc, #116]	; (800de34 <xTaskCheckForTimeOut+0xbc>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	69ba      	ldr	r2, [r7, #24]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d102      	bne.n	800ddde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	61fb      	str	r3, [r7, #28]
 800dddc:	e023      	b.n	800de26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	4b15      	ldr	r3, [pc, #84]	; (800de38 <xTaskCheckForTimeOut+0xc0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d007      	beq.n	800ddfa <xTaskCheckForTimeOut+0x82>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d302      	bcc.n	800ddfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	e015      	b.n	800de26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	429a      	cmp	r2, r3
 800de02:	d20b      	bcs.n	800de1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ff9b 	bl	800dd4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	e004      	b.n	800de26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de22:	2301      	movs	r3, #1
 800de24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de26:	f000 fc6d 	bl	800e704 <vPortExitCritical>

	return xReturn;
 800de2a:	69fb      	ldr	r3, [r7, #28]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3720      	adds	r7, #32
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20003628 	.word	0x20003628
 800de38:	2000363c 	.word	0x2000363c

0800de3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de40:	4b03      	ldr	r3, [pc, #12]	; (800de50 <vTaskMissedYield+0x14>)
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
}
 800de46:	bf00      	nop
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	20003638 	.word	0x20003638

0800de54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de5c:	f000 f852 	bl	800df04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de60:	4b06      	ldr	r3, [pc, #24]	; (800de7c <prvIdleTask+0x28>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d9f9      	bls.n	800de5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800de68:	4b05      	ldr	r3, [pc, #20]	; (800de80 <prvIdleTask+0x2c>)
 800de6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de78:	e7f0      	b.n	800de5c <prvIdleTask+0x8>
 800de7a:	bf00      	nop
 800de7c:	20003528 	.word	0x20003528
 800de80:	e000ed04 	.word	0xe000ed04

0800de84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de8a:	2300      	movs	r3, #0
 800de8c:	607b      	str	r3, [r7, #4]
 800de8e:	e00c      	b.n	800deaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4a12      	ldr	r2, [pc, #72]	; (800dee4 <prvInitialiseTaskLists+0x60>)
 800de9c:	4413      	add	r3, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe fc45 	bl	800c72e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3301      	adds	r3, #1
 800dea8:	607b      	str	r3, [r7, #4]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b06      	cmp	r3, #6
 800deae:	d9ef      	bls.n	800de90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800deb0:	480d      	ldr	r0, [pc, #52]	; (800dee8 <prvInitialiseTaskLists+0x64>)
 800deb2:	f7fe fc3c 	bl	800c72e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800deb6:	480d      	ldr	r0, [pc, #52]	; (800deec <prvInitialiseTaskLists+0x68>)
 800deb8:	f7fe fc39 	bl	800c72e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800debc:	480c      	ldr	r0, [pc, #48]	; (800def0 <prvInitialiseTaskLists+0x6c>)
 800debe:	f7fe fc36 	bl	800c72e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dec2:	480c      	ldr	r0, [pc, #48]	; (800def4 <prvInitialiseTaskLists+0x70>)
 800dec4:	f7fe fc33 	bl	800c72e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dec8:	480b      	ldr	r0, [pc, #44]	; (800def8 <prvInitialiseTaskLists+0x74>)
 800deca:	f7fe fc30 	bl	800c72e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dece:	4b0b      	ldr	r3, [pc, #44]	; (800defc <prvInitialiseTaskLists+0x78>)
 800ded0:	4a05      	ldr	r2, [pc, #20]	; (800dee8 <prvInitialiseTaskLists+0x64>)
 800ded2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ded4:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <prvInitialiseTaskLists+0x7c>)
 800ded6:	4a05      	ldr	r2, [pc, #20]	; (800deec <prvInitialiseTaskLists+0x68>)
 800ded8:	601a      	str	r2, [r3, #0]
}
 800deda:	bf00      	nop
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20003528 	.word	0x20003528
 800dee8:	200035b4 	.word	0x200035b4
 800deec:	200035c8 	.word	0x200035c8
 800def0:	200035e4 	.word	0x200035e4
 800def4:	200035f8 	.word	0x200035f8
 800def8:	20003610 	.word	0x20003610
 800defc:	200035dc 	.word	0x200035dc
 800df00:	200035e0 	.word	0x200035e0

0800df04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df0a:	e019      	b.n	800df40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df0c:	f000 fbca 	bl	800e6a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df10:	4b10      	ldr	r3, [pc, #64]	; (800df54 <prvCheckTasksWaitingTermination+0x50>)
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3304      	adds	r3, #4
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe fc90 	bl	800c842 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df22:	4b0d      	ldr	r3, [pc, #52]	; (800df58 <prvCheckTasksWaitingTermination+0x54>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3b01      	subs	r3, #1
 800df28:	4a0b      	ldr	r2, [pc, #44]	; (800df58 <prvCheckTasksWaitingTermination+0x54>)
 800df2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df2c:	4b0b      	ldr	r3, [pc, #44]	; (800df5c <prvCheckTasksWaitingTermination+0x58>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3b01      	subs	r3, #1
 800df32:	4a0a      	ldr	r2, [pc, #40]	; (800df5c <prvCheckTasksWaitingTermination+0x58>)
 800df34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df36:	f000 fbe5 	bl	800e704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f810 	bl	800df60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df40:	4b06      	ldr	r3, [pc, #24]	; (800df5c <prvCheckTasksWaitingTermination+0x58>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1e1      	bne.n	800df0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df48:	bf00      	nop
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	200035f8 	.word	0x200035f8
 800df58:	20003624 	.word	0x20003624
 800df5c:	2000360c 	.word	0x2000360c

0800df60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	334c      	adds	r3, #76	; 0x4c
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 ff89 	bl	800ee84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d108      	bne.n	800df8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fd7d 	bl	800ea80 <vPortFree>
				vPortFree( pxTCB );
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fd7a 	bl	800ea80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df8c:	e018      	b.n	800dfc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800df94:	2b01      	cmp	r3, #1
 800df96:	d103      	bne.n	800dfa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fd71 	bl	800ea80 <vPortFree>
	}
 800df9e:	e00f      	b.n	800dfc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d00a      	beq.n	800dfc0 <prvDeleteTCB+0x60>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	60fb      	str	r3, [r7, #12]
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <prvDeleteTCB+0x5e>
	}
 800dfc0:	bf00      	nop
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfce:	4b0c      	ldr	r3, [pc, #48]	; (800e000 <prvResetNextTaskUnblockTime+0x38>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfd8:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <prvResetNextTaskUnblockTime+0x3c>)
 800dfda:	f04f 32ff 	mov.w	r2, #4294967295
 800dfde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfe0:	e008      	b.n	800dff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe2:	4b07      	ldr	r3, [pc, #28]	; (800e000 <prvResetNextTaskUnblockTime+0x38>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	4a04      	ldr	r2, [pc, #16]	; (800e004 <prvResetNextTaskUnblockTime+0x3c>)
 800dff2:	6013      	str	r3, [r2, #0]
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	200035dc 	.word	0x200035dc
 800e004:	20003644 	.word	0x20003644

0800e008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e00e:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <xTaskGetSchedulerState+0x34>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e016:	2301      	movs	r3, #1
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	e008      	b.n	800e02e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e01c:	4b08      	ldr	r3, [pc, #32]	; (800e040 <xTaskGetSchedulerState+0x38>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d102      	bne.n	800e02a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e024:	2302      	movs	r3, #2
 800e026:	607b      	str	r3, [r7, #4]
 800e028:	e001      	b.n	800e02e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e02a:	2300      	movs	r3, #0
 800e02c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e02e:	687b      	ldr	r3, [r7, #4]
	}
 800e030:	4618      	mov	r0, r3
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	20003630 	.word	0x20003630
 800e040:	2000364c 	.word	0x2000364c

0800e044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e050:	2300      	movs	r3, #0
 800e052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d05e      	beq.n	800e118 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05e:	4b31      	ldr	r3, [pc, #196]	; (800e124 <xTaskPriorityInherit+0xe0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e064:	429a      	cmp	r2, r3
 800e066:	d24e      	bcs.n	800e106 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	699b      	ldr	r3, [r3, #24]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	db06      	blt.n	800e07e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e070:	4b2c      	ldr	r3, [pc, #176]	; (800e124 <xTaskPriorityInherit+0xe0>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e076:	f1c3 0207 	rsb	r2, r3, #7
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	6959      	ldr	r1, [r3, #20]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a26      	ldr	r2, [pc, #152]	; (800e128 <xTaskPriorityInherit+0xe4>)
 800e090:	4413      	add	r3, r2
 800e092:	4299      	cmp	r1, r3
 800e094:	d12f      	bne.n	800e0f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	3304      	adds	r3, #4
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fe fbd1 	bl	800c842 <uxListRemove>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b0:	43da      	mvns	r2, r3
 800e0b2:	4b1e      	ldr	r3, [pc, #120]	; (800e12c <xTaskPriorityInherit+0xe8>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	4a1c      	ldr	r2, [pc, #112]	; (800e12c <xTaskPriorityInherit+0xe8>)
 800e0ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0bc:	4b19      	ldr	r3, [pc, #100]	; (800e124 <xTaskPriorityInherit+0xe0>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	409a      	lsls	r2, r3
 800e0ce:	4b17      	ldr	r3, [pc, #92]	; (800e12c <xTaskPriorityInherit+0xe8>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	4a15      	ldr	r2, [pc, #84]	; (800e12c <xTaskPriorityInherit+0xe8>)
 800e0d6:	6013      	str	r3, [r2, #0]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4a10      	ldr	r2, [pc, #64]	; (800e128 <xTaskPriorityInherit+0xe4>)
 800e0e6:	441a      	add	r2, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f7fe fb4a 	bl	800c788 <vListInsertEnd>
 800e0f4:	e004      	b.n	800e100 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0f6:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <xTaskPriorityInherit+0xe0>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e100:	2301      	movs	r3, #1
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e008      	b.n	800e118 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e10a:	4b06      	ldr	r3, [pc, #24]	; (800e124 <xTaskPriorityInherit+0xe0>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	429a      	cmp	r2, r3
 800e112:	d201      	bcs.n	800e118 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e114:	2301      	movs	r3, #1
 800e116:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e118:	68fb      	ldr	r3, [r7, #12]
	}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	20003524 	.word	0x20003524
 800e128:	20003528 	.word	0x20003528
 800e12c:	2000362c 	.word	0x2000362c

0800e130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d06e      	beq.n	800e224 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e146:	4b3a      	ldr	r3, [pc, #232]	; (800e230 <xTaskPriorityDisinherit+0x100>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d00a      	beq.n	800e166 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	60bb      	str	r3, [r7, #8]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e188:	1e5a      	subs	r2, r3, #1
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e196:	429a      	cmp	r2, r3
 800e198:	d044      	beq.n	800e224 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d140      	bne.n	800e224 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fe fb4b 	bl	800c842 <uxListRemove>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d115      	bne.n	800e1de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b6:	491f      	ldr	r1, [pc, #124]	; (800e234 <xTaskPriorityDisinherit+0x104>)
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <xTaskPriorityDisinherit+0xae>
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e1d2:	43da      	mvns	r2, r3
 800e1d4:	4b18      	ldr	r3, [pc, #96]	; (800e238 <xTaskPriorityDisinherit+0x108>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4013      	ands	r3, r2
 800e1da:	4a17      	ldr	r2, [pc, #92]	; (800e238 <xTaskPriorityDisinherit+0x108>)
 800e1dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ea:	f1c3 0207 	rsb	r2, r3, #7
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	409a      	lsls	r2, r3
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <xTaskPriorityDisinherit+0x108>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4313      	orrs	r3, r2
 800e200:	4a0d      	ldr	r2, [pc, #52]	; (800e238 <xTaskPriorityDisinherit+0x108>)
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4a08      	ldr	r2, [pc, #32]	; (800e234 <xTaskPriorityDisinherit+0x104>)
 800e212:	441a      	add	r2, r3
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	3304      	adds	r3, #4
 800e218:	4619      	mov	r1, r3
 800e21a:	4610      	mov	r0, r2
 800e21c:	f7fe fab4 	bl	800c788 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e220:	2301      	movs	r3, #1
 800e222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e224:	697b      	ldr	r3, [r7, #20]
	}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	20003524 	.word	0x20003524
 800e234:	20003528 	.word	0x20003528
 800e238:	2000362c 	.word	0x2000362c

0800e23c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e24a:	2301      	movs	r3, #1
 800e24c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d077      	beq.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10a      	bne.n	800e272 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	60fb      	str	r3, [r7, #12]
}
 800e26e:	bf00      	nop
 800e270:	e7fe      	b.n	800e270 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d902      	bls.n	800e282 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	61fb      	str	r3, [r7, #28]
 800e280:	e002      	b.n	800e288 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e286:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28c:	69fa      	ldr	r2, [r7, #28]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d058      	beq.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d153      	bne.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e29c:	4b2b      	ldr	r3, [pc, #172]	; (800e34c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d10a      	bne.n	800e2bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	60bb      	str	r3, [r7, #8]
}
 800e2b8:	bf00      	nop
 800e2ba:	e7fe      	b.n	800e2ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	69fa      	ldr	r2, [r7, #28]
 800e2c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	db04      	blt.n	800e2da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	f1c3 0207 	rsb	r2, r3, #7
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	6959      	ldr	r1, [r3, #20]
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4a19      	ldr	r2, [pc, #100]	; (800e350 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e2ea:	4413      	add	r3, r2
 800e2ec:	4299      	cmp	r1, r3
 800e2ee:	d129      	bne.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fe faa4 	bl	800c842 <uxListRemove>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10a      	bne.n	800e316 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	2201      	movs	r2, #1
 800e306:	fa02 f303 	lsl.w	r3, r2, r3
 800e30a:	43da      	mvns	r2, r3
 800e30c:	4b11      	ldr	r3, [pc, #68]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4013      	ands	r3, r2
 800e312:	4a10      	ldr	r2, [pc, #64]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e314:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31a:	2201      	movs	r2, #1
 800e31c:	409a      	lsls	r2, r3
 800e31e:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4313      	orrs	r3, r2
 800e324:	4a0b      	ldr	r2, [pc, #44]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e326:	6013      	str	r3, [r2, #0]
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4a06      	ldr	r2, [pc, #24]	; (800e350 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e336:	441a      	add	r2, r3
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	3304      	adds	r3, #4
 800e33c:	4619      	mov	r1, r3
 800e33e:	4610      	mov	r0, r2
 800e340:	f7fe fa22 	bl	800c788 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e344:	bf00      	nop
 800e346:	3720      	adds	r7, #32
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20003524 	.word	0x20003524
 800e350:	20003528 	.word	0x20003528
 800e354:	2000362c 	.word	0x2000362c

0800e358 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e35c:	4b07      	ldr	r3, [pc, #28]	; (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e36a:	3201      	adds	r2, #1
 800e36c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e36e:	4b03      	ldr	r3, [pc, #12]	; (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e370:	681b      	ldr	r3, [r3, #0]
	}
 800e372:	4618      	mov	r0, r3
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	20003524 	.word	0x20003524

0800e380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e38a:	4b29      	ldr	r3, [pc, #164]	; (800e430 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e390:	4b28      	ldr	r3, [pc, #160]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3304      	adds	r3, #4
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe fa53 	bl	800c842 <uxListRemove>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10b      	bne.n	800e3ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e3a2:	4b24      	ldr	r3, [pc, #144]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ae:	43da      	mvns	r2, r3
 800e3b0:	4b21      	ldr	r3, [pc, #132]	; (800e438 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	4a20      	ldr	r2, [pc, #128]	; (800e438 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c0:	d10a      	bne.n	800e3d8 <prvAddCurrentTaskToDelayedList+0x58>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d007      	beq.n	800e3d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3c8:	4b1a      	ldr	r3, [pc, #104]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	481a      	ldr	r0, [pc, #104]	; (800e43c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e3d2:	f7fe f9d9 	bl	800c788 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3d6:	e026      	b.n	800e426 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4413      	add	r3, r2
 800e3de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3e0:	4b14      	ldr	r3, [pc, #80]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d209      	bcs.n	800e404 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3f0:	4b13      	ldr	r3, [pc, #76]	; (800e440 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	4b0f      	ldr	r3, [pc, #60]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	f7fe f9e7 	bl	800c7d0 <vListInsert>
}
 800e402:	e010      	b.n	800e426 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e404:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	4b0a      	ldr	r3, [pc, #40]	; (800e434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f7fe f9dd 	bl	800c7d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e416:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d202      	bcs.n	800e426 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e420:	4a09      	ldr	r2, [pc, #36]	; (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	6013      	str	r3, [r2, #0]
}
 800e426:	bf00      	nop
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20003628 	.word	0x20003628
 800e434:	20003524 	.word	0x20003524
 800e438:	2000362c 	.word	0x2000362c
 800e43c:	20003610 	.word	0x20003610
 800e440:	200035e0 	.word	0x200035e0
 800e444:	200035dc 	.word	0x200035dc
 800e448:	20003644 	.word	0x20003644

0800e44c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	3b04      	subs	r3, #4
 800e45c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3b04      	subs	r3, #4
 800e46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f023 0201 	bic.w	r2, r3, #1
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3b04      	subs	r3, #4
 800e47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e47c:	4a0c      	ldr	r2, [pc, #48]	; (800e4b0 <pxPortInitialiseStack+0x64>)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3b14      	subs	r3, #20
 800e486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3b04      	subs	r3, #4
 800e492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f06f 0202 	mvn.w	r2, #2
 800e49a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	3b20      	subs	r3, #32
 800e4a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3714      	adds	r7, #20
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr
 800e4b0:	0800e4b5 	.word	0x0800e4b5

0800e4b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4be:	4b12      	ldr	r3, [pc, #72]	; (800e508 <prvTaskExitError+0x54>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c6:	d00a      	beq.n	800e4de <prvTaskExitError+0x2a>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	60fb      	str	r3, [r7, #12]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <prvTaskExitError+0x28>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60bb      	str	r3, [r7, #8]
}
 800e4f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4f2:	bf00      	nop
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d0fc      	beq.n	800e4f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	200000a8 	.word	0x200000a8
 800e50c:	00000000 	.word	0x00000000

0800e510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e510:	4b07      	ldr	r3, [pc, #28]	; (800e530 <pxCurrentTCBConst2>)
 800e512:	6819      	ldr	r1, [r3, #0]
 800e514:	6808      	ldr	r0, [r1, #0]
 800e516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51a:	f380 8809 	msr	PSP, r0
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f04f 0000 	mov.w	r0, #0
 800e526:	f380 8811 	msr	BASEPRI, r0
 800e52a:	4770      	bx	lr
 800e52c:	f3af 8000 	nop.w

0800e530 <pxCurrentTCBConst2>:
 800e530:	20003524 	.word	0x20003524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop

0800e538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e538:	4808      	ldr	r0, [pc, #32]	; (800e55c <prvPortStartFirstTask+0x24>)
 800e53a:	6800      	ldr	r0, [r0, #0]
 800e53c:	6800      	ldr	r0, [r0, #0]
 800e53e:	f380 8808 	msr	MSP, r0
 800e542:	f04f 0000 	mov.w	r0, #0
 800e546:	f380 8814 	msr	CONTROL, r0
 800e54a:	b662      	cpsie	i
 800e54c:	b661      	cpsie	f
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	df00      	svc	0
 800e558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e55a:	bf00      	nop
 800e55c:	e000ed08 	.word	0xe000ed08

0800e560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e566:	4b46      	ldr	r3, [pc, #280]	; (800e680 <xPortStartScheduler+0x120>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a46      	ldr	r2, [pc, #280]	; (800e684 <xPortStartScheduler+0x124>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d10a      	bne.n	800e586 <xPortStartScheduler+0x26>
	__asm volatile
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	f383 8811 	msr	BASEPRI, r3
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	613b      	str	r3, [r7, #16]
}
 800e582:	bf00      	nop
 800e584:	e7fe      	b.n	800e584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e586:	4b3e      	ldr	r3, [pc, #248]	; (800e680 <xPortStartScheduler+0x120>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a3f      	ldr	r2, [pc, #252]	; (800e688 <xPortStartScheduler+0x128>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d10a      	bne.n	800e5a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	60fb      	str	r3, [r7, #12]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5a6:	4b39      	ldr	r3, [pc, #228]	; (800e68c <xPortStartScheduler+0x12c>)
 800e5a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	22ff      	movs	r2, #255	; 0xff
 800e5b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	4b31      	ldr	r3, [pc, #196]	; (800e690 <xPortStartScheduler+0x130>)
 800e5cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5ce:	4b31      	ldr	r3, [pc, #196]	; (800e694 <xPortStartScheduler+0x134>)
 800e5d0:	2207      	movs	r2, #7
 800e5d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5d4:	e009      	b.n	800e5ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e5d6:	4b2f      	ldr	r3, [pc, #188]	; (800e694 <xPortStartScheduler+0x134>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	4a2d      	ldr	r2, [pc, #180]	; (800e694 <xPortStartScheduler+0x134>)
 800e5de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5e0:	78fb      	ldrb	r3, [r7, #3]
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5ea:	78fb      	ldrb	r3, [r7, #3]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5f2:	2b80      	cmp	r3, #128	; 0x80
 800e5f4:	d0ef      	beq.n	800e5d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e5f6:	4b27      	ldr	r3, [pc, #156]	; (800e694 <xPortStartScheduler+0x134>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f1c3 0307 	rsb	r3, r3, #7
 800e5fe:	2b04      	cmp	r3, #4
 800e600:	d00a      	beq.n	800e618 <xPortStartScheduler+0xb8>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	60bb      	str	r3, [r7, #8]
}
 800e614:	bf00      	nop
 800e616:	e7fe      	b.n	800e616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e618:	4b1e      	ldr	r3, [pc, #120]	; (800e694 <xPortStartScheduler+0x134>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	021b      	lsls	r3, r3, #8
 800e61e:	4a1d      	ldr	r2, [pc, #116]	; (800e694 <xPortStartScheduler+0x134>)
 800e620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e622:	4b1c      	ldr	r3, [pc, #112]	; (800e694 <xPortStartScheduler+0x134>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e62a:	4a1a      	ldr	r2, [pc, #104]	; (800e694 <xPortStartScheduler+0x134>)
 800e62c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	b2da      	uxtb	r2, r3
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e636:	4b18      	ldr	r3, [pc, #96]	; (800e698 <xPortStartScheduler+0x138>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a17      	ldr	r2, [pc, #92]	; (800e698 <xPortStartScheduler+0x138>)
 800e63c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e642:	4b15      	ldr	r3, [pc, #84]	; (800e698 <xPortStartScheduler+0x138>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a14      	ldr	r2, [pc, #80]	; (800e698 <xPortStartScheduler+0x138>)
 800e648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e64c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e64e:	f000 f8dd 	bl	800e80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e652:	4b12      	ldr	r3, [pc, #72]	; (800e69c <xPortStartScheduler+0x13c>)
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e658:	f000 f8fc 	bl	800e854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e65c:	4b10      	ldr	r3, [pc, #64]	; (800e6a0 <xPortStartScheduler+0x140>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a0f      	ldr	r2, [pc, #60]	; (800e6a0 <xPortStartScheduler+0x140>)
 800e662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e668:	f7ff ff66 	bl	800e538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e66c:	f7ff fa86 	bl	800db7c <vTaskSwitchContext>
	prvTaskExitError();
 800e670:	f7ff ff20 	bl	800e4b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3718      	adds	r7, #24
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	e000ed00 	.word	0xe000ed00
 800e684:	410fc271 	.word	0x410fc271
 800e688:	410fc270 	.word	0x410fc270
 800e68c:	e000e400 	.word	0xe000e400
 800e690:	20003650 	.word	0x20003650
 800e694:	20003654 	.word	0x20003654
 800e698:	e000ed20 	.word	0xe000ed20
 800e69c:	200000a8 	.word	0x200000a8
 800e6a0:	e000ef34 	.word	0xe000ef34

0800e6a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	607b      	str	r3, [r7, #4]
}
 800e6bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6be:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <vPortEnterCritical+0x58>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	4a0d      	ldr	r2, [pc, #52]	; (800e6fc <vPortEnterCritical+0x58>)
 800e6c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6c8:	4b0c      	ldr	r3, [pc, #48]	; (800e6fc <vPortEnterCritical+0x58>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d10f      	bne.n	800e6f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6d0:	4b0b      	ldr	r3, [pc, #44]	; (800e700 <vPortEnterCritical+0x5c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00a      	beq.n	800e6f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	f383 8811 	msr	BASEPRI, r3
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	603b      	str	r3, [r7, #0]
}
 800e6ec:	bf00      	nop
 800e6ee:	e7fe      	b.n	800e6ee <vPortEnterCritical+0x4a>
	}
}
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	200000a8 	.word	0x200000a8
 800e700:	e000ed04 	.word	0xe000ed04

0800e704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e70a:	4b12      	ldr	r3, [pc, #72]	; (800e754 <vPortExitCritical+0x50>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <vPortExitCritical+0x24>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	607b      	str	r3, [r7, #4]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e728:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <vPortExitCritical+0x50>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	4a09      	ldr	r2, [pc, #36]	; (800e754 <vPortExitCritical+0x50>)
 800e730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e732:	4b08      	ldr	r3, [pc, #32]	; (800e754 <vPortExitCritical+0x50>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d105      	bne.n	800e746 <vPortExitCritical+0x42>
 800e73a:	2300      	movs	r3, #0
 800e73c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	f383 8811 	msr	BASEPRI, r3
}
 800e744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	200000a8 	.word	0x200000a8
	...

0800e760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e760:	f3ef 8009 	mrs	r0, PSP
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	4b15      	ldr	r3, [pc, #84]	; (800e7c0 <pxCurrentTCBConst>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	f01e 0f10 	tst.w	lr, #16
 800e770:	bf08      	it	eq
 800e772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77a:	6010      	str	r0, [r2, #0]
 800e77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e784:	f380 8811 	msr	BASEPRI, r0
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f7ff f9f4 	bl	800db7c <vTaskSwitchContext>
 800e794:	f04f 0000 	mov.w	r0, #0
 800e798:	f380 8811 	msr	BASEPRI, r0
 800e79c:	bc09      	pop	{r0, r3}
 800e79e:	6819      	ldr	r1, [r3, #0]
 800e7a0:	6808      	ldr	r0, [r1, #0]
 800e7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a6:	f01e 0f10 	tst.w	lr, #16
 800e7aa:	bf08      	it	eq
 800e7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7b0:	f380 8809 	msr	PSP, r0
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	f3af 8000 	nop.w

0800e7c0 <pxCurrentTCBConst>:
 800e7c0:	20003524 	.word	0x20003524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop

0800e7c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	607b      	str	r3, [r7, #4]
}
 800e7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7e2:	f7ff f913 	bl	800da0c <xTaskIncrementTick>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d003      	beq.n	800e7f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7ec:	4b06      	ldr	r3, [pc, #24]	; (800e808 <SysTick_Handler+0x40>)
 800e7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	f383 8811 	msr	BASEPRI, r3
}
 800e7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	e000ed04 	.word	0xe000ed04

0800e80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e80c:	b480      	push	{r7}
 800e80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e810:	4b0b      	ldr	r3, [pc, #44]	; (800e840 <vPortSetupTimerInterrupt+0x34>)
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e816:	4b0b      	ldr	r3, [pc, #44]	; (800e844 <vPortSetupTimerInterrupt+0x38>)
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e81c:	4b0a      	ldr	r3, [pc, #40]	; (800e848 <vPortSetupTimerInterrupt+0x3c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a0a      	ldr	r2, [pc, #40]	; (800e84c <vPortSetupTimerInterrupt+0x40>)
 800e822:	fba2 2303 	umull	r2, r3, r2, r3
 800e826:	099b      	lsrs	r3, r3, #6
 800e828:	4a09      	ldr	r2, [pc, #36]	; (800e850 <vPortSetupTimerInterrupt+0x44>)
 800e82a:	3b01      	subs	r3, #1
 800e82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e82e:	4b04      	ldr	r3, [pc, #16]	; (800e840 <vPortSetupTimerInterrupt+0x34>)
 800e830:	2207      	movs	r2, #7
 800e832:	601a      	str	r2, [r3, #0]
}
 800e834:	bf00      	nop
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	e000e010 	.word	0xe000e010
 800e844:	e000e018 	.word	0xe000e018
 800e848:	20000088 	.word	0x20000088
 800e84c:	10624dd3 	.word	0x10624dd3
 800e850:	e000e014 	.word	0xe000e014

0800e854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e864 <vPortEnableVFP+0x10>
 800e858:	6801      	ldr	r1, [r0, #0]
 800e85a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e85e:	6001      	str	r1, [r0, #0]
 800e860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e862:	bf00      	nop
 800e864:	e000ed88 	.word	0xe000ed88

0800e868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e86e:	f3ef 8305 	mrs	r3, IPSR
 800e872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2b0f      	cmp	r3, #15
 800e878:	d914      	bls.n	800e8a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e87a:	4a17      	ldr	r2, [pc, #92]	; (800e8d8 <vPortValidateInterruptPriority+0x70>)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	4413      	add	r3, r2
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e884:	4b15      	ldr	r3, [pc, #84]	; (800e8dc <vPortValidateInterruptPriority+0x74>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	7afa      	ldrb	r2, [r7, #11]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d20a      	bcs.n	800e8a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	607b      	str	r3, [r7, #4]
}
 800e8a0:	bf00      	nop
 800e8a2:	e7fe      	b.n	800e8a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8a4:	4b0e      	ldr	r3, [pc, #56]	; (800e8e0 <vPortValidateInterruptPriority+0x78>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8ac:	4b0d      	ldr	r3, [pc, #52]	; (800e8e4 <vPortValidateInterruptPriority+0x7c>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d90a      	bls.n	800e8ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	603b      	str	r3, [r7, #0]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <vPortValidateInterruptPriority+0x60>
	}
 800e8ca:	bf00      	nop
 800e8cc:	3714      	adds	r7, #20
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	e000e3f0 	.word	0xe000e3f0
 800e8dc:	20003650 	.word	0x20003650
 800e8e0:	e000ed0c 	.word	0xe000ed0c
 800e8e4:	20003654 	.word	0x20003654

0800e8e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08a      	sub	sp, #40	; 0x28
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8f4:	f7fe ffe0 	bl	800d8b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8f8:	4b5b      	ldr	r3, [pc, #364]	; (800ea68 <pvPortMalloc+0x180>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e900:	f000 f920 	bl	800eb44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e904:	4b59      	ldr	r3, [pc, #356]	; (800ea6c <pvPortMalloc+0x184>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4013      	ands	r3, r2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f040 8093 	bne.w	800ea38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d01d      	beq.n	800e954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e918:	2208      	movs	r2, #8
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4413      	add	r3, r2
 800e91e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f003 0307 	and.w	r3, r3, #7
 800e926:	2b00      	cmp	r3, #0
 800e928:	d014      	beq.n	800e954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f023 0307 	bic.w	r3, r3, #7
 800e930:	3308      	adds	r3, #8
 800e932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00a      	beq.n	800e954 <pvPortMalloc+0x6c>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	617b      	str	r3, [r7, #20]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d06e      	beq.n	800ea38 <pvPortMalloc+0x150>
 800e95a:	4b45      	ldr	r3, [pc, #276]	; (800ea70 <pvPortMalloc+0x188>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	429a      	cmp	r2, r3
 800e962:	d869      	bhi.n	800ea38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e964:	4b43      	ldr	r3, [pc, #268]	; (800ea74 <pvPortMalloc+0x18c>)
 800e966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e968:	4b42      	ldr	r3, [pc, #264]	; (800ea74 <pvPortMalloc+0x18c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e96e:	e004      	b.n	800e97a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	429a      	cmp	r2, r3
 800e982:	d903      	bls.n	800e98c <pvPortMalloc+0xa4>
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f1      	bne.n	800e970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e98c:	4b36      	ldr	r3, [pc, #216]	; (800ea68 <pvPortMalloc+0x180>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e992:	429a      	cmp	r2, r3
 800e994:	d050      	beq.n	800ea38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2208      	movs	r2, #8
 800e99c:	4413      	add	r3, r2
 800e99e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	1ad2      	subs	r2, r2, r3
 800e9b0:	2308      	movs	r3, #8
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d91f      	bls.n	800e9f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4413      	add	r3, r2
 800e9be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	f003 0307 	and.w	r3, r3, #7
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	613b      	str	r3, [r7, #16]
}
 800e9dc:	bf00      	nop
 800e9de:	e7fe      	b.n	800e9de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	1ad2      	subs	r2, r2, r3
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f000 f908 	bl	800ec08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ea70 <pvPortMalloc+0x188>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	4a1b      	ldr	r2, [pc, #108]	; (800ea70 <pvPortMalloc+0x188>)
 800ea04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea06:	4b1a      	ldr	r3, [pc, #104]	; (800ea70 <pvPortMalloc+0x188>)
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <pvPortMalloc+0x190>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d203      	bcs.n	800ea1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea12:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <pvPortMalloc+0x188>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a18      	ldr	r2, [pc, #96]	; (800ea78 <pvPortMalloc+0x190>)
 800ea18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	4b13      	ldr	r3, [pc, #76]	; (800ea6c <pvPortMalloc+0x184>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	431a      	orrs	r2, r3
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea2e:	4b13      	ldr	r3, [pc, #76]	; (800ea7c <pvPortMalloc+0x194>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	4a11      	ldr	r2, [pc, #68]	; (800ea7c <pvPortMalloc+0x194>)
 800ea36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea38:	f7fe ff4c 	bl	800d8d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <pvPortMalloc+0x174>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	60fb      	str	r3, [r7, #12]
}
 800ea58:	bf00      	nop
 800ea5a:	e7fe      	b.n	800ea5a <pvPortMalloc+0x172>
	return pvReturn;
 800ea5c:	69fb      	ldr	r3, [r7, #28]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3728      	adds	r7, #40	; 0x28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20007260 	.word	0x20007260
 800ea6c:	20007274 	.word	0x20007274
 800ea70:	20007264 	.word	0x20007264
 800ea74:	20007258 	.word	0x20007258
 800ea78:	20007268 	.word	0x20007268
 800ea7c:	2000726c 	.word	0x2000726c

0800ea80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d04d      	beq.n	800eb2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea92:	2308      	movs	r3, #8
 800ea94:	425b      	negs	r3, r3
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	4413      	add	r3, r2
 800ea9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	4b24      	ldr	r3, [pc, #144]	; (800eb38 <vPortFree+0xb8>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10a      	bne.n	800eac4 <vPortFree+0x44>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	60fb      	str	r3, [r7, #12]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <vPortFree+0x62>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60bb      	str	r3, [r7, #8]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b14      	ldr	r3, [pc, #80]	; (800eb38 <vPortFree+0xb8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4013      	ands	r3, r2
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d01e      	beq.n	800eb2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d11a      	bne.n	800eb2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	4b0e      	ldr	r3, [pc, #56]	; (800eb38 <vPortFree+0xb8>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	43db      	mvns	r3, r3
 800eb02:	401a      	ands	r2, r3
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb08:	f7fe fed6 	bl	800d8b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <vPortFree+0xbc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4413      	add	r3, r2
 800eb16:	4a09      	ldr	r2, [pc, #36]	; (800eb3c <vPortFree+0xbc>)
 800eb18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb1a:	6938      	ldr	r0, [r7, #16]
 800eb1c:	f000 f874 	bl	800ec08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb20:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <vPortFree+0xc0>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3301      	adds	r3, #1
 800eb26:	4a06      	ldr	r2, [pc, #24]	; (800eb40 <vPortFree+0xc0>)
 800eb28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb2a:	f7fe fed3 	bl	800d8d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb2e:	bf00      	nop
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20007274 	.word	0x20007274
 800eb3c:	20007264 	.word	0x20007264
 800eb40:	20007270 	.word	0x20007270

0800eb44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb50:	4b27      	ldr	r3, [pc, #156]	; (800ebf0 <prvHeapInit+0xac>)
 800eb52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00c      	beq.n	800eb78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3307      	adds	r3, #7
 800eb62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f023 0307 	bic.w	r3, r3, #7
 800eb6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	4a1f      	ldr	r2, [pc, #124]	; (800ebf0 <prvHeapInit+0xac>)
 800eb74:	4413      	add	r3, r2
 800eb76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb7c:	4a1d      	ldr	r2, [pc, #116]	; (800ebf4 <prvHeapInit+0xb0>)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb82:	4b1c      	ldr	r3, [pc, #112]	; (800ebf4 <prvHeapInit+0xb0>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb90:	2208      	movs	r2, #8
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 0307 	bic.w	r3, r3, #7
 800eb9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4a15      	ldr	r2, [pc, #84]	; (800ebf8 <prvHeapInit+0xb4>)
 800eba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eba6:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <prvHeapInit+0xb4>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebae:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <prvHeapInit+0xb4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebc4:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <prvHeapInit+0xb4>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	4a0a      	ldr	r2, [pc, #40]	; (800ebfc <prvHeapInit+0xb8>)
 800ebd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	4a09      	ldr	r2, [pc, #36]	; (800ec00 <prvHeapInit+0xbc>)
 800ebda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebdc:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <prvHeapInit+0xc0>)
 800ebde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebe2:	601a      	str	r2, [r3, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	20003658 	.word	0x20003658
 800ebf4:	20007258 	.word	0x20007258
 800ebf8:	20007260 	.word	0x20007260
 800ebfc:	20007268 	.word	0x20007268
 800ec00:	20007264 	.word	0x20007264
 800ec04:	20007274 	.word	0x20007274

0800ec08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec10:	4b28      	ldr	r3, [pc, #160]	; (800ecb4 <prvInsertBlockIntoFreeList+0xac>)
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e002      	b.n	800ec1c <prvInsertBlockIntoFreeList+0x14>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d8f7      	bhi.n	800ec16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68ba      	ldr	r2, [r7, #8]
 800ec30:	4413      	add	r3, r2
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d108      	bne.n	800ec4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	441a      	add	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	441a      	add	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d118      	bne.n	800ec90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d00d      	beq.n	800ec86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685a      	ldr	r2, [r3, #4]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	441a      	add	r2, r3
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e008      	b.n	800ec98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec86:	4b0c      	ldr	r3, [pc, #48]	; (800ecb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	e003      	b.n	800ec98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d002      	beq.n	800eca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eca6:	bf00      	nop
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	20007258 	.word	0x20007258
 800ecb8:	20007260 	.word	0x20007260

0800ecbc <__errno>:
 800ecbc:	4b01      	ldr	r3, [pc, #4]	; (800ecc4 <__errno+0x8>)
 800ecbe:	6818      	ldr	r0, [r3, #0]
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	200000ac 	.word	0x200000ac

0800ecc8 <__libc_init_array>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	4d0d      	ldr	r5, [pc, #52]	; (800ed00 <__libc_init_array+0x38>)
 800eccc:	4c0d      	ldr	r4, [pc, #52]	; (800ed04 <__libc_init_array+0x3c>)
 800ecce:	1b64      	subs	r4, r4, r5
 800ecd0:	10a4      	asrs	r4, r4, #2
 800ecd2:	2600      	movs	r6, #0
 800ecd4:	42a6      	cmp	r6, r4
 800ecd6:	d109      	bne.n	800ecec <__libc_init_array+0x24>
 800ecd8:	4d0b      	ldr	r5, [pc, #44]	; (800ed08 <__libc_init_array+0x40>)
 800ecda:	4c0c      	ldr	r4, [pc, #48]	; (800ed0c <__libc_init_array+0x44>)
 800ecdc:	f000 fcf8 	bl	800f6d0 <_init>
 800ece0:	1b64      	subs	r4, r4, r5
 800ece2:	10a4      	asrs	r4, r4, #2
 800ece4:	2600      	movs	r6, #0
 800ece6:	42a6      	cmp	r6, r4
 800ece8:	d105      	bne.n	800ecf6 <__libc_init_array+0x2e>
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf0:	4798      	blx	r3
 800ecf2:	3601      	adds	r6, #1
 800ecf4:	e7ee      	b.n	800ecd4 <__libc_init_array+0xc>
 800ecf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecfa:	4798      	blx	r3
 800ecfc:	3601      	adds	r6, #1
 800ecfe:	e7f2      	b.n	800ece6 <__libc_init_array+0x1e>
 800ed00:	0800f99c 	.word	0x0800f99c
 800ed04:	0800f99c 	.word	0x0800f99c
 800ed08:	0800f99c 	.word	0x0800f99c
 800ed0c:	0800f9a0 	.word	0x0800f9a0

0800ed10 <__retarget_lock_acquire_recursive>:
 800ed10:	4770      	bx	lr

0800ed12 <__retarget_lock_release_recursive>:
 800ed12:	4770      	bx	lr

0800ed14 <memcpy>:
 800ed14:	440a      	add	r2, r1
 800ed16:	4291      	cmp	r1, r2
 800ed18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed1c:	d100      	bne.n	800ed20 <memcpy+0xc>
 800ed1e:	4770      	bx	lr
 800ed20:	b510      	push	{r4, lr}
 800ed22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed2a:	4291      	cmp	r1, r2
 800ed2c:	d1f9      	bne.n	800ed22 <memcpy+0xe>
 800ed2e:	bd10      	pop	{r4, pc}

0800ed30 <memset>:
 800ed30:	4402      	add	r2, r0
 800ed32:	4603      	mov	r3, r0
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d100      	bne.n	800ed3a <memset+0xa>
 800ed38:	4770      	bx	lr
 800ed3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed3e:	e7f9      	b.n	800ed34 <memset+0x4>

0800ed40 <sbrk_aligned>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	4e0e      	ldr	r6, [pc, #56]	; (800ed7c <sbrk_aligned+0x3c>)
 800ed44:	460c      	mov	r4, r1
 800ed46:	6831      	ldr	r1, [r6, #0]
 800ed48:	4605      	mov	r5, r0
 800ed4a:	b911      	cbnz	r1, 800ed52 <sbrk_aligned+0x12>
 800ed4c:	f000 f8f6 	bl	800ef3c <_sbrk_r>
 800ed50:	6030      	str	r0, [r6, #0]
 800ed52:	4621      	mov	r1, r4
 800ed54:	4628      	mov	r0, r5
 800ed56:	f000 f8f1 	bl	800ef3c <_sbrk_r>
 800ed5a:	1c43      	adds	r3, r0, #1
 800ed5c:	d00a      	beq.n	800ed74 <sbrk_aligned+0x34>
 800ed5e:	1cc4      	adds	r4, r0, #3
 800ed60:	f024 0403 	bic.w	r4, r4, #3
 800ed64:	42a0      	cmp	r0, r4
 800ed66:	d007      	beq.n	800ed78 <sbrk_aligned+0x38>
 800ed68:	1a21      	subs	r1, r4, r0
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f000 f8e6 	bl	800ef3c <_sbrk_r>
 800ed70:	3001      	adds	r0, #1
 800ed72:	d101      	bne.n	800ed78 <sbrk_aligned+0x38>
 800ed74:	f04f 34ff 	mov.w	r4, #4294967295
 800ed78:	4620      	mov	r0, r4
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	20007280 	.word	0x20007280

0800ed80 <_malloc_r>:
 800ed80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed84:	1ccd      	adds	r5, r1, #3
 800ed86:	f025 0503 	bic.w	r5, r5, #3
 800ed8a:	3508      	adds	r5, #8
 800ed8c:	2d0c      	cmp	r5, #12
 800ed8e:	bf38      	it	cc
 800ed90:	250c      	movcc	r5, #12
 800ed92:	2d00      	cmp	r5, #0
 800ed94:	4607      	mov	r7, r0
 800ed96:	db01      	blt.n	800ed9c <_malloc_r+0x1c>
 800ed98:	42a9      	cmp	r1, r5
 800ed9a:	d905      	bls.n	800eda8 <_malloc_r+0x28>
 800ed9c:	230c      	movs	r3, #12
 800ed9e:	603b      	str	r3, [r7, #0]
 800eda0:	2600      	movs	r6, #0
 800eda2:	4630      	mov	r0, r6
 800eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda8:	4e2e      	ldr	r6, [pc, #184]	; (800ee64 <_malloc_r+0xe4>)
 800edaa:	f000 f8f7 	bl	800ef9c <__malloc_lock>
 800edae:	6833      	ldr	r3, [r6, #0]
 800edb0:	461c      	mov	r4, r3
 800edb2:	bb34      	cbnz	r4, 800ee02 <_malloc_r+0x82>
 800edb4:	4629      	mov	r1, r5
 800edb6:	4638      	mov	r0, r7
 800edb8:	f7ff ffc2 	bl	800ed40 <sbrk_aligned>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	4604      	mov	r4, r0
 800edc0:	d14d      	bne.n	800ee5e <_malloc_r+0xde>
 800edc2:	6834      	ldr	r4, [r6, #0]
 800edc4:	4626      	mov	r6, r4
 800edc6:	2e00      	cmp	r6, #0
 800edc8:	d140      	bne.n	800ee4c <_malloc_r+0xcc>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	4631      	mov	r1, r6
 800edce:	4638      	mov	r0, r7
 800edd0:	eb04 0803 	add.w	r8, r4, r3
 800edd4:	f000 f8b2 	bl	800ef3c <_sbrk_r>
 800edd8:	4580      	cmp	r8, r0
 800edda:	d13a      	bne.n	800ee52 <_malloc_r+0xd2>
 800eddc:	6821      	ldr	r1, [r4, #0]
 800edde:	3503      	adds	r5, #3
 800ede0:	1a6d      	subs	r5, r5, r1
 800ede2:	f025 0503 	bic.w	r5, r5, #3
 800ede6:	3508      	adds	r5, #8
 800ede8:	2d0c      	cmp	r5, #12
 800edea:	bf38      	it	cc
 800edec:	250c      	movcc	r5, #12
 800edee:	4629      	mov	r1, r5
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7ff ffa5 	bl	800ed40 <sbrk_aligned>
 800edf6:	3001      	adds	r0, #1
 800edf8:	d02b      	beq.n	800ee52 <_malloc_r+0xd2>
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	442b      	add	r3, r5
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	e00e      	b.n	800ee20 <_malloc_r+0xa0>
 800ee02:	6822      	ldr	r2, [r4, #0]
 800ee04:	1b52      	subs	r2, r2, r5
 800ee06:	d41e      	bmi.n	800ee46 <_malloc_r+0xc6>
 800ee08:	2a0b      	cmp	r2, #11
 800ee0a:	d916      	bls.n	800ee3a <_malloc_r+0xba>
 800ee0c:	1961      	adds	r1, r4, r5
 800ee0e:	42a3      	cmp	r3, r4
 800ee10:	6025      	str	r5, [r4, #0]
 800ee12:	bf18      	it	ne
 800ee14:	6059      	strne	r1, [r3, #4]
 800ee16:	6863      	ldr	r3, [r4, #4]
 800ee18:	bf08      	it	eq
 800ee1a:	6031      	streq	r1, [r6, #0]
 800ee1c:	5162      	str	r2, [r4, r5]
 800ee1e:	604b      	str	r3, [r1, #4]
 800ee20:	4638      	mov	r0, r7
 800ee22:	f104 060b 	add.w	r6, r4, #11
 800ee26:	f000 f8bf 	bl	800efa8 <__malloc_unlock>
 800ee2a:	f026 0607 	bic.w	r6, r6, #7
 800ee2e:	1d23      	adds	r3, r4, #4
 800ee30:	1af2      	subs	r2, r6, r3
 800ee32:	d0b6      	beq.n	800eda2 <_malloc_r+0x22>
 800ee34:	1b9b      	subs	r3, r3, r6
 800ee36:	50a3      	str	r3, [r4, r2]
 800ee38:	e7b3      	b.n	800eda2 <_malloc_r+0x22>
 800ee3a:	6862      	ldr	r2, [r4, #4]
 800ee3c:	42a3      	cmp	r3, r4
 800ee3e:	bf0c      	ite	eq
 800ee40:	6032      	streq	r2, [r6, #0]
 800ee42:	605a      	strne	r2, [r3, #4]
 800ee44:	e7ec      	b.n	800ee20 <_malloc_r+0xa0>
 800ee46:	4623      	mov	r3, r4
 800ee48:	6864      	ldr	r4, [r4, #4]
 800ee4a:	e7b2      	b.n	800edb2 <_malloc_r+0x32>
 800ee4c:	4634      	mov	r4, r6
 800ee4e:	6876      	ldr	r6, [r6, #4]
 800ee50:	e7b9      	b.n	800edc6 <_malloc_r+0x46>
 800ee52:	230c      	movs	r3, #12
 800ee54:	603b      	str	r3, [r7, #0]
 800ee56:	4638      	mov	r0, r7
 800ee58:	f000 f8a6 	bl	800efa8 <__malloc_unlock>
 800ee5c:	e7a1      	b.n	800eda2 <_malloc_r+0x22>
 800ee5e:	6025      	str	r5, [r4, #0]
 800ee60:	e7de      	b.n	800ee20 <_malloc_r+0xa0>
 800ee62:	bf00      	nop
 800ee64:	2000727c 	.word	0x2000727c

0800ee68 <cleanup_glue>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	6809      	ldr	r1, [r1, #0]
 800ee6e:	4605      	mov	r5, r0
 800ee70:	b109      	cbz	r1, 800ee76 <cleanup_glue+0xe>
 800ee72:	f7ff fff9 	bl	800ee68 <cleanup_glue>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee7e:	f000 b899 	b.w	800efb4 <_free_r>
	...

0800ee84 <_reclaim_reent>:
 800ee84:	4b2c      	ldr	r3, [pc, #176]	; (800ef38 <_reclaim_reent+0xb4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4283      	cmp	r3, r0
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	d051      	beq.n	800ef34 <_reclaim_reent+0xb0>
 800ee90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ee92:	b143      	cbz	r3, 800eea6 <_reclaim_reent+0x22>
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d14a      	bne.n	800ef30 <_reclaim_reent+0xac>
 800ee9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee9c:	6819      	ldr	r1, [r3, #0]
 800ee9e:	b111      	cbz	r1, 800eea6 <_reclaim_reent+0x22>
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 f887 	bl	800efb4 <_free_r>
 800eea6:	6961      	ldr	r1, [r4, #20]
 800eea8:	b111      	cbz	r1, 800eeb0 <_reclaim_reent+0x2c>
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f882 	bl	800efb4 <_free_r>
 800eeb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eeb2:	b111      	cbz	r1, 800eeba <_reclaim_reent+0x36>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 f87d 	bl	800efb4 <_free_r>
 800eeba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eebc:	b111      	cbz	r1, 800eec4 <_reclaim_reent+0x40>
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 f878 	bl	800efb4 <_free_r>
 800eec4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eec6:	b111      	cbz	r1, 800eece <_reclaim_reent+0x4a>
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 f873 	bl	800efb4 <_free_r>
 800eece:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eed0:	b111      	cbz	r1, 800eed8 <_reclaim_reent+0x54>
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 f86e 	bl	800efb4 <_free_r>
 800eed8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eeda:	b111      	cbz	r1, 800eee2 <_reclaim_reent+0x5e>
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 f869 	bl	800efb4 <_free_r>
 800eee2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eee4:	b111      	cbz	r1, 800eeec <_reclaim_reent+0x68>
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 f864 	bl	800efb4 <_free_r>
 800eeec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeee:	b111      	cbz	r1, 800eef6 <_reclaim_reent+0x72>
 800eef0:	4620      	mov	r0, r4
 800eef2:	f000 f85f 	bl	800efb4 <_free_r>
 800eef6:	69a3      	ldr	r3, [r4, #24]
 800eef8:	b1e3      	cbz	r3, 800ef34 <_reclaim_reent+0xb0>
 800eefa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eefc:	4620      	mov	r0, r4
 800eefe:	4798      	blx	r3
 800ef00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef02:	b1b9      	cbz	r1, 800ef34 <_reclaim_reent+0xb0>
 800ef04:	4620      	mov	r0, r4
 800ef06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef0a:	f7ff bfad 	b.w	800ee68 <cleanup_glue>
 800ef0e:	5949      	ldr	r1, [r1, r5]
 800ef10:	b941      	cbnz	r1, 800ef24 <_reclaim_reent+0xa0>
 800ef12:	3504      	adds	r5, #4
 800ef14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef16:	2d80      	cmp	r5, #128	; 0x80
 800ef18:	68d9      	ldr	r1, [r3, #12]
 800ef1a:	d1f8      	bne.n	800ef0e <_reclaim_reent+0x8a>
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f000 f849 	bl	800efb4 <_free_r>
 800ef22:	e7ba      	b.n	800ee9a <_reclaim_reent+0x16>
 800ef24:	680e      	ldr	r6, [r1, #0]
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 f844 	bl	800efb4 <_free_r>
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	e7ef      	b.n	800ef10 <_reclaim_reent+0x8c>
 800ef30:	2500      	movs	r5, #0
 800ef32:	e7ef      	b.n	800ef14 <_reclaim_reent+0x90>
 800ef34:	bd70      	pop	{r4, r5, r6, pc}
 800ef36:	bf00      	nop
 800ef38:	200000ac 	.word	0x200000ac

0800ef3c <_sbrk_r>:
 800ef3c:	b538      	push	{r3, r4, r5, lr}
 800ef3e:	4d06      	ldr	r5, [pc, #24]	; (800ef58 <_sbrk_r+0x1c>)
 800ef40:	2300      	movs	r3, #0
 800ef42:	4604      	mov	r4, r0
 800ef44:	4608      	mov	r0, r1
 800ef46:	602b      	str	r3, [r5, #0]
 800ef48:	f7f4 f946 	bl	80031d8 <_sbrk>
 800ef4c:	1c43      	adds	r3, r0, #1
 800ef4e:	d102      	bne.n	800ef56 <_sbrk_r+0x1a>
 800ef50:	682b      	ldr	r3, [r5, #0]
 800ef52:	b103      	cbz	r3, 800ef56 <_sbrk_r+0x1a>
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	bd38      	pop	{r3, r4, r5, pc}
 800ef58:	20007284 	.word	0x20007284

0800ef5c <siprintf>:
 800ef5c:	b40e      	push	{r1, r2, r3}
 800ef5e:	b500      	push	{lr}
 800ef60:	b09c      	sub	sp, #112	; 0x70
 800ef62:	ab1d      	add	r3, sp, #116	; 0x74
 800ef64:	9002      	str	r0, [sp, #8]
 800ef66:	9006      	str	r0, [sp, #24]
 800ef68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef6c:	4809      	ldr	r0, [pc, #36]	; (800ef94 <siprintf+0x38>)
 800ef6e:	9107      	str	r1, [sp, #28]
 800ef70:	9104      	str	r1, [sp, #16]
 800ef72:	4909      	ldr	r1, [pc, #36]	; (800ef98 <siprintf+0x3c>)
 800ef74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef78:	9105      	str	r1, [sp, #20]
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	a902      	add	r1, sp, #8
 800ef80:	f000 f8c0 	bl	800f104 <_svfiprintf_r>
 800ef84:	9b02      	ldr	r3, [sp, #8]
 800ef86:	2200      	movs	r2, #0
 800ef88:	701a      	strb	r2, [r3, #0]
 800ef8a:	b01c      	add	sp, #112	; 0x70
 800ef8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef90:	b003      	add	sp, #12
 800ef92:	4770      	bx	lr
 800ef94:	200000ac 	.word	0x200000ac
 800ef98:	ffff0208 	.word	0xffff0208

0800ef9c <__malloc_lock>:
 800ef9c:	4801      	ldr	r0, [pc, #4]	; (800efa4 <__malloc_lock+0x8>)
 800ef9e:	f7ff beb7 	b.w	800ed10 <__retarget_lock_acquire_recursive>
 800efa2:	bf00      	nop
 800efa4:	20007278 	.word	0x20007278

0800efa8 <__malloc_unlock>:
 800efa8:	4801      	ldr	r0, [pc, #4]	; (800efb0 <__malloc_unlock+0x8>)
 800efaa:	f7ff beb2 	b.w	800ed12 <__retarget_lock_release_recursive>
 800efae:	bf00      	nop
 800efb0:	20007278 	.word	0x20007278

0800efb4 <_free_r>:
 800efb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efb6:	2900      	cmp	r1, #0
 800efb8:	d044      	beq.n	800f044 <_free_r+0x90>
 800efba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efbe:	9001      	str	r0, [sp, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f1a1 0404 	sub.w	r4, r1, #4
 800efc6:	bfb8      	it	lt
 800efc8:	18e4      	addlt	r4, r4, r3
 800efca:	f7ff ffe7 	bl	800ef9c <__malloc_lock>
 800efce:	4a1e      	ldr	r2, [pc, #120]	; (800f048 <_free_r+0x94>)
 800efd0:	9801      	ldr	r0, [sp, #4]
 800efd2:	6813      	ldr	r3, [r2, #0]
 800efd4:	b933      	cbnz	r3, 800efe4 <_free_r+0x30>
 800efd6:	6063      	str	r3, [r4, #4]
 800efd8:	6014      	str	r4, [r2, #0]
 800efda:	b003      	add	sp, #12
 800efdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efe0:	f7ff bfe2 	b.w	800efa8 <__malloc_unlock>
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	d908      	bls.n	800effa <_free_r+0x46>
 800efe8:	6825      	ldr	r5, [r4, #0]
 800efea:	1961      	adds	r1, r4, r5
 800efec:	428b      	cmp	r3, r1
 800efee:	bf01      	itttt	eq
 800eff0:	6819      	ldreq	r1, [r3, #0]
 800eff2:	685b      	ldreq	r3, [r3, #4]
 800eff4:	1949      	addeq	r1, r1, r5
 800eff6:	6021      	streq	r1, [r4, #0]
 800eff8:	e7ed      	b.n	800efd6 <_free_r+0x22>
 800effa:	461a      	mov	r2, r3
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	b10b      	cbz	r3, 800f004 <_free_r+0x50>
 800f000:	42a3      	cmp	r3, r4
 800f002:	d9fa      	bls.n	800effa <_free_r+0x46>
 800f004:	6811      	ldr	r1, [r2, #0]
 800f006:	1855      	adds	r5, r2, r1
 800f008:	42a5      	cmp	r5, r4
 800f00a:	d10b      	bne.n	800f024 <_free_r+0x70>
 800f00c:	6824      	ldr	r4, [r4, #0]
 800f00e:	4421      	add	r1, r4
 800f010:	1854      	adds	r4, r2, r1
 800f012:	42a3      	cmp	r3, r4
 800f014:	6011      	str	r1, [r2, #0]
 800f016:	d1e0      	bne.n	800efda <_free_r+0x26>
 800f018:	681c      	ldr	r4, [r3, #0]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	6053      	str	r3, [r2, #4]
 800f01e:	4421      	add	r1, r4
 800f020:	6011      	str	r1, [r2, #0]
 800f022:	e7da      	b.n	800efda <_free_r+0x26>
 800f024:	d902      	bls.n	800f02c <_free_r+0x78>
 800f026:	230c      	movs	r3, #12
 800f028:	6003      	str	r3, [r0, #0]
 800f02a:	e7d6      	b.n	800efda <_free_r+0x26>
 800f02c:	6825      	ldr	r5, [r4, #0]
 800f02e:	1961      	adds	r1, r4, r5
 800f030:	428b      	cmp	r3, r1
 800f032:	bf04      	itt	eq
 800f034:	6819      	ldreq	r1, [r3, #0]
 800f036:	685b      	ldreq	r3, [r3, #4]
 800f038:	6063      	str	r3, [r4, #4]
 800f03a:	bf04      	itt	eq
 800f03c:	1949      	addeq	r1, r1, r5
 800f03e:	6021      	streq	r1, [r4, #0]
 800f040:	6054      	str	r4, [r2, #4]
 800f042:	e7ca      	b.n	800efda <_free_r+0x26>
 800f044:	b003      	add	sp, #12
 800f046:	bd30      	pop	{r4, r5, pc}
 800f048:	2000727c 	.word	0x2000727c

0800f04c <__ssputs_r>:
 800f04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f050:	688e      	ldr	r6, [r1, #8]
 800f052:	429e      	cmp	r6, r3
 800f054:	4682      	mov	sl, r0
 800f056:	460c      	mov	r4, r1
 800f058:	4690      	mov	r8, r2
 800f05a:	461f      	mov	r7, r3
 800f05c:	d838      	bhi.n	800f0d0 <__ssputs_r+0x84>
 800f05e:	898a      	ldrh	r2, [r1, #12]
 800f060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f064:	d032      	beq.n	800f0cc <__ssputs_r+0x80>
 800f066:	6825      	ldr	r5, [r4, #0]
 800f068:	6909      	ldr	r1, [r1, #16]
 800f06a:	eba5 0901 	sub.w	r9, r5, r1
 800f06e:	6965      	ldr	r5, [r4, #20]
 800f070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f078:	3301      	adds	r3, #1
 800f07a:	444b      	add	r3, r9
 800f07c:	106d      	asrs	r5, r5, #1
 800f07e:	429d      	cmp	r5, r3
 800f080:	bf38      	it	cc
 800f082:	461d      	movcc	r5, r3
 800f084:	0553      	lsls	r3, r2, #21
 800f086:	d531      	bpl.n	800f0ec <__ssputs_r+0xa0>
 800f088:	4629      	mov	r1, r5
 800f08a:	f7ff fe79 	bl	800ed80 <_malloc_r>
 800f08e:	4606      	mov	r6, r0
 800f090:	b950      	cbnz	r0, 800f0a8 <__ssputs_r+0x5c>
 800f092:	230c      	movs	r3, #12
 800f094:	f8ca 3000 	str.w	r3, [sl]
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a8:	6921      	ldr	r1, [r4, #16]
 800f0aa:	464a      	mov	r2, r9
 800f0ac:	f7ff fe32 	bl	800ed14 <memcpy>
 800f0b0:	89a3      	ldrh	r3, [r4, #12]
 800f0b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ba:	81a3      	strh	r3, [r4, #12]
 800f0bc:	6126      	str	r6, [r4, #16]
 800f0be:	6165      	str	r5, [r4, #20]
 800f0c0:	444e      	add	r6, r9
 800f0c2:	eba5 0509 	sub.w	r5, r5, r9
 800f0c6:	6026      	str	r6, [r4, #0]
 800f0c8:	60a5      	str	r5, [r4, #8]
 800f0ca:	463e      	mov	r6, r7
 800f0cc:	42be      	cmp	r6, r7
 800f0ce:	d900      	bls.n	800f0d2 <__ssputs_r+0x86>
 800f0d0:	463e      	mov	r6, r7
 800f0d2:	6820      	ldr	r0, [r4, #0]
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	4641      	mov	r1, r8
 800f0d8:	f000 faa8 	bl	800f62c <memmove>
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	1b9b      	subs	r3, r3, r6
 800f0e0:	60a3      	str	r3, [r4, #8]
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	4433      	add	r3, r6
 800f0e6:	6023      	str	r3, [r4, #0]
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e7db      	b.n	800f0a4 <__ssputs_r+0x58>
 800f0ec:	462a      	mov	r2, r5
 800f0ee:	f000 fab7 	bl	800f660 <_realloc_r>
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d1e1      	bne.n	800f0bc <__ssputs_r+0x70>
 800f0f8:	6921      	ldr	r1, [r4, #16]
 800f0fa:	4650      	mov	r0, sl
 800f0fc:	f7ff ff5a 	bl	800efb4 <_free_r>
 800f100:	e7c7      	b.n	800f092 <__ssputs_r+0x46>
	...

0800f104 <_svfiprintf_r>:
 800f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f108:	4698      	mov	r8, r3
 800f10a:	898b      	ldrh	r3, [r1, #12]
 800f10c:	061b      	lsls	r3, r3, #24
 800f10e:	b09d      	sub	sp, #116	; 0x74
 800f110:	4607      	mov	r7, r0
 800f112:	460d      	mov	r5, r1
 800f114:	4614      	mov	r4, r2
 800f116:	d50e      	bpl.n	800f136 <_svfiprintf_r+0x32>
 800f118:	690b      	ldr	r3, [r1, #16]
 800f11a:	b963      	cbnz	r3, 800f136 <_svfiprintf_r+0x32>
 800f11c:	2140      	movs	r1, #64	; 0x40
 800f11e:	f7ff fe2f 	bl	800ed80 <_malloc_r>
 800f122:	6028      	str	r0, [r5, #0]
 800f124:	6128      	str	r0, [r5, #16]
 800f126:	b920      	cbnz	r0, 800f132 <_svfiprintf_r+0x2e>
 800f128:	230c      	movs	r3, #12
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295
 800f130:	e0d1      	b.n	800f2d6 <_svfiprintf_r+0x1d2>
 800f132:	2340      	movs	r3, #64	; 0x40
 800f134:	616b      	str	r3, [r5, #20]
 800f136:	2300      	movs	r3, #0
 800f138:	9309      	str	r3, [sp, #36]	; 0x24
 800f13a:	2320      	movs	r3, #32
 800f13c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f140:	f8cd 800c 	str.w	r8, [sp, #12]
 800f144:	2330      	movs	r3, #48	; 0x30
 800f146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2f0 <_svfiprintf_r+0x1ec>
 800f14a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f14e:	f04f 0901 	mov.w	r9, #1
 800f152:	4623      	mov	r3, r4
 800f154:	469a      	mov	sl, r3
 800f156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f15a:	b10a      	cbz	r2, 800f160 <_svfiprintf_r+0x5c>
 800f15c:	2a25      	cmp	r2, #37	; 0x25
 800f15e:	d1f9      	bne.n	800f154 <_svfiprintf_r+0x50>
 800f160:	ebba 0b04 	subs.w	fp, sl, r4
 800f164:	d00b      	beq.n	800f17e <_svfiprintf_r+0x7a>
 800f166:	465b      	mov	r3, fp
 800f168:	4622      	mov	r2, r4
 800f16a:	4629      	mov	r1, r5
 800f16c:	4638      	mov	r0, r7
 800f16e:	f7ff ff6d 	bl	800f04c <__ssputs_r>
 800f172:	3001      	adds	r0, #1
 800f174:	f000 80aa 	beq.w	800f2cc <_svfiprintf_r+0x1c8>
 800f178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17a:	445a      	add	r2, fp
 800f17c:	9209      	str	r2, [sp, #36]	; 0x24
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80a2 	beq.w	800f2cc <_svfiprintf_r+0x1c8>
 800f188:	2300      	movs	r3, #0
 800f18a:	f04f 32ff 	mov.w	r2, #4294967295
 800f18e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f192:	f10a 0a01 	add.w	sl, sl, #1
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	9307      	str	r3, [sp, #28]
 800f19a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f19e:	931a      	str	r3, [sp, #104]	; 0x68
 800f1a0:	4654      	mov	r4, sl
 800f1a2:	2205      	movs	r2, #5
 800f1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a8:	4851      	ldr	r0, [pc, #324]	; (800f2f0 <_svfiprintf_r+0x1ec>)
 800f1aa:	f7f1 f829 	bl	8000200 <memchr>
 800f1ae:	9a04      	ldr	r2, [sp, #16]
 800f1b0:	b9d8      	cbnz	r0, 800f1ea <_svfiprintf_r+0xe6>
 800f1b2:	06d0      	lsls	r0, r2, #27
 800f1b4:	bf44      	itt	mi
 800f1b6:	2320      	movmi	r3, #32
 800f1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1bc:	0711      	lsls	r1, r2, #28
 800f1be:	bf44      	itt	mi
 800f1c0:	232b      	movmi	r3, #43	; 0x2b
 800f1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f1cc:	d015      	beq.n	800f1fa <_svfiprintf_r+0xf6>
 800f1ce:	9a07      	ldr	r2, [sp, #28]
 800f1d0:	4654      	mov	r4, sl
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	f04f 0c0a 	mov.w	ip, #10
 800f1d8:	4621      	mov	r1, r4
 800f1da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1de:	3b30      	subs	r3, #48	; 0x30
 800f1e0:	2b09      	cmp	r3, #9
 800f1e2:	d94e      	bls.n	800f282 <_svfiprintf_r+0x17e>
 800f1e4:	b1b0      	cbz	r0, 800f214 <_svfiprintf_r+0x110>
 800f1e6:	9207      	str	r2, [sp, #28]
 800f1e8:	e014      	b.n	800f214 <_svfiprintf_r+0x110>
 800f1ea:	eba0 0308 	sub.w	r3, r0, r8
 800f1ee:	fa09 f303 	lsl.w	r3, r9, r3
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	46a2      	mov	sl, r4
 800f1f8:	e7d2      	b.n	800f1a0 <_svfiprintf_r+0x9c>
 800f1fa:	9b03      	ldr	r3, [sp, #12]
 800f1fc:	1d19      	adds	r1, r3, #4
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	9103      	str	r1, [sp, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	bfbb      	ittet	lt
 800f206:	425b      	neglt	r3, r3
 800f208:	f042 0202 	orrlt.w	r2, r2, #2
 800f20c:	9307      	strge	r3, [sp, #28]
 800f20e:	9307      	strlt	r3, [sp, #28]
 800f210:	bfb8      	it	lt
 800f212:	9204      	strlt	r2, [sp, #16]
 800f214:	7823      	ldrb	r3, [r4, #0]
 800f216:	2b2e      	cmp	r3, #46	; 0x2e
 800f218:	d10c      	bne.n	800f234 <_svfiprintf_r+0x130>
 800f21a:	7863      	ldrb	r3, [r4, #1]
 800f21c:	2b2a      	cmp	r3, #42	; 0x2a
 800f21e:	d135      	bne.n	800f28c <_svfiprintf_r+0x188>
 800f220:	9b03      	ldr	r3, [sp, #12]
 800f222:	1d1a      	adds	r2, r3, #4
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	9203      	str	r2, [sp, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bfb8      	it	lt
 800f22c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f230:	3402      	adds	r4, #2
 800f232:	9305      	str	r3, [sp, #20]
 800f234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f300 <_svfiprintf_r+0x1fc>
 800f238:	7821      	ldrb	r1, [r4, #0]
 800f23a:	2203      	movs	r2, #3
 800f23c:	4650      	mov	r0, sl
 800f23e:	f7f0 ffdf 	bl	8000200 <memchr>
 800f242:	b140      	cbz	r0, 800f256 <_svfiprintf_r+0x152>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	eba0 000a 	sub.w	r0, r0, sl
 800f24a:	fa03 f000 	lsl.w	r0, r3, r0
 800f24e:	9b04      	ldr	r3, [sp, #16]
 800f250:	4303      	orrs	r3, r0
 800f252:	3401      	adds	r4, #1
 800f254:	9304      	str	r3, [sp, #16]
 800f256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25a:	4826      	ldr	r0, [pc, #152]	; (800f2f4 <_svfiprintf_r+0x1f0>)
 800f25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f260:	2206      	movs	r2, #6
 800f262:	f7f0 ffcd 	bl	8000200 <memchr>
 800f266:	2800      	cmp	r0, #0
 800f268:	d038      	beq.n	800f2dc <_svfiprintf_r+0x1d8>
 800f26a:	4b23      	ldr	r3, [pc, #140]	; (800f2f8 <_svfiprintf_r+0x1f4>)
 800f26c:	bb1b      	cbnz	r3, 800f2b6 <_svfiprintf_r+0x1b2>
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	3307      	adds	r3, #7
 800f272:	f023 0307 	bic.w	r3, r3, #7
 800f276:	3308      	adds	r3, #8
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	4433      	add	r3, r6
 800f27e:	9309      	str	r3, [sp, #36]	; 0x24
 800f280:	e767      	b.n	800f152 <_svfiprintf_r+0x4e>
 800f282:	fb0c 3202 	mla	r2, ip, r2, r3
 800f286:	460c      	mov	r4, r1
 800f288:	2001      	movs	r0, #1
 800f28a:	e7a5      	b.n	800f1d8 <_svfiprintf_r+0xd4>
 800f28c:	2300      	movs	r3, #0
 800f28e:	3401      	adds	r4, #1
 800f290:	9305      	str	r3, [sp, #20]
 800f292:	4619      	mov	r1, r3
 800f294:	f04f 0c0a 	mov.w	ip, #10
 800f298:	4620      	mov	r0, r4
 800f29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f29e:	3a30      	subs	r2, #48	; 0x30
 800f2a0:	2a09      	cmp	r2, #9
 800f2a2:	d903      	bls.n	800f2ac <_svfiprintf_r+0x1a8>
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0c5      	beq.n	800f234 <_svfiprintf_r+0x130>
 800f2a8:	9105      	str	r1, [sp, #20]
 800f2aa:	e7c3      	b.n	800f234 <_svfiprintf_r+0x130>
 800f2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e7f0      	b.n	800f298 <_svfiprintf_r+0x194>
 800f2b6:	ab03      	add	r3, sp, #12
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <_svfiprintf_r+0x1f8>)
 800f2be:	a904      	add	r1, sp, #16
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f3af 8000 	nop.w
 800f2c6:	1c42      	adds	r2, r0, #1
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	d1d6      	bne.n	800f27a <_svfiprintf_r+0x176>
 800f2cc:	89ab      	ldrh	r3, [r5, #12]
 800f2ce:	065b      	lsls	r3, r3, #25
 800f2d0:	f53f af2c 	bmi.w	800f12c <_svfiprintf_r+0x28>
 800f2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2d6:	b01d      	add	sp, #116	; 0x74
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	ab03      	add	r3, sp, #12
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	462a      	mov	r2, r5
 800f2e2:	4b06      	ldr	r3, [pc, #24]	; (800f2fc <_svfiprintf_r+0x1f8>)
 800f2e4:	a904      	add	r1, sp, #16
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f000 f87a 	bl	800f3e0 <_printf_i>
 800f2ec:	e7eb      	b.n	800f2c6 <_svfiprintf_r+0x1c2>
 800f2ee:	bf00      	nop
 800f2f0:	0800f960 	.word	0x0800f960
 800f2f4:	0800f96a 	.word	0x0800f96a
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	0800f04d 	.word	0x0800f04d
 800f300:	0800f966 	.word	0x0800f966

0800f304 <_printf_common>:
 800f304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f308:	4616      	mov	r6, r2
 800f30a:	4699      	mov	r9, r3
 800f30c:	688a      	ldr	r2, [r1, #8]
 800f30e:	690b      	ldr	r3, [r1, #16]
 800f310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f314:	4293      	cmp	r3, r2
 800f316:	bfb8      	it	lt
 800f318:	4613      	movlt	r3, r2
 800f31a:	6033      	str	r3, [r6, #0]
 800f31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f320:	4607      	mov	r7, r0
 800f322:	460c      	mov	r4, r1
 800f324:	b10a      	cbz	r2, 800f32a <_printf_common+0x26>
 800f326:	3301      	adds	r3, #1
 800f328:	6033      	str	r3, [r6, #0]
 800f32a:	6823      	ldr	r3, [r4, #0]
 800f32c:	0699      	lsls	r1, r3, #26
 800f32e:	bf42      	ittt	mi
 800f330:	6833      	ldrmi	r3, [r6, #0]
 800f332:	3302      	addmi	r3, #2
 800f334:	6033      	strmi	r3, [r6, #0]
 800f336:	6825      	ldr	r5, [r4, #0]
 800f338:	f015 0506 	ands.w	r5, r5, #6
 800f33c:	d106      	bne.n	800f34c <_printf_common+0x48>
 800f33e:	f104 0a19 	add.w	sl, r4, #25
 800f342:	68e3      	ldr	r3, [r4, #12]
 800f344:	6832      	ldr	r2, [r6, #0]
 800f346:	1a9b      	subs	r3, r3, r2
 800f348:	42ab      	cmp	r3, r5
 800f34a:	dc26      	bgt.n	800f39a <_printf_common+0x96>
 800f34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f350:	1e13      	subs	r3, r2, #0
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	bf18      	it	ne
 800f356:	2301      	movne	r3, #1
 800f358:	0692      	lsls	r2, r2, #26
 800f35a:	d42b      	bmi.n	800f3b4 <_printf_common+0xb0>
 800f35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f360:	4649      	mov	r1, r9
 800f362:	4638      	mov	r0, r7
 800f364:	47c0      	blx	r8
 800f366:	3001      	adds	r0, #1
 800f368:	d01e      	beq.n	800f3a8 <_printf_common+0xa4>
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	68e5      	ldr	r5, [r4, #12]
 800f36e:	6832      	ldr	r2, [r6, #0]
 800f370:	f003 0306 	and.w	r3, r3, #6
 800f374:	2b04      	cmp	r3, #4
 800f376:	bf08      	it	eq
 800f378:	1aad      	subeq	r5, r5, r2
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	6922      	ldr	r2, [r4, #16]
 800f37e:	bf0c      	ite	eq
 800f380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f384:	2500      	movne	r5, #0
 800f386:	4293      	cmp	r3, r2
 800f388:	bfc4      	itt	gt
 800f38a:	1a9b      	subgt	r3, r3, r2
 800f38c:	18ed      	addgt	r5, r5, r3
 800f38e:	2600      	movs	r6, #0
 800f390:	341a      	adds	r4, #26
 800f392:	42b5      	cmp	r5, r6
 800f394:	d11a      	bne.n	800f3cc <_printf_common+0xc8>
 800f396:	2000      	movs	r0, #0
 800f398:	e008      	b.n	800f3ac <_printf_common+0xa8>
 800f39a:	2301      	movs	r3, #1
 800f39c:	4652      	mov	r2, sl
 800f39e:	4649      	mov	r1, r9
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	47c0      	blx	r8
 800f3a4:	3001      	adds	r0, #1
 800f3a6:	d103      	bne.n	800f3b0 <_printf_common+0xac>
 800f3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b0:	3501      	adds	r5, #1
 800f3b2:	e7c6      	b.n	800f342 <_printf_common+0x3e>
 800f3b4:	18e1      	adds	r1, r4, r3
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	2030      	movs	r0, #48	; 0x30
 800f3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3be:	4422      	add	r2, r4
 800f3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3c8:	3302      	adds	r3, #2
 800f3ca:	e7c7      	b.n	800f35c <_printf_common+0x58>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	4622      	mov	r2, r4
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	47c0      	blx	r8
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	d0e6      	beq.n	800f3a8 <_printf_common+0xa4>
 800f3da:	3601      	adds	r6, #1
 800f3dc:	e7d9      	b.n	800f392 <_printf_common+0x8e>
	...

0800f3e0 <_printf_i>:
 800f3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e4:	7e0f      	ldrb	r7, [r1, #24]
 800f3e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3e8:	2f78      	cmp	r7, #120	; 0x78
 800f3ea:	4691      	mov	r9, r2
 800f3ec:	4680      	mov	r8, r0
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	469a      	mov	sl, r3
 800f3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3f6:	d807      	bhi.n	800f408 <_printf_i+0x28>
 800f3f8:	2f62      	cmp	r7, #98	; 0x62
 800f3fa:	d80a      	bhi.n	800f412 <_printf_i+0x32>
 800f3fc:	2f00      	cmp	r7, #0
 800f3fe:	f000 80d8 	beq.w	800f5b2 <_printf_i+0x1d2>
 800f402:	2f58      	cmp	r7, #88	; 0x58
 800f404:	f000 80a3 	beq.w	800f54e <_printf_i+0x16e>
 800f408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f410:	e03a      	b.n	800f488 <_printf_i+0xa8>
 800f412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f416:	2b15      	cmp	r3, #21
 800f418:	d8f6      	bhi.n	800f408 <_printf_i+0x28>
 800f41a:	a101      	add	r1, pc, #4	; (adr r1, 800f420 <_printf_i+0x40>)
 800f41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f420:	0800f479 	.word	0x0800f479
 800f424:	0800f48d 	.word	0x0800f48d
 800f428:	0800f409 	.word	0x0800f409
 800f42c:	0800f409 	.word	0x0800f409
 800f430:	0800f409 	.word	0x0800f409
 800f434:	0800f409 	.word	0x0800f409
 800f438:	0800f48d 	.word	0x0800f48d
 800f43c:	0800f409 	.word	0x0800f409
 800f440:	0800f409 	.word	0x0800f409
 800f444:	0800f409 	.word	0x0800f409
 800f448:	0800f409 	.word	0x0800f409
 800f44c:	0800f599 	.word	0x0800f599
 800f450:	0800f4bd 	.word	0x0800f4bd
 800f454:	0800f57b 	.word	0x0800f57b
 800f458:	0800f409 	.word	0x0800f409
 800f45c:	0800f409 	.word	0x0800f409
 800f460:	0800f5bb 	.word	0x0800f5bb
 800f464:	0800f409 	.word	0x0800f409
 800f468:	0800f4bd 	.word	0x0800f4bd
 800f46c:	0800f409 	.word	0x0800f409
 800f470:	0800f409 	.word	0x0800f409
 800f474:	0800f583 	.word	0x0800f583
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	1d1a      	adds	r2, r3, #4
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	602a      	str	r2, [r5, #0]
 800f480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f488:	2301      	movs	r3, #1
 800f48a:	e0a3      	b.n	800f5d4 <_printf_i+0x1f4>
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	6829      	ldr	r1, [r5, #0]
 800f490:	0606      	lsls	r6, r0, #24
 800f492:	f101 0304 	add.w	r3, r1, #4
 800f496:	d50a      	bpl.n	800f4ae <_printf_i+0xce>
 800f498:	680e      	ldr	r6, [r1, #0]
 800f49a:	602b      	str	r3, [r5, #0]
 800f49c:	2e00      	cmp	r6, #0
 800f49e:	da03      	bge.n	800f4a8 <_printf_i+0xc8>
 800f4a0:	232d      	movs	r3, #45	; 0x2d
 800f4a2:	4276      	negs	r6, r6
 800f4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4a8:	485e      	ldr	r0, [pc, #376]	; (800f624 <_printf_i+0x244>)
 800f4aa:	230a      	movs	r3, #10
 800f4ac:	e019      	b.n	800f4e2 <_printf_i+0x102>
 800f4ae:	680e      	ldr	r6, [r1, #0]
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4b6:	bf18      	it	ne
 800f4b8:	b236      	sxthne	r6, r6
 800f4ba:	e7ef      	b.n	800f49c <_printf_i+0xbc>
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	6820      	ldr	r0, [r4, #0]
 800f4c0:	1d19      	adds	r1, r3, #4
 800f4c2:	6029      	str	r1, [r5, #0]
 800f4c4:	0601      	lsls	r1, r0, #24
 800f4c6:	d501      	bpl.n	800f4cc <_printf_i+0xec>
 800f4c8:	681e      	ldr	r6, [r3, #0]
 800f4ca:	e002      	b.n	800f4d2 <_printf_i+0xf2>
 800f4cc:	0646      	lsls	r6, r0, #25
 800f4ce:	d5fb      	bpl.n	800f4c8 <_printf_i+0xe8>
 800f4d0:	881e      	ldrh	r6, [r3, #0]
 800f4d2:	4854      	ldr	r0, [pc, #336]	; (800f624 <_printf_i+0x244>)
 800f4d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2308      	moveq	r3, #8
 800f4da:	230a      	movne	r3, #10
 800f4dc:	2100      	movs	r1, #0
 800f4de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4e2:	6865      	ldr	r5, [r4, #4]
 800f4e4:	60a5      	str	r5, [r4, #8]
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	bfa2      	ittt	ge
 800f4ea:	6821      	ldrge	r1, [r4, #0]
 800f4ec:	f021 0104 	bicge.w	r1, r1, #4
 800f4f0:	6021      	strge	r1, [r4, #0]
 800f4f2:	b90e      	cbnz	r6, 800f4f8 <_printf_i+0x118>
 800f4f4:	2d00      	cmp	r5, #0
 800f4f6:	d04d      	beq.n	800f594 <_printf_i+0x1b4>
 800f4f8:	4615      	mov	r5, r2
 800f4fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4fe:	fb03 6711 	mls	r7, r3, r1, r6
 800f502:	5dc7      	ldrb	r7, [r0, r7]
 800f504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f508:	4637      	mov	r7, r6
 800f50a:	42bb      	cmp	r3, r7
 800f50c:	460e      	mov	r6, r1
 800f50e:	d9f4      	bls.n	800f4fa <_printf_i+0x11a>
 800f510:	2b08      	cmp	r3, #8
 800f512:	d10b      	bne.n	800f52c <_printf_i+0x14c>
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	07de      	lsls	r6, r3, #31
 800f518:	d508      	bpl.n	800f52c <_printf_i+0x14c>
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	6861      	ldr	r1, [r4, #4]
 800f51e:	4299      	cmp	r1, r3
 800f520:	bfde      	ittt	le
 800f522:	2330      	movle	r3, #48	; 0x30
 800f524:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f52c:	1b52      	subs	r2, r2, r5
 800f52e:	6122      	str	r2, [r4, #16]
 800f530:	f8cd a000 	str.w	sl, [sp]
 800f534:	464b      	mov	r3, r9
 800f536:	aa03      	add	r2, sp, #12
 800f538:	4621      	mov	r1, r4
 800f53a:	4640      	mov	r0, r8
 800f53c:	f7ff fee2 	bl	800f304 <_printf_common>
 800f540:	3001      	adds	r0, #1
 800f542:	d14c      	bne.n	800f5de <_printf_i+0x1fe>
 800f544:	f04f 30ff 	mov.w	r0, #4294967295
 800f548:	b004      	add	sp, #16
 800f54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54e:	4835      	ldr	r0, [pc, #212]	; (800f624 <_printf_i+0x244>)
 800f550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f554:	6829      	ldr	r1, [r5, #0]
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	f851 6b04 	ldr.w	r6, [r1], #4
 800f55c:	6029      	str	r1, [r5, #0]
 800f55e:	061d      	lsls	r5, r3, #24
 800f560:	d514      	bpl.n	800f58c <_printf_i+0x1ac>
 800f562:	07df      	lsls	r7, r3, #31
 800f564:	bf44      	itt	mi
 800f566:	f043 0320 	orrmi.w	r3, r3, #32
 800f56a:	6023      	strmi	r3, [r4, #0]
 800f56c:	b91e      	cbnz	r6, 800f576 <_printf_i+0x196>
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	f023 0320 	bic.w	r3, r3, #32
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	2310      	movs	r3, #16
 800f578:	e7b0      	b.n	800f4dc <_printf_i+0xfc>
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	f043 0320 	orr.w	r3, r3, #32
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	2378      	movs	r3, #120	; 0x78
 800f584:	4828      	ldr	r0, [pc, #160]	; (800f628 <_printf_i+0x248>)
 800f586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f58a:	e7e3      	b.n	800f554 <_printf_i+0x174>
 800f58c:	0659      	lsls	r1, r3, #25
 800f58e:	bf48      	it	mi
 800f590:	b2b6      	uxthmi	r6, r6
 800f592:	e7e6      	b.n	800f562 <_printf_i+0x182>
 800f594:	4615      	mov	r5, r2
 800f596:	e7bb      	b.n	800f510 <_printf_i+0x130>
 800f598:	682b      	ldr	r3, [r5, #0]
 800f59a:	6826      	ldr	r6, [r4, #0]
 800f59c:	6961      	ldr	r1, [r4, #20]
 800f59e:	1d18      	adds	r0, r3, #4
 800f5a0:	6028      	str	r0, [r5, #0]
 800f5a2:	0635      	lsls	r5, r6, #24
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	d501      	bpl.n	800f5ac <_printf_i+0x1cc>
 800f5a8:	6019      	str	r1, [r3, #0]
 800f5aa:	e002      	b.n	800f5b2 <_printf_i+0x1d2>
 800f5ac:	0670      	lsls	r0, r6, #25
 800f5ae:	d5fb      	bpl.n	800f5a8 <_printf_i+0x1c8>
 800f5b0:	8019      	strh	r1, [r3, #0]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	6123      	str	r3, [r4, #16]
 800f5b6:	4615      	mov	r5, r2
 800f5b8:	e7ba      	b.n	800f530 <_printf_i+0x150>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	1d1a      	adds	r2, r3, #4
 800f5be:	602a      	str	r2, [r5, #0]
 800f5c0:	681d      	ldr	r5, [r3, #0]
 800f5c2:	6862      	ldr	r2, [r4, #4]
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7f0 fe1a 	bl	8000200 <memchr>
 800f5cc:	b108      	cbz	r0, 800f5d2 <_printf_i+0x1f2>
 800f5ce:	1b40      	subs	r0, r0, r5
 800f5d0:	6060      	str	r0, [r4, #4]
 800f5d2:	6863      	ldr	r3, [r4, #4]
 800f5d4:	6123      	str	r3, [r4, #16]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5dc:	e7a8      	b.n	800f530 <_printf_i+0x150>
 800f5de:	6923      	ldr	r3, [r4, #16]
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	4649      	mov	r1, r9
 800f5e4:	4640      	mov	r0, r8
 800f5e6:	47d0      	blx	sl
 800f5e8:	3001      	adds	r0, #1
 800f5ea:	d0ab      	beq.n	800f544 <_printf_i+0x164>
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	079b      	lsls	r3, r3, #30
 800f5f0:	d413      	bmi.n	800f61a <_printf_i+0x23a>
 800f5f2:	68e0      	ldr	r0, [r4, #12]
 800f5f4:	9b03      	ldr	r3, [sp, #12]
 800f5f6:	4298      	cmp	r0, r3
 800f5f8:	bfb8      	it	lt
 800f5fa:	4618      	movlt	r0, r3
 800f5fc:	e7a4      	b.n	800f548 <_printf_i+0x168>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4632      	mov	r2, r6
 800f602:	4649      	mov	r1, r9
 800f604:	4640      	mov	r0, r8
 800f606:	47d0      	blx	sl
 800f608:	3001      	adds	r0, #1
 800f60a:	d09b      	beq.n	800f544 <_printf_i+0x164>
 800f60c:	3501      	adds	r5, #1
 800f60e:	68e3      	ldr	r3, [r4, #12]
 800f610:	9903      	ldr	r1, [sp, #12]
 800f612:	1a5b      	subs	r3, r3, r1
 800f614:	42ab      	cmp	r3, r5
 800f616:	dcf2      	bgt.n	800f5fe <_printf_i+0x21e>
 800f618:	e7eb      	b.n	800f5f2 <_printf_i+0x212>
 800f61a:	2500      	movs	r5, #0
 800f61c:	f104 0619 	add.w	r6, r4, #25
 800f620:	e7f5      	b.n	800f60e <_printf_i+0x22e>
 800f622:	bf00      	nop
 800f624:	0800f971 	.word	0x0800f971
 800f628:	0800f982 	.word	0x0800f982

0800f62c <memmove>:
 800f62c:	4288      	cmp	r0, r1
 800f62e:	b510      	push	{r4, lr}
 800f630:	eb01 0402 	add.w	r4, r1, r2
 800f634:	d902      	bls.n	800f63c <memmove+0x10>
 800f636:	4284      	cmp	r4, r0
 800f638:	4623      	mov	r3, r4
 800f63a:	d807      	bhi.n	800f64c <memmove+0x20>
 800f63c:	1e43      	subs	r3, r0, #1
 800f63e:	42a1      	cmp	r1, r4
 800f640:	d008      	beq.n	800f654 <memmove+0x28>
 800f642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f64a:	e7f8      	b.n	800f63e <memmove+0x12>
 800f64c:	4402      	add	r2, r0
 800f64e:	4601      	mov	r1, r0
 800f650:	428a      	cmp	r2, r1
 800f652:	d100      	bne.n	800f656 <memmove+0x2a>
 800f654:	bd10      	pop	{r4, pc}
 800f656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f65e:	e7f7      	b.n	800f650 <memmove+0x24>

0800f660 <_realloc_r>:
 800f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f664:	4680      	mov	r8, r0
 800f666:	4614      	mov	r4, r2
 800f668:	460e      	mov	r6, r1
 800f66a:	b921      	cbnz	r1, 800f676 <_realloc_r+0x16>
 800f66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f670:	4611      	mov	r1, r2
 800f672:	f7ff bb85 	b.w	800ed80 <_malloc_r>
 800f676:	b92a      	cbnz	r2, 800f684 <_realloc_r+0x24>
 800f678:	f7ff fc9c 	bl	800efb4 <_free_r>
 800f67c:	4625      	mov	r5, r4
 800f67e:	4628      	mov	r0, r5
 800f680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f684:	f000 f81b 	bl	800f6be <_malloc_usable_size_r>
 800f688:	4284      	cmp	r4, r0
 800f68a:	4607      	mov	r7, r0
 800f68c:	d802      	bhi.n	800f694 <_realloc_r+0x34>
 800f68e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f692:	d812      	bhi.n	800f6ba <_realloc_r+0x5a>
 800f694:	4621      	mov	r1, r4
 800f696:	4640      	mov	r0, r8
 800f698:	f7ff fb72 	bl	800ed80 <_malloc_r>
 800f69c:	4605      	mov	r5, r0
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d0ed      	beq.n	800f67e <_realloc_r+0x1e>
 800f6a2:	42bc      	cmp	r4, r7
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	bf28      	it	cs
 800f6aa:	463a      	movcs	r2, r7
 800f6ac:	f7ff fb32 	bl	800ed14 <memcpy>
 800f6b0:	4631      	mov	r1, r6
 800f6b2:	4640      	mov	r0, r8
 800f6b4:	f7ff fc7e 	bl	800efb4 <_free_r>
 800f6b8:	e7e1      	b.n	800f67e <_realloc_r+0x1e>
 800f6ba:	4635      	mov	r5, r6
 800f6bc:	e7df      	b.n	800f67e <_realloc_r+0x1e>

0800f6be <_malloc_usable_size_r>:
 800f6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c2:	1f18      	subs	r0, r3, #4
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	bfbc      	itt	lt
 800f6c8:	580b      	ldrlt	r3, [r1, r0]
 800f6ca:	18c0      	addlt	r0, r0, r3
 800f6cc:	4770      	bx	lr
	...

0800f6d0 <_init>:
 800f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d2:	bf00      	nop
 800f6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d6:	bc08      	pop	{r3}
 800f6d8:	469e      	mov	lr, r3
 800f6da:	4770      	bx	lr

0800f6dc <_fini>:
 800f6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6de:	bf00      	nop
 800f6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6e2:	bc08      	pop	{r3}
 800f6e4:	469e      	mov	lr, r3
 800f6e6:	4770      	bx	lr
