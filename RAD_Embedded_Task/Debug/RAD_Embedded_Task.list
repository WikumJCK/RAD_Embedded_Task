
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800f668  0800f668  0001f668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f914  0800f914  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800f914  0800f914  0001f914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f91c  0800f91c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f91c  0800f91c  0001f91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f920  0800f920  0001f920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800f924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00007174  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007284  20007284  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b75  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052eb  00000000  00000000  00049cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c0  00000000  00000000  0004efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fc0  00000000  00000000  00051160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a92b  00000000  00000000  00053120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002972f  00000000  00000000  0007da4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f304f  00000000  00000000  000a717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a1c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094c0  00000000  00000000  0019a21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f650 	.word	0x0800f650

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	0800f650 	.word	0x0800f650

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005aa:	f001 feaa 	bl	8002302 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80005ae:	21cc      	movs	r1, #204	; 0xcc
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005b2:	f001 ff23 	bl	80023fc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80005b6:	2144      	movs	r1, #68	; 0x44
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <DS18B20_StartAll+0x20>)
 80005ba:	f001 ff1f 	bl	80023fc <OneWire_WriteByte>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000016c 	.word	0x2000016c

080005c8 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <DS18B20_Read+0x144>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d301      	bcc.n	80005e2 <DS18B20_Read+0x1a>
		return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e090      	b.n	8000704 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4a49      	ldr	r2, [pc, #292]	; (8000710 <DS18B20_Read+0x148>)
 80005ec:	4413      	add	r3, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f93c 	bl	800086c <DS18B20_Is>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <DS18B20_Read+0x36>
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e082      	b.n	8000704 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 80005fe:	4845      	ldr	r0, [pc, #276]	; (8000714 <DS18B20_Read+0x14c>)
 8000600:	f001 fed2 	bl	80023a8 <OneWire_ReadBit>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800060a:	2300      	movs	r3, #0
 800060c:	e07a      	b.n	8000704 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <DS18B20_Read+0x14c>)
 8000610:	f001 fe77 	bl	8002302 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4a3d      	ldr	r2, [pc, #244]	; (8000710 <DS18B20_Read+0x148>)
 800061a:	4413      	add	r3, r2
 800061c:	4619      	mov	r1, r3
 800061e:	483d      	ldr	r0, [pc, #244]	; (8000714 <DS18B20_Read+0x14c>)
 8000620:	f002 f821 	bl	8002666 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000624:	21be      	movs	r1, #190	; 0xbe
 8000626:	483b      	ldr	r0, [pc, #236]	; (8000714 <DS18B20_Read+0x14c>)
 8000628:	f001 fee8 	bl	80023fc <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800062c:	2300      	movs	r3, #0
 800062e:	74fb      	strb	r3, [r7, #19]
 8000630:	e00d      	b.n	800064e <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000632:	7cfc      	ldrb	r4, [r7, #19]
 8000634:	4837      	ldr	r0, [pc, #220]	; (8000714 <DS18B20_Read+0x14c>)
 8000636:	f001 feff 	bl	8002438 <OneWire_ReadByte>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	f104 0318 	add.w	r3, r4, #24
 8000642:	443b      	add	r3, r7
 8000644:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	3301      	adds	r3, #1
 800064c:	74fb      	strb	r3, [r7, #19]
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	2b04      	cmp	r3, #4
 8000652:	d9ee      	bls.n	8000632 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000654:	7a3b      	ldrb	r3, [r7, #8]
 8000656:	b21a      	sxth	r2, r3
 8000658:	7a7b      	ldrb	r3, [r7, #9]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21b      	sxth	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b21b      	sxth	r3, r3
 8000662:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000664:	482b      	ldr	r0, [pc, #172]	; (8000714 <DS18B20_Read+0x14c>)
 8000666:	f001 fe4c 	bl	8002302 <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800066a:	7b3b      	ldrb	r3, [r7, #12]
 800066c:	115b      	asrs	r3, r3, #5
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3309      	adds	r3, #9
 8000678:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3b09      	subs	r3, #9
 800067e:	2b03      	cmp	r3, #3
 8000680:	d83a      	bhi.n	80006f8 <DS18B20_Read+0x130>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <DS18B20_Read+0xc0>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006c9 	.word	0x080006c9
 8000694:	080006e1 	.word	0x080006e1
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80006a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006aa:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80006ae:	e025      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80006b0:	8a3b      	ldrh	r3, [r7, #16]
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80006be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c2:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80006c6:	e019      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 80006c8:	8a3b      	ldrh	r3, [r7, #16]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80006d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006da:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80006de:	e00d      	b.n	80006fc <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 80006e0:	8a3b      	ldrh	r3, [r7, #16]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000718 <DS18B20_Read+0x150>
 80006ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f2:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80006f6:	e001      	b.n	80006fc <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <DS18B20_Read+0x154>)
 80006fa:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	20000180 	.word	0x20000180
 8000710:	2000012c 	.word	0x2000012c
 8000714:	2000016c 	.word	0x2000016c
 8000718:	3d800000 	.word	0x3d800000
 800071c:	437f0000 	.word	0x437f0000

08000720 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000730:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <DS18B20_SetResolution+0x140>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	429a      	cmp	r2, r3
 8000738:	d301      	bcc.n	800073e <DS18B20_SetResolution+0x1e>
		return 0;
 800073a:	2300      	movs	r3, #0
 800073c:	e08c      	b.n	8000858 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	4a48      	ldr	r2, [pc, #288]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000744:	4413      	add	r3, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f890 	bl	800086c <DS18B20_Is>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <DS18B20_SetResolution+0x36>
		return 0;
 8000752:	2300      	movs	r3, #0
 8000754:	e080      	b.n	8000858 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000758:	f001 fdd3 	bl	8002302 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000762:	4413      	add	r3, r2
 8000764:	4619      	mov	r1, r3
 8000766:	4840      	ldr	r0, [pc, #256]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000768:	f001 ff7d 	bl	8002666 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800076c:	21be      	movs	r1, #190	; 0xbe
 800076e:	483e      	ldr	r0, [pc, #248]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000770:	f001 fe44 	bl	80023fc <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000774:	483c      	ldr	r0, [pc, #240]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000776:	f001 fe5f 	bl	8002438 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800077a:	483b      	ldr	r0, [pc, #236]	; (8000868 <DS18B20_SetResolution+0x148>)
 800077c:	f001 fe5c 	bl	8002438 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000782:	f001 fe59 	bl	8002438 <OneWire_ReadByte>
 8000786:	4603      	mov	r3, r0
 8000788:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800078a:	4837      	ldr	r0, [pc, #220]	; (8000868 <DS18B20_SetResolution+0x148>)
 800078c:	f001 fe54 	bl	8002438 <OneWire_ReadByte>
 8000790:	4603      	mov	r3, r0
 8000792:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000796:	f001 fe4f 	bl	8002438 <OneWire_ReadByte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b09      	cmp	r3, #9
 80007a2:	d108      	bne.n	80007b6 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007aa:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f023 0320 	bic.w	r3, r3, #32
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e022      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	d108      	bne.n	80007ce <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e016      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b0b      	cmp	r3, #11
 80007d2:	d108      	bne.n	80007e6 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007da:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0320 	bic.w	r3, r3, #32
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e00a      	b.n	80007fc <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	d107      	bne.n	80007fc <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 80007fc:	481a      	ldr	r0, [pc, #104]	; (8000868 <DS18B20_SetResolution+0x148>)
 80007fe:	f001 fd80 	bl	8002302 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000808:	4413      	add	r3, r2
 800080a:	4619      	mov	r1, r3
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <DS18B20_SetResolution+0x148>)
 800080e:	f001 ff2a 	bl	8002666 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000812:	214e      	movs	r1, #78	; 0x4e
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000816:	f001 fdf1 	bl	80023fc <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	4619      	mov	r1, r3
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000820:	f001 fdec 	bl	80023fc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <DS18B20_SetResolution+0x148>)
 800082a:	f001 fde7 	bl	80023fc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000834:	f001 fde2 	bl	80023fc <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <DS18B20_SetResolution+0x148>)
 800083a:	f001 fd62 	bl	8002302 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <DS18B20_SetResolution+0x144>)
 8000844:	4413      	add	r3, r2
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <DS18B20_SetResolution+0x148>)
 800084a:	f001 ff0c 	bl	8002666 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800084e:	2148      	movs	r1, #72	; 0x48
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <DS18B20_SetResolution+0x148>)
 8000852:	f001 fdd3 	bl	80023fc <OneWire_WriteByte>

	return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000180 	.word	0x20000180
 8000864:	2000012c 	.word	0x2000012c
 8000868:	2000016c 	.word	0x2000016c

0800086c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b28      	cmp	r3, #40	; 0x28
 800087a:	d101      	bne.n	8000880 <DS18B20_Is+0x14>
		return 1;
 800087c:	2301      	movs	r3, #1
 800087e:	e000      	b.n	8000882 <DS18B20_Is+0x16>
	return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <DS18B20_AllDone+0x10>)
 8000896:	f001 fd87 	bl	80023a8 <OneWire_ReadBit>
 800089a:	4603      	mov	r3, r0
}
 800089c:	4618      	mov	r0, r3
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000016c 	.word	0x2000016c

080008a4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80008aa:	f7ff fff1 	bl	8000890 <DS18B20_AllDone>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d02e      	beq.n	8000912 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	e026      	b.n	8000908 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <DS18B20_ReadAll+0x78>)
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4413      	add	r3, r2
 80008c2:	330c      	adds	r3, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <DS18B20_ReadAll+0x78>)
 80008ce:	4413      	add	r3, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffcb 	bl	800086c <DS18B20_Is>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d012      	beq.n	8000902 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	3308      	adds	r3, #8
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <DS18B20_ReadAll+0x78>)
 80008e4:	441a      	add	r2, r3
 80008e6:	79fc      	ldrb	r4, [r7, #7]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe6b 	bl	80005c8 <DS18B20_Read>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <DS18B20_ReadAll+0x78>)
 80008f8:	0123      	lsls	r3, r4, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	330c      	adds	r3, #12
 80008fe:	460a      	mov	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	3301      	adds	r3, #1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <DS18B20_ReadAll+0x7c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3d3      	bcc.n	80008ba <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	2000012c 	.word	0x2000012c
 8000920:	20000180 	.word	0x20000180

08000924 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <DS18B20_GetROM+0x54>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	429a      	cmp	r2, r3
 8000938:	d302      	bcc.n	8000940 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <DS18B20_GetROM+0x54>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e00d      	b.n	8000962 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8000946:	79f9      	ldrb	r1, [r7, #7]
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	4403      	add	r3, r0
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <DS18B20_GetROM+0x58>)
 8000952:	0109      	lsls	r1, r1, #4
 8000954:	4401      	add	r1, r0
 8000956:	440a      	add	r2, r1
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	3301      	adds	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d9ee      	bls.n	8000946 <DS18B20_GetROM+0x22>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000180 	.word	0x20000180
 800097c:	2000012c 	.word	0x2000012c

08000980 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <DS18B20_Quantity+0x14>)
 8000986:	781b      	ldrb	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000180 	.word	0x20000180

08000998 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <DS18B20_GetTemperature+0x40>)
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4413      	add	r3, r2
 80009ac:	330c      	adds	r3, #12
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <DS18B20_GetTemperature+0x20>
		return 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e008      	b.n	80009ca <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <DS18B20_GetTemperature+0x40>)
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	4413      	add	r3, r2
 80009c0:	3308      	adds	r3, #8
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	601a      	str	r2, [r3, #0]
	return 1;
 80009c8:	2301      	movs	r3, #1

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000012c 	.word	0x2000012c

080009dc <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	2300      	movs	r3, #0
 80009ec:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, Temp_SensorD5_GPIO_Port, Temp_SensorD5_Pin); // Init OneWire bus
 80009ee:	2220      	movs	r2, #32
 80009f0:	491f      	ldr	r1, [pc, #124]	; (8000a70 <DS18B20_Init+0x94>)
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <DS18B20_Init+0x98>)
 80009f4:	f001 fe74 	bl	80026e0 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80009f8:	481e      	ldr	r0, [pc, #120]	; (8000a74 <DS18B20_Init+0x98>)
 80009fa:	f001 fe17 	bl	800262c <OneWire_First>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]
	while(next)
 8000a02:	e018      	b.n	8000a36 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a0e:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	73ba      	strb	r2, [r7, #14]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <DS18B20_Init+0xa0>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <DS18B20_Init+0x98>)
 8000a20:	f001 fe40 	bl	80026a4 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <DS18B20_Init+0x98>)
 8000a26:	f001 fe11 	bl	800264c <OneWire_Next>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <DS18B20_Init+0x9c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d803      	bhi.n	8000a3e <DS18B20_Init+0x62>
	while(next)
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1e3      	bne.n	8000a04 <DS18B20_Init+0x28>
 8000a3c:	e000      	b.n	8000a40 <DS18B20_Init+0x64>
			break;
 8000a3e:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e00a      	b.n	8000a5c <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe67 	bl	8000720 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8000a52:	f7ff fda7 	bl	80005a4 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	737b      	strb	r3, [r7, #13]
 8000a5c:	7b7a      	ldrb	r2, [r7, #13]
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3f0      	bcc.n	8000a46 <DS18B20_Init+0x6a>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	2000016c 	.word	0x2000016c
 8000a78:	20000180 	.word	0x20000180
 8000a7c:	2000012c 	.word	0x2000012c

08000a80 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2110      	movs	r1, #16
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <SELECT+0x14>)
 8000a8a:	f003 fe17 	bl	80046bc <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000

08000a98 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DESELECT+0x14>)
 8000aa2:	f003 fe0b 	bl	80046bc <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000

08000ab0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000aba:	bf00      	nop
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <SPI_TxByte+0x30>)
 8000abe:	f005 feac 	bl	800681a <HAL_SPI_GetState>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d1f9      	bne.n	8000abc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1,1000);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <SPI_TxByte+0x30>)
 8000ad2:	f005 fbc4 	bl	800625e <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000774 	.word	0x20000774

08000ae4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000aea:	23ff      	movs	r3, #255	; 0xff
 8000aec:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000af2:	bf00      	nop
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <SPI_RxByte+0x38>)
 8000af6:	f005 fe90 	bl	800681a <HAL_SPI_GetState>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d1f9      	bne.n	8000af4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1,1000);
 8000b00:	1dba      	adds	r2, r7, #6
 8000b02:	1df9      	adds	r1, r7, #7
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <SPI_RxByte+0x38>)
 8000b0e:	f005 fce2 	bl	80064d6 <HAL_SPI_TransmitReceive>
//  HAL_SPI_TransmitReceive_DMA(&hspi1, &dummy, &data, 1);
  return data;
 8000b12:	79bb      	ldrb	r3, [r7, #6]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000774 	.word	0x20000774

08000b20 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000b28:	f7ff ffdc 	bl	8000ae4 <SPI_RxByte>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	701a      	strb	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SD_ReadyWait+0x34>)
 8000b44:	2232      	movs	r2, #50	; 0x32
 8000b46:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000b48:	f7ff ffcc 	bl	8000ae4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000b4c:	f7ff ffca 	bl	8000ae4 <SPI_RxByte>
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d004      	beq.n	8000b64 <SD_ReadyWait+0x28>
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SD_ReadyWait+0x34>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1f3      	bne.n	8000b4c <SD_ReadyWait+0x10>

  return res;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20003499 	.word	0x20003499

08000b74 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000b7a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000b80:	f7ff ff8a 	bl	8000a98 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	e005      	b.n	8000b96 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b8a:	20ff      	movs	r0, #255	; 0xff
 8000b8c:	f7ff ff90 	bl	8000ab0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	ddf6      	ble.n	8000b8a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000b9c:	f7ff ff70 	bl	8000a80 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000bb4:	2395      	movs	r3, #149	; 0x95
 8000bb6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e009      	b.n	8000bd2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff72 	bl	8000ab0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	ddf2      	ble.n	8000bbe <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000bd8:	e002      	b.n	8000be0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000be0:	f7ff ff80 	bl	8000ae4 <SPI_RxByte>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d002      	beq.n	8000bf0 <SD_PowerOn+0x7c>
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f4      	bne.n	8000bda <SD_PowerOn+0x66>
  }

  DESELECT();
 8000bf0:	f7ff ff52 	bl	8000a98 <DESELECT>
  SPI_TxByte(0XFF);
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	f7ff ff5b 	bl	8000ab0 <SPI_TxByte>

  PowerFlag = 1;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <SD_PowerOn+0x94>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000182 	.word	0x20000182

08000c0c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SD_PowerOff+0x14>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000182 	.word	0x20000182

08000c24 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <SD_CheckPower+0x14>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000182 	.word	0x20000182

08000c3c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SD_RxDataBlock+0x68>)
 8000c48:	220a      	movs	r2, #10
 8000c4a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d104      	bne.n	8000c64 <SD_RxDataBlock+0x28>
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SD_RxDataBlock+0x68>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f3      	bne.n	8000c4c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	2bfe      	cmp	r3, #254	; 0xfe
 8000c68:	d001      	beq.n	8000c6e <SD_RxDataBlock+0x32>
    return FALSE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e016      	b.n	8000c9c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff53 	bl	8000b20 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff4d 	bl	8000b20 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3b02      	subs	r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1ed      	bne.n	8000c6e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000c92:	f7ff ff27 	bl	8000ae4 <SPI_RxByte>
  SPI_RxByte();
 8000c96:	f7ff ff25 	bl	8000ae4 <SPI_RxByte>

  return TRUE;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20003498 	.word	0x20003498

08000ca8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000cb8:	f7ff ff40 	bl	8000b3c <SD_ReadyWait>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d001      	beq.n	8000cc6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e040      	b.n	8000d48 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fef1 	bl	8000ab0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2bfd      	cmp	r3, #253	; 0xfd
 8000cd2:	d031      	beq.n	8000d38 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fee5 	bl	8000ab0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fede 	bl	8000ab0 <SPI_TxByte>
    } while (--wc);
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1eb      	bne.n	8000cd8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d00:	f7ff fef0 	bl	8000ae4 <SPI_RxByte>
    SPI_RxByte();
 8000d04:	f7ff feee 	bl	8000ae4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000d08:	e00b      	b.n	8000d22 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000d0a:	f7ff feeb 	bl	8000ae4 <SPI_RxByte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d006      	beq.n	8000d2a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	2b40      	cmp	r3, #64	; 0x40
 8000d26:	d9f0      	bls.n	8000d0a <SD_TxDataBlock+0x62>
 8000d28:	e000      	b.n	8000d2c <SD_TxDataBlock+0x84>
        break;
 8000d2a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000d2c:	bf00      	nop
 8000d2e:	f7ff fed9 	bl	8000ae4 <SPI_RxByte>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0fa      	beq.n	8000d2e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d101      	bne.n	8000d46 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d5c:	f7ff feee 	bl	8000b3c <SD_ReadyWait>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d001      	beq.n	8000d6a <SD_SendCmd+0x1a>
    return 0xFF;
 8000d66:	23ff      	movs	r3, #255	; 0xff
 8000d68:	e040      	b.n	8000dec <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe9f 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	0e1b      	lsrs	r3, r3, #24
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe99 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fe93 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe8d 	bl	8000ab0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe88 	bl	8000ab0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b40      	cmp	r3, #64	; 0x40
 8000da8:	d101      	bne.n	8000dae <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000daa:	2395      	movs	r3, #149	; 0x95
 8000dac:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b48      	cmp	r3, #72	; 0x48
 8000db2:	d101      	bne.n	8000db8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000db4:	2387      	movs	r3, #135	; 0x87
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe78 	bl	8000ab0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b4c      	cmp	r3, #76	; 0x4c
 8000dc4:	d101      	bne.n	8000dca <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000dc6:	f7ff fe8d 	bl	8000ae4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000dce:	f7ff fe89 	bl	8000ae4 <SPI_RxByte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000dd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da05      	bge.n	8000dea <SD_SendCmd+0x9a>
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f1      	bne.n	8000dce <SD_SendCmd+0x7e>

  return res;
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0d5      	b.n	8000fb4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000e08:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <SD_disk_initialize+0x2a>
    return Stat;
 8000e16:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	e0ca      	b.n	8000fb4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000e1e:	f7ff fea9 	bl	8000b74 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000e22:	f7ff fe2d 	bl	8000a80 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2040      	movs	r0, #64	; 0x40
 8000e2e:	f7ff ff8f 	bl	8000d50 <SD_SendCmd>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	f040 80a5 	bne.w	8000f84 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000e3a:	4b61      	ldr	r3, [pc, #388]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000e3c:	2264      	movs	r2, #100	; 0x64
 8000e3e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e44:	2048      	movs	r0, #72	; 0x48
 8000e46:	f7ff ff83 	bl	8000d50 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d158      	bne.n	8000f02 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e00c      	b.n	8000e70 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000e56:	7bfc      	ldrb	r4, [r7, #15]
 8000e58:	f7ff fe44 	bl	8000ae4 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f104 0310 	add.w	r3, r4, #16
 8000e64:	443b      	add	r3, r7
 8000e66:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d9ef      	bls.n	8000e56 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e76:	7abb      	ldrb	r3, [r7, #10]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 8083 	bne.w	8000f84 <SD_disk_initialize+0x190>
 8000e7e:	7afb      	ldrb	r3, [r7, #11]
 8000e80:	2baa      	cmp	r3, #170	; 0xaa
 8000e82:	d17f      	bne.n	8000f84 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e84:	2100      	movs	r1, #0
 8000e86:	2077      	movs	r0, #119	; 0x77
 8000e88:	f7ff ff62 	bl	8000d50 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d807      	bhi.n	8000ea2 <SD_disk_initialize+0xae>
 8000e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e96:	2069      	movs	r0, #105	; 0x69
 8000e98:	f7ff ff5a 	bl	8000d50 <SD_SendCmd>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1eb      	bne.n	8000e84 <SD_disk_initialize+0x90>
 8000eac:	e000      	b.n	8000eb0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000eae:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d064      	beq.n	8000f84 <SD_disk_initialize+0x190>
 8000eba:	2100      	movs	r1, #0
 8000ebc:	207a      	movs	r0, #122	; 0x7a
 8000ebe:	f7ff ff47 	bl	8000d50 <SD_SendCmd>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d15d      	bne.n	8000f84 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e00c      	b.n	8000ee8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ece:	7bfc      	ldrb	r4, [r7, #15]
 8000ed0:	f7ff fe08 	bl	8000ae4 <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f104 0310 	add.w	r3, r4, #16
 8000edc:	443b      	add	r3, r7
 8000ede:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d9ef      	bls.n	8000ece <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000eee:	7a3b      	ldrb	r3, [r7, #8]
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SD_disk_initialize+0x108>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e000      	b.n	8000efe <SD_disk_initialize+0x10a>
 8000efc:	2302      	movs	r3, #2
 8000efe:	73bb      	strb	r3, [r7, #14]
 8000f00:	e040      	b.n	8000f84 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f02:	2100      	movs	r1, #0
 8000f04:	2077      	movs	r0, #119	; 0x77
 8000f06:	f7ff ff23 	bl	8000d50 <SD_SendCmd>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d808      	bhi.n	8000f22 <SD_disk_initialize+0x12e>
 8000f10:	2100      	movs	r1, #0
 8000f12:	2069      	movs	r0, #105	; 0x69
 8000f14:	f7ff ff1c 	bl	8000d50 <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d801      	bhi.n	8000f22 <SD_disk_initialize+0x12e>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e000      	b.n	8000f24 <SD_disk_initialize+0x130>
 8000f22:	2301      	movs	r3, #1
 8000f24:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d10e      	bne.n	8000f4a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2077      	movs	r0, #119	; 0x77
 8000f30:	f7ff ff0e 	bl	8000d50 <SD_SendCmd>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d80e      	bhi.n	8000f58 <SD_disk_initialize+0x164>
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2069      	movs	r0, #105	; 0x69
 8000f3e:	f7ff ff07 	bl	8000d50 <SD_SendCmd>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d107      	bne.n	8000f58 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000f48:	e00d      	b.n	8000f66 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2041      	movs	r0, #65	; 0x41
 8000f4e:	f7ff feff 	bl	8000d50 <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e1      	bne.n	8000f26 <SD_disk_initialize+0x132>
 8000f62:	e000      	b.n	8000f66 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000f64:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <SD_disk_initialize+0x1cc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <SD_disk_initialize+0x18c>
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	2050      	movs	r0, #80	; 0x50
 8000f76:	f7ff feeb 	bl	8000d50 <SD_SendCmd>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <SD_disk_initialize+0x1d0>)
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000f8a:	f7ff fd85 	bl	8000a98 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000f8e:	f7ff fda9 	bl	8000ae4 <SPI_RxByte>

  if (type)
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d008      	beq.n	8000faa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e001      	b.n	8000fae <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000faa:	f7ff fe2f 	bl	8000c0c <SD_PowerOff>
  }

  return Stat;
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SD_disk_initialize+0x1c8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20003498 	.word	0x20003498
 8000fc4:	20000181 	.word	0x20000181

08000fc8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SD_disk_status+0x14>
    return STA_NOINIT;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e002      	b.n	8000fe2 <SD_disk_status+0x1a>

  return Stat;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SD_disk_status+0x28>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <SD_disk_read+0x1c>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_read+0x20>
    return RES_PARERR;
 8001010:	2304      	movs	r3, #4
 8001012:	e051      	b.n	80010b8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <SD_disk_read+0xcc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001022:	2303      	movs	r3, #3
 8001024:	e048      	b.n	80010b8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <SD_disk_read+0xd0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	607b      	str	r3, [r7, #4]

  SELECT();
 8001038:	f7ff fd22 	bl	8000a80 <SELECT>

  if (count == 1)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d111      	bne.n	8001066 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2051      	movs	r0, #81	; 0x51
 8001046:	f7ff fe83 	bl	8000d50 <SD_SendCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <SD_disk_read+0xb0>
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fdf1 	bl	8000c3c <SD_RxDataBlock>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d021      	beq.n	80010a4 <SD_disk_read+0xb0>
      count = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	e01e      	b.n	80010a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2052      	movs	r0, #82	; 0x52
 800106a:	f7ff fe71 	bl	8000d50 <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d117      	bne.n	80010a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fddf 	bl	8000c3c <SD_RxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00a      	beq.n	800109a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800108a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ed      	bne.n	8001074 <SD_disk_read+0x80>
 8001098:	e000      	b.n	800109c <SD_disk_read+0xa8>
          break;
 800109a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	204c      	movs	r0, #76	; 0x4c
 80010a0:	f7ff fe56 	bl	8000d50 <SD_SendCmd>
    }
  }

  DESELECT();
 80010a4:	f7ff fcf8 	bl	8000a98 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80010a8:	f7ff fd1c 	bl	8000ae4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000181 	.word	0x20000181

080010c8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <SD_disk_write+0x1c>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80010e4:	2304      	movs	r3, #4
 80010e6:	e06b      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <SD_disk_write+0x100>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e062      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <SD_disk_write+0x100>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001108:	2302      	movs	r3, #2
 800110a:	e059      	b.n	80011c0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <SD_disk_write+0x104>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	607b      	str	r3, [r7, #4]

  SELECT();
 800111e:	f7ff fcaf 	bl	8000a80 <SELECT>

  if (count == 1)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d110      	bne.n	800114a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	2058      	movs	r0, #88	; 0x58
 800112c:	f7ff fe10 	bl	8000d50 <SD_SendCmd>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d13a      	bne.n	80011ac <SD_disk_write+0xe4>
 8001136:	21fe      	movs	r1, #254	; 0xfe
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f7ff fdb5 	bl	8000ca8 <SD_TxDataBlock>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d033      	beq.n	80011ac <SD_disk_write+0xe4>
      count = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	e030      	b.n	80011ac <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SD_disk_write+0x104>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2077      	movs	r0, #119	; 0x77
 800115a:	f7ff fdf9 	bl	8000d50 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	2057      	movs	r0, #87	; 0x57
 8001162:	f7ff fdf5 	bl	8000d50 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2059      	movs	r0, #89	; 0x59
 800116a:	f7ff fdf1 	bl	8000d50 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d11b      	bne.n	80011ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001174:	21fc      	movs	r1, #252	; 0xfc
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff fd96 	bl	8000ca8 <SD_TxDataBlock>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00a      	beq.n	8001198 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001188:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1ee      	bne.n	8001174 <SD_disk_write+0xac>
 8001196:	e000      	b.n	800119a <SD_disk_write+0xd2>
          break;
 8001198:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800119a:	21fd      	movs	r1, #253	; 0xfd
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fd83 	bl	8000ca8 <SD_TxDataBlock>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <SD_disk_write+0xe4>
      {
        count = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80011ac:	f7ff fc74 	bl	8000a98 <DESELECT>
  SPI_RxByte();
 80011b0:	f7ff fc98 	bl	8000ae4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000181 	.word	0x20000181

080011d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	460b      	mov	r3, r1
 80011de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80011ea:	2304      	movs	r3, #4
 80011ec:	e11b      	b.n	8001426 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d129      	bne.n	800124e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d017      	beq.n	8001232 <SD_disk_ioctl+0x62>
 8001202:	2b02      	cmp	r3, #2
 8001204:	dc1f      	bgt.n	8001246 <SD_disk_ioctl+0x76>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <SD_disk_ioctl+0x40>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00b      	beq.n	8001226 <SD_disk_ioctl+0x56>
 800120e:	e01a      	b.n	8001246 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001210:	f7ff fd08 	bl	8000c24 <SD_CheckPower>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800121a:	f7ff fcf7 	bl	8000c0c <SD_PowerOff>
      res = RES_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001224:	e0fd      	b.n	8001422 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001226:	f7ff fca5 	bl	8000b74 <SD_PowerOn>
      res = RES_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001230:	e0f7      	b.n	8001422 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	1c5c      	adds	r4, r3, #1
 8001236:	f7ff fcf5 	bl	8000c24 <SD_CheckPower>
 800123a:	4603      	mov	r3, r0
 800123c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001244:	e0ed      	b.n	8001422 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001246:	2304      	movs	r3, #4
 8001248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124c:	e0e9      	b.n	8001422 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <SD_disk_ioctl+0x260>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800125c:	2303      	movs	r3, #3
 800125e:	e0e2      	b.n	8001426 <SD_disk_ioctl+0x256>

    SELECT();
 8001260:	f7ff fc0e 	bl	8000a80 <SELECT>

    switch (ctrl)
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b0d      	cmp	r3, #13
 8001268:	f200 80cc 	bhi.w	8001404 <SD_disk_ioctl+0x234>
 800126c:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <SD_disk_ioctl+0xa4>)
 800126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001272:	bf00      	nop
 8001274:	0800136f 	.word	0x0800136f
 8001278:	080012ad 	.word	0x080012ad
 800127c:	0800135f 	.word	0x0800135f
 8001280:	08001405 	.word	0x08001405
 8001284:	08001405 	.word	0x08001405
 8001288:	08001405 	.word	0x08001405
 800128c:	08001405 	.word	0x08001405
 8001290:	08001405 	.word	0x08001405
 8001294:	08001405 	.word	0x08001405
 8001298:	08001405 	.word	0x08001405
 800129c:	08001405 	.word	0x08001405
 80012a0:	08001381 	.word	0x08001381
 80012a4:	080013a5 	.word	0x080013a5
 80012a8:	080013c9 	.word	0x080013c9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80012ac:	2100      	movs	r1, #0
 80012ae:	2049      	movs	r0, #73	; 0x49
 80012b0:	f7ff fd4e 	bl	8000d50 <SD_SendCmd>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80a8 	bne.w	800140c <SD_disk_ioctl+0x23c>
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2110      	movs	r1, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcba 	bl	8000c3c <SD_RxDataBlock>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 809e 	beq.w	800140c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10e      	bne.n	80012f8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012da:	7d7b      	ldrb	r3, [r7, #21]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	7d3b      	ldrb	r3, [r7, #20]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80012ee:	8bfb      	ldrh	r3, [r7, #30]
 80012f0:	029a      	lsls	r2, r3, #10
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e02e      	b.n	8001356 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	09db      	lsrs	r3, r3, #7
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b2da      	uxtb	r2, r3
 800130a:	7d7b      	ldrb	r3, [r7, #21]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 0306 	and.w	r3, r3, #6
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3302      	adds	r3, #2
 800131c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001320:	7d3b      	ldrb	r3, [r7, #20]
 8001322:	099b      	lsrs	r3, r3, #6
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b29a      	uxth	r2, r3
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	b29b      	uxth	r3, r3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29a      	uxth	r2, r3
 8001334:	7cbb      	ldrb	r3, [r7, #18]
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	b29b      	uxth	r3, r3
 800133a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001348:	8bfa      	ldrh	r2, [r7, #30]
 800134a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800134e:	3b09      	subs	r3, #9
 8001350:	409a      	lsls	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800135c:	e056      	b.n	800140c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800136c:	e055      	b.n	800141a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800136e:	f7ff fbe5 	bl	8000b3c <SD_ReadyWait>
 8001372:	4603      	mov	r3, r0
 8001374:	2bff      	cmp	r3, #255	; 0xff
 8001376:	d14b      	bne.n	8001410 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800137e:	e047      	b.n	8001410 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001380:	2100      	movs	r1, #0
 8001382:	2049      	movs	r0, #73	; 0x49
 8001384:	f7ff fce4 	bl	8000d50 <SD_SendCmd>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d142      	bne.n	8001414 <SD_disk_ioctl+0x244>
 800138e:	2110      	movs	r1, #16
 8001390:	6a38      	ldr	r0, [r7, #32]
 8001392:	f7ff fc53 	bl	8000c3c <SD_RxDataBlock>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d03b      	beq.n	8001414 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013a2:	e037      	b.n	8001414 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80013a4:	2100      	movs	r1, #0
 80013a6:	204a      	movs	r0, #74	; 0x4a
 80013a8:	f7ff fcd2 	bl	8000d50 <SD_SendCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d132      	bne.n	8001418 <SD_disk_ioctl+0x248>
 80013b2:	2110      	movs	r1, #16
 80013b4:	6a38      	ldr	r0, [r7, #32]
 80013b6:	f7ff fc41 	bl	8000c3c <SD_RxDataBlock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d02b      	beq.n	8001418 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013c6:	e027      	b.n	8001418 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80013c8:	2100      	movs	r1, #0
 80013ca:	207a      	movs	r0, #122	; 0x7a
 80013cc:	f7ff fcc0 	bl	8000d50 <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013dc:	e00b      	b.n	80013f6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80013de:	6a3c      	ldr	r4, [r7, #32]
 80013e0:	1c63      	adds	r3, r4, #1
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	f7ff fb7e 	bl	8000ae4 <SPI_RxByte>
 80013e8:	4603      	mov	r3, r0
 80013ea:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80013ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f0:	3301      	adds	r3, #1
 80013f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d9ef      	bls.n	80013de <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001404:	2304      	movs	r3, #4
 8001406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800140a:	e006      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 800140c:	bf00      	nop
 800140e:	e004      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001410:	bf00      	nop
 8001412:	e002      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <SD_disk_ioctl+0x24a>
      break;
 8001418:	bf00      	nop
    }

    DESELECT();
 800141a:	f7ff fb3d 	bl	8000a98 <DESELECT>
    SPI_RxByte();
 800141e:	f7ff fb61 	bl	8000ae4 <SPI_RxByte>
  }

  return res;
 8001422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001426:	4618      	mov	r0, r3
 8001428:	372c      	adds	r7, #44	; 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000

08001434 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <vApplicationGetIdleTaskMemory+0x2c>)
 8001444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <vApplicationGetIdleTaskMemory+0x30>)
 800144a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000184 	.word	0x20000184
 8001464:	20000238 	.word	0x20000238

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b0a8      	sub	sp, #160	; 0xa0
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f001 fee3 	bl	8003238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f8a1 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 fb77 	bl	8001b68 <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f000 fb17 	bl	8001aac <MX_DMA_Init>
  MX_ETH_Init();
 800147e:	f000 f90b 	bl	8001698 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001482:	f000 fabb 	bl	80019fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001486:	f000 fae3 	bl	8001a50 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800148a:	f000 f9c9 	bl	8001820 <MX_TIM1_Init>
  MX_I2C2_Init();
 800148e:	f000 f951 	bl	8001734 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001492:	f000 f98f 	bl	80017b4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001496:	f008 f86d 	bl	8009574 <MX_FATFS_Init>
  MX_TIM3_Init();
 800149a:	f000 fa61 	bl	8001960 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800149e:	4839      	ldr	r0, [pc, #228]	; (8001584 <main+0x11c>)
 80014a0:	f005 fae4 	bl	8006a6c <HAL_TIM_Base_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <main+0x120>)
 80014a6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80014b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00b f8cf 	bl	800c65a <osMessageCreate>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <main+0x124>)
 80014c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityAboveNormal, 0, 256);
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <main+0x128>)
 80014c4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 80014d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00a ff93 	bl	800c408 <osThreadCreate>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <main+0x12c>)
 80014e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <main+0x130>)
 80014ea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 80014fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00a ff80 	bl	800c408 <osThreadCreate>
 8001508:	4603      	mov	r3, r0
 800150a:	4a24      	ldr	r2, [pc, #144]	; (800159c <main+0x134>)
 800150c:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <main+0x138>)
 8001510:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001514:	461d      	mov	r5, r3
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800151e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 8001522:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00a ff6d 	bl	800c408 <osThreadCreate>
 800152e:	4603      	mov	r3, r0
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <main+0x13c>)
 8001532:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <main+0x140>)
 8001536:	f107 0420 	add.w	r4, r7, #32
 800153a:	461d      	mov	r5, r3
 800153c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00a ff5a 	bl	800c408 <osThreadCreate>
 8001554:	4603      	mov	r3, r0
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <main+0x144>)
 8001558:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityHigh, 0, 128);
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <main+0x148>)
 800155c:	1d3c      	adds	r4, r7, #4
 800155e:	461d      	mov	r5, r3
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00a ff49 	bl	800c408 <osThreadCreate>
 8001576:	4603      	mov	r3, r0
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <main+0x14c>)
 800157a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800157c:	f00a ff3d 	bl	800c3fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001580:	e7fe      	b.n	8001580 <main+0x118>
 8001582:	bf00      	nop
 8001584:	2000088c 	.word	0x2000088c
 8001588:	0800f6b4 	.word	0x0800f6b4
 800158c:	20000fa0 	.word	0x20000fa0
 8001590:	0800f6c4 	.word	0x0800f6c4
 8001594:	20000f8c 	.word	0x20000f8c
 8001598:	0800f6e0 	.word	0x0800f6e0
 800159c:	20000f90 	.word	0x20000f90
 80015a0:	0800f6fc 	.word	0x0800f6fc
 80015a4:	20000f94 	.word	0x20000f94
 80015a8:	0800f718 	.word	0x0800f718
 80015ac:	20000f98 	.word	0x20000f98
 80015b0:	0800f734 	.word	0x0800f734
 80015b4:	20000f9c 	.word	0x20000f9c

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00d fb72 	bl	800ecb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <SystemClock_Config+0xd8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <SystemClock_Config+0xd8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <SystemClock_Config+0xd8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xdc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <SystemClock_Config+0xdc>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SystemClock_Config+0xdc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800162c:	23a8      	movs	r3, #168	; 0xa8
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f853 	bl	80056e8 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f000 fdeb 	bl	8002222 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2105      	movs	r1, #5
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fab4 	bl	8005bd8 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001676:	f000 fdd4 	bl	8002222 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_2);
 800167a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800167e:	2100      	movs	r1, #0
 8001680:	2001      	movs	r0, #1
 8001682:	f004 fb8f 	bl	8005da4 <HAL_RCC_MCOConfig>
}
 8001686:	bf00      	nop
 8001688:	3750      	adds	r7, #80	; 0x50
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ETH_Init+0x84>)
 800169e:	4a20      	ldr	r2, [pc, #128]	; (8001720 <MX_ETH_Init+0x88>)
 80016a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_ETH_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_ETH_Init+0x8c>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_ETH_Init+0x8c>)
 80016b0:	22e1      	movs	r2, #225	; 0xe1
 80016b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_ETH_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_ETH_Init+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_ETH_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_ETH_Init+0x84>)
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <MX_ETH_Init+0x8c>)
 80016ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_ETH_Init+0x84>)
 80016ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_ETH_Init+0x84>)
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <MX_ETH_Init+0x90>)
 80016d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_ETH_Init+0x84>)
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_ETH_Init+0x94>)
 80016de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_ETH_Init+0x84>)
 80016e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_ETH_Init+0x84>)
 80016ea:	f002 fafb 	bl	8003ce4 <HAL_ETH_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80016f4:	f000 fd95 	bl	8002222 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80016f8:	2238      	movs	r2, #56	; 0x38
 80016fa:	2100      	movs	r1, #0
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_ETH_Init+0x98>)
 80016fe:	f00d fad7 	bl	800ecb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_ETH_Init+0x98>)
 8001704:	2221      	movs	r2, #33	; 0x21
 8001706:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_ETH_Init+0x98>)
 800170a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800170e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_ETH_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200005b0 	.word	0x200005b0
 8001720:	40028000 	.word	0x40028000
 8001724:	20003448 	.word	0x20003448
 8001728:	20000510 	.word	0x20000510
 800172c:	20000470 	.word	0x20000470
 8001730:	20000438 	.word	0x20000438

08001734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_I2C2_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <MX_I2C2_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_I2C2_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_I2C2_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001772:	f002 ffd7 	bl	8004724 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fd51 	bl	8002222 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001784:	f003 fe18 	bl	80053b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800178e:	f000 fd48 	bl	8002222 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001796:	f003 fe4b 	bl	8005430 <HAL_I2CEx_ConfigDigitalFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 fd3f 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000660 	.word	0x20000660
 80017ac:	40005800 	.word	0x40005800
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_SPI1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI1_Init+0x64>)
 8001800:	220a      	movs	r2, #10
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_SPI1_Init+0x64>)
 8001806:	f004 fca1 	bl	800614c <HAL_SPI_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 fd07 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000774 	.word	0x20000774
 800181c:	40013000 	.word	0x40013000

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	; 0x58
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00d fa29 	bl	800ecb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <MX_TIM1_Init+0x138>)
 8001860:	4a3e      	ldr	r2, [pc, #248]	; (800195c <MX_TIM1_Init+0x13c>)
 8001862:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <MX_TIM1_Init+0x138>)
 8001866:	22a7      	movs	r2, #167	; 0xa7
 8001868:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <MX_TIM1_Init+0x138>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_TIM1_Init+0x138>)
 8001872:	2263      	movs	r2, #99	; 0x63
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <MX_TIM1_Init+0x138>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <MX_TIM1_Init+0x138>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <MX_TIM1_Init+0x138>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	4833      	ldr	r0, [pc, #204]	; (8001958 <MX_TIM1_Init+0x138>)
 800188a:	f005 f89f 	bl	80069cc <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001894:	f000 fcc5 	bl	8002222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a2:	4619      	mov	r1, r3
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <MX_TIM1_Init+0x138>)
 80018a6:	f005 fca5 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018b0:	f000 fcb7 	bl	8002222 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018b4:	4828      	ldr	r0, [pc, #160]	; (8001958 <MX_TIM1_Init+0x138>)
 80018b6:	f005 f9b1 	bl	8006c1c <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018c0:	f000 fcaf 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d0:	4619      	mov	r1, r3
 80018d2:	4821      	ldr	r0, [pc, #132]	; (8001958 <MX_TIM1_Init+0x138>)
 80018d4:	f006 f88e 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018de:	f000 fca0 	bl	8002222 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	; 0x60
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <MX_TIM1_Init+0x138>)
 8001908:	f005 fbb2 	bl	8007070 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001912:	f000 fc86 	bl	8002222 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x138>)
 800193a:	f006 f8d7 	bl	8007aec <HAL_TIMEx_ConfigBreakDeadTime>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001944:	f000 fc6d 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x138>)
 800194a:	f001 f9cb 	bl	8002ce4 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	; 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000088c 	.word	0x2000088c
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_TIM3_Init+0x94>)
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <MX_TIM3_Init+0x98>)
 8001980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001984:	2253      	movs	r2, #83	; 0x53
 8001986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_TIM3_Init+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_TIM3_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_TIM3_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019a4:	f005 f812 	bl	80069cc <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019ae:	f000 fc38 	bl	8002222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019c0:	f005 fc18 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019ca:	f000 fc2a 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM3_Init+0x94>)
 80019dc:	f006 f80a 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019e6:	f000 fc1c 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200008d4 	.word	0x200008d4
 80019f8:	40000400 	.word	0x40000400

080019fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART3_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a34:	f006 f8c0 	bl	8007bb8 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f000 fbf0 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000097c 	.word	0x2000097c
 8001a4c:	40004800 	.word	0x40004800

08001a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a94:	f003 fd0b 	bl	80054ae <HAL_PCD_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f000 fbc0 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000a80 	.word	0x20000a80

08001aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <MX_DMA_Init+0xb8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	200c      	movs	r0, #12
 8001af0:	f001 fcc0 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001af4:	200c      	movs	r0, #12
 8001af6:	f001 fcd9 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	200e      	movs	r0, #14
 8001b00:	f001 fcb8 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b04:	200e      	movs	r0, #14
 8001b06:	f001 fcd1 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f001 fcb0 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f001 fcc9 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	202f      	movs	r0, #47	; 0x2f
 8001b20:	f001 fca8 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b24:	202f      	movs	r0, #47	; 0x2f
 8001b26:	f001 fcc1 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	2039      	movs	r0, #57	; 0x39
 8001b30:	f001 fca0 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b34:	2039      	movs	r0, #57	; 0x39
 8001b36:	f001 fcb9 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	203a      	movs	r0, #58	; 0x3a
 8001b40:	f001 fc98 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b44:	203a      	movs	r0, #58	; 0x3a
 8001b46:	f001 fcb1 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2044      	movs	r0, #68	; 0x44
 8001b50:	f001 fc90 	bl	8003474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001b54:	2044      	movs	r0, #68	; 0x44
 8001b56:	f001 fca9 	bl	80034ac <HAL_NVIC_EnableIRQ>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a5f      	ldr	r2, [pc, #380]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <MX_GPIO_Init+0x1d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <MX_GPIO_Init+0x1d8>)
 8001c66:	f002 fd29 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2140      	movs	r1, #64	; 0x40
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001c70:	f002 fd24 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	482f      	ldr	r0, [pc, #188]	; (8001d48 <MX_GPIO_Init+0x1e0>)
 8001c8c:	f002 fb52 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8001c90:	2308      	movs	r3, #8
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482a      	ldr	r0, [pc, #168]	; (8001d4c <MX_GPIO_Init+0x1e4>)
 8001ca4:	f002 fb46 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ca8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481f      	ldr	r0, [pc, #124]	; (8001d40 <MX_GPIO_Init+0x1d8>)
 8001cc2:	f002 fb37 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4819      	ldr	r0, [pc, #100]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001cde:	f002 fb29 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4813      	ldr	r0, [pc, #76]	; (8001d44 <MX_GPIO_Init+0x1dc>)
 8001cf6:	f002 fb1d 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_GPIO_Init+0x1e0>)
 8001d18:	f002 fb0c 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_SensorD5_Pin */
  GPIO_InitStruct.Pin = Temp_SensorD5_Pin;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Temp_SensorD5_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <MX_GPIO_Init+0x1e8>)
 8001d30:	f002 fb00 	bl	8004334 <HAL_GPIO_Init>

}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020c00 	.word	0x40020c00

08001d54 <bcdToDec>:
   return (uint8_t)( (val/10*16) + (val%10) );
 }

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	461a      	mov	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4413      	add	r3, r2
 }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <Get_Time>:
 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }

 void Get_Time (void)
 {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
 	uint8_t get_time[7];
// 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 8001d8a:	23d0      	movs	r3, #208	; 0xd0
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	2307      	movs	r3, #7
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	463b      	mov	r3, r7
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <Get_Time+0x94>)
 8001d9c:	f002 fe06 	bl	80049ac <HAL_I2C_Mem_Read_DMA>
 	time.seconds = bcdToDec(get_time[0]);
 8001da0:	783b      	ldrb	r3, [r7, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ffd6 	bl	8001d54 <bcdToDec>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <Get_Time+0x98>)
 8001dae:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ffce 	bl	8001d54 <bcdToDec>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <Get_Time+0x98>)
 8001dbe:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffc6 	bl	8001d54 <bcdToDec>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <Get_Time+0x98>)
 8001dce:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffbe 	bl	8001d54 <bcdToDec>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <Get_Time+0x98>)
 8001dde:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 8001de0:	793b      	ldrb	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ffb6 	bl	8001d54 <bcdToDec>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <Get_Time+0x98>)
 8001dee:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ffae 	bl	8001d54 <bcdToDec>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <Get_Time+0x98>)
 8001dfe:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ffa6 	bl	8001d54 <bcdToDec>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <Get_Time+0x98>)
 8001e0e:	719a      	strb	r2, [r3, #6]
 }
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000660 	.word	0x20000660
 8001e1c:	20000fc0 	.word	0x20000fc0

08001e20 <Start_RTC>:

char time_buffer[18];
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	Set_Time(00, 03, 14, 4, 15, 2, 24);
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8001e28:	f7ff ffac 	bl	8001d84 <Get_Time>
	  sprintf(time_buffer, "Time: %02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <Start_RTC+0x34>)
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <Start_RTC+0x34>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <Start_RTC+0x34>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4905      	ldr	r1, [pc, #20]	; (8001e58 <Start_RTC+0x38>)
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <Start_RTC+0x3c>)
 8001e44:	f00d f84a 	bl	800eedc <siprintf>
//	  sprintf ((char*)uart_buffer,"LED Status %d\r",led_status);
//	  send_uart_dma(time_buffer, strlen((char*)time_buffer));
	  osDelay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f00a fb28 	bl	800c4a0 <osDelay>
	  Get_Time();
 8001e50:	e7ea      	b.n	8001e28 <Start_RTC+0x8>
 8001e52:	bf00      	nop
 8001e54:	20000fc0 	.word	0x20000fc0
 8001e58:	0800f750 	.word	0x0800f750
 8001e5c:	20000fc8 	.word	0x20000fc8

08001e60 <send_uart_dma>:
/**
* @brief Function implementing the UART_LEDTask thread.
* @param argument: Not used
* @retval None
*/
void send_uart_dma(uint8_t* ptr, uint16_t len){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 8001e6c:	bf00      	nop
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <send_uart_dma+0x30>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0fb      	beq.n	8001e6e <send_uart_dma+0xe>

	UART_SendFlag=0;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <send_uart_dma+0x30>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <send_uart_dma+0x34>)
 8001e84:	f005 fee6 	bl	8007c54 <HAL_UART_Transmit_DMA>

}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000001 	.word	0x20000001
 8001e94:	2000097c 	.word	0x2000097c

08001e98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_UART_RxCpltCallback+0x40>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b0d      	cmp	r3, #13
 8001ea6:	d007      	beq.n	8001eb8 <HAL_UART_RxCpltCallback+0x20>
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_UART_RxCpltCallback+0x40>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d003      	beq.n	8001eb8 <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_UART_RxCpltCallback+0x40>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_UART_RxCpltCallback+0x44>)
 8001eb6:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_UART_RxCpltCallback+0x40>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b0d      	cmp	r3, #13
 8001ebe:	d102      	bne.n	8001ec6 <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_UART_RxCpltCallback+0x48>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_UART_RxCpltCallback+0x40>)
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_UART_RxCpltCallback+0x4c>)
 8001ecc:	f005 ff40 	bl	8007d50 <HAL_UART_Receive_DMA>

}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000fbc 	.word	0x20000fbc
 8001edc:	20000fbd 	.word	0x20000fbd
 8001ee0:	20000fbe 	.word	0x20000fbe
 8001ee4:	2000097c 	.word	0x2000097c

08001ee8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_UART_TxCpltCallback+0x1c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000001 	.word	0x20000001

08001f08 <Start_UART_LED>:
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <Start_UART_LED+0x84>)
 8001f12:	f7fe f96d 	bl	80001f0 <strlen>
 8001f16:	4603      	mov	r3, r0
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481b      	ldr	r0, [pc, #108]	; (8001f8c <Start_UART_LED+0x84>)
 8001f1e:	f7ff ff9f 	bl	8001e60 <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8001f22:	2201      	movs	r2, #1
 8001f24:	491a      	ldr	r1, [pc, #104]	; (8001f90 <Start_UART_LED+0x88>)
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <Start_UART_LED+0x8c>)
 8001f28:	f005 ff12 	bl	8007d50 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <Start_UART_LED+0x90>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d026      	beq.n	8001f82 <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <Start_UART_LED+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

	      	//process command
	      	switch (cmd){
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <Start_UART_LED+0x94>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b33      	cmp	r3, #51	; 0x33
 8001f40:	d010      	beq.n	8001f64 <Start_UART_LED+0x5c>
 8001f42:	2b33      	cmp	r3, #51	; 0x33
 8001f44:	dc14      	bgt.n	8001f70 <Start_UART_LED+0x68>
 8001f46:	2b31      	cmp	r3, #49	; 0x31
 8001f48:	d002      	beq.n	8001f50 <Start_UART_LED+0x48>
 8001f4a:	2b32      	cmp	r3, #50	; 0x32
 8001f4c:	d005      	beq.n	8001f5a <Start_UART_LED+0x52>
 8001f4e:	e00f      	b.n	8001f70 <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8001f50:	2101      	movs	r1, #1
 8001f52:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <Start_UART_LED+0x98>)
 8001f54:	f002 fbcb 	bl	80046ee <HAL_GPIO_TogglePin>
	      		break;
 8001f58:	e00a      	b.n	8001f70 <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <Start_UART_LED+0x98>)
 8001f5e:	f002 fbc6 	bl	80046ee <HAL_GPIO_TogglePin>
	      		break;
 8001f62:	e005      	b.n	8001f70 <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8001f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <Start_UART_LED+0x98>)
 8001f6a:	f002 fbc0 	bl	80046ee <HAL_GPIO_TogglePin>
	      		break;
 8001f6e:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <Start_UART_LED+0x84>)
 8001f72:	f7fe f93d 	bl	80001f0 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <Start_UART_LED+0x84>)
 8001f7e:	f7ff ff6f 	bl	8001e60 <send_uart_dma>

	      	}

    osDelay(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f00a fa8c 	bl	800c4a0 <osDelay>
	  if(cmdstate){
 8001f88:	e7d0      	b.n	8001f2c <Start_UART_LED+0x24>
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000fbc 	.word	0x20000fbc
 8001f94:	2000097c 	.word	0x2000097c
 8001f98:	20000fbe 	.word	0x20000fbe
 8001f9c:	20000fbd 	.word	0x20000fbd
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <bufsize>:
void send_uart (char *string){
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart3,(uint8_t *)string,len,2000);
}

int bufsize(char *buf){
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	int i=0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 8001fb0:	e002      	b.n	8001fb8 <bufsize+0x14>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f6      	bne.n	8001fb2 <bufsize+0xe>
	return i;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <bufclear>:

void bufclear(void){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	e007      	b.n	8001ff0 <bufclear+0x1c>
		SD_buffer[i]= '\0';
 8001fe0:	4a09      	ldr	r2, [pc, #36]	; (8002008 <bufclear+0x34>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3301      	adds	r3, #1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	dbf3      	blt.n	8001fe0 <bufclear+0xc>
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20003048 	.word	0x20003048

0800200c <Start_DataLogging>:
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
	fresult = f_mount(&fs,"",0);
 8002014:	2200      	movs	r2, #0
 8002016:	492f      	ldr	r1, [pc, #188]	; (80020d4 <Start_DataLogging+0xc8>)
 8002018:	482f      	ldr	r0, [pc, #188]	; (80020d8 <Start_DataLogging+0xcc>)
 800201a:	f009 f961 	bl	800b2e0 <f_mount>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <Start_DataLogging+0xd0>)
 8002024:	701a      	strb	r2, [r3, #0]
//	fresult = f_open(&fil,"file1.txt",FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
//	strcpy(SD_buffer,"This data is from file\n\n");
//	fresult = f_write(&fil,SD_buffer,bufsize(SD_buffer),&bw);
//	fresult = f_close(&fil);
//	bufclear();
	unsigned long ptr = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	fresult = f_open(&fil,"datalog.txt",FA_OPEN_ALWAYS|FA_WRITE);
 800202a:	2212      	movs	r2, #18
 800202c:	492c      	ldr	r1, [pc, #176]	; (80020e0 <Start_DataLogging+0xd4>)
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <Start_DataLogging+0xd8>)
 8002030:	f009 f9ba 	bl	800b3a8 <f_open>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <Start_DataLogging+0xd0>)
 800203a:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil, ptr);
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	4829      	ldr	r0, [pc, #164]	; (80020e4 <Start_DataLogging+0xd8>)
 8002040:	f009 fe00 	bl	800bc44 <f_lseek>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <Start_DataLogging+0xd0>)
 800204a:	701a      	strb	r2, [r3, #0]
	fresult = f_puts(time_buffer,&fil);
 800204c:	4925      	ldr	r1, [pc, #148]	; (80020e4 <Start_DataLogging+0xd8>)
 800204e:	4826      	ldr	r0, [pc, #152]	; (80020e8 <Start_DataLogging+0xdc>)
 8002050:	f00a f8dd 	bl	800c20e <f_puts>
 8002054:	4603      	mov	r3, r0
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <Start_DataLogging+0xd0>)
 800205a:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(time_buffer);
 800205c:	4822      	ldr	r0, [pc, #136]	; (80020e8 <Start_DataLogging+0xdc>)
 800205e:	f7ff ffa1 	bl	8001fa4 <bufsize>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(", ",&fil);
 800206c:	491d      	ldr	r1, [pc, #116]	; (80020e4 <Start_DataLogging+0xd8>)
 800206e:	481f      	ldr	r0, [pc, #124]	; (80020ec <Start_DataLogging+0xe0>)
 8002070:	f00a f8cd 	bl	800c20e <f_puts>
 8002074:	4603      	mov	r3, r0
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <Start_DataLogging+0xd0>)
 800207a:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3302      	adds	r3, #2
 8002080:	60fb      	str	r3, [r7, #12]
	fresult = f_puts(fan_speed,&fil);
 8002082:	4918      	ldr	r1, [pc, #96]	; (80020e4 <Start_DataLogging+0xd8>)
 8002084:	481a      	ldr	r0, [pc, #104]	; (80020f0 <Start_DataLogging+0xe4>)
 8002086:	f00a f8c2 	bl	800c20e <f_puts>
 800208a:	4603      	mov	r3, r0
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <Start_DataLogging+0xd0>)
 8002090:	701a      	strb	r2, [r3, #0]
	ptr+=bufsize(fan_speed);
 8002092:	4817      	ldr	r0, [pc, #92]	; (80020f0 <Start_DataLogging+0xe4>)
 8002094:	f7ff ff86 	bl	8001fa4 <bufsize>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
	fresult = f_puts("\n",&fil);
 80020a2:	4910      	ldr	r1, [pc, #64]	; (80020e4 <Start_DataLogging+0xd8>)
 80020a4:	4813      	ldr	r0, [pc, #76]	; (80020f4 <Start_DataLogging+0xe8>)
 80020a6:	f00a f8b2 	bl	800c20e <f_puts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <Start_DataLogging+0xd0>)
 80020b0:	701a      	strb	r2, [r3, #0]
	ptr+=2;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3302      	adds	r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
//	fresult = f_write(&fil,time_buffer,bufsize(time_buffer),&bw);
	fresult = f_close(&fil);
 80020b8:	480a      	ldr	r0, [pc, #40]	; (80020e4 <Start_DataLogging+0xd8>)
 80020ba:	f009 fd94 	bl	800bbe6 <f_close>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <Start_DataLogging+0xd0>)
 80020c4:	701a      	strb	r2, [r3, #0]
	bufclear();
 80020c6:	f7ff ff85 	bl	8001fd4 <bufclear>
//	fresult = f_puts(time_buffer,&fil);
//	fresult = f_puts(",",&fil);
//	//fresult = f_puts(fan_speed,&fil);
//	fresult = f_puts("\n\n",&fil);
////	fresult = f_close(&fil);
    osDelay(50);
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f00a f9e8 	bl	800c4a0 <osDelay>
	fresult = f_open(&fil,"datalog.txt",FA_OPEN_ALWAYS|FA_WRITE);
 80020d0:	e7ab      	b.n	800202a <Start_DataLogging+0x1e>
 80020d2:	bf00      	nop
 80020d4:	0800f768 	.word	0x0800f768
 80020d8:	20000fdc 	.word	0x20000fdc
 80020dc:	20003044 	.word	0x20003044
 80020e0:	0800f76c 	.word	0x0800f76c
 80020e4:	20002014 	.word	0x20002014
 80020e8:	20000fc8 	.word	0x20000fc8
 80020ec:	0800f778 	.word	0x0800f778
 80020f0:	20000fa8 	.word	0x20000fa8
 80020f4:	0800f77c 	.word	0x0800f77c

080020f8 <Start_FanControl>:
#define MAXTEMP 35
#define MINTEMP 29

/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
	uint8_t dutyCycle = 50;
 8002100:	2332      	movs	r3, #50	; 0x32
 8002102:	73fb      	strb	r3, [r7, #15]
	TIM1->CCR1 = dutyCycle;
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <Start_FanControl+0x94>)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800210a:	2100      	movs	r1, #0
 800210c:	4820      	ldr	r0, [pc, #128]	; (8002190 <Start_FanControl+0x98>)
 800210e:	f004 fddf 	bl	8006cd0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	if(temperature>MAXTEMP){
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <Start_FanControl+0x9c>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002198 <Start_FanControl+0xa0>
 800211c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dd02      	ble.n	800212c <Start_FanControl+0x34>
		dutyCycle = 100;
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e021      	b.n	8002170 <Start_FanControl+0x78>
	}
	else if(temperature<MINTEMP){
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <Start_FanControl+0x9c>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	d502      	bpl.n	8002146 <Start_FanControl+0x4e>
		dutyCycle = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e014      	b.n	8002170 <Start_FanControl+0x78>
	}
	else{
	dutyCycle = ((temperature - MINTEMP)/(MAXTEMP-MINTEMP))*100;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <Start_FanControl+0x9c>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002150:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002154:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800219c <Start_FanControl+0xa4>
 8002160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002168:	edc7 7a00 	vstr	s15, [r7]
 800216c:	783b      	ldrb	r3, [r7, #0]
 800216e:	73fb      	strb	r3, [r7, #15]
	}
	TIM1->CCR1 = dutyCycle;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <Start_FanControl+0x94>)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	6353      	str	r3, [r2, #52]	; 0x34
	sprintf(fan_speed,"Fan Speed : %02d",dutyCycle);
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	461a      	mov	r2, r3
 800217a:	4909      	ldr	r1, [pc, #36]	; (80021a0 <Start_FanControl+0xa8>)
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <Start_FanControl+0xac>)
 800217e:	f00c fead 	bl	800eedc <siprintf>
    osDelay(20);
 8002182:	2014      	movs	r0, #20
 8002184:	f00a f98c 	bl	800c4a0 <osDelay>
	if(temperature>MAXTEMP){
 8002188:	e7c3      	b.n	8002112 <Start_FanControl+0x1a>
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	2000088c 	.word	0x2000088c
 8002194:	20000fa4 	.word	0x20000fa4
 8002198:	420c0000 	.word	0x420c0000
 800219c:	42c80000 	.word	0x42c80000
 80021a0:	0800f780 	.word	0x0800f780
 80021a4:	20000fa8 	.word	0x20000fa8

080021a8 <Start_Temp>:


char string[64];
/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
	DS18B20_Init(DS18B20_Resolution_12bits);
 80021b0:	200c      	movs	r0, #12
 80021b2:	f7fe fc13 	bl	80009dc <DS18B20_Init>

  for(;;)
  {
	DS18B20_ReadAll();
 80021b6:	f7fe fb75 	bl	80008a4 <DS18B20_ReadAll>
	DS18B20_StartAll();
 80021ba:	f7fe f9f3 	bl	80005a4 <DS18B20_StartAll>
	uint8_t ROM_tmp[8];
	uint8_t i;
	  for(i = 0; i < DS18B20_Quantity(); i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
 80021c2:	e011      	b.n	80021e8 <Start_Temp+0x40>
		{
			if(DS18B20_GetTemperature(i, &temperature))
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <Start_Temp+0x58>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fbe5 	bl	8000998 <DS18B20_GetTemperature>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <Start_Temp+0x3a>
			{
				  DS18B20_GetROM(i, ROM_tmp);
 80021d4:	f107 020c 	add.w	r2, r7, #12
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fba1 	bl	8000924 <DS18B20_GetROM>
	  for(i = 0; i < DS18B20_Quantity(); i++)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	3301      	adds	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
 80021e8:	f7fe fbca 	bl	8000980 <DS18B20_Quantity>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d3e6      	bcc.n	80021c4 <Start_Temp+0x1c>
			}
		}

    osDelay(10);
 80021f6:	200a      	movs	r0, #10
 80021f8:	f00a f952 	bl	800c4a0 <osDelay>
  {
 80021fc:	e7db      	b.n	80021b6 <Start_Temp+0xe>
 80021fe:	bf00      	nop
 8002200:	20000fa4 	.word	0x20000fa4

08002204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d101      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002216:	f001 f831 	bl	800327c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002226:	b672      	cpsid	i
}
 8002228:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222a:	e7fe      	b.n	800222a <Error_Handler+0x8>

0800222c <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <OneWire_Delay+0x30>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800223e:	bf00      	nop
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <OneWire_Delay+0x30>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	429a      	cmp	r2, r3
 800224a:	d9f9      	bls.n	8002240 <OneWire_Delay+0x14>
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	200008d4 	.word	0x200008d4

08002260 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002270:	2301      	movs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	889b      	ldrh	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f855 	bl	8004334 <HAL_GPIO_Init>
}
 800228a:	bf00      	nop
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800229a:	2311      	movs	r3, #17
 800229c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	889b      	ldrh	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f107 020c 	add.w	r2, r7, #12
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 f83c 	bl	8004334 <HAL_GPIO_Init>
}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	889b      	ldrh	r3, [r3, #4]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	619a      	str	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	889a      	ldrh	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffda 	bl	80022c4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffbe 	bl	8002292 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8002316:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800231a:	f7ff ff87 	bl	800222c <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff9e 	bl	8002260 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002324:	2046      	movs	r0, #70	; 0x46
 8002326:	f7ff ff81 	bl	800222c <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f002 f9a9 	bl	800468c <HAL_GPIO_ReadPin>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 800233e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002342:	f7ff ff73 	bl	800222c <OneWire_Delay>

	return i;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00f      	beq.n	8002382 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffae 	bl	80022c4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff92 	bl	8002292 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 800236e:	2006      	movs	r0, #6
 8002370:	f7ff ff5c 	bl	800222c <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff73 	bl	8002260 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 800237a:	2040      	movs	r0, #64	; 0x40
 800237c:	f7ff ff56 	bl	800222c <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002380:	e00e      	b.n	80023a0 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff9e 	bl	80022c4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff82 	bl	8002292 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 800238e:	203c      	movs	r0, #60	; 0x3c
 8002390:	f7ff ff4c 	bl	800222c <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff63 	bl	8002260 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 800239a:	200a      	movs	r0, #10
 800239c:	f7ff ff46 	bl	800222c <OneWire_Delay>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff85 	bl	80022c4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff69 	bl	8002292 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff ff33 	bl	800222c <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff4a 	bl	8002260 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80023cc:	200a      	movs	r0, #10
 80023ce:	f7ff ff2d 	bl	800222c <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	889b      	ldrh	r3, [r3, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f002 f955 	bl	800468c <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <OneWire_ReadBit+0x44>
		bit = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 80023ec:	2032      	movs	r0, #50	; 0x32
 80023ee:	f7ff ff1d 	bl	800222c <OneWire_Delay>

	return bit;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002408:	2308      	movs	r3, #8
 800240a:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff9a 	bl	8002350 <OneWire_WriteBit>
		byte >>= 1;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3b01      	subs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <OneWire_WriteByte+0x10>
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002440:	2308      	movs	r3, #8
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	2300      	movs	r3, #0
 8002446:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffaa 	bl	80023a8 <OneWire_ReadBit>
 8002454:	4603      	mov	r3, r0
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	b25a      	sxtb	r2, r3
 800245a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800245e:	4313      	orrs	r3, r2
 8002460:	b25b      	sxtb	r3, r3
 8002462:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3b01      	subs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1eb      	bne.n	8002448 <OneWire_ReadByte+0x10>

	return byte;
 8002470:	7bbb      	ldrb	r3, [r7, #14]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	71da      	strb	r2, [r3, #7]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7a1b      	ldrb	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 809a 	bne.w	80025fe <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff19 	bl	8002302 <OneWire_Reset>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	71da      	strb	r2, [r3, #7]
			return 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e09b      	b.n	8002624 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff83 	bl	80023fc <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff56 	bl	80023a8 <OneWire_ReadBit>
 80024fc:	4603      	mov	r3, r0
 80024fe:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff51 	bl	80023a8 <OneWire_ReadBit>
 8002506:	4603      	mov	r3, r0
 8002508:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800250a:	7a7b      	ldrb	r3, [r7, #9]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d102      	bne.n	8002516 <OneWire_Search+0x76>
 8002510:	7a3b      	ldrb	r3, [r7, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d064      	beq.n	80025e0 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8002516:	7a7a      	ldrb	r2, [r7, #9]
 8002518:	7a3b      	ldrb	r3, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	d002      	beq.n	8002524 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	72bb      	strb	r3, [r7, #10]
 8002522:	e026      	b.n	8002572 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	799b      	ldrb	r3, [r3, #6]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	429a      	cmp	r2, r3
 800252c:	d20d      	bcs.n	800254a <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800252e:	7b7b      	ldrb	r3, [r7, #13]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	7a5a      	ldrb	r2, [r3, #9]
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	4013      	ands	r3, r2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	72bb      	strb	r3, [r7, #10]
 8002548:	e008      	b.n	800255c <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	799b      	ldrb	r3, [r3, #6]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	429a      	cmp	r2, r3
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 800255c:	7abb      	ldrb	r3, [r7, #10]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d802      	bhi.n	8002572 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7bba      	ldrb	r2, [r7, #14]
 8002570:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8002572:	7abb      	ldrb	r3, [r7, #10]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d10c      	bne.n	8002592 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002578:	7b7b      	ldrb	r3, [r7, #13]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	7a59      	ldrb	r1, [r3, #9]
 8002580:	7b7b      	ldrb	r3, [r7, #13]
 8002582:	7afa      	ldrb	r2, [r7, #11]
 8002584:	430a      	orrs	r2, r1
 8002586:	b2d1      	uxtb	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	460a      	mov	r2, r1
 800258e:	725a      	strb	r2, [r3, #9]
 8002590:	e010      	b.n	80025b4 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	7a5b      	ldrb	r3, [r3, #9]
 800259a:	b25a      	sxtb	r2, r3
 800259c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	b25a      	sxtb	r2, r3
 80025a8:	7b7b      	ldrb	r3, [r7, #13]
 80025aa:	b2d1      	uxtb	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	460a      	mov	r2, r1
 80025b2:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80025b4:	7abb      	ldrb	r3, [r7, #10]
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fec9 	bl	8002350 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80025d0:	7b7b      	ldrb	r3, [r7, #13]
 80025d2:	3301      	adds	r3, #1
 80025d4:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80025d6:	2301      	movs	r3, #1
 80025d8:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	2b07      	cmp	r3, #7
 80025de:	d98a      	bls.n	80024f6 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d90b      	bls.n	80025fe <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7bba      	ldrb	r2, [r7, #14]
 80025ea:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	799b      	ldrb	r3, [r3, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 80025fa:	2301      	movs	r3, #1
 80025fc:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 80025fe:	7b3b      	ldrb	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <OneWire_Search+0x16c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7a5b      	ldrb	r3, [r3, #9]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8002622:	7b3b      	ldrb	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff20 	bl	800247a <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800263a:	21f0      	movs	r1, #240	; 0xf0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff2f 	bl	80024a0 <OneWire_Search>
 8002642:	4603      	mov	r3, r0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002654:	21f0      	movs	r1, #240	; 0xf0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff22 	bl	80024a0 <OneWire_Search>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002670:	2155      	movs	r1, #85	; 0x55
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fec2 	bl	80023fc <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e00a      	b.n	8002694 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff feb7 	bl	80023fc <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	3301      	adds	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b07      	cmp	r3, #7
 8002698:	d9f1      	bls.n	800267e <OneWire_SelectWithPointer+0x18>
	}
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e00a      	b.n	80026ca <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	440b      	add	r3, r1
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	440a      	add	r2, r1
 80026c0:	7a52      	ldrb	r2, [r2, #9]
 80026c2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	3301      	adds	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b07      	cmp	r3, #7
 80026ce:	d9f1      	bls.n	80026b4 <OneWire_GetFullROM+0x10>
	}
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80026ee:	4811      	ldr	r0, [pc, #68]	; (8002734 <OneWire_Init+0x54>)
 80026f0:	f004 f9bc 	bl	8006a6c <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fdc6 	bl	8002292 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fdec 	bl	80022e4 <OneWire_OutputHigh>
	HAL_Delay(100);
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	f000 fdd5 	bl	80032bc <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fdd6 	bl	80022c4 <OneWire_OutputLow>
	HAL_Delay(100);
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f000 fdcf 	bl	80032bc <HAL_Delay>
	OneWire_OutputHigh(onewire);
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff fde0 	bl	80022e4 <OneWire_OutputHigh>
	HAL_Delay(200);
 8002724:	20c8      	movs	r0, #200	; 0xc8
 8002726:	f000 fdc9 	bl	80032bc <HAL_Delay>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200008d4 	.word	0x200008d4

08002738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_MspInit+0x54>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_MspInit+0x54>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_MspInit+0x54>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_MspInit+0x54>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_MspInit+0x54>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_MspInit+0x54>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	210f      	movs	r1, #15
 800277a:	f06f 0001 	mvn.w	r0, #1
 800277e:	f000 fe79 	bl	8003474 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	; 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a55      	ldr	r2, [pc, #340]	; (8002904 <HAL_ETH_MspInit+0x174>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f040 80a4 	bne.w	80028fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c2:	6313      	str	r3, [r2, #48]	; 0x30
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4a4b      	ldr	r2, [pc, #300]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027de:	6313      	str	r3, [r2, #48]	; 0x30
 80027e0:	4b49      	ldr	r3, [pc, #292]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a44      	ldr	r2, [pc, #272]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <HAL_ETH_MspInit+0x178>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6313      	str	r3, [r2, #48]	; 0x30
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a36      	ldr	r2, [pc, #216]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_ETH_MspInit+0x178>)
 8002866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_ETH_MspInit+0x178>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002878:	2332      	movs	r3, #50	; 0x32
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002888:	230b      	movs	r3, #11
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4619      	mov	r1, r3
 8002892:	481e      	ldr	r0, [pc, #120]	; (800290c <HAL_ETH_MspInit+0x17c>)
 8002894:	f001 fd4e 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002898:	2386      	movs	r3, #134	; 0x86
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028a8:	230b      	movs	r3, #11
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4817      	ldr	r0, [pc, #92]	; (8002910 <HAL_ETH_MspInit+0x180>)
 80028b4:	f001 fd3e 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ca:	230b      	movs	r3, #11
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	4619      	mov	r1, r3
 80028d4:	480f      	ldr	r0, [pc, #60]	; (8002914 <HAL_ETH_MspInit+0x184>)
 80028d6:	f001 fd2d 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80028da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ec:	230b      	movs	r3, #11
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	4808      	ldr	r0, [pc, #32]	; (8002918 <HAL_ETH_MspInit+0x188>)
 80028f8:	f001 fd1c 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80028fc:	bf00      	nop
 80028fe:	3738      	adds	r7, #56	; 0x38
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40028000 	.word	0x40028000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020800 	.word	0x40020800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40021800 	.word	0x40021800

0800291c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a47      	ldr	r2, [pc, #284]	; (8002a58 <HAL_I2C_MspInit+0x13c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f040 8088 	bne.w	8002a50 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800295c:	2303      	movs	r3, #3
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002960:	2312      	movs	r3, #18
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800296c:	2304      	movs	r3, #4
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	483a      	ldr	r0, [pc, #232]	; (8002a60 <HAL_I2C_MspInit+0x144>)
 8002978:	f001 fcdc 	bl	8004334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 8002986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_I2C_MspInit+0x140>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_I2C_MspInit+0x14c>)
 800299c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029a0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80029a4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80029d8:	4822      	ldr	r0, [pc, #136]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029da:	f000 fd75 	bl	80034c8 <HAL_DMA_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80029e4:	f7ff fc1d 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_I2C_MspInit+0x148>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_I2C_MspInit+0x154>)
 80029f8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 80029fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a14:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a36:	f000 fd47 	bl	80034c8 <HAL_DMA_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8002a40:	f7ff fbef 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_I2C_MspInit+0x150>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40005800 	.word	0x40005800
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40021400 	.word	0x40021400
 8002a64:	200006b4 	.word	0x200006b4
 8002a68:	40026058 	.word	0x40026058
 8002a6c:	20000714 	.word	0x20000714
 8002a70:	400260b8 	.word	0x400260b8

08002a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a57      	ldr	r2, [pc, #348]	; (8002bf0 <HAL_SPI_MspInit+0x17c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 80a8 	bne.w	8002be8 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa6:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa8:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a4d      	ldr	r2, [pc, #308]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae0:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <HAL_SPI_MspInit+0x180>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002aec:	2370      	movs	r3, #112	; 0x70
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002afc:	2305      	movs	r3, #5
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	483c      	ldr	r0, [pc, #240]	; (8002bf8 <HAL_SPI_MspInit+0x184>)
 8002b08:	f001 fc14 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4619      	mov	r1, r3
 8002b26:	4835      	ldr	r0, [pc, #212]	; (8002bfc <HAL_SPI_MspInit+0x188>)
 8002b28:	f001 fc04 	bl	8004334 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b2e:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <HAL_SPI_MspInit+0x190>)
 8002b30:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002b32:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b34:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b38:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3a:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b5a:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b66:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b6e:	4824      	ldr	r0, [pc, #144]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b70:	f000 fcaa 	bl	80034c8 <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002b7a:	f7ff fb52 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b82:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_SPI_MspInit+0x18c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_SPI_MspInit+0x198>)
 8002b8e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002b92:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b96:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002baa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bcc:	480e      	ldr	r0, [pc, #56]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002bce:	f000 fc7b 	bl	80034c8 <HAL_DMA_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002bd8:	f7ff fb23 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002be0:	649a      	str	r2, [r3, #72]	; 0x48
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_SPI_MspInit+0x194>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002be8:	bf00      	nop
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013000 	.word	0x40013000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	200007cc 	.word	0x200007cc
 8002c04:	40026440 	.word	0x40026440
 8002c08:	2000082c 	.word	0x2000082c
 8002c0c:	40026488 	.word	0x40026488

08002c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2c      	ldr	r2, [pc, #176]	; (8002cd0 <HAL_TIM_Base_MspInit+0xc0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d13e      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_TIM_Base_MspInit+0xcc>)
 8002c42:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c46:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002c4a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c84:	f000 fc20 	bl	80034c8 <HAL_DMA_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002c8e:	f7ff fac8 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_TIM_Base_MspInit+0xc8>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c9e:	e012      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_TIM_Base_MspInit+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	2000091c 	.word	0x2000091c
 8002cdc:	40026428 	.word	0x40026428
 8002ce0:	40000400 	.word	0x40000400

08002ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_TIM_MspPostInit+0x68>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d11e      	bne.n	8002d44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_TIM_MspPostInit+0x6c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <HAL_TIM_MspPostInit+0x6c>)
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_TIM_MspPostInit+0x6c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <HAL_TIM_MspPostInit+0x70>)
 8002d40:	f001 faf8 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d44:	bf00      	nop
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_UART_MspInit+0x154>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 8093 	bne.w	8002ea2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_UART_MspInit+0x158>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002db4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4838      	ldr	r0, [pc, #224]	; (8002eb4 <HAL_UART_MspInit+0x15c>)
 8002dd2:	f001 faaf 	bl	8004334 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <HAL_UART_MspInit+0x164>)
 8002dda:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dea:	4b33      	ldr	r3, [pc, #204]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e10:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e18:	4827      	ldr	r0, [pc, #156]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e1a:	f000 fb55 	bl	80034c8 <HAL_DMA_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002e24:	f7ff f9fd 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_UART_MspInit+0x160>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <HAL_UART_MspInit+0x16c>)
 8002e38:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e3c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002e40:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e54:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e6e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e76:	4812      	ldr	r0, [pc, #72]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e78:	f000 fb26 	bl	80034c8 <HAL_DMA_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002e82:	f7ff f9ce 	bl	8002222 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_UART_MspInit+0x168>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2105      	movs	r1, #5
 8002e96:	2027      	movs	r0, #39	; 0x27
 8002e98:	f000 faec 	bl	8003474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e9c:	2027      	movs	r0, #39	; 0x27
 8002e9e:	f000 fb05 	bl	80034ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	; 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	200009c0 	.word	0x200009c0
 8002ebc:	40026028 	.word	0x40026028
 8002ec0:	20000a20 	.word	0x20000a20
 8002ec4:	40026070 	.word	0x40026070

08002ec8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee8:	d13f      	bne.n	8002f6a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f18:	230a      	movs	r3, #10
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4619      	mov	r1, r3
 8002f22:	4815      	ldr	r0, [pc, #84]	; (8002f78 <HAL_PCD_MspInit+0xb0>)
 8002f24:	f001 fa06 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480e      	ldr	r0, [pc, #56]	; (8002f78 <HAL_PCD_MspInit+0xb0>)
 8002f3e:	f001 f9f9 	bl	8004334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	6353      	str	r3, [r2, #52]	; 0x34
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_PCD_MspInit+0xac>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f6a:	bf00      	nop
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020000 	.word	0x40020000

08002f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_InitTick+0xe8>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_InitTick+0xe8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_InitTick+0xe8>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa8:	f107 0210 	add.w	r2, r7, #16
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 f898 	bl	80060e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fc2:	f003 f869 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8002fc6:	6378      	str	r0, [r7, #52]	; 0x34
 8002fc8:	e004      	b.n	8002fd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fca:	f003 f865 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_InitTick+0xec>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_InitTick+0xf0>)
 8002fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_InitTick+0xf0>)
 8002fec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ff0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_InitTick+0xf0>)
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_InitTick+0xf0>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_InitTick+0xf0>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_InitTick+0xf0>)
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800300a:	4818      	ldr	r0, [pc, #96]	; (800306c <HAL_InitTick+0xf0>)
 800300c:	f003 fcde 	bl	80069cc <HAL_TIM_Base_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11b      	bne.n	8003056 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800301e:	4813      	ldr	r0, [pc, #76]	; (800306c <HAL_InitTick+0xf0>)
 8003020:	f003 fd8c 	bl	8006b3c <HAL_TIM_Base_Start_IT>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800302a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800302e:	2b00      	cmp	r3, #0
 8003030:	d111      	bne.n	8003056 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003032:	201c      	movs	r0, #28
 8003034:	f000 fa3a 	bl	80034ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d808      	bhi.n	8003050 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800303e:	2200      	movs	r2, #0
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	201c      	movs	r0, #28
 8003044:	f000 fa16 	bl	8003474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_InitTick+0xf4>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e002      	b.n	8003056 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800305a:	4618      	mov	r0, r3
 800305c:	3738      	adds	r7, #56	; 0x38
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	431bde83 	.word	0x431bde83
 800306c:	20003450 	.word	0x20003450
 8003070:	2000008c 	.word	0x2000008c

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <NMI_Handler+0x4>

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <DMA1_Stream1_IRQHandler+0x10>)
 80030a6:	f000 fba7 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200009c0 	.word	0x200009c0

080030b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <DMA1_Stream3_IRQHandler+0x10>)
 80030ba:	f000 fb9d 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200006b4 	.word	0x200006b4

080030c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <DMA1_Stream4_IRQHandler+0x10>)
 80030ce:	f000 fb93 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000a20 	.word	0x20000a20

080030dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <TIM2_IRQHandler+0x10>)
 80030e2:	f003 febd 	bl	8006e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20003450 	.word	0x20003450

080030f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <USART3_IRQHandler+0x10>)
 80030f6:	f004 fe5b 	bl	8007db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000097c 	.word	0x2000097c

08003104 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <DMA1_Stream7_IRQHandler+0x10>)
 800310a:	f000 fb75 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000714 	.word	0x20000714

08003118 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <DMA2_Stream1_IRQHandler+0x10>)
 800311e:	f000 fb6b 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000091c 	.word	0x2000091c

0800312c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA2_Stream2_IRQHandler+0x10>)
 8003132:	f000 fb61 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200007cc 	.word	0x200007cc

08003140 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <DMA2_Stream5_IRQHandler+0x10>)
 8003146:	f000 fb57 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000082c 	.word	0x2000082c

08003154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003184:	f00b fd5a 	bl	800ec3c <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	220c      	movs	r2, #12
 800318c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	e009      	b.n	80031a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <_sbrk+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <_sbrk+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20030000 	.word	0x20030000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	2000349c 	.word	0x2000349c
 80031bc:	20007288 	.word	0x20007288

080031c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <SystemInit+0x20>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <SystemInit+0x20>)
 80031cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800321c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ea:	490e      	ldr	r1, [pc, #56]	; (8003224 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f0:	e002      	b.n	80031f8 <LoopCopyDataInit>

080031f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f6:	3304      	adds	r3, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031fc:	d3f9      	bcc.n	80031f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003200:	4c0b      	ldr	r4, [pc, #44]	; (8003230 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003204:	e001      	b.n	800320a <LoopFillZerobss>

08003206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003208:	3204      	adds	r2, #4

0800320a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800320c:	d3fb      	bcc.n	8003206 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800320e:	f7ff ffd7 	bl	80031c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003212:	f00b fd19 	bl	800ec48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7fe f927 	bl	8001468 <main>
  bx  lr    
 800321a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800321c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003224:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003228:	0800f924 	.word	0x0800f924
  ldr r2, =_sbss
 800322c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8003230:	20007284 	.word	0x20007284

08003234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC_IRQHandler>
	...

08003238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <HAL_Init+0x40>)
 8003242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_Init+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_Init+0x40>)
 800324e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_Init+0x40>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_Init+0x40>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003260:	2003      	movs	r0, #3
 8003262:	f000 f8fc 	bl	800345e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003266:	200f      	movs	r0, #15
 8003268:	f7ff fe88 	bl	8002f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800326c:	f7ff fa64 	bl	8002738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000090 	.word	0x20000090
 80032a0:	200034a0 	.word	0x200034a0

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200034a0 	.word	0x200034a0

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff ffee 	bl	80032a4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffde 	bl	80032a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000090 	.word	0x20000090

08003304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003320:	4013      	ands	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800332c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60d3      	str	r3, [r2, #12]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <__NVIC_GetPriorityGrouping+0x18>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0307 	and.w	r3, r3, #7
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db0b      	blt.n	8003392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	4907      	ldr	r1, [pc, #28]	; (80033a0 <__NVIC_EnableIRQ+0x38>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2001      	movs	r0, #1
 800338a:	fa00 f202 	lsl.w	r2, r0, r2
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff4c 	bl	8003304 <__NVIC_SetPriorityGrouping>
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003486:	f7ff ff61 	bl	800334c <__NVIC_GetPriorityGrouping>
 800348a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f7ff ffb1 	bl	80033f8 <NVIC_EncodePriority>
 8003496:	4602      	mov	r2, r0
 8003498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff80 	bl	80033a4 <__NVIC_SetPriority>
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff54 	bl	8003368 <__NVIC_EnableIRQ>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff fee6 	bl	80032a4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e099      	b.n	8003618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003504:	e00f      	b.n	8003526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003506:	f7ff fecd 	bl	80032a4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b05      	cmp	r3, #5
 8003512:	d908      	bls.n	8003526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e078      	b.n	8003618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e8      	bne.n	8003506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_DMA_Init+0x158>)
 8003540:	4013      	ands	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4313      	orrs	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d117      	bne.n	80035ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb0d 	bl	8003bec <DMA_CheckFifoParam>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035e6:	2301      	movs	r3, #1
 80035e8:	e016      	b.n	8003618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fac4 	bl	8003b80 <DMA_CalcBaseAndBitshift>
 80035f8:	4603      	mov	r3, r0
 80035fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	223f      	movs	r2, #63	; 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	f010803f 	.word	0xf010803f

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DMA_Start_IT+0x26>
 8003646:	2302      	movs	r3, #2
 8003648:	e040      	b.n	80036cc <HAL_DMA_Start_IT+0xa8>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d12f      	bne.n	80036be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa56 	bl	8003b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0216 	orr.w	r2, r2, #22
 8003692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e005      	b.n	80036ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036e2:	f7ff fddf 	bl	80032a4 <HAL_GetTick>
 80036e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e052      	b.n	80037ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0216 	bic.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_DMA_Abort+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003756:	e013      	b.n	8003780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003758:	f7ff fda4 	bl	80032a4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d90c      	bls.n	8003780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e015      	b.n	80037ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e4      	bne.n	8003758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	223f      	movs	r2, #63	; 0x3f
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00c      	b.n	80037ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2205      	movs	r2, #5
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003804:	4b8e      	ldr	r3, [pc, #568]	; (8003a40 <HAL_DMA_IRQHandler+0x248>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a8e      	ldr	r2, [pc, #568]	; (8003a44 <HAL_DMA_IRQHandler+0x24c>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2208      	movs	r2, #8
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	2208      	movs	r2, #8
 8003852:	409a      	lsls	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2201      	movs	r2, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2204      	movs	r2, #4
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2210      	movs	r2, #16
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d043      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03c      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2210      	movs	r2, #16
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d024      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
 8003926:	e01f      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
 8003938:	e016      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2220      	movs	r2, #32
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 808f 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8087 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	2220      	movs	r2, #32
 8003990:	409a      	lsls	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d136      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0216 	bic.w	r2, r2, #22
 80039b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_DMA_IRQHandler+0x1da>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	223f      	movs	r2, #63	; 0x3f
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d07e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
        }
        return;
 8003a0e:	e079      	b.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e02c      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
 8003a3e:	bf00      	nop
 8003a40:	20000088 	.word	0x20000088
 8003a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e01e      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d307      	bcc.n	8003ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f2      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x2cc>
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b04:	bf00      	nop
    }
  }
}
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d108      	bne.n	8003b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b62:	e007      	b.n	8003b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3b10      	subs	r3, #16
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d909      	bls.n	8003bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc0:	e007      	b.n	8003bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	0800f7f8 	.word	0x0800f7f8

08003bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11f      	bne.n	8003c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d856      	bhi.n	8003cba <DMA_CheckFifoParam+0xce>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <DMA_CheckFifoParam+0x28>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c37 	.word	0x08003c37
 8003c1c:	08003c25 	.word	0x08003c25
 8003c20:	08003cbb 	.word	0x08003cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d046      	beq.n	8003cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c34:	e043      	b.n	8003cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c3e:	d140      	bne.n	8003cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e03d      	b.n	8003cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	d121      	bne.n	8003c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d837      	bhi.n	8003cc6 <DMA_CheckFifoParam+0xda>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <DMA_CheckFifoParam+0x70>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c73 	.word	0x08003c73
 8003c64:	08003c6d 	.word	0x08003c6d
 8003c68:	08003c85 	.word	0x08003c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e030      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d025      	beq.n	8003cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c82:	e022      	b.n	8003cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8c:	d11f      	bne.n	8003cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c92:	e01c      	b.n	8003cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d903      	bls.n	8003ca2 <DMA_CheckFifoParam+0xb6>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d003      	beq.n	8003ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ca0:	e018      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca6:	e015      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e00b      	b.n	8003cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e00a      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e008      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e006      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop

08003ce4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06c      	b.n	8003dd0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2223      	movs	r2, #35	; 0x23
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fe fd41 	bl	8002790 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_ETH_Init+0xf4>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	4a30      	ldr	r2, [pc, #192]	; (8003dd8 <HAL_ETH_Init+0xf4>)
 8003d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_ETH_Init+0xf4>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_ETH_Init+0xf8>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <HAL_ETH_Init+0xf8>)
 8003d30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d34:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_ETH_Init+0xf8>)
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4927      	ldr	r1, [pc, #156]	; (8003ddc <HAL_ETH_Init+0xf8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_ETH_Init+0xf8>)
 8003d46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d60:	f7ff faa0 	bl	80032a4 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d66:	e011      	b.n	8003d8c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d68:	f7ff fa9c 	bl	80032a4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d76:	d909      	bls.n	8003d8c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	22e0      	movs	r2, #224	; 0xe0
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e021      	b.n	8003dd0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e4      	bne.n	8003d68 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f958 	bl	8004054 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9ff 	bl	80041a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa55 	bl	800425a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	461a      	mov	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f9bd 	bl	8004138 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40013800 	.word	0x40013800

08003de0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <ETH_SetMACConfig+0x15c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	7c1b      	ldrb	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <ETH_SetMACConfig+0x28>
 8003e02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e06:	e000      	b.n	8003e0a <ETH_SetMACConfig+0x2a>
 8003e08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	7c5b      	ldrb	r3, [r3, #17]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <ETH_SetMACConfig+0x38>
 8003e12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e16:	e000      	b.n	8003e1a <ETH_SetMACConfig+0x3a>
 8003e18:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e1a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7fdb      	ldrb	r3, [r3, #31]
 8003e26:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e28:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	7f92      	ldrb	r2, [r2, #30]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d102      	bne.n	8003e3e <ETH_SetMACConfig+0x5e>
 8003e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e3c:	e000      	b.n	8003e40 <ETH_SetMACConfig+0x60>
 8003e3e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003e40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	7f1b      	ldrb	r3, [r3, #28]
 8003e46:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e48:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003e56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	d102      	bne.n	8003e68 <ETH_SetMACConfig+0x88>
 8003e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e66:	e000      	b.n	8003e6a <ETH_SetMACConfig+0x8a>
 8003e68:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	7bdb      	ldrb	r3, [r3, #15]
 8003e70:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e72:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e80:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e82:	4313      	orrs	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7ff fa0e 	bl	80032bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d101      	bne.n	8003ece <ETH_SetMACConfig+0xee>
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	e000      	b.n	8003ed0 <ETH_SetMACConfig+0xf0>
 8003ece:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ed0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003ede:	2a01      	cmp	r2, #1
 8003ee0:	d101      	bne.n	8003ee6 <ETH_SetMACConfig+0x106>
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	e000      	b.n	8003ee8 <ETH_SetMACConfig+0x108>
 8003ee6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003ee8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003ef0:	2a01      	cmp	r2, #1
 8003ef2:	d101      	bne.n	8003ef8 <ETH_SetMACConfig+0x118>
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	e000      	b.n	8003efa <ETH_SetMACConfig+0x11a>
 8003ef8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003efa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003f02:	2a01      	cmp	r2, #1
 8003f04:	d101      	bne.n	8003f0a <ETH_SetMACConfig+0x12a>
 8003f06:	2202      	movs	r2, #2
 8003f08:	e000      	b.n	8003f0c <ETH_SetMACConfig+0x12c>
 8003f0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f24:	2001      	movs	r0, #1
 8003f26:	f7ff f9c9 	bl	80032bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	ff20810f 	.word	0xff20810f

08003f40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <ETH_SetDMAConfig+0x110>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	7b1b      	ldrb	r3, [r3, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <ETH_SetDMAConfig+0x2c>
 8003f66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f6a:	e000      	b.n	8003f6e <ETH_SetDMAConfig+0x2e>
 8003f6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	7b5b      	ldrb	r3, [r3, #13]
 8003f72:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f74:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	7f52      	ldrb	r2, [r2, #29]
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	d102      	bne.n	8003f84 <ETH_SetDMAConfig+0x44>
 8003f7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f82:	e000      	b.n	8003f86 <ETH_SetDMAConfig+0x46>
 8003f84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	7b9b      	ldrb	r3, [r3, #14]
 8003f8c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f8e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	7f1b      	ldrb	r3, [r3, #28]
 8003f9a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003f9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	7f9b      	ldrb	r3, [r3, #30]
 8003fa2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fa4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003faa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7ff f970 	bl	80032bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	791b      	ldrb	r3, [r3, #4]
 8003fee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ff4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ffa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004000:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004008:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800400a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004012:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004018:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004022:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004026:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004034:	2001      	movs	r0, #1
 8004036:	f7ff f941 	bl	80032bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6013      	str	r3, [r2, #0]
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	f8de3f23 	.word	0xf8de3f23

08004054 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0a6      	sub	sp, #152	; 0x98
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004068:	2300      	movs	r3, #0
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004090:	2300      	movs	r3, #0
 8004092:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004094:	2300      	movs	r3, #0
 8004096:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800409a:	2300      	movs	r3, #0
 800409c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80040b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80040c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fe86 	bl	8003de0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80040d8:	2301      	movs	r3, #1
 80040da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004100:	2301      	movs	r3, #1
 8004102:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004108:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800410a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800410e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004114:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800411c:	2300      	movs	r3, #0
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff08 	bl	8003f40 <ETH_SetDMAConfig>
}
 8004130:	bf00      	nop
 8004132:	3798      	adds	r7, #152	; 0x98
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3305      	adds	r3, #5
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	3204      	adds	r2, #4
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <ETH_MACAddressConfig+0x68>)
 800415a:	4413      	add	r3, r2
 800415c:	461a      	mov	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3303      	adds	r3, #3
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	061a      	lsls	r2, r3, #24
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3302      	adds	r3, #2
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3301      	adds	r3, #1
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	4313      	orrs	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <ETH_MACAddressConfig+0x6c>)
 800418a:	4413      	add	r3, r2
 800418c:	461a      	mov	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	6013      	str	r3, [r2, #0]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40028040 	.word	0x40028040
 80041a4:	40028044 	.word	0x40028044

080041a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e03e      	b.n	8004234 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68d9      	ldr	r1, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	3206      	adds	r2, #6
 80041e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d80c      	bhi.n	8004218 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	461a      	mov	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	e004      	b.n	8004222 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d9bd      	bls.n	80041b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	611a      	str	r2, [r3, #16]
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e046      	b.n	80042f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6919      	ldr	r1, [r3, #16]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80042ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	3212      	adds	r2, #18
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d80c      	bhi.n	80042e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6919      	ldr	r1, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e004      	b.n	80042f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d9b5      	bls.n	8004268 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	60da      	str	r2, [r3, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	e177      	b.n	8004640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004350:	2201      	movs	r2, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	f040 8166 	bne.w	800463a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d005      	beq.n	8004386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004382:	2b02      	cmp	r3, #2
 8004384:	d130      	bne.n	80043e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	2203      	movs	r2, #3
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043bc:	2201      	movs	r2, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 0201 	and.w	r2, r3, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d017      	beq.n	8004424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2203      	movs	r2, #3
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d123      	bne.n	8004478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3208      	adds	r2, #8
 8004438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	220f      	movs	r2, #15
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	08da      	lsrs	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3208      	adds	r2, #8
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	2203      	movs	r2, #3
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0203 	and.w	r2, r3, #3
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80c0 	beq.w	800463a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b66      	ldr	r3, [pc, #408]	; (8004658 <HAL_GPIO_Init+0x324>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4a65      	ldr	r2, [pc, #404]	; (8004658 <HAL_GPIO_Init+0x324>)
 80044c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ca:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_GPIO_Init+0x324>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d6:	4a61      	ldr	r2, [pc, #388]	; (800465c <HAL_GPIO_Init+0x328>)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a58      	ldr	r2, [pc, #352]	; (8004660 <HAL_GPIO_Init+0x32c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d037      	beq.n	8004572 <HAL_GPIO_Init+0x23e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a57      	ldr	r2, [pc, #348]	; (8004664 <HAL_GPIO_Init+0x330>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_GPIO_Init+0x23a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a56      	ldr	r2, [pc, #344]	; (8004668 <HAL_GPIO_Init+0x334>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02b      	beq.n	800456a <HAL_GPIO_Init+0x236>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a55      	ldr	r2, [pc, #340]	; (800466c <HAL_GPIO_Init+0x338>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x232>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <HAL_GPIO_Init+0x33c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x22e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a53      	ldr	r2, [pc, #332]	; (8004674 <HAL_GPIO_Init+0x340>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x22a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_GPIO_Init+0x344>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x226>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a51      	ldr	r2, [pc, #324]	; (800467c <HAL_GPIO_Init+0x348>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x222>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a50      	ldr	r2, [pc, #320]	; (8004680 <HAL_GPIO_Init+0x34c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x21e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	; (8004684 <HAL_GPIO_Init+0x350>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x21a>
 800454a:	2309      	movs	r3, #9
 800454c:	e012      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800454e:	230a      	movs	r3, #10
 8004550:	e010      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004552:	2308      	movs	r3, #8
 8004554:	e00e      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004556:	2307      	movs	r3, #7
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455a:	2306      	movs	r3, #6
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	; (800465c <HAL_GPIO_Init+0x328>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_GPIO_Init+0x354>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b6:	4a34      	ldr	r2, [pc, #208]	; (8004688 <HAL_GPIO_Init+0x354>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045bc:	4b32      	ldr	r3, [pc, #200]	; (8004688 <HAL_GPIO_Init+0x354>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_GPIO_Init+0x354>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e6:	4b28      	ldr	r3, [pc, #160]	; (8004688 <HAL_GPIO_Init+0x354>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460a:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_GPIO_Init+0x354>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_GPIO_Init+0x354>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <HAL_GPIO_Init+0x354>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f ae84 	bls.w	8004350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40021400 	.word	0x40021400
 8004678:	40021800 	.word	0x40021800
 800467c:	40021c00 	.word	0x40021c00
 8004680:	40022000 	.word	0x40022000
 8004684:	40022400 	.word	0x40022400
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	887b      	ldrh	r3, [r7, #2]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e001      	b.n	80046ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
 80046c8:	4613      	mov	r3, r2
 80046ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046cc:	787b      	ldrb	r3, [r7, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046d8:	e003      	b.n	80046e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	041a      	lsls	r2, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	619a      	str	r2, [r3, #24]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004700:	887a      	ldrh	r2, [r7, #2]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	041a      	lsls	r2, r3, #16
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	43d9      	mvns	r1, r3
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	400b      	ands	r3, r1
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	619a      	str	r2, [r3, #24]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e12b      	b.n	800498e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fe f8e6 	bl	800291c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004788:	f001 fc86 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 800478c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4a81      	ldr	r2, [pc, #516]	; (8004998 <HAL_I2C_Init+0x274>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d807      	bhi.n	80047a8 <HAL_I2C_Init+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a80      	ldr	r2, [pc, #512]	; (800499c <HAL_I2C_Init+0x278>)
 800479c:	4293      	cmp	r3, r2
 800479e:	bf94      	ite	ls
 80047a0:	2301      	movls	r3, #1
 80047a2:	2300      	movhi	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e006      	b.n	80047b6 <HAL_I2C_Init+0x92>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <HAL_I2C_Init+0x27c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bf94      	ite	ls
 80047b0:	2301      	movls	r3, #1
 80047b2:	2300      	movhi	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0e7      	b.n	800498e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a78      	ldr	r2, [pc, #480]	; (80049a4 <HAL_I2C_Init+0x280>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0c9b      	lsrs	r3, r3, #18
 80047c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_I2C_Init+0x274>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d802      	bhi.n	80047f8 <HAL_I2C_Init+0xd4>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	e009      	b.n	800480c <HAL_I2C_Init+0xe8>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <HAL_I2C_Init+0x284>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	3301      	adds	r3, #1
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	430b      	orrs	r3, r1
 8004812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800481e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	495c      	ldr	r1, [pc, #368]	; (8004998 <HAL_I2C_Init+0x274>)
 8004828:	428b      	cmp	r3, r1
 800482a:	d819      	bhi.n	8004860 <HAL_I2C_Init+0x13c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e59      	subs	r1, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fbb1 f3f3 	udiv	r3, r1, r3
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004840:	400b      	ands	r3, r1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_I2C_Init+0x138>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e59      	subs	r1, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fbb1 f3f3 	udiv	r3, r1, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	e051      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 800485c:	2304      	movs	r3, #4
 800485e:	e04f      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d111      	bne.n	800488c <HAL_I2C_Init+0x168>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e012      	b.n	80048b2 <HAL_I2C_Init+0x18e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1e58      	subs	r0, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	0099      	lsls	r1, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Init+0x196>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e022      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <HAL_I2C_Init+0x1bc>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1e58      	subs	r0, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	440b      	add	r3, r1
 80048d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	e00f      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e58      	subs	r0, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	0099      	lsls	r1, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f6:	3301      	adds	r3, #1
 80048f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	6809      	ldr	r1, [r1, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800492e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6911      	ldr	r1, [r2, #16]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d2      	ldr	r2, [r2, #12]
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	430b      	orrs	r3, r1
 8004942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	000186a0 	.word	0x000186a0
 800499c:	001e847f 	.word	0x001e847f
 80049a0:	003d08ff 	.word	0x003d08ff
 80049a4:	431bde83 	.word	0x431bde83
 80049a8:	10624dd3 	.word	0x10624dd3

080049ac <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	460b      	mov	r3, r1
 80049c0:	813b      	strh	r3, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049c6:	f7fe fc6d 	bl	80032a4 <HAL_GetTick>
 80049ca:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	f040 8176 	bne.w	8004cca <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049de:	4b95      	ldr	r3, [pc, #596]	; (8004c34 <HAL_I2C_Mem_Read_DMA+0x288>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	08db      	lsrs	r3, r3, #3
 80049e4:	4a94      	ldr	r2, [pc, #592]	; (8004c38 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0a1a      	lsrs	r2, r3, #8
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009a      	lsls	r2, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d116      	bne.n	8004a32 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e14c      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d0db      	beq.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2C_Mem_Read_DMA+0xa2>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e13e      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d007      	beq.n	8004a74 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2222      	movs	r2, #34	; 0x22
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a62      	ldr	r2, [pc, #392]	; (8004c3c <HAL_I2C_Mem_Read_DMA+0x290>)
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004ab6:	897a      	ldrh	r2, [r7, #10]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004abc:	893a      	ldrh	r2, [r7, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80cc 	beq.w	8004c70 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02d      	beq.n	8004b3c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	4a56      	ldr	r2, [pc, #344]	; (8004c40 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	4a55      	ldr	r2, [pc, #340]	; (8004c44 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	2200      	movs	r2, #0
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	2200      	movs	r2, #0
 8004b06:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3310      	adds	r3, #16
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	461a      	mov	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	f7fe fd7d 	bl	8003624 <HAL_DMA_Start_IT>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 8087 	bne.w	8004c48 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004b3a:	e013      	b.n	8004b64 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b3      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b64:	88f8      	ldrh	r0, [r7, #6]
 8004b66:	893a      	ldrh	r2, [r7, #8]
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	2323      	movs	r3, #35	; 0x23
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	4603      	mov	r3, r0
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f8df 	bl	8004d38 <I2C_RequestMemoryRead>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d023      	beq.n	8004bc8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fe15 	bl	80037b4 <HAL_DMA_Abort_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	2200      	movs	r2, #0
 8004b96:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e081      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d108      	bne.n	8004be2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e007      	b.n	8004bf2 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e049      	b.n	8004cc6 <HAL_I2C_Mem_Read_DMA+0x31a>
 8004c32:	bf00      	nop
 8004c34:	20000088 	.word	0x20000088
 8004c38:	14f8b589 	.word	0x14f8b589
 8004c3c:	ffff0000 	.word	0xffff0000
 8004c40:	08004f09 	.word	0x08004f09
 8004c44:	080050b3 	.word	0x080050b3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0210 	orr.w	r2, r3, #16
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e02d      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004c70:	88f8      	ldrh	r0, [r7, #6]
 8004c72:	893a      	ldrh	r2, [r7, #8]
 8004c74:	8979      	ldrh	r1, [r7, #10]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	2323      	movs	r3, #35	; 0x23
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4603      	mov	r3, r0
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f859 	bl	8004d38 <I2C_RequestMemoryRead>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e01d      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f9d4 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d98:	d103      	bne.n	8004da2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0aa      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	4952      	ldr	r1, [pc, #328]	; (8004f04 <I2C_RequestMemoryRead+0x1cc>)
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fa0c 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e097      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fa76 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00d      	beq.n	8004e0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d107      	bne.n	8004e0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e076      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]
 8004e1e:	e021      	b.n	8004e64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e20:	893b      	ldrh	r3, [r7, #8]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	6a39      	ldr	r1, [r7, #32]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa50 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d107      	bne.n	8004e56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e050      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e5a:	893b      	ldrh	r3, [r7, #8]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	6a39      	ldr	r1, [r7, #32]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fa35 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e035      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f93d 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	d103      	bne.n	8004ed0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e013      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed4:	897b      	ldrh	r3, [r7, #10]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	4906      	ldr	r1, [pc, #24]	; (8004f04 <I2C_RequestMemoryRead+0x1cc>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f975 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	00010002 	.word	0x00010002

08004f08 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f24:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	2200      	movs	r2, #0
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004f62:	2b21      	cmp	r3, #33	; 0x21
 8004f64:	d007      	beq.n	8004f76 <I2C_DMAXferCplt+0x6e>
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004f6c:	2b22      	cmp	r3, #34	; 0x22
 8004f6e:	d131      	bne.n	8004fd4 <I2C_DMAXferCplt+0xcc>
 8004f70:	7cbb      	ldrb	r3, [r7, #18]
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d12e      	bne.n	8004fd4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f84:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	2b29      	cmp	r3, #41	; 0x29
 8004f90:	d10a      	bne.n	8004fa8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2221      	movs	r2, #33	; 0x21
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2228      	movs	r2, #40	; 0x28
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fa0:	6978      	ldr	r0, [r7, #20]
 8004fa2:	f7ff fea1 	bl	8004ce8 <HAL_I2C_SlaveTxCpltCallback>
 8004fa6:	e00c      	b.n	8004fc2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d109      	bne.n	8004fc2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2222      	movs	r2, #34	; 0x22
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2228      	movs	r2, #40	; 0x28
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	f7ff fe9d 	bl	8004cfc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fd0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004fd2:	e06a      	b.n	80050aa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d064      	beq.n	80050aa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005008:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005010:	d009      	beq.n	8005026 <I2C_DMAXferCplt+0x11e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d006      	beq.n	8005026 <I2C_DMAXferCplt+0x11e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800501e:	d002      	beq.n	8005026 <I2C_DMAXferCplt+0x11e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d107      	bne.n	8005036 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005044:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005054:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005064:	6978      	ldr	r0, [r7, #20]
 8005066:	f7ff fe5d 	bl	8004d24 <HAL_I2C_ErrorCallback>
}
 800506a:	e01e      	b.n	80050aa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d10a      	bne.n	8005096 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f7ff fe3e 	bl	8004d10 <HAL_I2C_MemRxCpltCallback>
}
 8005094:	e009      	b.n	80050aa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2212      	movs	r2, #18
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f7ff fe15 	bl	8004cd4 <HAL_I2C_MasterRxCpltCallback>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	2200      	movs	r2, #0
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	2200      	movs	r2, #0
 80050de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fe fd13 	bl	8003b0c <HAL_DMA_GetError>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d01b      	beq.n	8005124 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff fe00 	bl	8004d24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	e025      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe f8ad 	bl	80032a4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e023      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	e00c      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0b6      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e8:	e051      	b.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d123      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e046      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d021      	beq.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fe f82b 	bl	80032a4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e020      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d18d      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f837 	bl	800535a <I2C_IsAcknowledgeFailed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e02d      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fd ffd1 	bl	80032a4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d1ca      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d11b      	bne.n	80053aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d129      	bne.n	8005422 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2224      	movs	r2, #36	; 0x24
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0210 	bic.w	r2, r2, #16
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b20      	cmp	r3, #32
 8005448:	d12a      	bne.n	80054a0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800546a:	89fb      	ldrh	r3, [r7, #14]
 800546c:	f023 030f 	bic.w	r3, r3, #15
 8005470:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	b29a      	uxth	r2, r3
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	4313      	orrs	r3, r2
 800547a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	89fa      	ldrh	r2, [r7, #14]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b0:	b08f      	sub	sp, #60	; 0x3c
 80054b2:	af0a      	add	r7, sp, #40	; 0x28
 80054b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e10f      	b.n	80056e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fd fcf4 	bl	8002ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2203      	movs	r2, #3
 80054e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f003 fd97 	bl	8009032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	687e      	ldr	r6, [r7, #4]
 800550c:	466d      	mov	r5, sp
 800550e:	f106 0410 	add.w	r4, r6, #16
 8005512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800551a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800551e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005522:	1d33      	adds	r3, r6, #4
 8005524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005526:	6838      	ldr	r0, [r7, #0]
 8005528:	f003 fd22 	bl	8008f70 <USB_CoreInit>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0d0      	b.n	80056e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fd85 	bl	8009054 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	e04a      	b.n	80055e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005550:	7bfa      	ldrb	r2, [r7, #15]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	333d      	adds	r3, #61	; 0x3d
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005564:	7bfa      	ldrb	r2, [r7, #15]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	333c      	adds	r3, #60	; 0x3c
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005578:	7bfa      	ldrb	r2, [r7, #15]
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	b298      	uxth	r0, r3
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3344      	adds	r3, #68	; 0x44
 800558c:	4602      	mov	r2, r0
 800558e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3340      	adds	r3, #64	; 0x40
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	3348      	adds	r3, #72	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	334c      	adds	r3, #76	; 0x4c
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055cc:	7bfa      	ldrb	r2, [r7, #15]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	3354      	adds	r3, #84	; 0x54
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	3301      	adds	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3af      	bcc.n	8005550 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e044      	b.n	8005680 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	3301      	adds	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3b5      	bcc.n	80055f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	687e      	ldr	r6, [r7, #4]
 8005692:	466d      	mov	r5, sp
 8005694:	f106 0410 	add.w	r4, r6, #16
 8005698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800569c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80056a8:	1d33      	adds	r3, r6, #4
 80056aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ac:	6838      	ldr	r0, [r7, #0]
 80056ae:	f003 fd1d 	bl	80090ec <USB_DevInit>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e00d      	b.n	80056e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f003 fee8 	bl	80094ae <USB_DevDisconnect>

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e267      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d075      	beq.n	80057f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005706:	4b88      	ldr	r3, [pc, #544]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b04      	cmp	r3, #4
 8005710:	d00c      	beq.n	800572c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005712:	4b85      	ldr	r3, [pc, #532]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800571a:	2b08      	cmp	r3, #8
 800571c:	d112      	bne.n	8005744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571e:	4b82      	ldr	r3, [pc, #520]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572a:	d10b      	bne.n	8005744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	4b7e      	ldr	r3, [pc, #504]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05b      	beq.n	80057f0 <HAL_RCC_OscConfig+0x108>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d157      	bne.n	80057f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e242      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x74>
 800574e:	4b76      	ldr	r3, [pc, #472]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a75      	ldr	r2, [pc, #468]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e01d      	b.n	8005798 <HAL_RCC_OscConfig+0xb0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x98>
 8005766:	4b70      	ldr	r3, [pc, #448]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6f      	ldr	r2, [pc, #444]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800576c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6c      	ldr	r2, [pc, #432]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0xb0>
 8005780:	4b69      	ldr	r3, [pc, #420]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a68      	ldr	r2, [pc, #416]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b66      	ldr	r3, [pc, #408]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a65      	ldr	r2, [pc, #404]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd fd80 	bl	80032a4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fd fd7c 	bl	80032a4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e207      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ba:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0xc0>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd fd6c 	bl	80032a4 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fd fd68 	bl	80032a4 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e1f3      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0xe8>
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d063      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057fe:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800580a:	4b47      	ldr	r3, [pc, #284]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005812:	2b08      	cmp	r3, #8
 8005814:	d11c      	bne.n	8005850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005816:	4b44      	ldr	r3, [pc, #272]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d116      	bne.n	8005850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005822:	4b41      	ldr	r3, [pc, #260]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_RCC_OscConfig+0x152>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d001      	beq.n	800583a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e1c7      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583a:	4b3b      	ldr	r3, [pc, #236]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4937      	ldr	r1, [pc, #220]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584e:	e03a      	b.n	80058c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005858:	4b34      	ldr	r3, [pc, #208]	; (800592c <HAL_RCC_OscConfig+0x244>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585e:	f7fd fd21 	bl	80032a4 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005866:	f7fd fd1d 	bl	80032a4 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1a8      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005878:	4b2b      	ldr	r3, [pc, #172]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005884:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4925      	ldr	r1, [pc, #148]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 8005894:	4313      	orrs	r3, r2
 8005896:	600b      	str	r3, [r1, #0]
 8005898:	e015      	b.n	80058c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCC_OscConfig+0x244>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd fd00 	bl	80032a4 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a8:	f7fd fcfc 	bl	80032a4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e187      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d036      	beq.n	8005940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_RCC_OscConfig+0x248>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fd fce0 	bl	80032a4 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e8:	f7fd fcdc 	bl	80032a4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e167      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_RCC_OscConfig+0x240>)
 80058fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x200>
 8005906:	e01b      	b.n	8005940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_OscConfig+0x248>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590e:	f7fd fcc9 	bl	80032a4 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005914:	e00e      	b.n	8005934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005916:	f7fd fcc5 	bl	80032a4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d907      	bls.n	8005934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e150      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
 8005928:	40023800 	.word	0x40023800
 800592c:	42470000 	.word	0x42470000
 8005930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ea      	bne.n	8005916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8097 	beq.w	8005a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	4b7d      	ldr	r3, [pc, #500]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4a7c      	ldr	r2, [pc, #496]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6413      	str	r3, [r2, #64]	; 0x40
 800596e:	4b7a      	ldr	r3, [pc, #488]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597a:	2301      	movs	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597e:	4b77      	ldr	r3, [pc, #476]	; (8005b5c <HAL_RCC_OscConfig+0x474>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d118      	bne.n	80059bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598a:	4b74      	ldr	r3, [pc, #464]	; (8005b5c <HAL_RCC_OscConfig+0x474>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a73      	ldr	r2, [pc, #460]	; (8005b5c <HAL_RCC_OscConfig+0x474>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fd fc85 	bl	80032a4 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fd fc81 	bl	80032a4 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e10c      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b0:	4b6a      	ldr	r3, [pc, #424]	; (8005b5c <HAL_RCC_OscConfig+0x474>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d106      	bne.n	80059d2 <HAL_RCC_OscConfig+0x2ea>
 80059c4:	4b64      	ldr	r3, [pc, #400]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6713      	str	r3, [r2, #112]	; 0x70
 80059d0:	e01c      	b.n	8005a0c <HAL_RCC_OscConfig+0x324>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x30c>
 80059da:	4b5f      	ldr	r3, [pc, #380]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	4a5e      	ldr	r2, [pc, #376]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059e0:	f043 0304 	orr.w	r3, r3, #4
 80059e4:	6713      	str	r3, [r2, #112]	; 0x70
 80059e6:	4b5c      	ldr	r3, [pc, #368]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	4a5b      	ldr	r2, [pc, #364]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6713      	str	r3, [r2, #112]	; 0x70
 80059f2:	e00b      	b.n	8005a0c <HAL_RCC_OscConfig+0x324>
 80059f4:	4b58      	ldr	r3, [pc, #352]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	4a57      	ldr	r2, [pc, #348]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005a00:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a54      	ldr	r2, [pc, #336]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a06:	f023 0304 	bic.w	r3, r3, #4
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d015      	beq.n	8005a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fd fc46 	bl	80032a4 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	e00a      	b.n	8005a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fc42 	bl	80032a4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0cb      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a32:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0ee      	beq.n	8005a1c <HAL_RCC_OscConfig+0x334>
 8005a3e:	e014      	b.n	8005a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a40:	f7fd fc30 	bl	80032a4 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a48:	f7fd fc2c 	bl	80032a4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e0b5      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5e:	4b3e      	ldr	r3, [pc, #248]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1ee      	bne.n	8005a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a70:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80a1 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a86:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d05c      	beq.n	8005b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d141      	bne.n	8005b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <HAL_RCC_OscConfig+0x478>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fd fc00 	bl	80032a4 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa8:	f7fd fbfc 	bl	80032a4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e087      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aba:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	019b      	lsls	r3, r3, #6
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	491b      	ldr	r1, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005af0:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_RCC_OscConfig+0x478>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fd fbd5 	bl	80032a4 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afe:	f7fd fbd1 	bl	80032a4 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e05c      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x416>
 8005b1c:	e054      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_RCC_OscConfig+0x478>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fd fbbe 	bl	80032a4 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fd fbba 	bl	80032a4 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e045      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_RCC_OscConfig+0x470>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x444>
 8005b4a:	e03d      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e038      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40007000 	.word	0x40007000
 8005b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b64:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <HAL_RCC_OscConfig+0x4ec>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d028      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d121      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d11a      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b94:	4013      	ands	r3, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d111      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	3b01      	subs	r3, #1
 8005bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800

08005bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0cc      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bec:	4b68      	ldr	r3, [pc, #416]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d90c      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfa:	4b65      	ldr	r3, [pc, #404]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b63      	ldr	r3, [pc, #396]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0b8      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d020      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c2c:	4b59      	ldr	r3, [pc, #356]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a58      	ldr	r2, [pc, #352]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c44:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a52      	ldr	r2, [pc, #328]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c50:	4b50      	ldr	r3, [pc, #320]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	494d      	ldr	r1, [pc, #308]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d044      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d119      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e07f      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d003      	beq.n	8005c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c96:	4b3f      	ldr	r3, [pc, #252]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e06f      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca6:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e067      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cb6:	4b37      	ldr	r3, [pc, #220]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 0203 	bic.w	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4934      	ldr	r1, [pc, #208]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cc8:	f7fd faec 	bl	80032a4 <HAL_GetTick>
 8005ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	e00a      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd0:	f7fd fae8 	bl	80032a4 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e04f      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 020c 	and.w	r2, r3, #12
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d1eb      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d20c      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d06:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <HAL_RCC_ClockConfig+0x1b8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e032      	b.n	8005d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4916      	ldr	r1, [pc, #88]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	490e      	ldr	r1, [pc, #56]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d5e:	f000 f889 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8005d62:	4602      	mov	r2, r0
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	091b      	lsrs	r3, r3, #4
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	490a      	ldr	r1, [pc, #40]	; (8005d98 <HAL_RCC_ClockConfig+0x1c0>)
 8005d70:	5ccb      	ldrb	r3, [r1, r3]
 8005d72:	fa22 f303 	lsr.w	r3, r2, r3
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd f8fc 	bl	8002f7c <HAL_InitTick>

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40023c00 	.word	0x40023c00
 8005d94:	40023800 	.word	0x40023800
 8005d98:	0800f7e0 	.word	0x0800f7e0
 8005d9c:	20000088 	.word	0x20000088
 8005da0:	2000008c 	.word	0x2000008c

08005da4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d129      	bne.n	8005e0a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc6:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005de8:	f107 031c 	add.w	r3, r7, #28
 8005dec:	4619      	mov	r1, r3
 8005dee:	481f      	ldr	r0, [pc, #124]	; (8005e6c <HAL_RCC_MCOConfig+0xc8>)
 8005df0:	f7fe faa0 	bl	8004334 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005df4:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	430b      	orrs	r3, r1
 8005e02:	4919      	ldr	r1, [pc, #100]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005e08:	e029      	b.n	8005e5e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1a:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e30:	2303      	movs	r3, #3
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005e3c:	f107 031c 	add.w	r3, r7, #28
 8005e40:	4619      	mov	r1, r3
 8005e42:	480b      	ldr	r0, [pc, #44]	; (8005e70 <HAL_RCC_MCOConfig+0xcc>)
 8005e44:	f7fe fa76 	bl	8004334 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	00d9      	lsls	r1, r3, #3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	430b      	orrs	r3, r1
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCC_MCOConfig+0xc4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	3730      	adds	r7, #48	; 0x30
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	40020000 	.word	0x40020000
 8005e70:	40020800 	.word	0x40020800

08005e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e78:	b094      	sub	sp, #80	; 0x50
 8005e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e80:	2300      	movs	r3, #0
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	2300      	movs	r3, #0
 8005e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e8c:	4b79      	ldr	r3, [pc, #484]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 030c 	and.w	r3, r3, #12
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d00d      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	f200 80e1 	bhi.w	8006060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d003      	beq.n	8005eae <HAL_RCC_GetSysClockFreq+0x3a>
 8005ea6:	e0db      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea8:	4b73      	ldr	r3, [pc, #460]	; (8006078 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005eac:	e0db      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <HAL_RCC_GetSysClockFreq+0x208>)
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eb2:	e0d8      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb4:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ebe:	4b6d      	ldr	r3, [pc, #436]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eca:	4b6a      	ldr	r3, [pc, #424]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	099b      	lsrs	r3, r3, #6
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ede:	2300      	movs	r3, #0
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	f04f 0000 	mov.w	r0, #0
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	0159      	lsls	r1, r3, #5
 8005ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ef8:	0150      	lsls	r0, r2, #5
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4621      	mov	r1, r4
 8005f00:	1a51      	subs	r1, r2, r1
 8005f02:	6139      	str	r1, [r7, #16]
 8005f04:	4629      	mov	r1, r5
 8005f06:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	018b      	lsls	r3, r1, #6
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f22:	4651      	mov	r1, sl
 8005f24:	018a      	lsls	r2, r1, #6
 8005f26:	4651      	mov	r1, sl
 8005f28:	ebb2 0801 	subs.w	r8, r2, r1
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f46:	4690      	mov	r8, r2
 8005f48:	4699      	mov	r9, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	eb18 0303 	adds.w	r3, r8, r3
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	462b      	mov	r3, r5
 8005f54:	eb49 0303 	adc.w	r3, r9, r3
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f66:	4629      	mov	r1, r5
 8005f68:	024b      	lsls	r3, r1, #9
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f70:	4621      	mov	r1, r4
 8005f72:	024a      	lsls	r2, r1, #9
 8005f74:	4610      	mov	r0, r2
 8005f76:	4619      	mov	r1, r3
 8005f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f84:	f7fa f98c 	bl	80002a0 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	e058      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	099b      	lsrs	r3, r3, #6
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fa2:	623b      	str	r3, [r7, #32]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	f04f 0000 	mov.w	r0, #0
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	0159      	lsls	r1, r3, #5
 8005fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fbe:	0150      	lsls	r0, r2, #5
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fca:	4649      	mov	r1, r9
 8005fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8005fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	00eb      	lsls	r3, r5, #3
 8005ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ffa:	00e2      	lsls	r2, r4, #3
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	461d      	mov	r5, r3
 8006000:	4643      	mov	r3, r8
 8006002:	18e3      	adds	r3, r4, r3
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	464b      	mov	r3, r9
 8006008:	eb45 0303 	adc.w	r3, r5, r3
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800601a:	4629      	mov	r1, r5
 800601c:	028b      	lsls	r3, r1, #10
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006024:	4621      	mov	r1, r4
 8006026:	028a      	lsls	r2, r1, #10
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602e:	2200      	movs	r2, #0
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	61fa      	str	r2, [r7, #28]
 8006034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006038:	f7fa f932 	bl	80002a0 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_GetSysClockFreq+0x200>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	3301      	adds	r3, #1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800605e:	e002      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCC_GetSysClockFreq+0x204>)
 8006062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006068:	4618      	mov	r0, r3
 800606a:	3750      	adds	r7, #80	; 0x50
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400
 800607c:	007a1200 	.word	0x007a1200

08006080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <HAL_RCC_GetHCLKFreq+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000088 	.word	0x20000088

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0a9b      	lsrs	r3, r3, #10
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4903      	ldr	r1, [pc, #12]	; (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40023800 	.word	0x40023800
 80060bc:	0800f7f0 	.word	0x0800f7f0

080060c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060c4:	f7ff ffdc 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	0b5b      	lsrs	r3, r3, #13
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4903      	ldr	r1, [pc, #12]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40023800 	.word	0x40023800
 80060e4:	0800f7f0 	.word	0x0800f7f0

080060e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	220f      	movs	r2, #15
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0203 	and.w	r2, r3, #3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <HAL_RCC_GetClockConfig+0x60>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	40023c00 	.word	0x40023c00

0800614c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e07b      	b.n	8006256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d108      	bne.n	8006178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800616e:	d009      	beq.n	8006184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	61da      	str	r2, [r3, #28]
 8006176:	e005      	b.n	8006184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fc fc68 	bl	8002a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	ea42 0103 	orr.w	r1, r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	f003 0104 	and.w	r1, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f003 0210 	and.w	r2, r3, #16
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_SPI_Transmit+0x22>
 800627c:	2302      	movs	r3, #2
 800627e:	e126      	b.n	80064ce <HAL_SPI_Transmit+0x270>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006288:	f7fd f80c 	bl	80032a4 <HAL_GetTick>
 800628c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800629e:	2302      	movs	r3, #2
 80062a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062a2:	e10b      	b.n	80064bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x52>
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062b4:	e102      	b.n	80064bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2203      	movs	r2, #3
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fc:	d10f      	bne.n	800631e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800631c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d007      	beq.n	800633c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800633a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006344:	d14b      	bne.n	80063de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_SPI_Transmit+0xf6>
 800634e:	8afb      	ldrh	r3, [r7, #22]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d13e      	bne.n	80063d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006378:	e02b      	b.n	80063d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d112      	bne.n	80063ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80063ac:	e011      	b.n	80063d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ae:	f7fc ff79 	bl	80032a4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d803      	bhi.n	80063c6 <HAL_SPI_Transmit+0x168>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d102      	bne.n	80063cc <HAL_SPI_Transmit+0x16e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063d0:	e074      	b.n	80064bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ce      	bne.n	800637a <HAL_SPI_Transmit+0x11c>
 80063dc:	e04c      	b.n	8006478 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Transmit+0x18e>
 80063e6:	8afb      	ldrh	r3, [r7, #22]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d140      	bne.n	800646e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006412:	e02c      	b.n	800646e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d113      	bne.n	800644a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	86da      	strh	r2, [r3, #54]	; 0x36
 8006448:	e011      	b.n	800646e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644a:	f7fc ff2b 	bl	80032a4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d803      	bhi.n	8006462 <HAL_SPI_Transmit+0x204>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d102      	bne.n	8006468 <HAL_SPI_Transmit+0x20a>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800646c:	e026      	b.n	80064bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1cd      	bne.n	8006414 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fa63 	bl	8006948 <SPI_EndRxTxTransaction>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e000      	b.n	80064bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80064ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b08c      	sub	sp, #48	; 0x30
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064e4:	2301      	movs	r3, #1
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x26>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e18a      	b.n	8006812 <HAL_SPI_TransmitReceive+0x33c>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006504:	f7fc fece 	bl	80032a4 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800651e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006522:	2b01      	cmp	r3, #1
 8006524:	d00f      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x70>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652c:	d107      	bne.n	800653e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_SPI_TransmitReceive+0x68>
 8006536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800653a:	2b04      	cmp	r3, #4
 800653c:	d003      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800653e:	2302      	movs	r3, #2
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006544:	e15b      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x82>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x82>
 8006552:	887b      	ldrh	r3, [r7, #2]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800655e:	e14e      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b04      	cmp	r3, #4
 800656a:	d003      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2205      	movs	r2, #5
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	887a      	ldrh	r2, [r7, #2]
 800658a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	887a      	ldrh	r2, [r7, #2]
 8006596:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	887a      	ldrh	r2, [r7, #2]
 800659c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d007      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	d178      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x10a>
 80065da:	8b7b      	ldrh	r3, [r7, #26]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d166      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	881a      	ldrh	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006604:	e053      	b.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b02      	cmp	r3, #2
 8006612:	d11b      	bne.n	800664c <HAL_SPI_TransmitReceive+0x176>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_SPI_TransmitReceive+0x176>
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d113      	bne.n	800664c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d119      	bne.n	800668e <HAL_SPI_TransmitReceive+0x1b8>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d014      	beq.n	800668e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	b292      	uxth	r2, r2
 8006670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668a:	2301      	movs	r3, #1
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800668e:	f7fc fe09 	bl	80032a4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669a:	429a      	cmp	r2, r3
 800669c:	d807      	bhi.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d003      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066ac:	e0a7      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1a6      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x130>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1a1      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x130>
 80066c2:	e07c      	b.n	80067be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x1fc>
 80066cc:	8b7b      	ldrh	r3, [r7, #26]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d16b      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f8:	e057      	b.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d11c      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d017      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d114      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x2ae>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006780:	2301      	movs	r3, #1
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006784:	f7fc fd8e 	bl	80032a4 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006790:	429a      	cmp	r2, r3
 8006792:	d803      	bhi.n	800679c <HAL_SPI_TransmitReceive+0x2c6>
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x2cc>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067a8:	e029      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1a2      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x224>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d19d      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f8c0 	bl	8006948 <SPI_EndRxTxTransaction>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067da:	e010      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	e000      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800680e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006812:	4618      	mov	r0, r3
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006828:	b2db      	uxtb	r3, r3
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006848:	f7fc fd2c 	bl	80032a4 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4413      	add	r3, r2
 8006856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006858:	f7fc fd24 	bl	80032a4 <HAL_GetTick>
 800685c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800685e:	4b39      	ldr	r3, [pc, #228]	; (8006944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	015b      	lsls	r3, r3, #5
 8006864:	0d1b      	lsrs	r3, r3, #20
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686e:	e054      	b.n	800691a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d050      	beq.n	800691a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006878:	f7fc fd14 	bl	80032a4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	429a      	cmp	r2, r3
 8006886:	d902      	bls.n	800688e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d13d      	bne.n	800690a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800689c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a6:	d111      	bne.n	80068cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b0:	d004      	beq.n	80068bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ba:	d107      	bne.n	80068cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d4:	d10f      	bne.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e017      	b.n	800693a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3b01      	subs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	429a      	cmp	r2, r3
 8006936:	d19b      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000088 	.word	0x20000088

08006948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006954:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <SPI_EndRxTxTransaction+0x7c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <SPI_EndRxTxTransaction+0x80>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0d5b      	lsrs	r3, r3, #21
 8006960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006972:	d112      	bne.n	800699a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7ff ff5a 	bl	8006838 <SPI_WaitFlagStateUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e00f      	b.n	80069ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d0f2      	beq.n	800699a <SPI_EndRxTxTransaction+0x52>
 80069b4:	e000      	b.n	80069b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80069b6:	bf00      	nop
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000088 	.word	0x20000088
 80069c8:	165e9f81 	.word	0x165e9f81

080069cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e041      	b.n	8006a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fc f90c 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f000 fce2 	bl	80073d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e046      	b.n	8006b12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <HAL_TIM_Base_Start+0xb4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d022      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d01d      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_TIM_Base_Start+0xb8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <HAL_TIM_Base_Start+0xbc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_TIM_Base_Start+0xc0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <HAL_TIM_Base_Start+0xc4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <HAL_TIM_Base_Start+0xc8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_Base_Start+0x70>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <HAL_TIM_Base_Start+0xcc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d111      	bne.n	8006b00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d010      	beq.n	8006b10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	e007      	b.n	8006b10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d001      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e04e      	b.n	8006bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d01d      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d111      	bne.n	8006be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d010      	beq.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bde:	e007      	b.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e041      	b.n	8006cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f839 	bl	8006cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fbba 	bl	80073d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_TIM_PWM_Start+0x24>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e022      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d109      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x3e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	bf14      	ite	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e015      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d109      	bne.n	8006d28 <HAL_TIM_PWM_Start+0x58>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e008      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e07c      	b.n	8006e3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x82>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d50:	e013      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0x92>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d60:	e00b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_PWM_Start+0xa2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d70:	e003      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fe10 	bl	80079a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	; (8006e44 <HAL_TIM_PWM_Start+0x174>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_PWM_Start+0xcc>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2c      	ldr	r2, [pc, #176]	; (8006e48 <HAL_TIM_PWM_Start+0x178>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIM_PWM_Start+0xd0>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <HAL_TIM_PWM_Start+0xd2>
 8006da0:	2300      	movs	r3, #0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <HAL_TIM_PWM_Start+0x174>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <HAL_TIM_PWM_Start+0x17c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_TIM_PWM_Start+0x180>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIM_PWM_Start+0x184>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <HAL_TIM_PWM_Start+0x178>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIM_PWM_Start+0x188>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIM_PWM_Start+0x18c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d111      	bne.n	8006e2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d010      	beq.n	8006e3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	e007      	b.n	8006e3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40001800 	.word	0x40001800

08006e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0202 	mvn.w	r2, #2
 8006e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa77 	bl	8007396 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa69 	bl	8007382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa7a 	bl	80073aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d122      	bne.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d11b      	bne.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0204 	mvn.w	r2, #4
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa4d 	bl	8007396 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa3f 	bl	8007382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa50 	bl	80073aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d122      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d11b      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0208 	mvn.w	r2, #8
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa23 	bl	8007396 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa15 	bl	8007382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa26 	bl	80073aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d122      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0210 	mvn.w	r2, #16
 8006f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9f9 	bl	8007396 <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9eb 	bl	8007382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f9fc 	bl	80073aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d10e      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d107      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0201 	mvn.w	r2, #1
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb f910 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d10e      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d107      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fdca 	bl	8007ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d10e      	bne.n	800703c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d107      	bne.n	800703c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9c1 	bl	80073be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b20      	cmp	r3, #32
 8007048:	d10e      	bne.n	8007068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b20      	cmp	r3, #32
 8007056:	d107      	bne.n	8007068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0220 	mvn.w	r2, #32
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fd94 	bl	8007b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800708a:	2302      	movs	r3, #2
 800708c:	e0ae      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b0c      	cmp	r3, #12
 800709a:	f200 809f 	bhi.w	80071dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070d9 	.word	0x080070d9
 80070a8:	080071dd 	.word	0x080071dd
 80070ac:	080071dd 	.word	0x080071dd
 80070b0:	080071dd 	.word	0x080071dd
 80070b4:	08007119 	.word	0x08007119
 80070b8:	080071dd 	.word	0x080071dd
 80070bc:	080071dd 	.word	0x080071dd
 80070c0:	080071dd 	.word	0x080071dd
 80070c4:	0800715b 	.word	0x0800715b
 80070c8:	080071dd 	.word	0x080071dd
 80070cc:	080071dd 	.word	0x080071dd
 80070d0:	080071dd 	.word	0x080071dd
 80070d4:	0800719b 	.word	0x0800719b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa18 	bl	8007514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0204 	bic.w	r2, r2, #4
 8007102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	619a      	str	r2, [r3, #24]
      break;
 8007116:	e064      	b.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fa68 	bl	80075f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6999      	ldr	r1, [r3, #24]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	021a      	lsls	r2, r3, #8
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	619a      	str	r2, [r3, #24]
      break;
 8007158:	e043      	b.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fabd 	bl	80076e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0208 	orr.w	r2, r2, #8
 8007174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0204 	bic.w	r2, r2, #4
 8007184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69d9      	ldr	r1, [r3, #28]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	61da      	str	r2, [r3, #28]
      break;
 8007198:	e023      	b.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fb11 	bl	80077c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	021a      	lsls	r2, r3, #8
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	61da      	str	r2, [r3, #28]
      break;
 80071da:	e002      	b.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIM_ConfigClockSource+0x1c>
 800720c:	2302      	movs	r3, #2
 800720e:	e0b4      	b.n	800737a <HAL_TIM_ConfigClockSource+0x186>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800722e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d03e      	beq.n	80072c8 <HAL_TIM_ConfigClockSource+0xd4>
 800724a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800724e:	f200 8087 	bhi.w	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007256:	f000 8086 	beq.w	8007366 <HAL_TIM_ConfigClockSource+0x172>
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725e:	d87f      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007260:	2b70      	cmp	r3, #112	; 0x70
 8007262:	d01a      	beq.n	800729a <HAL_TIM_ConfigClockSource+0xa6>
 8007264:	2b70      	cmp	r3, #112	; 0x70
 8007266:	d87b      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007268:	2b60      	cmp	r3, #96	; 0x60
 800726a:	d050      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x11a>
 800726c:	2b60      	cmp	r3, #96	; 0x60
 800726e:	d877      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007270:	2b50      	cmp	r3, #80	; 0x50
 8007272:	d03c      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0xfa>
 8007274:	2b50      	cmp	r3, #80	; 0x50
 8007276:	d873      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d058      	beq.n	800732e <HAL_TIM_ConfigClockSource+0x13a>
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d86f      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007280:	2b30      	cmp	r3, #48	; 0x30
 8007282:	d064      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x15a>
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d86b      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007288:	2b20      	cmp	r3, #32
 800728a:	d060      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x15a>
 800728c:	2b20      	cmp	r3, #32
 800728e:	d867      	bhi.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d05c      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x15a>
 8007294:	2b10      	cmp	r3, #16
 8007296:	d05a      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x15a>
 8007298:	e062      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6899      	ldr	r1, [r3, #8]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f000 fb5d 	bl	8007968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	609a      	str	r2, [r3, #8]
      break;
 80072c6:	e04f      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6899      	ldr	r1, [r3, #8]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f000 fb46 	bl	8007968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ea:	609a      	str	r2, [r3, #8]
      break;
 80072ec:	e03c      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6859      	ldr	r1, [r3, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f000 faba 	bl	8007874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2150      	movs	r1, #80	; 0x50
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fb13 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 800730c:	e02c      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	461a      	mov	r2, r3
 800731c:	f000 fad9 	bl	80078d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2160      	movs	r1, #96	; 0x60
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fb03 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 800732c:	e01c      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6859      	ldr	r1, [r3, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	461a      	mov	r2, r3
 800733c:	f000 fa9a 	bl	8007874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2140      	movs	r1, #64	; 0x40
 8007346:	4618      	mov	r0, r3
 8007348:	f000 faf3 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 800734c:	e00c      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f000 faea 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 800735e:	e003      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
      break;
 8007364:	e000      	b.n	8007368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a40      	ldr	r2, [pc, #256]	; (80074e8 <TIM_Base_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f2:	d00f      	beq.n	8007414 <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a3d      	ldr	r2, [pc, #244]	; (80074ec <TIM_Base_SetConfig+0x118>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00b      	beq.n	8007414 <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3c      	ldr	r2, [pc, #240]	; (80074f0 <TIM_Base_SetConfig+0x11c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d007      	beq.n	8007414 <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3b      	ldr	r2, [pc, #236]	; (80074f4 <TIM_Base_SetConfig+0x120>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a3a      	ldr	r2, [pc, #232]	; (80074f8 <TIM_Base_SetConfig+0x124>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d108      	bne.n	8007426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a2f      	ldr	r2, [pc, #188]	; (80074e8 <TIM_Base_SetConfig+0x114>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d02b      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007434:	d027      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2c      	ldr	r2, [pc, #176]	; (80074ec <TIM_Base_SetConfig+0x118>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d023      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <TIM_Base_SetConfig+0x11c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01f      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <TIM_Base_SetConfig+0x120>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01b      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <TIM_Base_SetConfig+0x124>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d017      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <TIM_Base_SetConfig+0x128>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d013      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a27      	ldr	r2, [pc, #156]	; (8007500 <TIM_Base_SetConfig+0x12c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a26      	ldr	r2, [pc, #152]	; (8007504 <TIM_Base_SetConfig+0x130>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00b      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a25      	ldr	r2, [pc, #148]	; (8007508 <TIM_Base_SetConfig+0x134>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d007      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a24      	ldr	r2, [pc, #144]	; (800750c <TIM_Base_SetConfig+0x138>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a23      	ldr	r2, [pc, #140]	; (8007510 <TIM_Base_SetConfig+0x13c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d108      	bne.n	8007498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <TIM_Base_SetConfig+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_Base_SetConfig+0xf8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a0c      	ldr	r2, [pc, #48]	; (80074f8 <TIM_Base_SetConfig+0x124>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d103      	bne.n	80074d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	615a      	str	r2, [r3, #20]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40014000 	.word	0x40014000
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800
 8007508:	40001800 	.word	0x40001800
 800750c:	40001c00 	.word	0x40001c00
 8007510:	40002000 	.word	0x40002000

08007514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a20      	ldr	r2, [pc, #128]	; (80075ec <TIM_OC1_SetConfig+0xd8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_OC1_SetConfig+0x64>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <TIM_OC1_SetConfig+0xdc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d10c      	bne.n	8007592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0308 	bic.w	r3, r3, #8
 800757e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f023 0304 	bic.w	r3, r3, #4
 8007590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <TIM_OC1_SetConfig+0xd8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d003      	beq.n	80075a2 <TIM_OC1_SetConfig+0x8e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <TIM_OC1_SetConfig+0xdc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d111      	bne.n	80075c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	621a      	str	r2, [r3, #32]
}
 80075e0:	bf00      	nop
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40010400 	.word	0x40010400

080075f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f023 0210 	bic.w	r2, r3, #16
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0320 	bic.w	r3, r3, #32
 800763e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <TIM_OC2_SetConfig+0xe4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_OC2_SetConfig+0x68>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a21      	ldr	r2, [pc, #132]	; (80076dc <TIM_OC2_SetConfig+0xe8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10d      	bne.n	8007678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <TIM_OC2_SetConfig+0xe4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC2_SetConfig+0x94>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a16      	ldr	r2, [pc, #88]	; (80076dc <TIM_OC2_SetConfig+0xe8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d113      	bne.n	80076b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800768e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40010400 	.word	0x40010400

080076e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a21      	ldr	r2, [pc, #132]	; (80077c0 <TIM_OC3_SetConfig+0xe0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d003      	beq.n	8007746 <TIM_OC3_SetConfig+0x66>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <TIM_OC3_SetConfig+0xe4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d10d      	bne.n	8007762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800774c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a16      	ldr	r2, [pc, #88]	; (80077c0 <TIM_OC3_SetConfig+0xe0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_OC3_SetConfig+0x92>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <TIM_OC3_SetConfig+0xe4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d113      	bne.n	800779a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	621a      	str	r2, [r3, #32]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40010000 	.word	0x40010000
 80077c4:	40010400 	.word	0x40010400

080077c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	031b      	lsls	r3, r3, #12
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <TIM_OC4_SetConfig+0xa4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_OC4_SetConfig+0x68>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a11      	ldr	r2, [pc, #68]	; (8007870 <TIM_OC4_SetConfig+0xa8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d109      	bne.n	8007844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	019b      	lsls	r3, r3, #6
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40010000 	.word	0x40010000
 8007870:	40010400 	.word	0x40010400

08007874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f023 0201 	bic.w	r2, r3, #1
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800789e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 030a 	bic.w	r3, r3, #10
 80078b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b087      	sub	sp, #28
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0210 	bic.w	r2, r3, #16
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	031b      	lsls	r3, r3, #12
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800790e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	f043 0307 	orr.w	r3, r3, #7
 8007954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	609a      	str	r2, [r3, #8]
}
 800795c:	bf00      	nop
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	021a      	lsls	r2, r3, #8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	431a      	orrs	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	609a      	str	r2, [r3, #8]
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2201      	movs	r2, #1
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	43db      	mvns	r3, r3
 80079ca:	401a      	ands	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
	...

080079f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e05a      	b.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a21      	ldr	r2, [pc, #132]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d022      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a58:	d01d      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d018      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1a      	ldr	r2, [pc, #104]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00e      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d004      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10c      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40010400 	.word	0x40010400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40001800 	.word	0x40001800

08007aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e03d      	b.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e03f      	b.n	8007c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fb f8ba 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 ff43 	bl	8008a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08c      	sub	sp, #48	; 0x30
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d165      	bne.n	8007d3a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_UART_Transmit_DMA+0x26>
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e05e      	b.n	8007d3c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_UART_Transmit_DMA+0x38>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e057      	b.n	8007d3c <HAL_UART_Transmit_DMA+0xe8>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2221      	movs	r2, #33	; 0x21
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	4a22      	ldr	r2, [pc, #136]	; (8007d44 <HAL_UART_Transmit_DMA+0xf0>)
 8007cba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <HAL_UART_Transmit_DMA+0xf4>)
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_UART_Transmit_DMA+0xf8>)
 8007cca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007cd4:	f107 0308 	add.w	r3, r7, #8
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	6819      	ldr	r1, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	461a      	mov	r2, r3
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	f7fb fc9a 	bl	8003624 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cf8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	617b      	str	r3, [r7, #20]
   return(result);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d22:	627a      	str	r2, [r7, #36]	; 0x24
 8007d24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6a39      	ldr	r1, [r7, #32]
 8007d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e000      	b.n	8007d3c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007d3a:	2302      	movs	r3, #2
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3730      	adds	r7, #48	; 0x30
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	08008321 	.word	0x08008321
 8007d48:	080083bb 	.word	0x080083bb
 8007d4c:	08008533 	.word	0x08008533

08007d50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d11d      	bne.n	8007da6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_UART_Receive_DMA+0x26>
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e016      	b.n	8007da8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_UART_Receive_DMA+0x38>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e00f      	b.n	8007da8 <HAL_UART_Receive_DMA+0x58>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fc13 	bl	80085c8 <UART_Start_Receive_DMA>
 8007da2:	4603      	mov	r3, r0
 8007da4:	e000      	b.n	8007da8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007da6:	2302      	movs	r3, #2
  }
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b0ba      	sub	sp, #232	; 0xe8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_UART_IRQHandler+0x66>
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fd7f 	bl	8008912 <UART_Receive_IT>
      return;
 8007e14:	e256      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80de 	beq.w	8007fdc <HAL_UART_IRQHandler+0x22c>
 8007e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 80d1 	beq.w	8007fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_UART_IRQHandler+0xae>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_UART_IRQHandler+0xd2>
 8007e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f043 0202 	orr.w	r2, r3, #2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xf6>
 8007e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f043 0204 	orr.w	r2, r3, #4
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d011      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x126>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f043 0208 	orr.w	r2, r3, #8
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 81ed 	beq.w	80082ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f003 0320 	and.w	r3, r3, #32
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d008      	beq.n	8007efe <HAL_UART_IRQHandler+0x14e>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fd0a 	bl	8008912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2301      	moveq	r3, #1
 8007f0e:	2300      	movne	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <HAL_UART_IRQHandler+0x17a>
 8007f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d04f      	beq.n	8007fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fc12 	bl	8008754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d141      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d9      	bne.n	8007f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	4a7d      	ldr	r2, [pc, #500]	; (800818c <HAL_UART_IRQHandler+0x3dc>)
 8007f98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fb fc08 	bl	80037b4 <HAL_DMA_Abort_IT>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb8:	e00e      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f99a 	bl	80082f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	e00a      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f996 	bl	80082f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc8:	e006      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f992 	bl	80082f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fd6:	e170      	b.n	80082ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	bf00      	nop
    return;
 8007fda:	e16e      	b.n	80082ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 814a 	bne.w	800827a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8143 	beq.w	800827a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 813c 	beq.w	800827a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008002:	2300      	movs	r3, #0
 8008004:	60bb      	str	r3, [r7, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	f040 80b4 	bne.w	8008190 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8140 	beq.w	80082be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008046:	429a      	cmp	r2, r3
 8008048:	f080 8139 	bcs.w	80082be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805e:	f000 8088 	beq.w	8008172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	330c      	adds	r3, #12
 8008068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800807c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800808e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800809a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1d9      	bne.n	8008062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3314      	adds	r3, #20
 80080ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e1      	bne.n	80080ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3314      	adds	r3, #20
 80080f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3314      	adds	r3, #20
 800810a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800810e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800811c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e3      	bne.n	80080ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008142:	f023 0310 	bic.w	r3, r3, #16
 8008146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008154:	65ba      	str	r2, [r7, #88]	; 0x58
 8008156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800815a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e3      	bne.n	8008130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	4618      	mov	r0, r3
 800816e:	f7fb fab1 	bl	80036d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800817a:	b29b      	uxth	r3, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8c0 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008188:	e099      	b.n	80082be <HAL_UART_IRQHandler+0x50e>
 800818a:	bf00      	nop
 800818c:	0800881b 	.word	0x0800881b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008198:	b29b      	uxth	r3, r3
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 808b 	beq.w	80082c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8086 	beq.w	80082c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081da:	647a      	str	r2, [r7, #68]	; 0x44
 80081dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e3      	bne.n	80081b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3314      	adds	r3, #20
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	623b      	str	r3, [r7, #32]
   return(result);
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3314      	adds	r3, #20
 800820e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008212:	633a      	str	r2, [r7, #48]	; 0x30
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e3      	bne.n	80081ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	60fb      	str	r3, [r7, #12]
   return(result);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0310 	bic.w	r3, r3, #16
 800824a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008258:	61fa      	str	r2, [r7, #28]
 800825a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	69b9      	ldr	r1, [r7, #24]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	617b      	str	r3, [r7, #20]
   return(result);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e3      	bne.n	8008234 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800826c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f848 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008278:	e023      	b.n	80082c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <HAL_UART_IRQHandler+0x4ea>
 8008286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fad5 	bl	8008842 <UART_Transmit_IT>
    return;
 8008298:	e014      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00e      	beq.n	80082c4 <HAL_UART_IRQHandler+0x514>
 80082a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d008      	beq.n	80082c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb15 	bl	80088e2 <UART_EndTransmit_IT>
    return;
 80082b8:	e004      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
    return;
 80082ba:	bf00      	nop
 80082bc:	e002      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
      return;
 80082be:	bf00      	nop
 80082c0:	e000      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
      return;
 80082c2:	bf00      	nop
  }
}
 80082c4:	37e8      	adds	r7, #232	; 0xe8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop

080082cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b090      	sub	sp, #64	; 0x40
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d137      	bne.n	80083ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	2200      	movs	r2, #0
 8008340:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	623b      	str	r3, [r7, #32]
   return(result);
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
 800835a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008362:	633a      	str	r2, [r7, #48]	; 0x30
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	330c      	adds	r3, #12
 800837c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	60fb      	str	r3, [r7, #12]
   return(result);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
 800838e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008396:	61fa      	str	r2, [r7, #28]
 8008398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	69b9      	ldr	r1, [r7, #24]
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	617b      	str	r3, [r7, #20]
   return(result);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083aa:	e002      	b.n	80083b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80083ae:	f7f9 fd9b 	bl	8001ee8 <HAL_UART_TxCpltCallback>
}
 80083b2:	bf00      	nop
 80083b4:	3740      	adds	r7, #64	; 0x40
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff ff7f 	bl	80082cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b09c      	sub	sp, #112	; 0x70
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d172      	bne.n	80084d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80083f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f4:	2200      	movs	r2, #0
 80083f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008418:	65ba      	str	r2, [r7, #88]	; 0x58
 800841a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800841e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800843c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843e:	f023 0301 	bic.w	r3, r3, #1
 8008442:	667b      	str	r3, [r7, #100]	; 0x64
 8008444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3314      	adds	r3, #20
 800844a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800844c:	647a      	str	r2, [r7, #68]	; 0x44
 800844e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	623b      	str	r3, [r7, #32]
   return(result);
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008476:	663b      	str	r3, [r7, #96]	; 0x60
 8008478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008480:	633a      	str	r2, [r7, #48]	; 0x30
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d119      	bne.n	80084d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0310 	bic.w	r3, r3, #16
 80084ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	330c      	adds	r3, #12
 80084c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084c4:	61fa      	str	r2, [r7, #28]
 80084c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	69b9      	ldr	r1, [r7, #24]
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	617b      	str	r3, [r7, #20]
   return(result);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d106      	bne.n	80084ee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084e4:	4619      	mov	r1, r3
 80084e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084e8:	f7ff ff0e 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ec:	e002      	b.n	80084f4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80084ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084f0:	f7f9 fcd2 	bl	8001e98 <HAL_UART_RxCpltCallback>
}
 80084f4:	bf00      	nop
 80084f6:	3770      	adds	r7, #112	; 0x70
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	2b01      	cmp	r3, #1
 8008510:	d108      	bne.n	8008524 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff fef3 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008522:	e002      	b.n	800852a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7ff fedb 	bl	80082e0 <HAL_UART_RxHalfCpltCallback>
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	bf0c      	ite	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	2300      	movne	r3, #0
 8008556:	b2db      	uxtb	r3, r3
 8008558:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b21      	cmp	r3, #33	; 0x21
 8008564:	d108      	bne.n	8008578 <UART_DMAError+0x46>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008572:	68b8      	ldr	r0, [r7, #8]
 8008574:	f000 f8c6 	bl	8008704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b22      	cmp	r3, #34	; 0x22
 8008598:	d108      	bne.n	80085ac <UART_DMAError+0x7a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085a6:	68b8      	ldr	r0, [r7, #8]
 80085a8:	f000 f8d4 	bl	8008754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	f043 0210 	orr.w	r2, r3, #16
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085b8:	68b8      	ldr	r0, [r7, #8]
 80085ba:	f7ff fe9b 	bl	80082f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b098      	sub	sp, #96	; 0x60
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	88fa      	ldrh	r2, [r7, #6]
 80085e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2222      	movs	r2, #34	; 0x22
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <UART_Start_Receive_DMA+0x130>)
 80085f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	4a3f      	ldr	r2, [pc, #252]	; (80086fc <UART_Start_Receive_DMA+0x134>)
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	4a3e      	ldr	r2, [pc, #248]	; (8008700 <UART_Start_Receive_DMA+0x138>)
 8008606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	2200      	movs	r2, #0
 800860e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	f7fa fffc 	bl	8003624 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	613b      	str	r3, [r7, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d019      	beq.n	8008686 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008668:	65bb      	str	r3, [r7, #88]	; 0x58
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008672:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008674:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3314      	adds	r3, #20
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	657b      	str	r3, [r7, #84]	; 0x54
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3314      	adds	r3, #20
 80086a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e5      	bne.n	8008686 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3314      	adds	r3, #20
 80086c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d0:	653b      	str	r3, [r7, #80]	; 0x50
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3314      	adds	r3, #20
 80086d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086da:	627a      	str	r2, [r7, #36]	; 0x24
 80086dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6a39      	ldr	r1, [r7, #32]
 80086e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3760      	adds	r7, #96	; 0x60
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	080083d7 	.word	0x080083d7
 80086fc:	080084fd 	.word	0x080084fd
 8008700:	08008533 	.word	0x08008533

08008704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b089      	sub	sp, #36	; 0x24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60bb      	str	r3, [r7, #8]
   return(result);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	330c      	adds	r3, #12
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	61ba      	str	r2, [r7, #24]
 800872e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	613b      	str	r3, [r7, #16]
   return(result);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008748:	bf00      	nop
 800874a:	3724      	adds	r7, #36	; 0x24
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b095      	sub	sp, #84	; 0x54
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800877c:	643a      	str	r2, [r7, #64]	; 0x40
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3314      	adds	r3, #20
 8008796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e5      	bne.n	8008790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d119      	bne.n	8008800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	330c      	adds	r3, #12
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0310 	bic.w	r3, r3, #16
 80087e2:	647b      	str	r3, [r7, #68]	; 0x44
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ec:	61ba      	str	r2, [r7, #24]
 80087ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e5      	bne.n	80087cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800880e:	bf00      	nop
 8008810:	3754      	adds	r7, #84	; 0x54
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff fd5d 	bl	80082f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883a:	bf00      	nop
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b21      	cmp	r3, #33	; 0x21
 8008854:	d13e      	bne.n	80088d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885e:	d114      	bne.n	800888a <UART_Transmit_IT+0x48>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d110      	bne.n	800888a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800887c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	1c9a      	adds	r2, r3, #2
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	621a      	str	r2, [r3, #32]
 8008888:	e008      	b.n	800889c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	1c59      	adds	r1, r3, #1
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6211      	str	r1, [r2, #32]
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4619      	mov	r1, r3
 80088aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10f      	bne.n	80088d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e000      	b.n	80088d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088d4:	2302      	movs	r3, #2
  }
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7f9 faf0 	bl	8001ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b08c      	sub	sp, #48	; 0x30
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b22      	cmp	r3, #34	; 0x22
 8008924:	f040 80ab 	bne.w	8008a7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008930:	d117      	bne.n	8008962 <UART_Receive_IT+0x50>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d113      	bne.n	8008962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008950:	b29a      	uxth	r2, r3
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	1c9a      	adds	r2, r3, #2
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	; 0x28
 8008960:	e026      	b.n	80089b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d007      	beq.n	8008986 <UART_Receive_IT+0x74>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <UART_Receive_IT+0x82>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	b2da      	uxtb	r2, r3
 800898e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e008      	b.n	80089a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	4619      	mov	r1, r3
 80089be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d15a      	bne.n	8008a7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0220 	bic.w	r2, r2, #32
 80089d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d135      	bne.n	8008a70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	330c      	adds	r3, #12
 8008a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f023 0310 	bic.w	r3, r3, #16
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	623a      	str	r2, [r7, #32]
 8008a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	69f9      	ldr	r1, [r7, #28]
 8008a30:	6a3a      	ldr	r2, [r7, #32]
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e5      	bne.n	8008a0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b10      	cmp	r3, #16
 8008a4a:	d10a      	bne.n	8008a62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fc4d 	bl	8008308 <HAL_UARTEx_RxEventCallback>
 8008a6e:	e002      	b.n	8008a76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7f9 fa11 	bl	8001e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e002      	b.n	8008a80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
  }
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3730      	adds	r7, #48	; 0x30
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a8c:	b0c0      	sub	sp, #256	; 0x100
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa4:	68d9      	ldr	r1, [r3, #12]
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	ea40 0301 	orr.w	r3, r0, r1
 8008ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae0:	f021 010c 	bic.w	r1, r1, #12
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aee:	430b      	orrs	r3, r1
 8008af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b02:	6999      	ldr	r1, [r3, #24]
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	ea40 0301 	orr.w	r3, r0, r1
 8008b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	4b8f      	ldr	r3, [pc, #572]	; (8008d54 <UART_SetConfig+0x2cc>)
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d005      	beq.n	8008b28 <UART_SetConfig+0xa0>
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b8d      	ldr	r3, [pc, #564]	; (8008d58 <UART_SetConfig+0x2d0>)
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d104      	bne.n	8008b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b28:	f7fd faca 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 8008b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b30:	e003      	b.n	8008b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b32:	f7fd fab1 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8008b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b44:	f040 810c 	bne.w	8008d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	462b      	mov	r3, r5
 8008b5e:	1891      	adds	r1, r2, r2
 8008b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b62:	415b      	adcs	r3, r3
 8008b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	eb12 0801 	adds.w	r8, r2, r1
 8008b70:	4629      	mov	r1, r5
 8008b72:	eb43 0901 	adc.w	r9, r3, r1
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8a:	4690      	mov	r8, r2
 8008b8c:	4699      	mov	r9, r3
 8008b8e:	4623      	mov	r3, r4
 8008b90:	eb18 0303 	adds.w	r3, r8, r3
 8008b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b98:	462b      	mov	r3, r5
 8008b9a:	eb49 0303 	adc.w	r3, r9, r3
 8008b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	18db      	adds	r3, r3, r3
 8008bba:	653b      	str	r3, [r7, #80]	; 0x50
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	eb42 0303 	adc.w	r3, r2, r3
 8008bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bcc:	f7f7 fb68 	bl	80002a0 <__aeabi_uldivmod>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <UART_SetConfig+0x2d4>)
 8008bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	011c      	lsls	r4, r3, #4
 8008bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c00:	4641      	mov	r1, r8
 8008c02:	eb12 0a01 	adds.w	sl, r2, r1
 8008c06:	4649      	mov	r1, r9
 8008c08:	eb43 0b01 	adc.w	fp, r3, r1
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c20:	4692      	mov	sl, r2
 8008c22:	469b      	mov	fp, r3
 8008c24:	4643      	mov	r3, r8
 8008c26:	eb1a 0303 	adds.w	r3, sl, r3
 8008c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	eb4b 0303 	adc.w	r3, fp, r3
 8008c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	18db      	adds	r3, r3, r3
 8008c50:	643b      	str	r3, [r7, #64]	; 0x40
 8008c52:	4613      	mov	r3, r2
 8008c54:	eb42 0303 	adc.w	r3, r2, r3
 8008c58:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c62:	f7f7 fb1d 	bl	80002a0 <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <UART_SetConfig+0x2d4>)
 8008c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	2264      	movs	r2, #100	; 0x64
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c82:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <UART_SetConfig+0x2d4>)
 8008c84:	fba3 2302 	umull	r2, r3, r3, r2
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c90:	441c      	add	r4, r3
 8008c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	1891      	adds	r1, r2, r2
 8008caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cac:	415b      	adcs	r3, r3
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cb4:	4641      	mov	r1, r8
 8008cb6:	1851      	adds	r1, r2, r1
 8008cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8008cba:	4649      	mov	r1, r9
 8008cbc:	414b      	adcs	r3, r1
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ccc:	4659      	mov	r1, fp
 8008cce:	00cb      	lsls	r3, r1, #3
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cd6:	4651      	mov	r1, sl
 8008cd8:	00ca      	lsls	r2, r1, #3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	189b      	adds	r3, r3, r2
 8008ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ce8:	464b      	mov	r3, r9
 8008cea:	460a      	mov	r2, r1
 8008cec:	eb42 0303 	adc.w	r3, r2, r3
 8008cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d08:	460b      	mov	r3, r1
 8008d0a:	18db      	adds	r3, r3, r3
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d0e:	4613      	mov	r3, r2
 8008d10:	eb42 0303 	adc.w	r3, r2, r3
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d1e:	f7f7 fabf 	bl	80002a0 <__aeabi_uldivmod>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <UART_SetConfig+0x2d4>)
 8008d28:	fba3 1302 	umull	r1, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	2164      	movs	r1, #100	; 0x64
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	3332      	adds	r3, #50	; 0x32
 8008d3a:	4a08      	ldr	r2, [pc, #32]	; (8008d5c <UART_SetConfig+0x2d4>)
 8008d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	f003 0207 	and.w	r2, r3, #7
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4422      	add	r2, r4
 8008d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d50:	e105      	b.n	8008f5e <UART_SetConfig+0x4d6>
 8008d52:	bf00      	nop
 8008d54:	40011000 	.word	0x40011000
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d72:	4642      	mov	r2, r8
 8008d74:	464b      	mov	r3, r9
 8008d76:	1891      	adds	r1, r2, r2
 8008d78:	6239      	str	r1, [r7, #32]
 8008d7a:	415b      	adcs	r3, r3
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d82:	4641      	mov	r1, r8
 8008d84:	1854      	adds	r4, r2, r1
 8008d86:	4649      	mov	r1, r9
 8008d88:	eb43 0501 	adc.w	r5, r3, r1
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	00eb      	lsls	r3, r5, #3
 8008d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d9a:	00e2      	lsls	r2, r4, #3
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	461d      	mov	r5, r3
 8008da0:	4643      	mov	r3, r8
 8008da2:	18e3      	adds	r3, r4, r3
 8008da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008da8:	464b      	mov	r3, r9
 8008daa:	eb45 0303 	adc.w	r3, r5, r3
 8008dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dce:	4629      	mov	r1, r5
 8008dd0:	008b      	lsls	r3, r1, #2
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dd8:	4621      	mov	r1, r4
 8008dda:	008a      	lsls	r2, r1, #2
 8008ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de0:	f7f7 fa5e 	bl	80002a0 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4b60      	ldr	r3, [pc, #384]	; (8008f6c <UART_SetConfig+0x4e4>)
 8008dea:	fba3 2302 	umull	r2, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	011c      	lsls	r4, r3, #4
 8008df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e04:	4642      	mov	r2, r8
 8008e06:	464b      	mov	r3, r9
 8008e08:	1891      	adds	r1, r2, r2
 8008e0a:	61b9      	str	r1, [r7, #24]
 8008e0c:	415b      	adcs	r3, r3
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e14:	4641      	mov	r1, r8
 8008e16:	1851      	adds	r1, r2, r1
 8008e18:	6139      	str	r1, [r7, #16]
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	414b      	adcs	r3, r1
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	00cb      	lsls	r3, r1, #3
 8008e30:	4651      	mov	r1, sl
 8008e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e36:	4651      	mov	r1, sl
 8008e38:	00ca      	lsls	r2, r1, #3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4642      	mov	r2, r8
 8008e42:	189b      	adds	r3, r3, r2
 8008e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e48:	464b      	mov	r3, r9
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	eb42 0303 	adc.w	r3, r2, r3
 8008e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	008b      	lsls	r3, r1, #2
 8008e70:	4641      	mov	r1, r8
 8008e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e76:	4641      	mov	r1, r8
 8008e78:	008a      	lsls	r2, r1, #2
 8008e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e7e:	f7f7 fa0f 	bl	80002a0 <__aeabi_uldivmod>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4b39      	ldr	r3, [pc, #228]	; (8008f6c <UART_SetConfig+0x4e4>)
 8008e88:	fba3 1302 	umull	r1, r3, r3, r2
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	2164      	movs	r1, #100	; 0x64
 8008e90:	fb01 f303 	mul.w	r3, r1, r3
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	3332      	adds	r3, #50	; 0x32
 8008e9a:	4a34      	ldr	r2, [pc, #208]	; (8008f6c <UART_SetConfig+0x4e4>)
 8008e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ea6:	441c      	add	r4, r3
 8008ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eac:	2200      	movs	r2, #0
 8008eae:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8008eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	464b      	mov	r3, r9
 8008eba:	1891      	adds	r1, r2, r2
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	415b      	adcs	r3, r3
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	1851      	adds	r1, r2, r1
 8008eca:	6039      	str	r1, [r7, #0]
 8008ecc:	4649      	mov	r1, r9
 8008ece:	414b      	adcs	r3, r1
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ede:	4659      	mov	r1, fp
 8008ee0:	00cb      	lsls	r3, r1, #3
 8008ee2:	4651      	mov	r1, sl
 8008ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ee8:	4651      	mov	r1, sl
 8008eea:	00ca      	lsls	r2, r1, #3
 8008eec:	4610      	mov	r0, r2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef8:	464b      	mov	r3, r9
 8008efa:	460a      	mov	r2, r1
 8008efc:	eb42 0303 	adc.w	r3, r2, r3
 8008f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	008b      	lsls	r3, r1, #2
 8008f1e:	4641      	mov	r1, r8
 8008f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f24:	4641      	mov	r1, r8
 8008f26:	008a      	lsls	r2, r1, #2
 8008f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f2c:	f7f7 f9b8 	bl	80002a0 <__aeabi_uldivmod>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <UART_SetConfig+0x4e4>)
 8008f36:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	2164      	movs	r1, #100	; 0x64
 8008f3e:	fb01 f303 	mul.w	r3, r1, r3
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	3332      	adds	r3, #50	; 0x32
 8008f48:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <UART_SetConfig+0x4e4>)
 8008f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	f003 020f 	and.w	r2, r3, #15
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4422      	add	r2, r4
 8008f5c:	609a      	str	r2, [r3, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f64:	46bd      	mov	sp, r7
 8008f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f6a:	bf00      	nop
 8008f6c:	51eb851f 	.word	0x51eb851f

08008f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f70:	b084      	sub	sp, #16
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	f107 001c 	add.w	r0, r7, #28
 8008f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d122      	bne.n	8008fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d105      	bne.n	8008fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 faa2 	bl	800950c <USB_CoreReset>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e01a      	b.n	8009004 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa96 	bl	800950c <USB_CoreReset>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ff6:	e005      	b.n	8009004 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	2b01      	cmp	r3, #1
 8009008:	d10b      	bne.n	8009022 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f043 0206 	orr.w	r2, r3, #6
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f043 0220 	orr.w	r2, r3, #32
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800902e:	b004      	add	sp, #16
 8009030:	4770      	bx	lr

08009032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f023 0201 	bic.w	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d115      	bne.n	80090a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009082:	2001      	movs	r0, #1
 8009084:	f7fa f91a 	bl	80032bc <HAL_Delay>
      ms++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa2e 	bl	80094f0 <USB_GetMode>
 8009094:	4603      	mov	r3, r0
 8009096:	2b01      	cmp	r3, #1
 8009098:	d01e      	beq.n	80090d8 <USB_SetCurrentMode+0x84>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b31      	cmp	r3, #49	; 0x31
 800909e:	d9f0      	bls.n	8009082 <USB_SetCurrentMode+0x2e>
 80090a0:	e01a      	b.n	80090d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d115      	bne.n	80090d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090b4:	2001      	movs	r0, #1
 80090b6:	f7fa f901 	bl	80032bc <HAL_Delay>
      ms++;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fa15 	bl	80094f0 <USB_GetMode>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <USB_SetCurrentMode+0x84>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b31      	cmp	r3, #49	; 0x31
 80090d0:	d9f0      	bls.n	80090b4 <USB_SetCurrentMode+0x60>
 80090d2:	e001      	b.n	80090d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e005      	b.n	80090e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b32      	cmp	r3, #50	; 0x32
 80090dc:	d101      	bne.n	80090e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090ec:	b084      	sub	sp, #16
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009106:	2300      	movs	r3, #0
 8009108:	613b      	str	r3, [r7, #16]
 800910a:	e009      	b.n	8009120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3340      	adds	r3, #64	; 0x40
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	2200      	movs	r2, #0
 8009118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	3301      	adds	r3, #1
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b0e      	cmp	r3, #14
 8009124:	d9f2      	bls.n	800910c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d11c      	bne.n	8009166 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913a:	f043 0302 	orr.w	r3, r3, #2
 800913e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
 8009164:	e00b      	b.n	800917e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009184:	461a      	mov	r2, r3
 8009186:	2300      	movs	r3, #0
 8009188:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	4619      	mov	r1, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009198:	461a      	mov	r2, r3
 800919a:	680b      	ldr	r3, [r1, #0]
 800919c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d10c      	bne.n	80091be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091aa:	2100      	movs	r1, #0
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f965 	bl	800947c <USB_SetDevSpeed>
 80091b2:	e008      	b.n	80091c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f960 	bl	800947c <USB_SetDevSpeed>
 80091bc:	e003      	b.n	80091c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091be:	2103      	movs	r1, #3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f95b 	bl	800947c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091c6:	2110      	movs	r1, #16
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f8f3 	bl	80093b4 <USB_FlushTxFifo>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f91f 	bl	800941c <USB_FlushRxFifo>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ee:	461a      	mov	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	461a      	mov	r2, r3
 80091fc:	2300      	movs	r3, #0
 80091fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	461a      	mov	r2, r3
 8009208:	2300      	movs	r3, #0
 800920a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800920c:	2300      	movs	r3, #0
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	e043      	b.n	800929a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009228:	d118      	bne.n	800925c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	461a      	mov	r2, r3
 800923e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e013      	b.n	800926e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	461a      	mov	r2, r3
 8009254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	e008      	b.n	800926e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	461a      	mov	r2, r3
 800926a:	2300      	movs	r3, #0
 800926c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	461a      	mov	r2, r3
 800927c:	2300      	movs	r3, #0
 800927e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3301      	adds	r3, #1
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3b7      	bcc.n	8009212 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092a2:	2300      	movs	r3, #0
 80092a4:	613b      	str	r3, [r7, #16]
 80092a6:	e043      	b.n	8009330 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092be:	d118      	bne.n	80092f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d2:	461a      	mov	r2, r3
 80092d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	e013      	b.n	8009304 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	e008      	b.n	8009304 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	2300      	movs	r3, #0
 8009302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	461a      	mov	r2, r3
 8009324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3301      	adds	r3, #1
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	429a      	cmp	r2, r3
 8009336:	d3b7      	bcc.n	80092a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800934a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2b00      	cmp	r3, #0
 800935e:	d105      	bne.n	800936c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f043 0210 	orr.w	r2, r3, #16
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <USB_DevInit+0x2c4>)
 8009372:	4313      	orrs	r3, r2
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f043 0208 	orr.w	r2, r3, #8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800938a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d107      	bne.n	80093a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009398:	f043 0304 	orr.w	r3, r3, #4
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093ac:	b004      	add	sp, #16
 80093ae:	4770      	bx	lr
 80093b0:	803c3800 	.word	0x803c3800

080093b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4a13      	ldr	r2, [pc, #76]	; (8009418 <USB_FlushTxFifo+0x64>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d901      	bls.n	80093d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e01b      	b.n	800940c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	daf2      	bge.n	80093c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	019b      	lsls	r3, r3, #6
 80093e4:	f043 0220 	orr.w	r2, r3, #32
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4a08      	ldr	r2, [pc, #32]	; (8009418 <USB_FlushTxFifo+0x64>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d901      	bls.n	80093fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e006      	b.n	800940c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b20      	cmp	r3, #32
 8009408:	d0f0      	beq.n	80093ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	00030d40 	.word	0x00030d40

0800941c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4a11      	ldr	r2, [pc, #68]	; (8009478 <USB_FlushRxFifo+0x5c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d901      	bls.n	800943a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e018      	b.n	800946c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	daf2      	bge.n	8009428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2210      	movs	r2, #16
 800944a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4a08      	ldr	r2, [pc, #32]	; (8009478 <USB_FlushRxFifo+0x5c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d901      	bls.n	800945e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e006      	b.n	800946c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	2b10      	cmp	r3, #16
 8009468:	d0f0      	beq.n	800944c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	00030d40 	.word	0x00030d40

0800947c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800949c:	4313      	orrs	r3, r2
 800949e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094c8:	f023 0303 	bic.w	r3, r3, #3
 80094cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094dc:	f043 0302 	orr.w	r3, r3, #2
 80094e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	f003 0301 	and.w	r3, r3, #1
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a13      	ldr	r2, [pc, #76]	; (8009570 <USB_CoreReset+0x64>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d901      	bls.n	800952a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e01b      	b.n	8009562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	daf2      	bge.n	8009518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f043 0201 	orr.w	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4a09      	ldr	r2, [pc, #36]	; (8009570 <USB_CoreReset+0x64>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d901      	bls.n	8009554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e006      	b.n	8009562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b01      	cmp	r3, #1
 800955e:	d0f0      	beq.n	8009542 <USB_CoreReset+0x36>

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	00030d40 	.word	0x00030d40

08009574 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009578:	4904      	ldr	r1, [pc, #16]	; (800958c <MX_FATFS_Init+0x18>)
 800957a:	4805      	ldr	r0, [pc, #20]	; (8009590 <MX_FATFS_Init+0x1c>)
 800957c:	f002 feb8 	bl	800c2f0 <FATFS_LinkDriver>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	4b03      	ldr	r3, [pc, #12]	; (8009594 <MX_FATFS_Init+0x20>)
 8009586:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009588:	bf00      	nop
 800958a:	bd80      	pop	{r7, pc}
 800958c:	200034a8 	.word	0x200034a8
 8009590:	20000094 	.word	0x20000094
 8009594:	200034a4 	.word	0x200034a4

08009598 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800959c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800959e:	4618      	mov	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f7 fc1d 	bl	8000df4 <SD_disk_initialize>
 80095ba:	4603      	mov	r3, r0
 80095bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	4603      	mov	r3, r0
 80095ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f7 fcf8 	bl	8000fc8 <SD_disk_status>
 80095d8:	4603      	mov	r3, r0
 80095da:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 80095f4:	7bf8      	ldrb	r0, [r7, #15]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	f7f7 fcfa 	bl	8000ff4 <SD_disk_read>
 8009600:	4603      	mov	r3, r0
 8009602:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 800961c:	7bf8      	ldrb	r0, [r7, #15]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	f7f7 fd50 	bl	80010c8 <SD_disk_write>
 8009628:	4603      	mov	r3, r0
 800962a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	603a      	str	r2, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
 8009640:	460b      	mov	r3, r1
 8009642:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv,cmd,buff);
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	79b9      	ldrb	r1, [r7, #6]
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f7f7 fdc0 	bl	80011d0 <SD_disk_ioctl>
 8009650:	4603      	mov	r3, r0
 8009652:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	4a08      	ldr	r2, [pc, #32]	; (800968c <disk_status+0x30>)
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	4905      	ldr	r1, [pc, #20]	; (800968c <disk_status+0x30>)
 8009676:	440a      	add	r2, r1
 8009678:	7a12      	ldrb	r2, [r2, #8]
 800967a:	4610      	mov	r0, r2
 800967c:	4798      	blx	r3
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	200034d4 	.word	0x200034d4

08009690 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	4a0d      	ldr	r2, [pc, #52]	; (80096d8 <disk_initialize+0x48>)
 80096a2:	5cd3      	ldrb	r3, [r2, r3]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d111      	bne.n	80096cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <disk_initialize+0x48>)
 80096ac:	2101      	movs	r1, #1
 80096ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <disk_initialize+0x48>)
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	79fa      	ldrb	r2, [r7, #7]
 80096be:	4906      	ldr	r1, [pc, #24]	; (80096d8 <disk_initialize+0x48>)
 80096c0:	440a      	add	r2, r1
 80096c2:	7a12      	ldrb	r2, [r2, #8]
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	200034d4 	.word	0x200034d4

080096dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096dc:	b590      	push	{r4, r7, lr}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4a0a      	ldr	r2, [pc, #40]	; (8009718 <disk_read+0x3c>)
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	689c      	ldr	r4, [r3, #8]
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4a07      	ldr	r2, [pc, #28]	; (8009718 <disk_read+0x3c>)
 80096fc:	4413      	add	r3, r2
 80096fe:	7a18      	ldrb	r0, [r3, #8]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	47a0      	blx	r4
 8009708:	4603      	mov	r3, r0
 800970a:	75fb      	strb	r3, [r7, #23]
  return res;
 800970c:	7dfb      	ldrb	r3, [r7, #23]
}
 800970e:	4618      	mov	r0, r3
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	bd90      	pop	{r4, r7, pc}
 8009716:	bf00      	nop
 8009718:	200034d4 	.word	0x200034d4

0800971c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <disk_write+0x3c>)
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68dc      	ldr	r4, [r3, #12]
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4a07      	ldr	r2, [pc, #28]	; (8009758 <disk_write+0x3c>)
 800973c:	4413      	add	r3, r2
 800973e:	7a18      	ldrb	r0, [r3, #8]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	47a0      	blx	r4
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]
  return res;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
}
 800974e:	4618      	mov	r0, r3
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}
 8009756:	bf00      	nop
 8009758:	200034d4 	.word	0x200034d4

0800975c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	603a      	str	r2, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	460b      	mov	r3, r1
 800976a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <disk_ioctl+0x38>)
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	79fa      	ldrb	r2, [r7, #7]
 800977a:	4906      	ldr	r1, [pc, #24]	; (8009794 <disk_ioctl+0x38>)
 800977c:	440a      	add	r2, r1
 800977e:	7a10      	ldrb	r0, [r2, #8]
 8009780:	79b9      	ldrb	r1, [r7, #6]
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4798      	blx	r3
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
  return res;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200034d4 	.word	0x200034d4

08009798 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3301      	adds	r3, #1
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097a8:	89fb      	ldrh	r3, [r7, #14]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	b21a      	sxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b21b      	sxth	r3, r3
 80097b4:	4313      	orrs	r3, r2
 80097b6:	b21b      	sxth	r3, r3
 80097b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097ba:	89fb      	ldrh	r3, [r7, #14]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3303      	adds	r3, #3
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	3202      	adds	r2, #2
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	021b      	lsls	r3, r3, #8
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	3201      	adds	r2, #1
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7812      	ldrb	r2, [r2, #0]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8009800:	68fb      	ldr	r3, [r7, #12]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	887a      	ldrh	r2, [r7, #2]
 8009822:	b2d2      	uxtb	r2, r2
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	0a1b      	lsrs	r3, r3, #8
 800982a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	b2d2      	uxtb	r2, r2
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	0a1b      	lsrs	r3, r3, #8
 800985e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	0a1b      	lsrs	r3, r3, #8
 8009870:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	1c53      	adds	r3, r2, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	1c59      	adds	r1, r3, #1
 80098c0:	6179      	str	r1, [r7, #20]
 80098c2:	7812      	ldrb	r2, [r2, #0]
 80098c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	607b      	str	r3, [r7, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f1      	bne.n	80098b6 <mem_cpy+0x1a>
	}
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098de:	b480      	push	{r7}
 80098e0:	b087      	sub	sp, #28
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	617a      	str	r2, [r7, #20]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f3      	bne.n	80098ee <mem_set+0x10>
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009914:	b480      	push	{r7}
 8009916:	b089      	sub	sp, #36	; 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	61fb      	str	r3, [r7, #28]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	61fa      	str	r2, [r7, #28]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	4619      	mov	r1, r3
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	61ba      	str	r2, [r7, #24]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	1acb      	subs	r3, r1, r3
 8009940:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3b01      	subs	r3, #1
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <mem_cmp+0x40>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0eb      	beq.n	800992c <mem_cmp+0x18>

	return r;
 8009954:	697b      	ldr	r3, [r7, #20]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3724      	adds	r7, #36	; 0x24
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800996c:	e002      	b.n	8009974 <chk_chr+0x12>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	3301      	adds	r3, #1
 8009972:	607b      	str	r3, [r7, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <chk_chr+0x26>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	4293      	cmp	r3, r2
 8009986:	d1f2      	bne.n	800996e <chk_chr+0xc>
	return *str;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	781b      	ldrb	r3, [r3, #0]
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d009      	beq.n	80099ba <lock_fs+0x22>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f002 fcdb 	bl	800c366 <ff_req_grant>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <lock_fs+0x22>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <lock_fs+0x24>
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00d      	beq.n	80099f2 <unlock_fs+0x2e>
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	2b0c      	cmp	r3, #12
 80099da:	d00a      	beq.n	80099f2 <unlock_fs+0x2e>
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	2b0b      	cmp	r3, #11
 80099e0:	d007      	beq.n	80099f2 <unlock_fs+0x2e>
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	2b0f      	cmp	r3, #15
 80099e6:	d004      	beq.n	80099f2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f002 fccf 	bl	800c390 <ff_rel_grant>
	}
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	e029      	b.n	8009a64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a10:	4a27      	ldr	r2, [pc, #156]	; (8009ab0 <chk_lock+0xb4>)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	4413      	add	r3, r2
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01d      	beq.n	8009a5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a1e:	4a24      	ldr	r2, [pc, #144]	; (8009ab0 <chk_lock+0xb4>)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	4413      	add	r3, r2
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d116      	bne.n	8009a5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a30:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <chk_lock+0xb4>)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d10c      	bne.n	8009a5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a44:	4a1a      	ldr	r2, [pc, #104]	; (8009ab0 <chk_lock+0xb4>)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d102      	bne.n	8009a5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a58:	e007      	b.n	8009a6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d9d2      	bls.n	8009a10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d109      	bne.n	8009a84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <chk_lock+0x80>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d101      	bne.n	8009a80 <chk_lock+0x84>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e010      	b.n	8009aa2 <chk_lock+0xa6>
 8009a80:	2312      	movs	r3, #18
 8009a82:	e00e      	b.n	8009aa2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d108      	bne.n	8009a9c <chk_lock+0xa0>
 8009a8a:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <chk_lock+0xb4>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	4413      	add	r3, r2
 8009a92:	330c      	adds	r3, #12
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9a:	d101      	bne.n	8009aa0 <chk_lock+0xa4>
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	e000      	b.n	8009aa2 <chk_lock+0xa6>
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	200034b4 	.word	0x200034b4

08009ab4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	e002      	b.n	8009ac6 <enq_lock+0x12>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	607b      	str	r3, [r7, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d806      	bhi.n	8009ada <enq_lock+0x26>
 8009acc:	4a09      	ldr	r2, [pc, #36]	; (8009af4 <enq_lock+0x40>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	4413      	add	r3, r2
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f2      	bne.n	8009ac0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	bf14      	ite	ne
 8009ae0:	2301      	movne	r3, #1
 8009ae2:	2300      	moveq	r3, #0
 8009ae4:	b2db      	uxtb	r3, r3
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	200034b4 	.word	0x200034b4

08009af8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e01f      	b.n	8009b48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b08:	4a41      	ldr	r2, [pc, #260]	; (8009c10 <inc_lock+0x118>)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	4413      	add	r3, r2
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d113      	bne.n	8009b42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b1a:	4a3d      	ldr	r2, [pc, #244]	; (8009c10 <inc_lock+0x118>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	4413      	add	r3, r2
 8009b22:	3304      	adds	r3, #4
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d109      	bne.n	8009b42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b2e:	4a38      	ldr	r2, [pc, #224]	; (8009c10 <inc_lock+0x118>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	4413      	add	r3, r2
 8009b36:	3308      	adds	r3, #8
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d006      	beq.n	8009b50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d9dc      	bls.n	8009b08 <inc_lock+0x10>
 8009b4e:	e000      	b.n	8009b52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d132      	bne.n	8009bbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e002      	b.n	8009b64 <inc_lock+0x6c>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d806      	bhi.n	8009b78 <inc_lock+0x80>
 8009b6a:	4a29      	ldr	r2, [pc, #164]	; (8009c10 <inc_lock+0x118>)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	4413      	add	r3, r2
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1f2      	bne.n	8009b5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d101      	bne.n	8009b82 <inc_lock+0x8a>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e040      	b.n	8009c04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4922      	ldr	r1, [pc, #136]	; (8009c10 <inc_lock+0x118>)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	440b      	add	r3, r1
 8009b8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	491e      	ldr	r1, [pc, #120]	; (8009c10 <inc_lock+0x118>)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	440b      	add	r3, r1
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	491a      	ldr	r1, [pc, #104]	; (8009c10 <inc_lock+0x118>)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	440b      	add	r3, r1
 8009bac:	3308      	adds	r3, #8
 8009bae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bb0:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <inc_lock+0x118>)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	4413      	add	r3, r2
 8009bb8:	330c      	adds	r3, #12
 8009bba:	2200      	movs	r2, #0
 8009bbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <inc_lock+0xe0>
 8009bc4:	4a12      	ldr	r2, [pc, #72]	; (8009c10 <inc_lock+0x118>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	4413      	add	r3, r2
 8009bcc:	330c      	adds	r3, #12
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <inc_lock+0xe0>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e015      	b.n	8009c04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d108      	bne.n	8009bf0 <inc_lock+0xf8>
 8009bde:	4a0c      	ldr	r2, [pc, #48]	; (8009c10 <inc_lock+0x118>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	4413      	add	r3, r2
 8009be6:	330c      	adds	r3, #12
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	e001      	b.n	8009bf4 <inc_lock+0xfc>
 8009bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bf4:	4906      	ldr	r1, [pc, #24]	; (8009c10 <inc_lock+0x118>)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	440b      	add	r3, r1
 8009bfc:	330c      	adds	r3, #12
 8009bfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200034b4 	.word	0x200034b4

08009c14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d825      	bhi.n	8009c74 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c28:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <dec_lock+0x74>)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	4413      	add	r3, r2
 8009c30:	330c      	adds	r3, #12
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c36:	89fb      	ldrh	r3, [r7, #14]
 8009c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3c:	d101      	bne.n	8009c42 <dec_lock+0x2e>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c42:	89fb      	ldrh	r3, [r7, #14]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <dec_lock+0x3a>
 8009c48:	89fb      	ldrh	r3, [r7, #14]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c4e:	4a0e      	ldr	r2, [pc, #56]	; (8009c88 <dec_lock+0x74>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	4413      	add	r3, r2
 8009c56:	330c      	adds	r3, #12
 8009c58:	89fa      	ldrh	r2, [r7, #14]
 8009c5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <dec_lock+0x5a>
 8009c62:	4a09      	ldr	r2, [pc, #36]	; (8009c88 <dec_lock+0x74>)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	4413      	add	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	737b      	strb	r3, [r7, #13]
 8009c72:	e001      	b.n	8009c78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c74:	2302      	movs	r3, #2
 8009c76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c78:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	200034b4 	.word	0x200034b4

08009c8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	e010      	b.n	8009cbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c9a:	4a0d      	ldr	r2, [pc, #52]	; (8009cd0 <clear_lock+0x44>)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	4413      	add	r3, r2
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d105      	bne.n	8009cb6 <clear_lock+0x2a>
 8009caa:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <clear_lock+0x44>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	4413      	add	r3, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d9eb      	bls.n	8009c9a <clear_lock+0xe>
	}
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	200034b4 	.word	0x200034b4

08009cd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	78db      	ldrb	r3, [r3, #3]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d034      	beq.n	8009d52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	7858      	ldrb	r0, [r3, #1]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	f7ff fd0e 	bl	800971c <disk_write>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	73fb      	strb	r3, [r7, #15]
 8009d0a:	e022      	b.n	8009d52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	1ad2      	subs	r2, r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d217      	bcs.n	8009d52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	789b      	ldrb	r3, [r3, #2]
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	e010      	b.n	8009d4c <sync_window+0x78>
					wsect += fs->fsize;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	4413      	add	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7858      	ldrb	r0, [r3, #1]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d3e:	2301      	movs	r3, #1
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	f7ff fceb 	bl	800971c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d8eb      	bhi.n	8009d2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d01b      	beq.n	8009dac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff ffad 	bl	8009cd4 <sync_window>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d113      	bne.n	8009dac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7858      	ldrb	r0, [r3, #1]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d8e:	2301      	movs	r3, #1
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	f7ff fca3 	bl	80096dc <disk_read>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009da0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff87 	bl	8009cd4 <sync_window>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d159      	bne.n	8009e84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d149      	bne.n	8009e6c <sync_fs+0xb4>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	791b      	ldrb	r3, [r3, #4]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d145      	bne.n	8009e6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	899b      	ldrh	r3, [r3, #12]
 8009dea:	461a      	mov	r2, r3
 8009dec:	2100      	movs	r1, #0
 8009dee:	f7ff fd76 	bl	80098de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3338      	adds	r3, #56	; 0x38
 8009df6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dfa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff fd05 	bl	800980e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3338      	adds	r3, #56	; 0x38
 8009e08:	4921      	ldr	r1, [pc, #132]	; (8009e90 <sync_fs+0xd8>)
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fd1a 	bl	8009844 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3338      	adds	r3, #56	; 0x38
 8009e14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e18:	491e      	ldr	r1, [pc, #120]	; (8009e94 <sync_fs+0xdc>)
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fd12 	bl	8009844 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3338      	adds	r3, #56	; 0x38
 8009e24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7ff fd08 	bl	8009844 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3338      	adds	r3, #56	; 0x38
 8009e38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f7ff fcfe 	bl	8009844 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	7858      	ldrb	r0, [r3, #1]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e60:	2301      	movs	r3, #1
 8009e62:	f7ff fc5b 	bl	800971c <disk_write>
			fs->fsi_flag = 0;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	785b      	ldrb	r3, [r3, #1]
 8009e70:	2200      	movs	r2, #0
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff fc71 	bl	800975c <disk_ioctl>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <sync_fs+0xcc>
 8009e80:	2301      	movs	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	41615252 	.word	0x41615252
 8009e94:	61417272 	.word	0x61417272

08009e98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	3b02      	subs	r3, #2
 8009ea6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	3b02      	subs	r3, #2
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d301      	bcc.n	8009eb8 <clust2sect+0x20>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e008      	b.n	8009eca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	895b      	ldrh	r3, [r3, #10]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	fb03 f202 	mul.w	r2, r3, r2
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	4413      	add	r3, r2
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b086      	sub	sp, #24
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d904      	bls.n	8009ef6 <get_fat+0x20>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d302      	bcc.n	8009efc <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e0bb      	b.n	800a074 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295
 8009f00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	f000 8083 	beq.w	800a012 <get_fat+0x13c>
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	f300 80a7 	bgt.w	800a060 <get_fat+0x18a>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d002      	beq.n	8009f1c <get_fat+0x46>
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d056      	beq.n	8009fc8 <get_fat+0xf2>
 8009f1a:	e0a1      	b.n	800a060 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	085b      	lsrs	r3, r3, #1
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	4619      	mov	r1, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f3a:	4413      	add	r3, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6938      	ldr	r0, [r7, #16]
 8009f40:	f7ff ff0c 	bl	8009d5c <move_window>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f040 808d 	bne.w	800a066 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	60fa      	str	r2, [r7, #12]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	8992      	ldrh	r2, [r2, #12]
 8009f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f5a:	fb01 f202 	mul.w	r2, r1, r2
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	899b      	ldrh	r3, [r3, #12]
 8009f72:	4619      	mov	r1, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6938      	ldr	r0, [r7, #16]
 8009f80:	f7ff feec 	bl	8009d5c <move_window>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d16f      	bne.n	800a06a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	899b      	ldrh	r3, [r3, #12]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f96:	fb01 f202 	mul.w	r2, r1, r2
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009fa4:	021b      	lsls	r3, r3, #8
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <get_fat+0xe8>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	091b      	lsrs	r3, r3, #4
 8009fbc:	e002      	b.n	8009fc4 <get_fat+0xee>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fc4:	617b      	str	r3, [r7, #20]
			break;
 8009fc6:	e055      	b.n	800a074 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	899b      	ldrh	r3, [r3, #12]
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fdc:	4413      	add	r3, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6938      	ldr	r0, [r7, #16]
 8009fe2:	f7ff febb 	bl	8009d5c <move_window>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d140      	bne.n	800a06e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	8992      	ldrh	r2, [r2, #12]
 8009ffa:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ffe:	fb00 f202 	mul.w	r2, r0, r2
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	440b      	add	r3, r1
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fbc6 	bl	8009798 <ld_word>
 800a00c:	4603      	mov	r3, r0
 800a00e:	617b      	str	r3, [r7, #20]
			break;
 800a010:	e030      	b.n	800a074 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	899b      	ldrh	r3, [r3, #12]
 800a01a:	089b      	lsrs	r3, r3, #2
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	4619      	mov	r1, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	fbb3 f3f1 	udiv	r3, r3, r1
 800a026:	4413      	add	r3, r2
 800a028:	4619      	mov	r1, r3
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f7ff fe96 	bl	8009d5c <move_window>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d11d      	bne.n	800a072 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	8992      	ldrh	r2, [r2, #12]
 800a044:	fbb3 f0f2 	udiv	r0, r3, r2
 800a048:	fb00 f202 	mul.w	r2, r0, r2
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	440b      	add	r3, r1
 800a050:	4618      	mov	r0, r3
 800a052:	f7ff fbb9 	bl	80097c8 <ld_dword>
 800a056:	4603      	mov	r3, r0
 800a058:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a05c:	617b      	str	r3, [r7, #20]
			break;
 800a05e:	e009      	b.n	800a074 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a060:	2301      	movs	r3, #1
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e006      	b.n	800a074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a066:	bf00      	nop
 800a068:	e004      	b.n	800a074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a06a:	bf00      	nop
 800a06c:	e002      	b.n	800a074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a072:	bf00      	nop
		}
	}

	return val;
 800a074:	697b      	ldr	r3, [r7, #20]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a07e:	b590      	push	{r4, r7, lr}
 800a080:	b089      	sub	sp, #36	; 0x24
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a08a:	2302      	movs	r3, #2
 800a08c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b01      	cmp	r3, #1
 800a092:	f240 8102 	bls.w	800a29a <put_fat+0x21c>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	f080 80fc 	bcs.w	800a29a <put_fat+0x21c>
		switch (fs->fs_type) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	f000 80b6 	beq.w	800a218 <put_fat+0x19a>
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	f300 80fd 	bgt.w	800a2ac <put_fat+0x22e>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d003      	beq.n	800a0be <put_fat+0x40>
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	f000 8083 	beq.w	800a1c2 <put_fat+0x144>
 800a0bc:	e0f6      	b.n	800a2ac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	085b      	lsrs	r3, r3, #1
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	899b      	ldrh	r3, [r3, #12]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0dc:	4413      	add	r3, r2
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff fe3b 	bl	8009d5c <move_window>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0ea:	7ffb      	ldrb	r3, [r7, #31]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f040 80d6 	bne.w	800a29e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	61ba      	str	r2, [r7, #24]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	8992      	ldrh	r2, [r2, #12]
 800a102:	fbb3 f0f2 	udiv	r0, r3, r2
 800a106:	fb00 f202 	mul.w	r2, r0, r2
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00d      	beq.n	800a136 <put_fat+0xb8>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	b25a      	sxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	4313      	orrs	r3, r2
 800a130:	b25b      	sxtb	r3, r3
 800a132:	b2db      	uxtb	r3, r3
 800a134:	e001      	b.n	800a13a <put_fat+0xbc>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	899b      	ldrh	r3, [r3, #12]
 800a14c:	4619      	mov	r1, r3
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	fbb3 f3f1 	udiv	r3, r3, r1
 800a154:	4413      	add	r3, r2
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fdff 	bl	8009d5c <move_window>
 800a15e:	4603      	mov	r3, r0
 800a160:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a162:	7ffb      	ldrb	r3, [r7, #31]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 809c 	bne.w	800a2a2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	899b      	ldrh	r3, [r3, #12]
 800a174:	461a      	mov	r2, r3
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	fbb3 f0f2 	udiv	r0, r3, r2
 800a17c:	fb00 f202 	mul.w	r2, r0, r2
 800a180:	1a9b      	subs	r3, r3, r2
 800a182:	440b      	add	r3, r1
 800a184:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <put_fat+0x11a>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	091b      	lsrs	r3, r3, #4
 800a194:	b2db      	uxtb	r3, r3
 800a196:	e00e      	b.n	800a1b6 <put_fat+0x138>
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	f023 030f 	bic.w	r3, r3, #15
 800a1a2:	b25a      	sxtb	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	f003 030f 	and.w	r3, r3, #15
 800a1ae:	b25b      	sxtb	r3, r3
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	70da      	strb	r2, [r3, #3]
			break;
 800a1c0:	e074      	b.n	800a2ac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7ff fdbe 	bl	8009d5c <move_window>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d15d      	bne.n	800a2a6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	8992      	ldrh	r2, [r2, #12]
 800a1f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1fc:	fb00 f202 	mul.w	r2, r0, r2
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	440b      	add	r3, r1
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	b292      	uxth	r2, r2
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff faff 	bl	800980e <st_word>
			fs->wflag = 1;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	70da      	strb	r2, [r3, #3]
			break;
 800a216:	e049      	b.n	800a2ac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	899b      	ldrh	r3, [r3, #12]
 800a220:	089b      	lsrs	r3, r3, #2
 800a222:	b29b      	uxth	r3, r3
 800a224:	4619      	mov	r1, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	fbb3 f3f1 	udiv	r3, r3, r1
 800a22c:	4413      	add	r3, r2
 800a22e:	4619      	mov	r1, r3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff fd93 	bl	8009d5c <move_window>
 800a236:	4603      	mov	r3, r0
 800a238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a23a:	7ffb      	ldrb	r3, [r7, #31]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d134      	bne.n	800a2aa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	8992      	ldrh	r2, [r2, #12]
 800a254:	fbb3 f0f2 	udiv	r0, r3, r2
 800a258:	fb00 f202 	mul.w	r2, r0, r2
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	440b      	add	r3, r1
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fab1 	bl	80097c8 <ld_dword>
 800a266:	4603      	mov	r3, r0
 800a268:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a26c:	4323      	orrs	r3, r4
 800a26e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	8992      	ldrh	r2, [r2, #12]
 800a27e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a282:	fb00 f202 	mul.w	r2, r0, r2
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	440b      	add	r3, r1
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fad9 	bl	8009844 <st_dword>
			fs->wflag = 1;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	70da      	strb	r2, [r3, #3]
			break;
 800a298:	e008      	b.n	800a2ac <put_fat+0x22e>
		}
	}
 800a29a:	bf00      	nop
 800a29c:	e006      	b.n	800a2ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800a29e:	bf00      	nop
 800a2a0:	e004      	b.n	800a2ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800a2a2:	bf00      	nop
 800a2a4:	e002      	b.n	800a2ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800a2aa:	bf00      	nop
	return res;
 800a2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3724      	adds	r7, #36	; 0x24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd90      	pop	{r4, r7, pc}

0800a2b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b088      	sub	sp, #32
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d904      	bls.n	800a2dc <remove_chain+0x26>
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d301      	bcc.n	800a2e0 <remove_chain+0x2a>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e04b      	b.n	800a378 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00c      	beq.n	800a300 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	69b8      	ldr	r0, [r7, #24]
 800a2ee:	f7ff fec6 	bl	800a07e <put_fat>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a2f6:	7ffb      	ldrb	r3, [r7, #31]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <remove_chain+0x4a>
 800a2fc:	7ffb      	ldrb	r3, [r7, #31]
 800a2fe:	e03b      	b.n	800a378 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a300:	68b9      	ldr	r1, [r7, #8]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff fde7 	bl	8009ed6 <get_fat>
 800a308:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d031      	beq.n	800a374 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <remove_chain+0x64>
 800a316:	2302      	movs	r3, #2
 800a318:	e02e      	b.n	800a378 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a320:	d101      	bne.n	800a326 <remove_chain+0x70>
 800a322:	2301      	movs	r3, #1
 800a324:	e028      	b.n	800a378 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a326:	2200      	movs	r2, #0
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	69b8      	ldr	r0, [r7, #24]
 800a32c:	f7ff fea7 	bl	800a07e <put_fat>
 800a330:	4603      	mov	r3, r0
 800a332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a334:	7ffb      	ldrb	r3, [r7, #31]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <remove_chain+0x88>
 800a33a:	7ffb      	ldrb	r3, [r7, #31]
 800a33c:	e01c      	b.n	800a378 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	3b02      	subs	r3, #2
 800a348:	429a      	cmp	r2, r3
 800a34a:	d20b      	bcs.n	800a364 <remove_chain+0xae>
			fs->free_clst++;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	791b      	ldrb	r3, [r3, #4]
 800a35a:	f043 0301 	orr.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d3c6      	bcc.n	800a300 <remove_chain+0x4a>
 800a372:	e000      	b.n	800a376 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a374:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3720      	adds	r7, #32
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10d      	bne.n	800a3b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <create_chain+0x2c>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d31b      	bcc.n	800a3e4 <create_chain+0x64>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e018      	b.n	800a3e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fd8e 	bl	8009ed6 <get_fat>
 800a3ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d801      	bhi.n	800a3c6 <create_chain+0x46>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e070      	b.n	800a4a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d101      	bne.n	800a3d2 <create_chain+0x52>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	e06a      	b.n	800a4a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d201      	bcs.n	800a3e0 <create_chain+0x60>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	e063      	b.n	800a4a8 <create_chain+0x128>
		scl = clst;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	69fa      	ldr	r2, [r7, #28]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d307      	bcc.n	800a408 <create_chain+0x88>
				ncl = 2;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a3fc:	69fa      	ldr	r2, [r7, #28]
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	429a      	cmp	r2, r3
 800a402:	d901      	bls.n	800a408 <create_chain+0x88>
 800a404:	2300      	movs	r3, #0
 800a406:	e04f      	b.n	800a4a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a408:	69f9      	ldr	r1, [r7, #28]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fd63 	bl	8009ed6 <get_fat>
 800a410:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00e      	beq.n	800a436 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d003      	beq.n	800a426 <create_chain+0xa6>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a424:	d101      	bne.n	800a42a <create_chain+0xaa>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	e03e      	b.n	800a4a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a42a:	69fa      	ldr	r2, [r7, #28]
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d1da      	bne.n	800a3e8 <create_chain+0x68>
 800a432:	2300      	movs	r3, #0
 800a434:	e038      	b.n	800a4a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a436:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	69f9      	ldr	r1, [r7, #28]
 800a43e:	6938      	ldr	r0, [r7, #16]
 800a440:	f7ff fe1d 	bl	800a07e <put_fat>
 800a444:	4603      	mov	r3, r0
 800a446:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <create_chain+0xe2>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6938      	ldr	r0, [r7, #16]
 800a45a:	f7ff fe10 	bl	800a07e <put_fat>
 800a45e:	4603      	mov	r3, r0
 800a460:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d116      	bne.n	800a496 <create_chain+0x116>
		fs->last_clst = ncl;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	3b02      	subs	r3, #2
 800a478:	429a      	cmp	r2, r3
 800a47a:	d804      	bhi.n	800a486 <create_chain+0x106>
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	711a      	strb	r2, [r3, #4]
 800a494:	e007      	b.n	800a4a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d102      	bne.n	800a4a2 <create_chain+0x122>
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	e000      	b.n	800a4a4 <create_chain+0x124>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	899b      	ldrh	r3, [r3, #12]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	8952      	ldrh	r2, [r2, #10]
 800a4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	1d1a      	adds	r2, r3, #4
 800a4e2:	613a      	str	r2, [r7, #16]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <clmt_clust+0x42>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e010      	b.n	800a514 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d307      	bcc.n	800a50a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	3304      	adds	r3, #4
 800a506:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a508:	e7e9      	b.n	800a4de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a50a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
}
 800a514:	4618      	mov	r0, r3
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a536:	d204      	bcs.n	800a542 <dir_sdi+0x22>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f003 031f 	and.w	r3, r3, #31
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a542:	2302      	movs	r3, #2
 800a544:	e071      	b.n	800a62a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d106      	bne.n	800a566 <dir_sdi+0x46>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d902      	bls.n	800a566 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10c      	bne.n	800a586 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	095b      	lsrs	r3, r3, #5
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	8912      	ldrh	r2, [r2, #8]
 800a574:	4293      	cmp	r3, r2
 800a576:	d301      	bcc.n	800a57c <dir_sdi+0x5c>
 800a578:	2302      	movs	r3, #2
 800a57a:	e056      	b.n	800a62a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	61da      	str	r2, [r3, #28]
 800a584:	e02d      	b.n	800a5e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	895b      	ldrh	r3, [r3, #10]
 800a58a:	461a      	mov	r2, r3
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	899b      	ldrh	r3, [r3, #12]
 800a590:	fb02 f303 	mul.w	r3, r2, r3
 800a594:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a596:	e019      	b.n	800a5cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6979      	ldr	r1, [r7, #20]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fc9a 	bl	8009ed6 <get_fat>
 800a5a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d101      	bne.n	800a5b0 <dir_sdi+0x90>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e03c      	b.n	800a62a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d904      	bls.n	800a5c0 <dir_sdi+0xa0>
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d301      	bcc.n	800a5c4 <dir_sdi+0xa4>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e032      	b.n	800a62a <dir_sdi+0x10a>
			ofs -= csz;
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d2e1      	bcs.n	800a598 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a5d4:	6979      	ldr	r1, [r7, #20]
 800a5d6:	6938      	ldr	r0, [r7, #16]
 800a5d8:	f7ff fc5e 	bl	8009e98 <clust2sect>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <dir_sdi+0xd4>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e01a      	b.n	800a62a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	899b      	ldrh	r3, [r3, #12]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	fbb3 f3f1 	udiv	r3, r3, r1
 800a604:	441a      	add	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	899b      	ldrh	r3, [r3, #12]
 800a614:	461a      	mov	r2, r3
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	fbb3 f0f2 	udiv	r0, r3, r2
 800a61c:	fb00 f202 	mul.w	r2, r0, r2
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	18ca      	adds	r2, r1, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b086      	sub	sp, #24
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	3320      	adds	r3, #32
 800a648:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <dir_next+0x28>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a658:	d301      	bcc.n	800a65e <dir_next+0x2c>
 800a65a:	2304      	movs	r3, #4
 800a65c:	e0bb      	b.n	800a7d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	899b      	ldrh	r3, [r3, #12]
 800a662:	461a      	mov	r2, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	fbb3 f1f2 	udiv	r1, r3, r2
 800a66a:	fb01 f202 	mul.w	r2, r1, r2
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 809d 	bne.w	800a7b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	095b      	lsrs	r3, r3, #5
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	8912      	ldrh	r2, [r2, #8]
 800a690:	4293      	cmp	r3, r2
 800a692:	f0c0 808d 	bcc.w	800a7b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	61da      	str	r2, [r3, #28]
 800a69c:	2304      	movs	r3, #4
 800a69e:	e09a      	b.n	800a7d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	899b      	ldrh	r3, [r3, #12]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	8952      	ldrh	r2, [r2, #10]
 800a6b0:	3a01      	subs	r2, #1
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d17b      	bne.n	800a7b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7ff fc08 	bl	8009ed6 <get_fat>
 800a6c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d801      	bhi.n	800a6d2 <dir_next+0xa0>
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	e081      	b.n	800a7d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d8:	d101      	bne.n	800a6de <dir_next+0xac>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e07b      	b.n	800a7d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d359      	bcc.n	800a79c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d104      	bne.n	800a6f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	61da      	str	r2, [r3, #28]
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	e06e      	b.n	800a7d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f7ff fe3d 	bl	800a380 <create_chain>
 800a706:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <dir_next+0xe0>
 800a70e:	2307      	movs	r3, #7
 800a710:	e061      	b.n	800a7d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d101      	bne.n	800a71c <dir_next+0xea>
 800a718:	2302      	movs	r3, #2
 800a71a:	e05c      	b.n	800a7d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a722:	d101      	bne.n	800a728 <dir_next+0xf6>
 800a724:	2301      	movs	r3, #1
 800a726:	e056      	b.n	800a7d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff fad3 	bl	8009cd4 <sync_window>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <dir_next+0x106>
 800a734:	2301      	movs	r3, #1
 800a736:	e04e      	b.n	800a7d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	899b      	ldrh	r3, [r3, #12]
 800a742:	461a      	mov	r2, r3
 800a744:	2100      	movs	r1, #0
 800a746:	f7ff f8ca 	bl	80098de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a74a:	2300      	movs	r3, #0
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	6979      	ldr	r1, [r7, #20]
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff fba1 	bl	8009e98 <clust2sect>
 800a756:	4602      	mov	r2, r0
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	635a      	str	r2, [r3, #52]	; 0x34
 800a75c:	e012      	b.n	800a784 <dir_next+0x152>
						fs->wflag = 1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff fab5 	bl	8009cd4 <sync_window>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <dir_next+0x142>
 800a770:	2301      	movs	r3, #1
 800a772:	e030      	b.n	800a7d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	3301      	adds	r3, #1
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	635a      	str	r2, [r3, #52]	; 0x34
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	895b      	ldrh	r3, [r3, #10]
 800a788:	461a      	mov	r2, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d3e6      	bcc.n	800a75e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	1ad2      	subs	r2, r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a7a2:	6979      	ldr	r1, [r7, #20]
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fb77 	bl	8009e98 <clust2sect>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	899b      	ldrh	r3, [r3, #12]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7c8:	fb00 f202 	mul.w	r2, r0, r2
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	18ca      	adds	r2, r1, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b086      	sub	sp, #24
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff fe95 	bl	800a520 <dir_sdi>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d12b      	bne.n	800a858 <dir_alloc+0x7a>
		n = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4619      	mov	r1, r3
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff faa6 	bl	8009d5c <move_window>
 800a810:	4603      	mov	r3, r0
 800a812:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d11d      	bne.n	800a856 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2be5      	cmp	r3, #229	; 0xe5
 800a822:	d004      	beq.n	800a82e <dir_alloc+0x50>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d107      	bne.n	800a83e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	3301      	adds	r3, #1
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d102      	bne.n	800a842 <dir_alloc+0x64>
 800a83c:	e00c      	b.n	800a858 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a83e:	2300      	movs	r3, #0
 800a840:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a842:	2101      	movs	r1, #1
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fef4 	bl	800a632 <dir_next>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d0d7      	beq.n	800a804 <dir_alloc+0x26>
 800a854:	e000      	b.n	800a858 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a856:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d101      	bne.n	800a862 <dir_alloc+0x84>
 800a85e:	2307      	movs	r3, #7
 800a860:	75fb      	strb	r3, [r7, #23]
	return res;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	331a      	adds	r3, #26
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe ff8c 	bl	8009798 <ld_word>
 800a880:	4603      	mov	r3, r0
 800a882:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d109      	bne.n	800a8a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	3314      	adds	r3, #20
 800a890:	4618      	mov	r0, r3
 800a892:	f7fe ff81 	bl	8009798 <ld_word>
 800a896:	4603      	mov	r3, r0
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	331a      	adds	r3, #26
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe ffa4 	bl	800980e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d109      	bne.n	800a8e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f103 0214 	add.w	r2, r3, #20
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	0c1b      	lsrs	r3, r3, #16
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4610      	mov	r0, r2
 800a8de:	f7fe ff96 	bl	800980e <st_word>
	}
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b086      	sub	sp, #24
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fe10 	bl	800a520 <dir_sdi>
 800a900:	4603      	mov	r3, r0
 800a902:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <dir_find+0x24>
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	e03e      	b.n	800a98c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	4619      	mov	r1, r3
 800a914:	6938      	ldr	r0, [r7, #16]
 800a916:	f7ff fa21 	bl	8009d5c <move_window>
 800a91a:	4603      	mov	r3, r0
 800a91c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d12f      	bne.n	800a984 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <dir_find+0x4e>
 800a932:	2304      	movs	r3, #4
 800a934:	75fb      	strb	r3, [r7, #23]
 800a936:	e028      	b.n	800a98a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	330b      	adds	r3, #11
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a944:	b2da      	uxtb	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	330b      	adds	r3, #11
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <dir_find+0x86>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a18      	ldr	r0, [r3, #32]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3324      	adds	r3, #36	; 0x24
 800a962:	220b      	movs	r2, #11
 800a964:	4619      	mov	r1, r3
 800a966:	f7fe ffd5 	bl	8009914 <mem_cmp>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a970:	2100      	movs	r1, #0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fe5d 	bl	800a632 <dir_next>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0c5      	beq.n	800a90e <dir_find+0x24>
 800a982:	e002      	b.n	800a98a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a984:	bf00      	nop
 800a986:	e000      	b.n	800a98a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a988:	bf00      	nop

	return res;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff ff1a 	bl	800a7de <dir_alloc>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11c      	bne.n	800a9ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	68b8      	ldr	r0, [r7, #8]
 800a9bc:	f7ff f9ce 	bl	8009d5c <move_window>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d111      	bne.n	800a9ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe ff83 	bl	80098de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a18      	ldr	r0, [r3, #32]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3324      	adds	r3, #36	; 0x24
 800a9e0:	220b      	movs	r2, #11
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	f7fe ff5a 	bl	800989c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3324      	adds	r3, #36	; 0x24
 800aa0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aa0e:	220b      	movs	r2, #11
 800aa10:	2120      	movs	r1, #32
 800aa12:	68b8      	ldr	r0, [r7, #8]
 800aa14:	f7fe ff63 	bl	80098de <mem_set>
	si = i = 0; ni = 8;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	613b      	str	r3, [r7, #16]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	2308      	movs	r3, #8
 800aa22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	61fa      	str	r2, [r7, #28]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa32:	7efb      	ldrb	r3, [r7, #27]
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d94e      	bls.n	800aad6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aa38:	7efb      	ldrb	r3, [r7, #27]
 800aa3a:	2b2f      	cmp	r3, #47	; 0x2f
 800aa3c:	d006      	beq.n	800aa4c <create_name+0x54>
 800aa3e:	7efb      	ldrb	r3, [r7, #27]
 800aa40:	2b5c      	cmp	r3, #92	; 0x5c
 800aa42:	d110      	bne.n	800aa66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aa44:	e002      	b.n	800aa4c <create_name+0x54>
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	4413      	add	r3, r2
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b2f      	cmp	r3, #47	; 0x2f
 800aa56:	d0f6      	beq.n	800aa46 <create_name+0x4e>
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b5c      	cmp	r3, #92	; 0x5c
 800aa62:	d0f0      	beq.n	800aa46 <create_name+0x4e>
			break;
 800aa64:	e038      	b.n	800aad8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aa66:	7efb      	ldrb	r3, [r7, #27]
 800aa68:	2b2e      	cmp	r3, #46	; 0x2e
 800aa6a:	d003      	beq.n	800aa74 <create_name+0x7c>
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d30c      	bcc.n	800aa8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b0b      	cmp	r3, #11
 800aa78:	d002      	beq.n	800aa80 <create_name+0x88>
 800aa7a:	7efb      	ldrb	r3, [r7, #27]
 800aa7c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa7e:	d001      	beq.n	800aa84 <create_name+0x8c>
 800aa80:	2306      	movs	r3, #6
 800aa82:	e044      	b.n	800ab0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aa84:	2308      	movs	r3, #8
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	230b      	movs	r3, #11
 800aa8a:	617b      	str	r3, [r7, #20]
			continue;
 800aa8c:	e022      	b.n	800aad4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aa8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da04      	bge.n	800aaa0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aa96:	7efb      	ldrb	r3, [r7, #27]
 800aa98:	3b80      	subs	r3, #128	; 0x80
 800aa9a:	4a1f      	ldr	r2, [pc, #124]	; (800ab18 <create_name+0x120>)
 800aa9c:	5cd3      	ldrb	r3, [r2, r3]
 800aa9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aaa0:	7efb      	ldrb	r3, [r7, #27]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	481d      	ldr	r0, [pc, #116]	; (800ab1c <create_name+0x124>)
 800aaa6:	f7fe ff5c 	bl	8009962 <chk_chr>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <create_name+0xbc>
 800aab0:	2306      	movs	r3, #6
 800aab2:	e02c      	b.n	800ab0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aab4:	7efb      	ldrb	r3, [r7, #27]
 800aab6:	2b60      	cmp	r3, #96	; 0x60
 800aab8:	d905      	bls.n	800aac6 <create_name+0xce>
 800aaba:	7efb      	ldrb	r3, [r7, #27]
 800aabc:	2b7a      	cmp	r3, #122	; 0x7a
 800aabe:	d802      	bhi.n	800aac6 <create_name+0xce>
 800aac0:	7efb      	ldrb	r3, [r7, #27]
 800aac2:	3b20      	subs	r3, #32
 800aac4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	613a      	str	r2, [r7, #16]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4413      	add	r3, r2
 800aad0:	7efa      	ldrb	r2, [r7, #27]
 800aad2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aad4:	e7a6      	b.n	800aa24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aad6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	441a      	add	r2, r3
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <create_name+0xf4>
 800aae8:	2306      	movs	r3, #6
 800aaea:	e010      	b.n	800ab0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2be5      	cmp	r3, #229	; 0xe5
 800aaf2:	d102      	bne.n	800aafa <create_name+0x102>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aafa:	7efb      	ldrb	r3, [r7, #27]
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	d801      	bhi.n	800ab04 <create_name+0x10c>
 800ab00:	2204      	movs	r2, #4
 800ab02:	e000      	b.n	800ab06 <create_name+0x10e>
 800ab04:	2200      	movs	r2, #0
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	330b      	adds	r3, #11
 800ab0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ab0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3720      	adds	r7, #32
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	0800f800 	.word	0x0800f800
 800ab1c:	0800f794 	.word	0x0800f794

0800ab20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ab34:	e002      	b.n	800ab3c <follow_path+0x1c>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	603b      	str	r3, [r7, #0]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b2f      	cmp	r3, #47	; 0x2f
 800ab42:	d0f8      	beq.n	800ab36 <follow_path+0x16>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b5c      	cmp	r3, #92	; 0x5c
 800ab4a:	d0f4      	beq.n	800ab36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b1f      	cmp	r3, #31
 800ab58:	d80a      	bhi.n	800ab70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2280      	movs	r2, #128	; 0x80
 800ab5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ab62:	2100      	movs	r1, #0
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff fcdb 	bl	800a520 <dir_sdi>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]
 800ab6e:	e048      	b.n	800ac02 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab70:	463b      	mov	r3, r7
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff ff3f 	bl	800a9f8 <create_name>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d139      	bne.n	800abf8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff feb0 	bl	800a8ea <dir_find>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d12c      	bne.n	800abfc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aba2:	7afb      	ldrb	r3, [r7, #11]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d127      	bne.n	800abfc <follow_path+0xdc>
 800abac:	2305      	movs	r3, #5
 800abae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800abb0:	e024      	b.n	800abfc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800abb2:	7afb      	ldrb	r3, [r7, #11]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d121      	bne.n	800ac00 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	799b      	ldrb	r3, [r3, #6]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800abc8:	2305      	movs	r3, #5
 800abca:	75fb      	strb	r3, [r7, #23]
 800abcc:	e019      	b.n	800ac02 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	8992      	ldrh	r2, [r2, #12]
 800abdc:	fbb3 f0f2 	udiv	r0, r3, r2
 800abe0:	fb00 f202 	mul.w	r2, r0, r2
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	440b      	add	r3, r1
 800abe8:	4619      	mov	r1, r3
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7ff fe3e 	bl	800a86c <ld_clust>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abf6:	e7bb      	b.n	800ab70 <follow_path+0x50>
			if (res != FR_OK) break;
 800abf8:	bf00      	nop
 800abfa:	e002      	b.n	800ac02 <follow_path+0xe2>
				break;
 800abfc:	bf00      	nop
 800abfe:	e000      	b.n	800ac02 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac00:	bf00      	nop
			}
		}
	}

	return res;
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d031      	beq.n	800ac86 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e002      	b.n	800ac30 <get_ldnumber+0x24>
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d903      	bls.n	800ac40 <get_ldnumber+0x34>
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b3a      	cmp	r3, #58	; 0x3a
 800ac3e:	d1f4      	bne.n	800ac2a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b3a      	cmp	r3, #58	; 0x3a
 800ac46:	d11c      	bne.n	800ac82 <get_ldnumber+0x76>
			tp = *path;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	60fa      	str	r2, [r7, #12]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	3b30      	subs	r3, #48	; 0x30
 800ac58:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d80e      	bhi.n	800ac7e <get_ldnumber+0x72>
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d10a      	bne.n	800ac7e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d107      	bne.n	800ac7e <get_ldnumber+0x72>
					vol = (int)i;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3301      	adds	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	e002      	b.n	800ac88 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac82:	2300      	movs	r3, #0
 800ac84:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac86:	693b      	ldr	r3, [r7, #16]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	70da      	strb	r2, [r3, #3]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff f854 	bl	8009d5c <move_window>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <check_fs+0x2a>
 800acba:	2304      	movs	r3, #4
 800acbc:	e038      	b.n	800ad30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3338      	adds	r3, #56	; 0x38
 800acc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fd66 	bl	8009798 <ld_word>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d001      	beq.n	800acdc <check_fs+0x48>
 800acd8:	2303      	movs	r3, #3
 800acda:	e029      	b.n	800ad30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ace2:	2be9      	cmp	r3, #233	; 0xe9
 800ace4:	d009      	beq.n	800acfa <check_fs+0x66>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800acec:	2beb      	cmp	r3, #235	; 0xeb
 800acee:	d11e      	bne.n	800ad2e <check_fs+0x9a>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acf6:	2b90      	cmp	r3, #144	; 0x90
 800acf8:	d119      	bne.n	800ad2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3338      	adds	r3, #56	; 0x38
 800acfe:	3336      	adds	r3, #54	; 0x36
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe fd61 	bl	80097c8 <ld_dword>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad0c:	4a0a      	ldr	r2, [pc, #40]	; (800ad38 <check_fs+0xa4>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d101      	bne.n	800ad16 <check_fs+0x82>
 800ad12:	2300      	movs	r3, #0
 800ad14:	e00c      	b.n	800ad30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3338      	adds	r3, #56	; 0x38
 800ad1a:	3352      	adds	r3, #82	; 0x52
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fd53 	bl	80097c8 <ld_dword>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4a05      	ldr	r2, [pc, #20]	; (800ad3c <check_fs+0xa8>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d101      	bne.n	800ad2e <check_fs+0x9a>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e000      	b.n	800ad30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ad2e:	2302      	movs	r3, #2
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	00544146 	.word	0x00544146
 800ad3c:	33544146 	.word	0x33544146

0800ad40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b096      	sub	sp, #88	; 0x58
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff ff59 	bl	800ac0c <get_ldnumber>
 800ad5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da01      	bge.n	800ad66 <find_volume+0x26>
 800ad62:	230b      	movs	r3, #11
 800ad64:	e26a      	b.n	800b23c <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ad66:	4aa3      	ldr	r2, [pc, #652]	; (800aff4 <find_volume+0x2b4>)
 800ad68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <find_volume+0x3a>
 800ad76:	230c      	movs	r3, #12
 800ad78:	e260      	b.n	800b23c <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800ad7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad7c:	f7fe fe0c 	bl	8009998 <lock_fs>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <find_volume+0x4a>
 800ad86:	230f      	movs	r3, #15
 800ad88:	e258      	b.n	800b23c <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	f023 0301 	bic.w	r3, r3, #1
 800ad96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01a      	beq.n	800add6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe fc59 	bl	800965c <disk_status>
 800adaa:	4603      	mov	r3, r0
 800adac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800adb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10c      	bne.n	800add6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800adbc:	79fb      	ldrb	r3, [r7, #7]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d007      	beq.n	800add2 <find_volume+0x92>
 800adc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adc6:	f003 0304 	and.w	r3, r3, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800adce:	230a      	movs	r3, #10
 800add0:	e234      	b.n	800b23c <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800add2:	2300      	movs	r3, #0
 800add4:	e232      	b.n	800b23c <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800addc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fe fc51 	bl	8009690 <disk_initialize>
 800adee:	4603      	mov	r3, r0
 800adf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800adf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae00:	2303      	movs	r3, #3
 800ae02:	e21b      	b.n	800b23c <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <find_volume+0xda>
 800ae0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae0e:	f003 0304 	and.w	r3, r3, #4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ae16:	230a      	movs	r3, #10
 800ae18:	e210      	b.n	800b23c <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1c:	7858      	ldrb	r0, [r3, #1]
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae20:	330c      	adds	r3, #12
 800ae22:	461a      	mov	r2, r3
 800ae24:	2102      	movs	r1, #2
 800ae26:	f7fe fc99 	bl	800975c <disk_ioctl>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <find_volume+0xf4>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e203      	b.n	800b23c <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	899b      	ldrh	r3, [r3, #12]
 800ae38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3c:	d80d      	bhi.n	800ae5a <find_volume+0x11a>
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	899b      	ldrh	r3, [r3, #12]
 800ae42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae46:	d308      	bcc.n	800ae5a <find_volume+0x11a>
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	899b      	ldrh	r3, [r3, #12]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	4013      	ands	r3, r2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <find_volume+0x11e>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e1ee      	b.n	800b23c <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae66:	f7ff ff15 	bl	800ac94 <check_fs>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d149      	bne.n	800af0c <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae78:	2300      	movs	r3, #0
 800ae7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ae7c:	e01e      	b.n	800aebc <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ae84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae8c:	4413      	add	r3, r2
 800ae8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	3304      	adds	r3, #4
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d006      	beq.n	800aea8 <find_volume+0x168>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fc92 	bl	80097c8 <ld_dword>
 800aea4:	4602      	mov	r2, r0
 800aea6:	e000      	b.n	800aeaa <find_volume+0x16a>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	3358      	adds	r3, #88	; 0x58
 800aeb0:	443b      	add	r3, r7
 800aeb2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aeb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb8:	3301      	adds	r3, #1
 800aeba:	643b      	str	r3, [r7, #64]	; 0x40
 800aebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d9dd      	bls.n	800ae7e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aec2:	2300      	movs	r3, #0
 800aec4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800aec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <find_volume+0x192>
 800aecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aece:	3b01      	subs	r3, #1
 800aed0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	3358      	adds	r3, #88	; 0x58
 800aed8:	443b      	add	r3, r7
 800aeda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aede:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <find_volume+0x1b2>
 800aee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aeea:	f7ff fed3 	bl	800ac94 <check_fs>
 800aeee:	4603      	mov	r3, r0
 800aef0:	e000      	b.n	800aef4 <find_volume+0x1b4>
 800aef2:	2303      	movs	r3, #3
 800aef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d905      	bls.n	800af0c <find_volume+0x1cc>
 800af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af02:	3301      	adds	r3, #1
 800af04:	643b      	str	r3, [r7, #64]	; 0x40
 800af06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d9e2      	bls.n	800aed2 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af10:	2b04      	cmp	r3, #4
 800af12:	d101      	bne.n	800af18 <find_volume+0x1d8>
 800af14:	2301      	movs	r3, #1
 800af16:	e191      	b.n	800b23c <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d901      	bls.n	800af24 <find_volume+0x1e4>
 800af20:	230d      	movs	r3, #13
 800af22:	e18b      	b.n	800b23c <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	3338      	adds	r3, #56	; 0x38
 800af28:	330b      	adds	r3, #11
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fc34 	bl	8009798 <ld_word>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	899b      	ldrh	r3, [r3, #12]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d001      	beq.n	800af40 <find_volume+0x200>
 800af3c:	230d      	movs	r3, #13
 800af3e:	e17d      	b.n	800b23c <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	3338      	adds	r3, #56	; 0x38
 800af44:	3316      	adds	r3, #22
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fc26 	bl	8009798 <ld_word>
 800af4c:	4603      	mov	r3, r0
 800af4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <find_volume+0x224>
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	3338      	adds	r3, #56	; 0x38
 800af5a:	3324      	adds	r3, #36	; 0x24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe fc33 	bl	80097c8 <ld_dword>
 800af62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af76:	789b      	ldrb	r3, [r3, #2]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d005      	beq.n	800af88 <find_volume+0x248>
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	789b      	ldrb	r3, [r3, #2]
 800af80:	2b02      	cmp	r3, #2
 800af82:	d001      	beq.n	800af88 <find_volume+0x248>
 800af84:	230d      	movs	r3, #13
 800af86:	e159      	b.n	800b23c <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	789b      	ldrb	r3, [r3, #2]
 800af8c:	461a      	mov	r2, r3
 800af8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af90:	fb02 f303 	mul.w	r3, r2, r3
 800af94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	895b      	ldrh	r3, [r3, #10]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d008      	beq.n	800afbc <find_volume+0x27c>
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	895b      	ldrh	r3, [r3, #10]
 800afae:	461a      	mov	r2, r3
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	895b      	ldrh	r3, [r3, #10]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	4013      	ands	r3, r2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <find_volume+0x280>
 800afbc:	230d      	movs	r3, #13
 800afbe:	e13d      	b.n	800b23c <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	3338      	adds	r3, #56	; 0x38
 800afc4:	3311      	adds	r3, #17
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fe fbe6 	bl	8009798 <ld_word>
 800afcc:	4603      	mov	r3, r0
 800afce:	461a      	mov	r2, r3
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	891b      	ldrh	r3, [r3, #8]
 800afd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afda:	8992      	ldrh	r2, [r2, #12]
 800afdc:	0952      	lsrs	r2, r2, #5
 800afde:	b292      	uxth	r2, r2
 800afe0:	fbb3 f1f2 	udiv	r1, r3, r2
 800afe4:	fb01 f202 	mul.w	r2, r1, r2
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	b29b      	uxth	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <find_volume+0x2b8>
 800aff0:	230d      	movs	r3, #13
 800aff2:	e123      	b.n	800b23c <find_volume+0x4fc>
 800aff4:	200034ac 	.word	0x200034ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	3338      	adds	r3, #56	; 0x38
 800affc:	3313      	adds	r3, #19
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fbca 	bl	8009798 <ld_word>
 800b004:	4603      	mov	r3, r0
 800b006:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <find_volume+0x2dc>
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	3338      	adds	r3, #56	; 0x38
 800b012:	3320      	adds	r3, #32
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fbd7 	bl	80097c8 <ld_dword>
 800b01a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	3338      	adds	r3, #56	; 0x38
 800b020:	330e      	adds	r3, #14
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fbb8 	bl	8009798 <ld_word>
 800b028:	4603      	mov	r3, r0
 800b02a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b02c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <find_volume+0x2f6>
 800b032:	230d      	movs	r3, #13
 800b034:	e102      	b.n	800b23c <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b036:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b03a:	4413      	add	r3, r2
 800b03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b03e:	8911      	ldrh	r1, [r2, #8]
 800b040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b042:	8992      	ldrh	r2, [r2, #12]
 800b044:	0952      	lsrs	r2, r2, #5
 800b046:	b292      	uxth	r2, r2
 800b048:	fbb1 f2f2 	udiv	r2, r1, r2
 800b04c:	b292      	uxth	r2, r2
 800b04e:	4413      	add	r3, r2
 800b050:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	429a      	cmp	r2, r3
 800b058:	d201      	bcs.n	800b05e <find_volume+0x31e>
 800b05a:	230d      	movs	r3, #13
 800b05c:	e0ee      	b.n	800b23c <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b05e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b066:	8952      	ldrh	r2, [r2, #10]
 800b068:	fbb3 f3f2 	udiv	r3, r3, r2
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <find_volume+0x338>
 800b074:	230d      	movs	r3, #13
 800b076:	e0e1      	b.n	800b23c <find_volume+0x4fc>
		fmt = FS_FAT32;
 800b078:	2303      	movs	r3, #3
 800b07a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b084:	4293      	cmp	r3, r2
 800b086:	d802      	bhi.n	800b08e <find_volume+0x34e>
 800b088:	2302      	movs	r3, #2
 800b08a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b094:	4293      	cmp	r3, r2
 800b096:	d802      	bhi.n	800b09e <find_volume+0x35e>
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	1c9a      	adds	r2, r3, #2
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b0:	441a      	add	r2, r3
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	441a      	add	r2, r3
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	d11e      	bne.n	800b106 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	3338      	adds	r3, #56	; 0x38
 800b0cc:	332a      	adds	r3, #42	; 0x2a
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe fb62 	bl	8009798 <ld_word>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <find_volume+0x39e>
 800b0da:	230d      	movs	r3, #13
 800b0dc:	e0ae      	b.n	800b23c <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	891b      	ldrh	r3, [r3, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <find_volume+0x3aa>
 800b0e6:	230d      	movs	r3, #13
 800b0e8:	e0a8      	b.n	800b23c <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	3338      	adds	r3, #56	; 0x38
 800b0ee:	332c      	adds	r3, #44	; 0x2c
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fb69 	bl	80097c8 <ld_dword>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	647b      	str	r3, [r7, #68]	; 0x44
 800b104:	e01f      	b.n	800b146 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	891b      	ldrh	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <find_volume+0x3d2>
 800b10e:	230d      	movs	r3, #13
 800b110:	e094      	b.n	800b23c <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b118:	441a      	add	r2, r3
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b11e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b122:	2b02      	cmp	r3, #2
 800b124:	d103      	bne.n	800b12e <find_volume+0x3ee>
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	e00a      	b.n	800b144 <find_volume+0x404>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	69da      	ldr	r2, [r3, #28]
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	085a      	lsrs	r2, r3, #1
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b144:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	6a1a      	ldr	r2, [r3, #32]
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	899b      	ldrh	r3, [r3, #12]
 800b14e:	4619      	mov	r1, r3
 800b150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b152:	440b      	add	r3, r1
 800b154:	3b01      	subs	r3, #1
 800b156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b158:	8989      	ldrh	r1, [r1, #12]
 800b15a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b15e:	429a      	cmp	r2, r3
 800b160:	d201      	bcs.n	800b166 <find_volume+0x426>
 800b162:	230d      	movs	r3, #13
 800b164:	e06a      	b.n	800b23c <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	f04f 32ff 	mov.w	r2, #4294967295
 800b16c:	619a      	str	r2, [r3, #24]
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	2280      	movs	r2, #128	; 0x80
 800b17a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b180:	2b03      	cmp	r3, #3
 800b182:	d149      	bne.n	800b218 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	3338      	adds	r3, #56	; 0x38
 800b188:	3330      	adds	r3, #48	; 0x30
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fb04 	bl	8009798 <ld_word>
 800b190:	4603      	mov	r3, r0
 800b192:	2b01      	cmp	r3, #1
 800b194:	d140      	bne.n	800b218 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b198:	3301      	adds	r3, #1
 800b19a:	4619      	mov	r1, r3
 800b19c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b19e:	f7fe fddd 	bl	8009d5c <move_window>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d137      	bne.n	800b218 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	3338      	adds	r3, #56	; 0x38
 800b1b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe faee 	bl	8009798 <ld_word>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d127      	bne.n	800b218 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	3338      	adds	r3, #56	; 0x38
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fafb 	bl	80097c8 <ld_dword>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <find_volume+0x504>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d11e      	bne.n	800b218 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	3338      	adds	r3, #56	; 0x38
 800b1de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe faf0 	bl	80097c8 <ld_dword>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	4a17      	ldr	r2, [pc, #92]	; (800b248 <find_volume+0x508>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d113      	bne.n	800b218 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	3338      	adds	r3, #56	; 0x38
 800b1f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fae5 	bl	80097c8 <ld_dword>
 800b1fe:	4602      	mov	r2, r0
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	3338      	adds	r3, #56	; 0x38
 800b208:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fadb 	bl	80097c8 <ld_dword>
 800b212:	4602      	mov	r2, r0
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b21e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <find_volume+0x50c>)
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	b29a      	uxth	r2, r3
 800b228:	4b08      	ldr	r3, [pc, #32]	; (800b24c <find_volume+0x50c>)
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	4b07      	ldr	r3, [pc, #28]	; (800b24c <find_volume+0x50c>)
 800b22e:	881a      	ldrh	r2, [r3, #0]
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b234:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b236:	f7fe fd29 	bl	8009c8c <clear_lock>
#endif
	return FR_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3758      	adds	r7, #88	; 0x58
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	41615252 	.word	0x41615252
 800b248:	61417272 	.word	0x61417272
 800b24c:	200034b0 	.word	0x200034b0

0800b250 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b25a:	2309      	movs	r3, #9
 800b25c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d02e      	beq.n	800b2c2 <validate+0x72>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02a      	beq.n	800b2c2 <validate+0x72>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d025      	beq.n	800b2c2 <validate+0x72>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	889a      	ldrh	r2, [r3, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	88db      	ldrh	r3, [r3, #6]
 800b280:	429a      	cmp	r2, r3
 800b282:	d11e      	bne.n	800b2c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fb85 	bl	8009998 <lock_fs>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d014      	beq.n	800b2be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	785b      	ldrb	r3, [r3, #1]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe f9de 	bl	800965c <disk_status>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d102      	bne.n	800b2b0 <validate+0x60>
				res = FR_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73fb      	strb	r3, [r7, #15]
 800b2ae:	e008      	b.n	800b2c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fb84 	bl	80099c4 <unlock_fs>
 800b2bc:	e001      	b.n	800b2c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b2be:	230f      	movs	r3, #15
 800b2c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <validate+0x7e>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	e000      	b.n	800b2d0 <validate+0x80>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	6013      	str	r3, [r2, #0]
	return res;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b2f2:	f107 0310 	add.w	r3, r7, #16
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff fc88 	bl	800ac0c <get_ldnumber>
 800b2fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	2b00      	cmp	r3, #0
 800b302:	da01      	bge.n	800b308 <f_mount+0x28>
 800b304:	230b      	movs	r3, #11
 800b306:	e048      	b.n	800b39a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b308:	4a26      	ldr	r2, [pc, #152]	; (800b3a4 <f_mount+0xc4>)
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b310:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00f      	beq.n	800b338 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b318:	69b8      	ldr	r0, [r7, #24]
 800b31a:	f7fe fcb7 	bl	8009c8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	4618      	mov	r0, r3
 800b324:	f001 f813 	bl	800c34e <ff_del_syncobj>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <f_mount+0x52>
 800b32e:	2302      	movs	r3, #2
 800b330:	e033      	b.n	800b39a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	2200      	movs	r2, #0
 800b336:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00f      	beq.n	800b35e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	b2da      	uxtb	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3310      	adds	r3, #16
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f000 ffdd 	bl	800c30e <ff_cre_syncobj>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <f_mount+0x7e>
 800b35a:	2302      	movs	r3, #2
 800b35c:	e01d      	b.n	800b39a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	4910      	ldr	r1, [pc, #64]	; (800b3a4 <f_mount+0xc4>)
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <f_mount+0x94>
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d001      	beq.n	800b378 <f_mount+0x98>
 800b374:	2300      	movs	r3, #0
 800b376:	e010      	b.n	800b39a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b378:	f107 010c 	add.w	r1, r7, #12
 800b37c:	f107 0308 	add.w	r3, r7, #8
 800b380:	2200      	movs	r2, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff fcdc 	bl	800ad40 <find_volume>
 800b388:	4603      	mov	r3, r0
 800b38a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	7dfa      	ldrb	r2, [r7, #23]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fb16 	bl	80099c4 <unlock_fs>
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200034ac 	.word	0x200034ac

0800b3a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b098      	sub	sp, #96	; 0x60
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <f_open+0x18>
 800b3bc:	2309      	movs	r3, #9
 800b3be:	e1c2      	b.n	800b746 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b3c8:	79fa      	ldrb	r2, [r7, #7]
 800b3ca:	f107 0110 	add.w	r1, r7, #16
 800b3ce:	f107 0308 	add.w	r3, r7, #8
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff fcb4 	bl	800ad40 <find_volume>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b3de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f040 819f 	bne.w	800b726 <f_open+0x37e>
		dj.obj.fs = fs;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	f107 0314 	add.w	r3, r7, #20
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7ff fb93 	bl	800ab20 <follow_path>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b404:	2b00      	cmp	r3, #0
 800b406:	d11a      	bne.n	800b43e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b408:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b40c:	b25b      	sxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da03      	bge.n	800b41a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b412:	2306      	movs	r3, #6
 800b414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b418:	e011      	b.n	800b43e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	f023 0301 	bic.w	r3, r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	bf14      	ite	ne
 800b424:	2301      	movne	r3, #1
 800b426:	2300      	moveq	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	f107 0314 	add.w	r3, r7, #20
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fae2 	bl	80099fc <chk_lock>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	f003 031c 	and.w	r3, r3, #28
 800b444:	2b00      	cmp	r3, #0
 800b446:	d07f      	beq.n	800b548 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d017      	beq.n	800b480 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b450:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b454:	2b04      	cmp	r3, #4
 800b456:	d10e      	bne.n	800b476 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b458:	f7fe fb2c 	bl	8009ab4 <enq_lock>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d006      	beq.n	800b470 <f_open+0xc8>
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff fa94 	bl	800a994 <dir_register>
 800b46c:	4603      	mov	r3, r0
 800b46e:	e000      	b.n	800b472 <f_open+0xca>
 800b470:	2312      	movs	r3, #18
 800b472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	f043 0308 	orr.w	r3, r3, #8
 800b47c:	71fb      	strb	r3, [r7, #7]
 800b47e:	e010      	b.n	800b4a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b480:	7ebb      	ldrb	r3, [r7, #26]
 800b482:	f003 0311 	and.w	r3, r3, #17
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <f_open+0xea>
					res = FR_DENIED;
 800b48a:	2307      	movs	r3, #7
 800b48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b490:	e007      	b.n	800b4a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <f_open+0xfa>
 800b49c:	2308      	movs	r3, #8
 800b49e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b4a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d168      	bne.n	800b57c <f_open+0x1d4>
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	f003 0308 	and.w	r3, r3, #8
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d063      	beq.n	800b57c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b4b4:	f7fe f870 	bl	8009598 <get_fattime>
 800b4b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4bc:	330e      	adds	r3, #14
 800b4be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe f9bf 	bl	8009844 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c8:	3316      	adds	r3, #22
 800b4ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe f9b9 	bl	8009844 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d4:	330b      	adds	r3, #11
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff f9c3 	bl	800a86c <ld_clust>
 800b4e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff f9db 	bl	800a8aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f6:	331c      	adds	r3, #28
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fe f9a2 	bl	8009844 <st_dword>
					fs->wflag = 1;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	2201      	movs	r2, #1
 800b504:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d037      	beq.n	800b57c <f_open+0x1d4>
						dw = fs->winsect;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b510:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b512:	f107 0314 	add.w	r3, r7, #20
 800b516:	2200      	movs	r2, #0
 800b518:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe fecb 	bl	800a2b6 <remove_chain>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d126      	bne.n	800b57c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fc12 	bl	8009d5c <move_window>
 800b538:	4603      	mov	r3, r0
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b542:	3a01      	subs	r2, #1
 800b544:	615a      	str	r2, [r3, #20]
 800b546:	e019      	b.n	800b57c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d115      	bne.n	800b57c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b550:	7ebb      	ldrb	r3, [r7, #26]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b55a:	2304      	movs	r3, #4
 800b55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b560:	e00c      	b.n	800b57c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <f_open+0x1d4>
 800b56c:	7ebb      	ldrb	r3, [r7, #26]
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <f_open+0x1d4>
						res = FR_DENIED;
 800b576:	2307      	movs	r3, #7
 800b578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b57c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b580:	2b00      	cmp	r3, #0
 800b582:	d128      	bne.n	800b5d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b58e:	79fb      	ldrb	r3, [r7, #7]
 800b590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b594:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f023 0301 	bic.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	bf14      	ite	ne
 800b5ae:	2301      	movne	r3, #1
 800b5b0:	2300      	moveq	r3, #0
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f107 0314 	add.w	r3, r7, #20
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe fa9b 	bl	8009af8 <inc_lock>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <f_open+0x22e>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 80a3 	bne.w	800b726 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff f940 	bl	800a86c <ld_clust>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f4:	331c      	adds	r3, #28
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe f8e6 	bl	80097c8 <ld_dword>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	88da      	ldrh	r2, [r3, #6]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	79fa      	ldrb	r2, [r7, #7]
 800b61a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3330      	adds	r3, #48	; 0x30
 800b632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b636:	2100      	movs	r1, #0
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fe f950 	bl	80098de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	f003 0320 	and.w	r3, r3, #32
 800b644:	2b00      	cmp	r3, #0
 800b646:	d06e      	beq.n	800b726 <f_open+0x37e>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d06a      	beq.n	800b726 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	895b      	ldrh	r3, [r3, #10]
 800b65c:	461a      	mov	r2, r3
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	899b      	ldrh	r3, [r3, #12]
 800b662:	fb02 f303 	mul.w	r3, r2, r3
 800b666:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	657b      	str	r3, [r7, #84]	; 0x54
 800b674:	e016      	b.n	800b6a4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fc2b 	bl	8009ed6 <get_fat>
 800b680:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b684:	2b01      	cmp	r3, #1
 800b686:	d802      	bhi.n	800b68e <f_open+0x2e6>
 800b688:	2302      	movs	r3, #2
 800b68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b694:	d102      	bne.n	800b69c <f_open+0x2f4>
 800b696:	2301      	movs	r3, #1
 800b698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b69c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <f_open+0x30c>
 800b6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d8e0      	bhi.n	800b676 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b6ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d131      	bne.n	800b726 <f_open+0x37e>
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	899b      	ldrh	r3, [r3, #12]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ce:	fb01 f202 	mul.w	r2, r1, r2
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d026      	beq.n	800b726 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fbdb 	bl	8009e98 <clust2sect>
 800b6e2:	6478      	str	r0, [r7, #68]	; 0x44
 800b6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d103      	bne.n	800b6f2 <f_open+0x34a>
						res = FR_INT_ERR;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b6f0:	e019      	b.n	800b726 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	899b      	ldrh	r3, [r3, #12]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b700:	441a      	add	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	7858      	ldrb	r0, [r3, #1]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a1a      	ldr	r2, [r3, #32]
 800b714:	2301      	movs	r3, #1
 800b716:	f7fd ffe1 	bl	80096dc <disk_read>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <f_open+0x37e>
 800b720:	2301      	movs	r3, #1
 800b722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <f_open+0x38c>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b73a:	4611      	mov	r1, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe f941 	bl	80099c4 <unlock_fs>
 800b742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b746:	4618      	mov	r0, r3
 800b748:	3760      	adds	r7, #96	; 0x60
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b08c      	sub	sp, #48	; 0x30
 800b752:	af00      	add	r7, sp, #0
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	607a      	str	r2, [r7, #4]
 800b75a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f107 0210 	add.w	r2, r7, #16
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fd6e 	bl	800b250 <validate>
 800b774:	4603      	mov	r3, r0
 800b776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b77a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d107      	bne.n	800b792 <f_write+0x44>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	7d5b      	ldrb	r3, [r3, #21]
 800b786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b78a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <f_write+0x58>
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe f912 	bl	80099c4 <unlock_fs>
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7a4:	e192      	b.n	800bacc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	f003 0302 	and.w	r3, r3, #2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <f_write+0x72>
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2107      	movs	r1, #7
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe f904 	bl	80099c4 <unlock_fs>
 800b7bc:	2307      	movs	r3, #7
 800b7be:	e185      	b.n	800bacc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	699a      	ldr	r2, [r3, #24]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	441a      	add	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	f080 816a 	bcs.w	800baa6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	43db      	mvns	r3, r3
 800b7d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b7da:	e164      	b.n	800baa6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	8992      	ldrh	r2, [r2, #12]
 800b7e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7e8:	fb01 f202 	mul.w	r2, r1, r2
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 810f 	bne.w	800ba12 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	8992      	ldrh	r2, [r2, #12]
 800b7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	8952      	ldrh	r2, [r2, #10]
 800b804:	3a01      	subs	r2, #1
 800b806:	4013      	ands	r3, r2
 800b808:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d14d      	bne.n	800b8ac <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10c      	bne.n	800b832 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d11a      	bne.n	800b85a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe fda9 	bl	800a380 <create_chain>
 800b82e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b830:	e013      	b.n	800b85a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d007      	beq.n	800b84a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	4619      	mov	r1, r3
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7fe fe35 	bl	800a4b0 <clmt_clust>
 800b846:	62b8      	str	r0, [r7, #40]	; 0x28
 800b848:	e007      	b.n	800b85a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fe fd94 	bl	800a380 <create_chain>
 800b858:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 8127 	beq.w	800bab0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	2b01      	cmp	r3, #1
 800b866:	d109      	bne.n	800b87c <f_write+0x12e>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2202      	movs	r2, #2
 800b86c:	755a      	strb	r2, [r3, #21]
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2102      	movs	r1, #2
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe f8a6 	bl	80099c4 <unlock_fs>
 800b878:	2302      	movs	r3, #2
 800b87a:	e127      	b.n	800bacc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d109      	bne.n	800b898 <f_write+0x14a>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	755a      	strb	r2, [r3, #21]
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2101      	movs	r1, #1
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe f898 	bl	80099c4 <unlock_fs>
 800b894:	2301      	movs	r3, #1
 800b896:	e119      	b.n	800bacc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d102      	bne.n	800b8ac <f_write+0x15e>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7d1b      	ldrb	r3, [r3, #20]
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da1d      	bge.n	800b8f2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	7858      	ldrb	r0, [r3, #1]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6a1a      	ldr	r2, [r3, #32]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f7fd ff29 	bl	800971c <disk_write>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <f_write+0x196>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	755a      	strb	r2, [r3, #21]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe f872 	bl	80099c4 <unlock_fs>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e0f3      	b.n	800bacc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	7d1b      	ldrb	r3, [r3, #20]
 800b8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f7fe facc 	bl	8009e98 <clust2sect>
 800b900:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d109      	bne.n	800b91c <f_write+0x1ce>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2202      	movs	r2, #2
 800b90c:	755a      	strb	r2, [r3, #21]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2102      	movs	r1, #2
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe f856 	bl	80099c4 <unlock_fs>
 800b918:	2302      	movs	r3, #2
 800b91a:	e0d7      	b.n	800bacc <f_write+0x37e>
			sect += csect;
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	4413      	add	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	899b      	ldrh	r3, [r3, #12]
 800b928:	461a      	mov	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b930:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d048      	beq.n	800b9ca <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	4413      	add	r3, r2
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	8952      	ldrh	r2, [r2, #10]
 800b942:	4293      	cmp	r3, r2
 800b944:	d905      	bls.n	800b952 <f_write+0x204>
					cc = fs->csize - csect;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	895b      	ldrh	r3, [r3, #10]
 800b94a:	461a      	mov	r2, r3
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	7858      	ldrb	r0, [r3, #1]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	69f9      	ldr	r1, [r7, #28]
 800b95c:	f7fd fede 	bl	800971c <disk_write>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <f_write+0x22c>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2201      	movs	r2, #1
 800b96a:	755a      	strb	r2, [r3, #21]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2101      	movs	r1, #1
 800b970:	4618      	mov	r0, r3
 800b972:	f7fe f827 	bl	80099c4 <unlock_fs>
 800b976:	2301      	movs	r3, #1
 800b978:	e0a8      	b.n	800bacc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a1a      	ldr	r2, [r3, #32]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	6a3a      	ldr	r2, [r7, #32]
 800b984:	429a      	cmp	r2, r3
 800b986:	d918      	bls.n	800b9ba <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6a1a      	ldr	r2, [r3, #32]
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	8992      	ldrh	r2, [r2, #12]
 800b99a:	fb02 f303 	mul.w	r3, r2, r3
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	18d1      	adds	r1, r2, r3
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	899b      	ldrh	r3, [r3, #12]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f7fd ff78 	bl	800989c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	7d1b      	ldrb	r3, [r3, #20]
 800b9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	899b      	ldrh	r3, [r3, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b9c8:	e050      	b.n	800ba6c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d01b      	beq.n	800ba0c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	699a      	ldr	r2, [r3, #24]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d215      	bcs.n	800ba0c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	7858      	ldrb	r0, [r3, #1]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	f7fd fe75 	bl	80096dc <disk_read>
 800b9f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	755a      	strb	r2, [r3, #21]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2101      	movs	r1, #1
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd ffde 	bl	80099c4 <unlock_fs>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e05f      	b.n	800bacc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	899b      	ldrh	r3, [r3, #12]
 800ba16:	4618      	mov	r0, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	8992      	ldrh	r2, [r2, #12]
 800ba20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba24:	fb01 f202 	mul.w	r2, r1, r2
 800ba28:	1a9b      	subs	r3, r3, r2
 800ba2a:	1ac3      	subs	r3, r0, r3
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ba2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d901      	bls.n	800ba3a <f_write+0x2ec>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	8992      	ldrh	r2, [r2, #12]
 800ba48:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba4c:	fb00 f202 	mul.w	r2, r0, r2
 800ba50:	1a9b      	subs	r3, r3, r2
 800ba52:	440b      	add	r3, r1
 800ba54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba56:	69f9      	ldr	r1, [r7, #28]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fd ff1f 	bl	800989c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7d1b      	ldrb	r3, [r3, #20]
 800ba62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba6c:	69fa      	ldr	r2, [r7, #28]
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	4413      	add	r3, r2
 800ba72:	61fb      	str	r3, [r7, #28]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	619a      	str	r2, [r3, #24]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bf38      	it	cc
 800ba8c:	461a      	movcc	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	60da      	str	r2, [r3, #12]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	441a      	add	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f47f ae97 	bne.w	800b7dc <f_write+0x8e>
 800baae:	e000      	b.n	800bab2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bab0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	7d1b      	ldrb	r3, [r3, #20]
 800bab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baba:	b2da      	uxtb	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fd ff7d 	bl	80099c4 <unlock_fs>
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3730      	adds	r7, #48	; 0x30
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f107 0208 	add.w	r2, r7, #8
 800bae2:	4611      	mov	r1, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff fbb3 	bl	800b250 <validate>
 800baea:	4603      	mov	r3, r0
 800baec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d16d      	bne.n	800bbd0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7d1b      	ldrb	r3, [r3, #20]
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d067      	beq.n	800bbd0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7d1b      	ldrb	r3, [r3, #20]
 800bb04:	b25b      	sxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da1a      	bge.n	800bb40 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	7858      	ldrb	r0, [r3, #1]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a1a      	ldr	r2, [r3, #32]
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f7fd fdff 	bl	800971c <disk_write>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <f_sync+0x5e>
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2101      	movs	r1, #1
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fd ff4b 	bl	80099c4 <unlock_fs>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e055      	b.n	800bbde <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7d1b      	ldrb	r3, [r3, #20]
 800bb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bb40:	f7fd fd2a 	bl	8009598 <get_fattime>
 800bb44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f7fe f904 	bl	8009d5c <move_window>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d138      	bne.n	800bbd0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	330b      	adds	r3, #11
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	330b      	adds	r3, #11
 800bb6e:	f042 0220 	orr.w	r2, r2, #32
 800bb72:	b2d2      	uxtb	r2, r2
 800bb74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	f7fe fe92 	bl	800a8aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f103 021c 	add.w	r2, r3, #28
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	4619      	mov	r1, r3
 800bb92:	4610      	mov	r0, r2
 800bb94:	f7fd fe56 	bl	8009844 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3316      	adds	r3, #22
 800bb9c:	6939      	ldr	r1, [r7, #16]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fd fe50 	bl	8009844 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3312      	adds	r3, #18
 800bba8:	2100      	movs	r1, #0
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd fe2f 	bl	800980e <st_word>
					fs->wflag = 1;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe f8fd 	bl	8009db8 <sync_fs>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7d1b      	ldrb	r3, [r3, #20]
 800bbc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	7dfa      	ldrb	r2, [r7, #23]
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fd fef4 	bl	80099c4 <unlock_fs>
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff ff70 	bl	800bad4 <f_sync>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d11d      	bne.n	800bc3a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f107 0208 	add.w	r2, r7, #8
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff fb22 	bl	800b250 <validate>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d111      	bne.n	800bc3a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fd fffa 	bl	8009c14 <dec_lock>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d102      	bne.n	800bc30 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fd fec5 	bl	80099c4 <unlock_fs>
#endif
		}
	}
	return res;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b090      	sub	sp, #64	; 0x40
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f107 0208 	add.w	r2, r7, #8
 800bc54:	4611      	mov	r1, r2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7ff fafa 	bl	800b250 <validate>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bc62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d103      	bne.n	800bc72 <f_lseek+0x2e>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	7d5b      	ldrb	r3, [r3, #21]
 800bc6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bc72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d009      	beq.n	800bc8e <f_lseek+0x4a>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fe9e 	bl	80099c4 <unlock_fs>
 800bc88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc8c:	e244      	b.n	800c118 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 80f2 	beq.w	800be7c <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9e:	d164      	bne.n	800bd6a <f_lseek+0x126>
			tbl = fp->cltbl;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	1d1a      	adds	r2, r3, #4
 800bcaa:	627a      	str	r2, [r7, #36]	; 0x24
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	617b      	str	r3, [r7, #20]
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d044      	beq.n	800bd4a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	3302      	adds	r3, #2
 800bccc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe f8fa 	bl	8009ed6 <get_fat>
 800bce2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d809      	bhi.n	800bcfe <f_lseek+0xba>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2202      	movs	r2, #2
 800bcee:	755a      	strb	r2, [r3, #21]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2102      	movs	r1, #2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fd fe65 	bl	80099c4 <unlock_fs>
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e20c      	b.n	800c118 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d109      	bne.n	800bd1a <f_lseek+0xd6>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	755a      	strb	r2, [r3, #21]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2101      	movs	r1, #1
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fd fe57 	bl	80099c4 <unlock_fs>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e1fe      	b.n	800c118 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d0d4      	beq.n	800bcce <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d809      	bhi.n	800bd40 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	627a      	str	r2, [r7, #36]	; 0x24
 800bd32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	1d1a      	adds	r2, r3, #4
 800bd3a:	627a      	str	r2, [r7, #36]	; 0x24
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	69db      	ldr	r3, [r3, #28]
 800bd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d3ba      	bcc.n	800bcc0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bd52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d803      	bhi.n	800bd62 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	e1d1      	b.n	800c106 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bd62:	2311      	movs	r3, #17
 800bd64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bd68:	e1cd      	b.n	800c106 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d902      	bls.n	800bd7a <f_lseek+0x136>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 81bf 	beq.w	800c106 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7fe fb8e 	bl	800a4b0 <clmt_clust>
 800bd94:	4602      	mov	r2, r0
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f7fe f878 	bl	8009e98 <clust2sect>
 800bda8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d109      	bne.n	800bdc4 <f_lseek+0x180>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	755a      	strb	r2, [r3, #21]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2102      	movs	r1, #2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd fe02 	bl	80099c4 <unlock_fs>
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	e1a9      	b.n	800c118 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	8992      	ldrh	r2, [r2, #12]
 800bdcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	8952      	ldrh	r2, [r2, #10]
 800bdd4:	3a01      	subs	r2, #1
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	69ba      	ldr	r2, [r7, #24]
 800bdda:	4413      	add	r3, r2
 800bddc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	8992      	ldrh	r2, [r2, #12]
 800bde6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdea:	fb01 f202 	mul.w	r2, r1, r2
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 8188 	beq.w	800c106 <f_lseek+0x4c2>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	f000 8182 	beq.w	800c106 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7d1b      	ldrb	r3, [r3, #20]
 800be06:	b25b      	sxtb	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	da1d      	bge.n	800be48 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	7858      	ldrb	r0, [r3, #1]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1a      	ldr	r2, [r3, #32]
 800be1a:	2301      	movs	r3, #1
 800be1c:	f7fd fc7e 	bl	800971c <disk_write>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <f_lseek+0x1f6>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	755a      	strb	r2, [r3, #21]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2101      	movs	r1, #1
 800be30:	4618      	mov	r0, r3
 800be32:	f7fd fdc7 	bl	80099c4 <unlock_fs>
 800be36:	2301      	movs	r3, #1
 800be38:	e16e      	b.n	800c118 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7d1b      	ldrb	r3, [r3, #20]
 800be3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be42:	b2da      	uxtb	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	7858      	ldrb	r0, [r3, #1]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be52:	2301      	movs	r3, #1
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	f7fd fc41 	bl	80096dc <disk_read>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <f_lseek+0x230>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	755a      	strb	r2, [r3, #21]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fd fdaa 	bl	80099c4 <unlock_fs>
 800be70:	2301      	movs	r3, #1
 800be72:	e151      	b.n	800c118 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69ba      	ldr	r2, [r7, #24]
 800be78:	621a      	str	r2, [r3, #32]
 800be7a:	e144      	b.n	800c106 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	429a      	cmp	r2, r3
 800be84:	d908      	bls.n	800be98 <f_lseek+0x254>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	7d1b      	ldrb	r3, [r3, #20]
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d102      	bne.n	800be98 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	637b      	str	r3, [r7, #52]	; 0x34
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 80ce 	beq.w	800c04c <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	895b      	ldrh	r3, [r3, #10]
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	899b      	ldrh	r3, [r3, #12]
 800beba:	fb02 f303 	mul.w	r3, r2, r3
 800bebe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01b      	beq.n	800befe <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	1e5a      	subs	r2, r3, #1
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	1e59      	subs	r1, r3, #1
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800beda:	429a      	cmp	r2, r3
 800bedc:	d30f      	bcc.n	800befe <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	1e5a      	subs	r2, r3, #1
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	425b      	negs	r3, r3
 800bee6:	401a      	ands	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	63bb      	str	r3, [r7, #56]	; 0x38
 800befc:	e02c      	b.n	800bf58 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d123      	bne.n	800bf52 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fa36 	bl	800a380 <create_chain>
 800bf14:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d109      	bne.n	800bf30 <f_lseek+0x2ec>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	755a      	strb	r2, [r3, #21]
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2102      	movs	r1, #2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fd fd4c 	bl	80099c4 <unlock_fs>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e0f3      	b.n	800c118 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf36:	d109      	bne.n	800bf4c <f_lseek+0x308>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	755a      	strb	r2, [r3, #21]
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2101      	movs	r1, #1
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fd fd3e 	bl	80099c4 <unlock_fs>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0e5      	b.n	800c118 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf50:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf56:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d076      	beq.n	800c04c <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800bf5e:	e044      	b.n	800bfea <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	699a      	ldr	r2, [r3, #24]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	441a      	add	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7d1b      	ldrb	r3, [r3, #20]
 800bf78:	f003 0302 	and.w	r3, r3, #2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe f9fb 	bl	800a380 <create_chain>
 800bf8a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d108      	bne.n	800bfa4 <f_lseek+0x360>
							ofs = 0; break;
 800bf92:	2300      	movs	r3, #0
 800bf94:	603b      	str	r3, [r7, #0]
 800bf96:	e02c      	b.n	800bff2 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fd ff9a 	bl	8009ed6 <get_fat>
 800bfa2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d109      	bne.n	800bfc0 <f_lseek+0x37c>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	755a      	strb	r2, [r3, #21]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fd fd04 	bl	80099c4 <unlock_fs>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0ab      	b.n	800c118 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d904      	bls.n	800bfd0 <f_lseek+0x38c>
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d309      	bcc.n	800bfe4 <f_lseek+0x3a0>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	755a      	strb	r2, [r3, #21]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2102      	movs	r1, #2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fd fcf2 	bl	80099c4 <unlock_fs>
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	e099      	b.n	800c118 <f_lseek+0x4d4>
					fp->clust = clst;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d8b6      	bhi.n	800bf60 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	441a      	add	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	899b      	ldrh	r3, [r3, #12]
 800c002:	461a      	mov	r2, r3
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	fbb3 f1f2 	udiv	r1, r3, r2
 800c00a:	fb01 f202 	mul.w	r2, r1, r2
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d01b      	beq.n	800c04c <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fd ff3d 	bl	8009e98 <clust2sect>
 800c01e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	2b00      	cmp	r3, #0
 800c024:	d109      	bne.n	800c03a <f_lseek+0x3f6>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2202      	movs	r2, #2
 800c02a:	755a      	strb	r2, [r3, #21]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2102      	movs	r1, #2
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fcc7 	bl	80099c4 <unlock_fs>
 800c036:	2302      	movs	r3, #2
 800c038:	e06e      	b.n	800c118 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	899b      	ldrh	r3, [r3, #12]
 800c03e:	461a      	mov	r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	fbb3 f3f2 	udiv	r3, r3, r2
 800c046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c048:	4413      	add	r3, r2
 800c04a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	699a      	ldr	r2, [r3, #24]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	429a      	cmp	r2, r3
 800c056:	d90a      	bls.n	800c06e <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	699a      	ldr	r2, [r3, #24]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7d1b      	ldrb	r3, [r3, #20]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	8992      	ldrh	r2, [r2, #12]
 800c076:	fbb3 f1f2 	udiv	r1, r3, r2
 800c07a:	fb01 f202 	mul.w	r2, r1, r2
 800c07e:	1a9b      	subs	r3, r3, r2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d040      	beq.n	800c106 <f_lseek+0x4c2>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a1b      	ldr	r3, [r3, #32]
 800c088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d03b      	beq.n	800c106 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7d1b      	ldrb	r3, [r3, #20]
 800c092:	b25b      	sxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	da1d      	bge.n	800c0d4 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	7858      	ldrb	r0, [r3, #1]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1a      	ldr	r2, [r3, #32]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f7fd fb38 	bl	800971c <disk_write>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d009      	beq.n	800c0c6 <f_lseek+0x482>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	755a      	strb	r2, [r3, #21]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd fc81 	bl	80099c4 <unlock_fs>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e028      	b.n	800c118 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	7858      	ldrb	r0, [r3, #1]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0de:	2301      	movs	r3, #1
 800c0e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0e2:	f7fd fafb 	bl	80096dc <disk_read>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <f_lseek+0x4bc>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	755a      	strb	r2, [r3, #21]
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd fc64 	bl	80099c4 <unlock_fs>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e00b      	b.n	800c118 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c104:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fd fc58 	bl	80099c4 <unlock_fs>
 800c114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3740      	adds	r7, #64	; 0x40
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c12c:	78fb      	ldrb	r3, [r7, #3]
 800c12e:	2b0a      	cmp	r3, #10
 800c130:	d103      	bne.n	800c13a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c132:	210d      	movs	r1, #13
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff fff3 	bl	800c120 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	db25      	blt.n	800c192 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	60fa      	str	r2, [r7, #12]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	4413      	add	r3, r2
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b3c      	cmp	r3, #60	; 0x3c
 800c158:	dd12      	ble.n	800c180 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f103 010c 	add.w	r1, r3, #12
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	f7ff faf0 	bl	800b74e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	429a      	cmp	r2, r3
 800c174:	d101      	bne.n	800c17a <putc_bfd+0x5a>
 800c176:	2300      	movs	r3, #0
 800c178:	e001      	b.n	800c17e <putc_bfd+0x5e>
 800c17a:	f04f 33ff 	mov.w	r3, #4294967295
 800c17e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	609a      	str	r2, [r3, #8]
 800c190:	e000      	b.n	800c194 <putc_bfd+0x74>
	if (i < 0) return;
 800c192:	bf00      	nop
}
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db16      	blt.n	800c1d8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f103 010c 	add.w	r1, r3, #12
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	f107 030c 	add.w	r3, r7, #12
 800c1be:	f7ff fac6 	bl	800b74e <f_write>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d107      	bne.n	800c1d8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d102      	bne.n	800c1d8 <putc_flush+0x3e>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	e001      	b.n	800c1dc <putc_flush+0x42>
	return EOF;
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	605a      	str	r2, [r3, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	609a      	str	r2, [r3, #8]
}
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b096      	sub	sp, #88	; 0x58
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c218:	f107 030c 	add.w	r3, r7, #12
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff ffe0 	bl	800c1e4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c224:	e009      	b.n	800c23a <f_puts+0x2c>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	781a      	ldrb	r2, [r3, #0]
 800c22e:	f107 030c 	add.w	r3, r7, #12
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff ff73 	bl	800c120 <putc_bfd>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f1      	bne.n	800c226 <f_puts+0x18>
	return putc_flush(&pb);
 800c242:	f107 030c 	add.w	r3, r7, #12
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff ffa7 	bl	800c19a <putc_flush>
 800c24c:	4603      	mov	r3, r0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3758      	adds	r7, #88	; 0x58
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c266:	2301      	movs	r3, #1
 800c268:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c26e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c270:	7a5b      	ldrb	r3, [r3, #9]
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d131      	bne.n	800c2dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c278:	4b1c      	ldr	r3, [pc, #112]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c27a:	7a5b      	ldrb	r3, [r3, #9]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	461a      	mov	r2, r3
 800c280:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c282:	2100      	movs	r1, #0
 800c284:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c286:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c288:	7a5b      	ldrb	r3, [r3, #9]
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	4a17      	ldr	r2, [pc, #92]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c296:	4b15      	ldr	r3, [pc, #84]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c298:	7a5b      	ldrb	r3, [r3, #9]
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	461a      	mov	r2, r3
 800c29e:	4b13      	ldr	r3, [pc, #76]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c2a0:	4413      	add	r3, r2
 800c2a2:	79fa      	ldrb	r2, [r7, #7]
 800c2a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2a6:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c2a8:	7a5b      	ldrb	r3, [r3, #9]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	b2d1      	uxtb	r1, r2
 800c2b0:	4a0e      	ldr	r2, [pc, #56]	; (800c2ec <FATFS_LinkDriverEx+0x94>)
 800c2b2:	7251      	strb	r1, [r2, #9]
 800c2b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2b6:	7dbb      	ldrb	r3, [r7, #22]
 800c2b8:	3330      	adds	r3, #48	; 0x30
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	223a      	movs	r2, #58	; 0x3a
 800c2c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	3302      	adds	r3, #2
 800c2cc:	222f      	movs	r2, #47	; 0x2f
 800c2ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	3303      	adds	r3, #3
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	200034d4 	.word	0x200034d4

0800c2f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7ff ffaa 	bl	800c258 <FATFS_LinkDriverEx>
 800c304:	4603      	mov	r3, r0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b086      	sub	sp, #24
 800c312:	af00      	add	r7, sp, #0
 800c314:	4603      	mov	r3, r0
 800c316:	6039      	str	r1, [r7, #0]
 800c318:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	2300      	movs	r3, #0
 800c320:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c322:	f107 030c 	add.w	r3, r7, #12
 800c326:	2101      	movs	r1, #1
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 f8cd 	bl	800c4c8 <osSemaphoreCreate>
 800c32e:	4602      	mov	r2, r0
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	bf14      	ite	ne
 800c33c:	2301      	movne	r3, #1
 800c33e:	2300      	moveq	r3, #0
 800c340:	b2db      	uxtb	r3, r3
 800c342:	617b      	str	r3, [r7, #20]

    return ret;
 800c344:	697b      	ldr	r3, [r7, #20]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b082      	sub	sp, #8
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f96c 	bl	800c634 <osSemaphoreDelete>
#endif
    return 1;
 800c35c:	2301      	movs	r3, #1
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c372:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f8d8 	bl	800c52c <osSemaphoreWait>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c382:	2301      	movs	r3, #1
 800c384:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f915 	bl	800c5c8 <osSemaphoreRelease>
#endif
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c3b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3b8:	2b84      	cmp	r3, #132	; 0x84
 800c3ba:	d005      	beq.n	800c3c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c3bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	3303      	adds	r3, #3
 800c3c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b083      	sub	sp, #12
 800c3da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3dc:	f3ef 8305 	mrs	r3, IPSR
 800c3e0:	607b      	str	r3, [r7, #4]
  return(result);
 800c3e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bf14      	ite	ne
 800c3e8:	2301      	movne	r3, #1
 800c3ea:	2300      	moveq	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3fe:	f001 f9af 	bl	800d760 <vTaskStartScheduler>
  
  return osOK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	bd80      	pop	{r7, pc}

0800c408 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40a:	b089      	sub	sp, #36	; 0x24
 800c40c:	af04      	add	r7, sp, #16
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d020      	beq.n	800c45c <osThreadCreate+0x54>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d01c      	beq.n	800c45c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685c      	ldr	r4, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681d      	ldr	r5, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691e      	ldr	r6, [r3, #16]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff ffb6 	bl	800c3a6 <makeFreeRtosPriority>
 800c43a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c444:	9202      	str	r2, [sp, #8]
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	9100      	str	r1, [sp, #0]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	4632      	mov	r2, r6
 800c44e:	4629      	mov	r1, r5
 800c450:	4620      	mov	r0, r4
 800c452:	f000 ffa7 	bl	800d3a4 <xTaskCreateStatic>
 800c456:	4603      	mov	r3, r0
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	e01c      	b.n	800c496 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685c      	ldr	r4, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c468:	b29e      	uxth	r6, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff ff98 	bl	800c3a6 <makeFreeRtosPriority>
 800c476:	4602      	mov	r2, r0
 800c478:	f107 030c 	add.w	r3, r7, #12
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	9200      	str	r2, [sp, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	4632      	mov	r2, r6
 800c484:	4629      	mov	r1, r5
 800c486:	4620      	mov	r0, r4
 800c488:	f000 ffe9 	bl	800d45e <xTaskCreate>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d001      	beq.n	800c496 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c492:	2300      	movs	r3, #0
 800c494:	e000      	b.n	800c498 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c496:	68fb      	ldr	r3, [r7, #12]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <osDelay+0x16>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	e000      	b.n	800c4b8 <osDelay+0x18>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 f91d 	bl	800d6f8 <vTaskDelay>
  
  return osOK;
 800c4be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af02      	add	r7, sp, #8
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00f      	beq.n	800c4fa <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10a      	bne.n	800c4f6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	9200      	str	r2, [sp, #0]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	f000 f9f9 	bl	800c8e4 <xQueueGenericCreateStatic>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	e016      	b.n	800c524 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	e014      	b.n	800c524 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d110      	bne.n	800c522 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c500:	2203      	movs	r2, #3
 800c502:	2100      	movs	r1, #0
 800c504:	2001      	movs	r0, #1
 800c506:	f000 fa65 	bl	800c9d4 <xQueueGenericCreate>
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d005      	beq.n	800c51e <osSemaphoreCreate+0x56>
 800c512:	2300      	movs	r3, #0
 800c514:	2200      	movs	r2, #0
 800c516:	2100      	movs	r1, #0
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f000 fab5 	bl	800ca88 <xQueueGenericSend>
      return sema;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	e000      	b.n	800c524 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c522:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c536:	2300      	movs	r3, #0
 800c538:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c540:	2380      	movs	r3, #128	; 0x80
 800c542:	e03a      	b.n	800c5ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d103      	bne.n	800c558 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e009      	b.n	800c56c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <osSemaphoreWait+0x40>
      ticks = 1;
 800c568:	2301      	movs	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c56c:	f7ff ff33 	bl	800c3d6 <inHandlerMode>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d017      	beq.n	800c5a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c576:	f107 0308 	add.w	r3, r7, #8
 800c57a:	461a      	mov	r2, r3
 800c57c:	2100      	movs	r1, #0
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fd1a 	bl	800cfb8 <xQueueReceiveFromISR>
 800c584:	4603      	mov	r3, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d001      	beq.n	800c58e <osSemaphoreWait+0x62>
      return osErrorOS;
 800c58a:	23ff      	movs	r3, #255	; 0xff
 800c58c:	e015      	b.n	800c5ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <osSemaphoreWait+0x8c>
 800c594:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <osSemaphoreWait+0x98>)
 800c596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	e008      	b.n	800c5b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fbf9 	bl	800cda0 <xQueueSemaphoreTake>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d001      	beq.n	800c5b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c5b4:	23ff      	movs	r3, #255	; 0xff
 800c5b6:	e000      	b.n	800c5ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	e000ed04 	.word	0xe000ed04

0800c5c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c5d8:	f7ff fefd 	bl	800c3d6 <inHandlerMode>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d016      	beq.n	800c610 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fb4b 	bl	800cc84 <xQueueGiveFromISR>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d001      	beq.n	800c5f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c5f4:	23ff      	movs	r3, #255	; 0xff
 800c5f6:	e017      	b.n	800c628 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d013      	beq.n	800c626 <osSemaphoreRelease+0x5e>
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	; (800c630 <osSemaphoreRelease+0x68>)
 800c600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	e00a      	b.n	800c626 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c610:	2300      	movs	r3, #0
 800c612:	2200      	movs	r2, #0
 800c614:	2100      	movs	r1, #0
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa36 	bl	800ca88 <xQueueGenericSend>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d001      	beq.n	800c626 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c622:	23ff      	movs	r3, #255	; 0xff
 800c624:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c626:	68fb      	ldr	r3, [r7, #12]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c63c:	f7ff fecb 	bl	800c3d6 <inHandlerMode>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c646:	2382      	movs	r3, #130	; 0x82
 800c648:	e003      	b.n	800c652 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fd34 	bl	800d0b8 <vQueueDelete>

  return osOK; 
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c65a:	b590      	push	{r4, r7, lr}
 800c65c:	b085      	sub	sp, #20
 800c65e:	af02      	add	r7, sp, #8
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d011      	beq.n	800c690 <osMessageCreate+0x36>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00d      	beq.n	800c690 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6859      	ldr	r1, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	2400      	movs	r4, #0
 800c686:	9400      	str	r4, [sp, #0]
 800c688:	f000 f92c 	bl	800c8e4 <xQueueGenericCreateStatic>
 800c68c:	4603      	mov	r3, r0
 800c68e:	e008      	b.n	800c6a2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	4619      	mov	r1, r3
 800c69c:	f000 f99a 	bl	800c9d4 <xQueueGenericCreate>
 800c6a0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd90      	pop	{r4, r7, pc}

0800c6aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f103 0208 	add.w	r2, r3, #8
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f103 0208 	add.w	r2, r3, #8
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f103 0208 	add.w	r2, r3, #8
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	689a      	ldr	r2, [r3, #8]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	601a      	str	r2, [r3, #0]
}
 800c740:	bf00      	nop
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c762:	d103      	bne.n	800c76c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	e00c      	b.n	800c786 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3308      	adds	r3, #8
 800c770:	60fb      	str	r3, [r7, #12]
 800c772:	e002      	b.n	800c77a <vListInsert+0x2e>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	429a      	cmp	r2, r3
 800c784:	d2f6      	bcs.n	800c774 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	601a      	str	r2, [r3, #0]
}
 800c7b2:	bf00      	nop
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	6892      	ldr	r2, [r2, #8]
 800c7d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	6852      	ldr	r2, [r2, #4]
 800c7de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d103      	bne.n	800c7f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	689a      	ldr	r2, [r3, #8]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	1e5a      	subs	r2, r3, #1
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
	...

0800c814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10a      	bne.n	800c83e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c83e:	f001 fef1 	bl	800e624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84a:	68f9      	ldr	r1, [r7, #12]
 800c84c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c84e:	fb01 f303 	mul.w	r3, r1, r3
 800c852:	441a      	add	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86e:	3b01      	subs	r3, #1
 800c870:	68f9      	ldr	r1, [r7, #12]
 800c872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c874:	fb01 f303 	mul.w	r3, r1, r3
 800c878:	441a      	add	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	22ff      	movs	r2, #255	; 0xff
 800c882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	22ff      	movs	r2, #255	; 0xff
 800c88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d114      	bne.n	800c8be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01a      	beq.n	800c8d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3310      	adds	r3, #16
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f001 f9af 	bl	800dc04 <xTaskRemoveFromEventList>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d012      	beq.n	800c8d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c8ac:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <xQueueGenericReset+0xcc>)
 800c8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	e009      	b.n	800c8d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3310      	adds	r3, #16
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff fef1 	bl	800c6aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3324      	adds	r3, #36	; 0x24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff feec 	bl	800c6aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8d2:	f001 fed7 	bl	800e684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8d6:	2301      	movs	r3, #1
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08e      	sub	sp, #56	; 0x38
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <xQueueGenericCreateStatic+0x52>
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <xQueueGenericCreateStatic+0x56>
 800c936:	2301      	movs	r3, #1
 800c938:	e000      	b.n	800c93c <xQueueGenericCreateStatic+0x58>
 800c93a:	2300      	movs	r3, #0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	623b      	str	r3, [r7, #32]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <xQueueGenericCreateStatic+0x7e>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <xQueueGenericCreateStatic+0x82>
 800c962:	2301      	movs	r3, #1
 800c964:	e000      	b.n	800c968 <xQueueGenericCreateStatic+0x84>
 800c966:	2300      	movs	r3, #0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	61fb      	str	r3, [r7, #28]
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c982:	2348      	movs	r3, #72	; 0x48
 800c984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2b48      	cmp	r3, #72	; 0x48
 800c98a:	d00a      	beq.n	800c9a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	61bb      	str	r3, [r7, #24]
}
 800c99e:	bf00      	nop
 800c9a0:	e7fe      	b.n	800c9a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00d      	beq.n	800c9ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f83f 	bl	800ca48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3730      	adds	r7, #48	; 0x30
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b08a      	sub	sp, #40	; 0x28
 800c9d8:	af02      	add	r7, sp, #8
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	613b      	str	r3, [r7, #16]
}
 800c9fa:	bf00      	nop
 800c9fc:	e7fe      	b.n	800c9fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	fb02 f303 	mul.w	r3, r2, r3
 800ca06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	3348      	adds	r3, #72	; 0x48
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f001 ff2b 	bl	800e868 <pvPortMalloc>
 800ca12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d011      	beq.n	800ca3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	3348      	adds	r3, #72	; 0x48
 800ca22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca2c:	79fa      	ldrb	r2, [r7, #7]
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4613      	mov	r3, r2
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 f805 	bl	800ca48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca3e:	69bb      	ldr	r3, [r7, #24]
	}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3720      	adds	r7, #32
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d103      	bne.n	800ca64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	e002      	b.n	800ca6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca76:	2101      	movs	r1, #1
 800ca78:	69b8      	ldr	r0, [r7, #24]
 800ca7a:	f7ff fecb 	bl	800c814 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca7e:	bf00      	nop
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	; 0x38
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca96:	2300      	movs	r3, #0
 800ca98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <xQueueGenericSend+0x32>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d103      	bne.n	800cac8 <xQueueGenericSend+0x40>
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <xQueueGenericSend+0x44>
 800cac8:	2301      	movs	r3, #1
 800caca:	e000      	b.n	800cace <xQueueGenericSend+0x46>
 800cacc:	2300      	movs	r3, #0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10a      	bne.n	800cae8 <xQueueGenericSend+0x60>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b02      	cmp	r3, #2
 800caec:	d103      	bne.n	800caf6 <xQueueGenericSend+0x6e>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d101      	bne.n	800cafa <xQueueGenericSend+0x72>
 800caf6:	2301      	movs	r3, #1
 800caf8:	e000      	b.n	800cafc <xQueueGenericSend+0x74>
 800cafa:	2300      	movs	r3, #0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10a      	bne.n	800cb16 <xQueueGenericSend+0x8e>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	623b      	str	r3, [r7, #32]
}
 800cb12:	bf00      	nop
 800cb14:	e7fe      	b.n	800cb14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb16:	f001 fa35 	bl	800df84 <xTaskGetSchedulerState>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <xQueueGenericSend+0x9e>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <xQueueGenericSend+0xa2>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e000      	b.n	800cb2c <xQueueGenericSend+0xa4>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <xQueueGenericSend+0xbe>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	61fb      	str	r3, [r7, #28]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb46:	f001 fd6d 	bl	800e624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d302      	bcc.n	800cb5c <xQueueGenericSend+0xd4>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d129      	bne.n	800cbb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb62:	f000 fae4 	bl	800d12e <prvCopyDataToQueue>
 800cb66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d010      	beq.n	800cb92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	3324      	adds	r3, #36	; 0x24
 800cb74:	4618      	mov	r0, r3
 800cb76:	f001 f845 	bl	800dc04 <xTaskRemoveFromEventList>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d013      	beq.n	800cba8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb80:	4b3f      	ldr	r3, [pc, #252]	; (800cc80 <xQueueGenericSend+0x1f8>)
 800cb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	e00a      	b.n	800cba8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d007      	beq.n	800cba8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb98:	4b39      	ldr	r3, [pc, #228]	; (800cc80 <xQueueGenericSend+0x1f8>)
 800cb9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cba8:	f001 fd6c 	bl	800e684 <vPortExitCritical>
				return pdPASS;
 800cbac:	2301      	movs	r3, #1
 800cbae:	e063      	b.n	800cc78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d103      	bne.n	800cbbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cbb6:	f001 fd65 	bl	800e684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e05c      	b.n	800cc78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d106      	bne.n	800cbd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 f87d 	bl	800dcc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbd2:	f001 fd57 	bl	800e684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbd6:	f000 fe2d 	bl	800d834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbda:	f001 fd23 	bl	800e624 <vPortEnterCritical>
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbe4:	b25b      	sxtb	r3, r3
 800cbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbea:	d103      	bne.n	800cbf4 <xQueueGenericSend+0x16c>
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbfa:	b25b      	sxtb	r3, r3
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d103      	bne.n	800cc0a <xQueueGenericSend+0x182>
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc0a:	f001 fd3b 	bl	800e684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc0e:	1d3a      	adds	r2, r7, #4
 800cc10:	f107 0314 	add.w	r3, r7, #20
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 f86c 	bl	800dcf4 <xTaskCheckForTimeOut>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d124      	bne.n	800cc6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc24:	f000 fb7b 	bl	800d31e <prvIsQueueFull>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d018      	beq.n	800cc60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	3310      	adds	r3, #16
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	4611      	mov	r1, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 ffc0 	bl	800dbbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc3e:	f000 fb06 	bl	800d24e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc42:	f000 fe05 	bl	800d850 <xTaskResumeAll>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f47f af7c 	bne.w	800cb46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cc4e:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <xQueueGenericSend+0x1f8>)
 800cc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	e772      	b.n	800cb46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc62:	f000 faf4 	bl	800d24e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc66:	f000 fdf3 	bl	800d850 <xTaskResumeAll>
 800cc6a:	e76c      	b.n	800cb46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc6e:	f000 faee 	bl	800d24e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc72:	f000 fded 	bl	800d850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3738      	adds	r7, #56	; 0x38
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	e000ed04 	.word	0xe000ed04

0800cc84 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08e      	sub	sp, #56	; 0x38
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	623b      	str	r3, [r7, #32]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00a      	beq.n	800cccc <xQueueGiveFromISR+0x48>
	__asm volatile
 800ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	61fb      	str	r3, [r7, #28]
}
 800ccc8:	bf00      	nop
 800ccca:	e7fe      	b.n	800ccca <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d103      	bne.n	800ccdc <xQueueGiveFromISR+0x58>
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <xQueueGiveFromISR+0x5c>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <xQueueGiveFromISR+0x5e>
 800cce0:	2300      	movs	r3, #0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10a      	bne.n	800ccfc <xQueueGiveFromISR+0x78>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	61bb      	str	r3, [r7, #24]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccfc:	f001 fd74 	bl	800e7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd00:	f3ef 8211 	mrs	r2, BASEPRI
 800cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	617a      	str	r2, [r7, #20]
 800cd16:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cd18:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd20:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d22b      	bcs.n	800cd84 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd46:	d112      	bne.n	800cd6e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d016      	beq.n	800cd7e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	3324      	adds	r3, #36	; 0x24
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 ff55 	bl	800dc04 <xTaskRemoveFromEventList>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00e      	beq.n	800cd7e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	e007      	b.n	800cd7e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd72:	3301      	adds	r3, #1
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	b25a      	sxtb	r2, r3
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	637b      	str	r3, [r7, #52]	; 0x34
 800cd82:	e001      	b.n	800cd88 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	637b      	str	r3, [r7, #52]	; 0x34
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3738      	adds	r7, #56	; 0x38
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	623b      	str	r3, [r7, #32]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	61fb      	str	r3, [r7, #28]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdf0:	f001 f8c8 	bl	800df84 <xTaskGetSchedulerState>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d102      	bne.n	800ce00 <xQueueSemaphoreTake+0x60>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <xQueueSemaphoreTake+0x64>
 800ce00:	2301      	movs	r3, #1
 800ce02:	e000      	b.n	800ce06 <xQueueSemaphoreTake+0x66>
 800ce04:	2300      	movs	r3, #0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10a      	bne.n	800ce20 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	61bb      	str	r3, [r7, #24]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce20:	f001 fc00 	bl	800e624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d024      	beq.n	800ce7a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	1e5a      	subs	r2, r3, #1
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d104      	bne.n	800ce4a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ce40:	f001 fa48 	bl	800e2d4 <pvTaskIncrementMutexHeldCount>
 800ce44:	4602      	mov	r2, r0
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00f      	beq.n	800ce72 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	3310      	adds	r3, #16
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fed4 	bl	800dc04 <xTaskRemoveFromEventList>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d007      	beq.n	800ce72 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce62:	4b54      	ldr	r3, [pc, #336]	; (800cfb4 <xQueueSemaphoreTake+0x214>)
 800ce64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce72:	f001 fc07 	bl	800e684 <vPortExitCritical>
				return pdPASS;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e097      	b.n	800cfaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d111      	bne.n	800cea4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	617b      	str	r3, [r7, #20]
}
 800ce98:	bf00      	nop
 800ce9a:	e7fe      	b.n	800ce9a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ce9c:	f001 fbf2 	bl	800e684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cea0:	2300      	movs	r3, #0
 800cea2:	e082      	b.n	800cfaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceaa:	f107 030c 	add.w	r3, r7, #12
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 ff0a 	bl	800dcc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ceb8:	f001 fbe4 	bl	800e684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cebc:	f000 fcba 	bl	800d834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cec0:	f001 fbb0 	bl	800e624 <vPortEnterCritical>
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceca:	b25b      	sxtb	r3, r3
 800cecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced0:	d103      	bne.n	800ceda <xQueueSemaphoreTake+0x13a>
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cee0:	b25b      	sxtb	r3, r3
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d103      	bne.n	800cef0 <xQueueSemaphoreTake+0x150>
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cef0:	f001 fbc8 	bl	800e684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cef4:	463a      	mov	r2, r7
 800cef6:	f107 030c 	add.w	r3, r7, #12
 800cefa:	4611      	mov	r1, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fef9 	bl	800dcf4 <xTaskCheckForTimeOut>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d132      	bne.n	800cf6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0a:	f000 f9f2 	bl	800d2f2 <prvIsQueueEmpty>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d026      	beq.n	800cf62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cf1c:	f001 fb82 	bl	800e624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 f84b 	bl	800dfc0 <xTaskPriorityInherit>
 800cf2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cf2c:	f001 fbaa 	bl	800e684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	3324      	adds	r3, #36	; 0x24
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fe3f 	bl	800dbbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf40:	f000 f985 	bl	800d24e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf44:	f000 fc84 	bl	800d850 <xTaskResumeAll>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f47f af68 	bne.w	800ce20 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cf50:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <xQueueSemaphoreTake+0x214>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	e75e      	b.n	800ce20 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cf62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf64:	f000 f973 	bl	800d24e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf68:	f000 fc72 	bl	800d850 <xTaskResumeAll>
 800cf6c:	e758      	b.n	800ce20 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cf6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf70:	f000 f96d 	bl	800d24e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf74:	f000 fc6c 	bl	800d850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf7a:	f000 f9ba 	bl	800d2f2 <prvIsQueueEmpty>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f43f af4d 	beq.w	800ce20 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00d      	beq.n	800cfa8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cf8c:	f001 fb4a 	bl	800e624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cf90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf92:	f000 f8b4 	bl	800d0fe <prvGetDisinheritPriorityAfterTimeout>
 800cf96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f001 f90a 	bl	800e1b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cfa4:	f001 fb6e 	bl	800e684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3738      	adds	r7, #56	; 0x38
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	e000ed04 	.word	0xe000ed04

0800cfb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08e      	sub	sp, #56	; 0x38
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10a      	bne.n	800cfe4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	623b      	str	r3, [r7, #32]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d103      	bne.n	800cff2 <xQueueReceiveFromISR+0x3a>
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <xQueueReceiveFromISR+0x3e>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <xQueueReceiveFromISR+0x40>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	61fb      	str	r3, [r7, #28]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d012:	f001 fbe9 	bl	800e7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d016:	f3ef 8211 	mrs	r2, BASEPRI
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	61ba      	str	r2, [r7, #24]
 800d02c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d02e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d030:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d02f      	beq.n	800d09e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d04c:	f000 f8d9 	bl	800d202 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	1e5a      	subs	r2, r3, #1
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d058:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d060:	d112      	bne.n	800d088 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d016      	beq.n	800d098 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	3310      	adds	r3, #16
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fdc8 	bl	800dc04 <xTaskRemoveFromEventList>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00e      	beq.n	800d098 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00b      	beq.n	800d098 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	e007      	b.n	800d098 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d08c:	3301      	adds	r3, #1
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	b25a      	sxtb	r2, r3
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d098:	2301      	movs	r3, #1
 800d09a:	637b      	str	r3, [r7, #52]	; 0x34
 800d09c:	e001      	b.n	800d0a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	f383 8811 	msr	BASEPRI, r3
}
 800d0ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3738      	adds	r7, #56	; 0x38
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <vQueueDelete+0x28>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	60bb      	str	r3, [r7, #8]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 f935 	bl	800d350 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d102      	bne.n	800d0f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f001 fc85 	bl	800ea00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d0fe:	b480      	push	{r7}
 800d100:	b085      	sub	sp, #20
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f1c3 0307 	rsb	r3, r3, #7
 800d118:	60fb      	str	r3, [r7, #12]
 800d11a:	e001      	b.n	800d120 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d120:	68fb      	ldr	r3, [r7, #12]
	}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b086      	sub	sp, #24
 800d132:	af00      	add	r7, sp, #0
 800d134:	60f8      	str	r0, [r7, #12]
 800d136:	60b9      	str	r1, [r7, #8]
 800d138:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10d      	bne.n	800d168 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d14d      	bne.n	800d1f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 ffa7 	bl	800e0ac <xTaskPriorityDisinherit>
 800d15e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	609a      	str	r2, [r3, #8]
 800d166:	e043      	b.n	800d1f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d119      	bne.n	800d1a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6858      	ldr	r0, [r3, #4]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	461a      	mov	r2, r3
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	f001 fd8b 	bl	800ec94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d186:	441a      	add	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	429a      	cmp	r2, r3
 800d196:	d32b      	bcc.n	800d1f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	605a      	str	r2, [r3, #4]
 800d1a0:	e026      	b.n	800d1f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	68d8      	ldr	r0, [r3, #12]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	f001 fd71 	bl	800ec94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ba:	425b      	negs	r3, r3
 800d1bc:	441a      	add	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	68da      	ldr	r2, [r3, #12]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d207      	bcs.n	800d1de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689a      	ldr	r2, [r3, #8]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	425b      	negs	r3, r3
 800d1d8:	441a      	add	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d105      	bne.n	800d1f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d1f8:	697b      	ldr	r3, [r7, #20]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d018      	beq.n	800d246 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68da      	ldr	r2, [r3, #12]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21c:	441a      	add	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d303      	bcc.n	800d236 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68d9      	ldr	r1, [r3, #12]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	461a      	mov	r2, r3
 800d240:	6838      	ldr	r0, [r7, #0]
 800d242:	f001 fd27 	bl	800ec94 <memcpy>
	}
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d256:	f001 f9e5 	bl	800e624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d260:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d262:	e011      	b.n	800d288 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d012      	beq.n	800d292 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3324      	adds	r3, #36	; 0x24
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fcc7 	bl	800dc04 <xTaskRemoveFromEventList>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d27c:	f000 fd9c 	bl	800ddb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	3b01      	subs	r3, #1
 800d284:	b2db      	uxtb	r3, r3
 800d286:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dce9      	bgt.n	800d264 <prvUnlockQueue+0x16>
 800d290:	e000      	b.n	800d294 <prvUnlockQueue+0x46>
					break;
 800d292:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	22ff      	movs	r2, #255	; 0xff
 800d298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d29c:	f001 f9f2 	bl	800e684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d2a0:	f001 f9c0 	bl	800e624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2ac:	e011      	b.n	800d2d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d012      	beq.n	800d2dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fca2 	bl	800dc04 <xTaskRemoveFromEventList>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d2c6:	f000 fd77 	bl	800ddb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	dce9      	bgt.n	800d2ae <prvUnlockQueue+0x60>
 800d2da:	e000      	b.n	800d2de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	22ff      	movs	r2, #255	; 0xff
 800d2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d2e6:	f001 f9cd 	bl	800e684 <vPortExitCritical>
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2fa:	f001 f993 	bl	800e624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	e001      	b.n	800d310 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d310:	f001 f9b8 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800d314:	68fb      	ldr	r3, [r7, #12]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d326:	f001 f97d 	bl	800e624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d332:	429a      	cmp	r2, r3
 800d334:	d102      	bne.n	800d33c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	e001      	b.n	800d340 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d340:	f001 f9a0 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800d344:	68fb      	ldr	r3, [r7, #12]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	e016      	b.n	800d38c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d35e:	4a10      	ldr	r2, [pc, #64]	; (800d3a0 <vQueueUnregisterQueue+0x50>)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	4413      	add	r3, r2
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d10b      	bne.n	800d386 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d36e:	4a0c      	ldr	r2, [pc, #48]	; (800d3a0 <vQueueUnregisterQueue+0x50>)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2100      	movs	r1, #0
 800d374:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d378:	4a09      	ldr	r2, [pc, #36]	; (800d3a0 <vQueueUnregisterQueue+0x50>)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	4413      	add	r3, r2
 800d380:	2200      	movs	r2, #0
 800d382:	605a      	str	r2, [r3, #4]
				break;
 800d384:	e006      	b.n	800d394 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3301      	adds	r3, #1
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b07      	cmp	r3, #7
 800d390:	d9e5      	bls.n	800d35e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	200034e0 	.word	0x200034e0

0800d3a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08e      	sub	sp, #56	; 0x38
 800d3a8:	af04      	add	r7, sp, #16
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10a      	bne.n	800d3ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	623b      	str	r3, [r7, #32]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <xTaskCreateStatic+0x46>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	61fb      	str	r3, [r7, #28]
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3ea:	23b4      	movs	r3, #180	; 0xb4
 800d3ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	2bb4      	cmp	r3, #180	; 0xb4
 800d3f2:	d00a      	beq.n	800d40a <xTaskCreateStatic+0x66>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	61bb      	str	r3, [r7, #24]
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d40a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d01e      	beq.n	800d450 <xTaskCreateStatic+0xac>
 800d412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01b      	beq.n	800d450 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d420:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	2202      	movs	r2, #2
 800d426:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d42a:	2300      	movs	r3, #0
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	9302      	str	r3, [sp, #8]
 800d432:	f107 0314 	add.w	r3, r7, #20
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	68b9      	ldr	r1, [r7, #8]
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f000 f850 	bl	800d4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d44a:	f000 f8eb 	bl	800d624 <prvAddNewTaskToReadyList>
 800d44e:	e001      	b.n	800d454 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d450:	2300      	movs	r3, #0
 800d452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d454:	697b      	ldr	r3, [r7, #20]
	}
 800d456:	4618      	mov	r0, r3
 800d458:	3728      	adds	r7, #40	; 0x28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b08c      	sub	sp, #48	; 0x30
 800d462:	af04      	add	r7, sp, #16
 800d464:	60f8      	str	r0, [r7, #12]
 800d466:	60b9      	str	r1, [r7, #8]
 800d468:	603b      	str	r3, [r7, #0]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d46e:	88fb      	ldrh	r3, [r7, #6]
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4618      	mov	r0, r3
 800d474:	f001 f9f8 	bl	800e868 <pvPortMalloc>
 800d478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00e      	beq.n	800d49e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d480:	20b4      	movs	r0, #180	; 0xb4
 800d482:	f001 f9f1 	bl	800e868 <pvPortMalloc>
 800d486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d003      	beq.n	800d496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	631a      	str	r2, [r3, #48]	; 0x30
 800d494:	e005      	b.n	800d4a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d496:	6978      	ldr	r0, [r7, #20]
 800d498:	f001 fab2 	bl	800ea00 <vPortFree>
 800d49c:	e001      	b.n	800d4a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d017      	beq.n	800d4d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4b0:	88fa      	ldrh	r2, [r7, #6]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9303      	str	r3, [sp, #12]
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	9302      	str	r3, [sp, #8]
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f000 f80e 	bl	800d4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4cc:	69f8      	ldr	r0, [r7, #28]
 800d4ce:	f000 f8a9 	bl	800d624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	61bb      	str	r3, [r7, #24]
 800d4d6:	e002      	b.n	800d4de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4de:	69bb      	ldr	r3, [r7, #24]
	}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3720      	adds	r7, #32
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d500:	3b01      	subs	r3, #1
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4413      	add	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	f023 0307 	bic.w	r3, r3, #7
 800d50e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	f003 0307 	and.w	r3, r3, #7
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	617b      	str	r3, [r7, #20]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d01f      	beq.n	800d576 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d536:	2300      	movs	r3, #0
 800d538:	61fb      	str	r3, [r7, #28]
 800d53a:	e012      	b.n	800d562 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	4413      	add	r3, r2
 800d542:	7819      	ldrb	r1, [r3, #0]
 800d544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	4413      	add	r3, r2
 800d54a:	3334      	adds	r3, #52	; 0x34
 800d54c:	460a      	mov	r2, r1
 800d54e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	4413      	add	r3, r2
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d006      	beq.n	800d56a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	3301      	adds	r3, #1
 800d560:	61fb      	str	r3, [r7, #28]
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	2b0f      	cmp	r3, #15
 800d566:	d9e9      	bls.n	800d53c <prvInitialiseNewTask+0x54>
 800d568:	e000      	b.n	800d56c <prvInitialiseNewTask+0x84>
			{
				break;
 800d56a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d574:	e003      	b.n	800d57e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d580:	2b06      	cmp	r3, #6
 800d582:	d901      	bls.n	800d588 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d584:	2306      	movs	r3, #6
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d58c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d592:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	2200      	movs	r2, #0
 800d598:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	3304      	adds	r3, #4
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff f8a3 	bl	800c6ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a6:	3318      	adds	r3, #24
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff f89e 	bl	800c6ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	f1c3 0207 	rsb	r2, r3, #7
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	334c      	adds	r3, #76	; 0x4c
 800d5d8:	2260      	movs	r2, #96	; 0x60
 800d5da:	2100      	movs	r1, #0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 fb67 	bl	800ecb0 <memset>
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <prvInitialiseNewTask+0x130>)
 800d5e6:	651a      	str	r2, [r3, #80]	; 0x50
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ea:	4a0c      	ldr	r2, [pc, #48]	; (800d61c <prvInitialiseNewTask+0x134>)
 800d5ec:	655a      	str	r2, [r3, #84]	; 0x54
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	4a0b      	ldr	r2, [pc, #44]	; (800d620 <prvInitialiseNewTask+0x138>)
 800d5f2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	68f9      	ldr	r1, [r7, #12]
 800d5f8:	69b8      	ldr	r0, [r7, #24]
 800d5fa:	f000 fee5 	bl	800e3c8 <pxPortInitialiseStack>
 800d5fe:	4602      	mov	r2, r0
 800d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d602:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d60e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d610:	bf00      	nop
 800d612:	3720      	adds	r7, #32
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	0800f8a0 	.word	0x0800f8a0
 800d61c:	0800f8c0 	.word	0x0800f8c0
 800d620:	0800f880 	.word	0x0800f880

0800d624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d62c:	f000 fffa 	bl	800e624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d630:	4b2a      	ldr	r3, [pc, #168]	; (800d6dc <prvAddNewTaskToReadyList+0xb8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	4a29      	ldr	r2, [pc, #164]	; (800d6dc <prvAddNewTaskToReadyList+0xb8>)
 800d638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d63a:	4b29      	ldr	r3, [pc, #164]	; (800d6e0 <prvAddNewTaskToReadyList+0xbc>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d642:	4a27      	ldr	r2, [pc, #156]	; (800d6e0 <prvAddNewTaskToReadyList+0xbc>)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d648:	4b24      	ldr	r3, [pc, #144]	; (800d6dc <prvAddNewTaskToReadyList+0xb8>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d110      	bne.n	800d672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d650:	f000 fbd6 	bl	800de00 <prvInitialiseTaskLists>
 800d654:	e00d      	b.n	800d672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d656:	4b23      	ldr	r3, [pc, #140]	; (800d6e4 <prvAddNewTaskToReadyList+0xc0>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d109      	bne.n	800d672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d65e:	4b20      	ldr	r3, [pc, #128]	; (800d6e0 <prvAddNewTaskToReadyList+0xbc>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	429a      	cmp	r2, r3
 800d66a:	d802      	bhi.n	800d672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d66c:	4a1c      	ldr	r2, [pc, #112]	; (800d6e0 <prvAddNewTaskToReadyList+0xbc>)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d672:	4b1d      	ldr	r3, [pc, #116]	; (800d6e8 <prvAddNewTaskToReadyList+0xc4>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3301      	adds	r3, #1
 800d678:	4a1b      	ldr	r2, [pc, #108]	; (800d6e8 <prvAddNewTaskToReadyList+0xc4>)
 800d67a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	2201      	movs	r2, #1
 800d682:	409a      	lsls	r2, r3
 800d684:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <prvAddNewTaskToReadyList+0xc8>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4313      	orrs	r3, r2
 800d68a:	4a18      	ldr	r2, [pc, #96]	; (800d6ec <prvAddNewTaskToReadyList+0xc8>)
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d692:	4613      	mov	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4413      	add	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4a15      	ldr	r2, [pc, #84]	; (800d6f0 <prvAddNewTaskToReadyList+0xcc>)
 800d69c:	441a      	add	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f7ff f82d 	bl	800c704 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6aa:	f000 ffeb 	bl	800e684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6ae:	4b0d      	ldr	r3, [pc, #52]	; (800d6e4 <prvAddNewTaskToReadyList+0xc0>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00e      	beq.n	800d6d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6b6:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <prvAddNewTaskToReadyList+0xbc>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d207      	bcs.n	800d6d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6c4:	4b0b      	ldr	r3, [pc, #44]	; (800d6f4 <prvAddNewTaskToReadyList+0xd0>)
 800d6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20003620 	.word	0x20003620
 800d6e0:	20003520 	.word	0x20003520
 800d6e4:	2000362c 	.word	0x2000362c
 800d6e8:	2000363c 	.word	0x2000363c
 800d6ec:	20003628 	.word	0x20003628
 800d6f0:	20003524 	.word	0x20003524
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d017      	beq.n	800d73a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d70a:	4b13      	ldr	r3, [pc, #76]	; (800d758 <vTaskDelay+0x60>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00a      	beq.n	800d728 <vTaskDelay+0x30>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	60bb      	str	r3, [r7, #8]
}
 800d724:	bf00      	nop
 800d726:	e7fe      	b.n	800d726 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d728:	f000 f884 	bl	800d834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d72c:	2100      	movs	r1, #0
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fde4 	bl	800e2fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d734:	f000 f88c 	bl	800d850 <xTaskResumeAll>
 800d738:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d107      	bne.n	800d750 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d740:	4b06      	ldr	r3, [pc, #24]	; (800d75c <vTaskDelay+0x64>)
 800d742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	20003648 	.word	0x20003648
 800d75c:	e000ed04 	.word	0xe000ed04

0800d760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08a      	sub	sp, #40	; 0x28
 800d764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d76e:	463a      	mov	r2, r7
 800d770:	1d39      	adds	r1, r7, #4
 800d772:	f107 0308 	add.w	r3, r7, #8
 800d776:	4618      	mov	r0, r3
 800d778:	f7f3 fe5c 	bl	8001434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d77c:	6839      	ldr	r1, [r7, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	9202      	str	r2, [sp, #8]
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	2300      	movs	r3, #0
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	2300      	movs	r3, #0
 800d78c:	460a      	mov	r2, r1
 800d78e:	4921      	ldr	r1, [pc, #132]	; (800d814 <vTaskStartScheduler+0xb4>)
 800d790:	4821      	ldr	r0, [pc, #132]	; (800d818 <vTaskStartScheduler+0xb8>)
 800d792:	f7ff fe07 	bl	800d3a4 <xTaskCreateStatic>
 800d796:	4603      	mov	r3, r0
 800d798:	4a20      	ldr	r2, [pc, #128]	; (800d81c <vTaskStartScheduler+0xbc>)
 800d79a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d79c:	4b1f      	ldr	r3, [pc, #124]	; (800d81c <vTaskStartScheduler+0xbc>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d002      	beq.n	800d7aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	e001      	b.n	800d7ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d11b      	bne.n	800d7ec <vTaskStartScheduler+0x8c>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	613b      	str	r3, [r7, #16]
}
 800d7c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d7c8:	4b15      	ldr	r3, [pc, #84]	; (800d820 <vTaskStartScheduler+0xc0>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	334c      	adds	r3, #76	; 0x4c
 800d7ce:	4a15      	ldr	r2, [pc, #84]	; (800d824 <vTaskStartScheduler+0xc4>)
 800d7d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7d2:	4b15      	ldr	r3, [pc, #84]	; (800d828 <vTaskStartScheduler+0xc8>)
 800d7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7da:	4b14      	ldr	r3, [pc, #80]	; (800d82c <vTaskStartScheduler+0xcc>)
 800d7dc:	2201      	movs	r2, #1
 800d7de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7e0:	4b13      	ldr	r3, [pc, #76]	; (800d830 <vTaskStartScheduler+0xd0>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7e6:	f000 fe7b 	bl	800e4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7ea:	e00e      	b.n	800d80a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f2:	d10a      	bne.n	800d80a <vTaskStartScheduler+0xaa>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	60fb      	str	r3, [r7, #12]
}
 800d806:	bf00      	nop
 800d808:	e7fe      	b.n	800d808 <vTaskStartScheduler+0xa8>
}
 800d80a:	bf00      	nop
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	0800f7d8 	.word	0x0800f7d8
 800d818:	0800ddd1 	.word	0x0800ddd1
 800d81c:	20003644 	.word	0x20003644
 800d820:	20003520 	.word	0x20003520
 800d824:	200000ac 	.word	0x200000ac
 800d828:	20003640 	.word	0x20003640
 800d82c:	2000362c 	.word	0x2000362c
 800d830:	20003624 	.word	0x20003624

0800d834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d834:	b480      	push	{r7}
 800d836:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d838:	4b04      	ldr	r3, [pc, #16]	; (800d84c <vTaskSuspendAll+0x18>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3301      	adds	r3, #1
 800d83e:	4a03      	ldr	r2, [pc, #12]	; (800d84c <vTaskSuspendAll+0x18>)
 800d840:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d842:	bf00      	nop
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20003648 	.word	0x20003648

0800d850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d85e:	4b41      	ldr	r3, [pc, #260]	; (800d964 <xTaskResumeAll+0x114>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xTaskResumeAll+0x2c>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	603b      	str	r3, [r7, #0]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d87c:	f000 fed2 	bl	800e624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d880:	4b38      	ldr	r3, [pc, #224]	; (800d964 <xTaskResumeAll+0x114>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3b01      	subs	r3, #1
 800d886:	4a37      	ldr	r2, [pc, #220]	; (800d964 <xTaskResumeAll+0x114>)
 800d888:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d88a:	4b36      	ldr	r3, [pc, #216]	; (800d964 <xTaskResumeAll+0x114>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d161      	bne.n	800d956 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d892:	4b35      	ldr	r3, [pc, #212]	; (800d968 <xTaskResumeAll+0x118>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d05d      	beq.n	800d956 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d89a:	e02e      	b.n	800d8fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d89c:	4b33      	ldr	r3, [pc, #204]	; (800d96c <xTaskResumeAll+0x11c>)
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	3318      	adds	r3, #24
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe ff88 	bl	800c7be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe ff83 	bl	800c7be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8bc:	2201      	movs	r2, #1
 800d8be:	409a      	lsls	r2, r3
 800d8c0:	4b2b      	ldr	r3, [pc, #172]	; (800d970 <xTaskResumeAll+0x120>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	4a2a      	ldr	r2, [pc, #168]	; (800d970 <xTaskResumeAll+0x120>)
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4a27      	ldr	r2, [pc, #156]	; (800d974 <xTaskResumeAll+0x124>)
 800d8d8:	441a      	add	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7fe ff0f 	bl	800c704 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ea:	4b23      	ldr	r3, [pc, #140]	; (800d978 <xTaskResumeAll+0x128>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d302      	bcc.n	800d8fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d8f4:	4b21      	ldr	r3, [pc, #132]	; (800d97c <xTaskResumeAll+0x12c>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8fa:	4b1c      	ldr	r3, [pc, #112]	; (800d96c <xTaskResumeAll+0x11c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1cc      	bne.n	800d89c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d908:	f000 fb1c 	bl	800df44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d90c:	4b1c      	ldr	r3, [pc, #112]	; (800d980 <xTaskResumeAll+0x130>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d010      	beq.n	800d93a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d918:	f000 f836 	bl	800d988 <xTaskIncrementTick>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d922:	4b16      	ldr	r3, [pc, #88]	; (800d97c <xTaskResumeAll+0x12c>)
 800d924:	2201      	movs	r2, #1
 800d926:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3b01      	subs	r3, #1
 800d92c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1f1      	bne.n	800d918 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d934:	4b12      	ldr	r3, [pc, #72]	; (800d980 <xTaskResumeAll+0x130>)
 800d936:	2200      	movs	r2, #0
 800d938:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d93a:	4b10      	ldr	r3, [pc, #64]	; (800d97c <xTaskResumeAll+0x12c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d009      	beq.n	800d956 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d942:	2301      	movs	r3, #1
 800d944:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d946:	4b0f      	ldr	r3, [pc, #60]	; (800d984 <xTaskResumeAll+0x134>)
 800d948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d956:	f000 fe95 	bl	800e684 <vPortExitCritical>

	return xAlreadyYielded;
 800d95a:	68bb      	ldr	r3, [r7, #8]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20003648 	.word	0x20003648
 800d968:	20003620 	.word	0x20003620
 800d96c:	200035e0 	.word	0x200035e0
 800d970:	20003628 	.word	0x20003628
 800d974:	20003524 	.word	0x20003524
 800d978:	20003520 	.word	0x20003520
 800d97c:	20003634 	.word	0x20003634
 800d980:	20003630 	.word	0x20003630
 800d984:	e000ed04 	.word	0xe000ed04

0800d988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d992:	4b4e      	ldr	r3, [pc, #312]	; (800dacc <xTaskIncrementTick+0x144>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f040 808e 	bne.w	800dab8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d99c:	4b4c      	ldr	r3, [pc, #304]	; (800dad0 <xTaskIncrementTick+0x148>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d9a4:	4a4a      	ldr	r2, [pc, #296]	; (800dad0 <xTaskIncrementTick+0x148>)
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d120      	bne.n	800d9f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d9b0:	4b48      	ldr	r3, [pc, #288]	; (800dad4 <xTaskIncrementTick+0x14c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00a      	beq.n	800d9d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9be:	f383 8811 	msr	BASEPRI, r3
 800d9c2:	f3bf 8f6f 	isb	sy
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	603b      	str	r3, [r7, #0]
}
 800d9cc:	bf00      	nop
 800d9ce:	e7fe      	b.n	800d9ce <xTaskIncrementTick+0x46>
 800d9d0:	4b40      	ldr	r3, [pc, #256]	; (800dad4 <xTaskIncrementTick+0x14c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	4b40      	ldr	r3, [pc, #256]	; (800dad8 <xTaskIncrementTick+0x150>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a3e      	ldr	r2, [pc, #248]	; (800dad4 <xTaskIncrementTick+0x14c>)
 800d9dc:	6013      	str	r3, [r2, #0]
 800d9de:	4a3e      	ldr	r2, [pc, #248]	; (800dad8 <xTaskIncrementTick+0x150>)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	4b3d      	ldr	r3, [pc, #244]	; (800dadc <xTaskIncrementTick+0x154>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	4a3c      	ldr	r2, [pc, #240]	; (800dadc <xTaskIncrementTick+0x154>)
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	f000 faa9 	bl	800df44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9f2:	4b3b      	ldr	r3, [pc, #236]	; (800dae0 <xTaskIncrementTick+0x158>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	693a      	ldr	r2, [r7, #16]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d348      	bcc.n	800da8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9fc:	4b35      	ldr	r3, [pc, #212]	; (800dad4 <xTaskIncrementTick+0x14c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da06:	4b36      	ldr	r3, [pc, #216]	; (800dae0 <xTaskIncrementTick+0x158>)
 800da08:	f04f 32ff 	mov.w	r2, #4294967295
 800da0c:	601a      	str	r2, [r3, #0]
					break;
 800da0e:	e03e      	b.n	800da8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da10:	4b30      	ldr	r3, [pc, #192]	; (800dad4 <xTaskIncrementTick+0x14c>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	d203      	bcs.n	800da30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da28:	4a2d      	ldr	r2, [pc, #180]	; (800dae0 <xTaskIncrementTick+0x158>)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da2e:	e02e      	b.n	800da8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	3304      	adds	r3, #4
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe fec2 	bl	800c7be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d004      	beq.n	800da4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	3318      	adds	r3, #24
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe feb9 	bl	800c7be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da50:	2201      	movs	r2, #1
 800da52:	409a      	lsls	r2, r3
 800da54:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <xTaskIncrementTick+0x15c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4313      	orrs	r3, r2
 800da5a:	4a22      	ldr	r2, [pc, #136]	; (800dae4 <xTaskIncrementTick+0x15c>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	4613      	mov	r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4a1f      	ldr	r2, [pc, #124]	; (800dae8 <xTaskIncrementTick+0x160>)
 800da6c:	441a      	add	r2, r3
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	3304      	adds	r3, #4
 800da72:	4619      	mov	r1, r3
 800da74:	4610      	mov	r0, r2
 800da76:	f7fe fe45 	bl	800c704 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7e:	4b1b      	ldr	r3, [pc, #108]	; (800daec <xTaskIncrementTick+0x164>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	429a      	cmp	r2, r3
 800da86:	d3b9      	bcc.n	800d9fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da88:	2301      	movs	r3, #1
 800da8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da8c:	e7b6      	b.n	800d9fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da8e:	4b17      	ldr	r3, [pc, #92]	; (800daec <xTaskIncrementTick+0x164>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4914      	ldr	r1, [pc, #80]	; (800dae8 <xTaskIncrementTick+0x160>)
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	440b      	add	r3, r1
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d901      	bls.n	800daaa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800daa6:	2301      	movs	r3, #1
 800daa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800daaa:	4b11      	ldr	r3, [pc, #68]	; (800daf0 <xTaskIncrementTick+0x168>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dab2:	2301      	movs	r3, #1
 800dab4:	617b      	str	r3, [r7, #20]
 800dab6:	e004      	b.n	800dac2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dab8:	4b0e      	ldr	r3, [pc, #56]	; (800daf4 <xTaskIncrementTick+0x16c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3301      	adds	r3, #1
 800dabe:	4a0d      	ldr	r2, [pc, #52]	; (800daf4 <xTaskIncrementTick+0x16c>)
 800dac0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dac2:	697b      	ldr	r3, [r7, #20]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20003648 	.word	0x20003648
 800dad0:	20003624 	.word	0x20003624
 800dad4:	200035d8 	.word	0x200035d8
 800dad8:	200035dc 	.word	0x200035dc
 800dadc:	20003638 	.word	0x20003638
 800dae0:	20003640 	.word	0x20003640
 800dae4:	20003628 	.word	0x20003628
 800dae8:	20003524 	.word	0x20003524
 800daec:	20003520 	.word	0x20003520
 800daf0:	20003634 	.word	0x20003634
 800daf4:	20003630 	.word	0x20003630

0800daf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dafe:	4b29      	ldr	r3, [pc, #164]	; (800dba4 <vTaskSwitchContext+0xac>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db06:	4b28      	ldr	r3, [pc, #160]	; (800dba8 <vTaskSwitchContext+0xb0>)
 800db08:	2201      	movs	r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db0c:	e044      	b.n	800db98 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800db0e:	4b26      	ldr	r3, [pc, #152]	; (800dba8 <vTaskSwitchContext+0xb0>)
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db14:	4b25      	ldr	r3, [pc, #148]	; (800dbac <vTaskSwitchContext+0xb4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	fab3 f383 	clz	r3, r3
 800db20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800db22:	7afb      	ldrb	r3, [r7, #11]
 800db24:	f1c3 031f 	rsb	r3, r3, #31
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	4921      	ldr	r1, [pc, #132]	; (800dbb0 <vTaskSwitchContext+0xb8>)
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	440b      	add	r3, r1
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d10a      	bne.n	800db54 <vTaskSwitchContext+0x5c>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	607b      	str	r3, [r7, #4]
}
 800db50:	bf00      	nop
 800db52:	e7fe      	b.n	800db52 <vTaskSwitchContext+0x5a>
 800db54:	697a      	ldr	r2, [r7, #20]
 800db56:	4613      	mov	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4a14      	ldr	r2, [pc, #80]	; (800dbb0 <vTaskSwitchContext+0xb8>)
 800db60:	4413      	add	r3, r2
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	605a      	str	r2, [r3, #4]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	3308      	adds	r3, #8
 800db76:	429a      	cmp	r2, r3
 800db78:	d104      	bne.n	800db84 <vTaskSwitchContext+0x8c>
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	605a      	str	r2, [r3, #4]
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	4a0a      	ldr	r2, [pc, #40]	; (800dbb4 <vTaskSwitchContext+0xbc>)
 800db8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db8e:	4b09      	ldr	r3, [pc, #36]	; (800dbb4 <vTaskSwitchContext+0xbc>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	334c      	adds	r3, #76	; 0x4c
 800db94:	4a08      	ldr	r2, [pc, #32]	; (800dbb8 <vTaskSwitchContext+0xc0>)
 800db96:	6013      	str	r3, [r2, #0]
}
 800db98:	bf00      	nop
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	20003648 	.word	0x20003648
 800dba8:	20003634 	.word	0x20003634
 800dbac:	20003628 	.word	0x20003628
 800dbb0:	20003524 	.word	0x20003524
 800dbb4:	20003520 	.word	0x20003520
 800dbb8:	200000ac 	.word	0x200000ac

0800dbbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	60fb      	str	r3, [r7, #12]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <vTaskPlaceOnEventList+0x44>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3318      	adds	r3, #24
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7fe fdae 	bl	800c74c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	6838      	ldr	r0, [r7, #0]
 800dbf4:	f000 fb82 	bl	800e2fc <prvAddCurrentTaskToDelayedList>
}
 800dbf8:	bf00      	nop
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20003520 	.word	0x20003520

0800dc04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10a      	bne.n	800dc30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	60fb      	str	r3, [r7, #12]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3318      	adds	r3, #24
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fe fdc2 	bl	800c7be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc3a:	4b1d      	ldr	r3, [pc, #116]	; (800dcb0 <xTaskRemoveFromEventList+0xac>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d11c      	bne.n	800dc7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fe fdb9 	bl	800c7be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	2201      	movs	r2, #1
 800dc52:	409a      	lsls	r2, r3
 800dc54:	4b17      	ldr	r3, [pc, #92]	; (800dcb4 <xTaskRemoveFromEventList+0xb0>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	4a16      	ldr	r2, [pc, #88]	; (800dcb4 <xTaskRemoveFromEventList+0xb0>)
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc62:	4613      	mov	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	4a13      	ldr	r2, [pc, #76]	; (800dcb8 <xTaskRemoveFromEventList+0xb4>)
 800dc6c:	441a      	add	r2, r3
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f7fe fd45 	bl	800c704 <vListInsertEnd>
 800dc7a:	e005      	b.n	800dc88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	3318      	adds	r3, #24
 800dc80:	4619      	mov	r1, r3
 800dc82:	480e      	ldr	r0, [pc, #56]	; (800dcbc <xTaskRemoveFromEventList+0xb8>)
 800dc84:	f7fe fd3e 	bl	800c704 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8c:	4b0c      	ldr	r3, [pc, #48]	; (800dcc0 <xTaskRemoveFromEventList+0xbc>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d905      	bls.n	800dca2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc96:	2301      	movs	r3, #1
 800dc98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc9a:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <xTaskRemoveFromEventList+0xc0>)
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	e001      	b.n	800dca6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dca6:	697b      	ldr	r3, [r7, #20]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	20003648 	.word	0x20003648
 800dcb4:	20003628 	.word	0x20003628
 800dcb8:	20003524 	.word	0x20003524
 800dcbc:	200035e0 	.word	0x200035e0
 800dcc0:	20003520 	.word	0x20003520
 800dcc4:	20003634 	.word	0x20003634

0800dcc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcd0:	4b06      	ldr	r3, [pc, #24]	; (800dcec <vTaskInternalSetTimeOutState+0x24>)
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcd8:	4b05      	ldr	r3, [pc, #20]	; (800dcf0 <vTaskInternalSetTimeOutState+0x28>)
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	605a      	str	r2, [r3, #4]
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	20003638 	.word	0x20003638
 800dcf0:	20003624 	.word	0x20003624

0800dcf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	613b      	str	r3, [r7, #16]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d10a      	bne.n	800dd36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	60fb      	str	r3, [r7, #12]
}
 800dd32:	bf00      	nop
 800dd34:	e7fe      	b.n	800dd34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd36:	f000 fc75 	bl	800e624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd3a:	4b1d      	ldr	r3, [pc, #116]	; (800ddb0 <xTaskCheckForTimeOut+0xbc>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	69ba      	ldr	r2, [r7, #24]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd52:	d102      	bne.n	800dd5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd54:	2300      	movs	r3, #0
 800dd56:	61fb      	str	r3, [r7, #28]
 800dd58:	e023      	b.n	800dda2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	4b15      	ldr	r3, [pc, #84]	; (800ddb4 <xTaskCheckForTimeOut+0xc0>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d007      	beq.n	800dd76 <xTaskCheckForTimeOut+0x82>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	69ba      	ldr	r2, [r7, #24]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d302      	bcc.n	800dd76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	61fb      	str	r3, [r7, #28]
 800dd74:	e015      	b.n	800dda2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d20b      	bcs.n	800dd98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ff9b 	bl	800dcc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	61fb      	str	r3, [r7, #28]
 800dd96:	e004      	b.n	800dda2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dda2:	f000 fc6f 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800dda6:	69fb      	ldr	r3, [r7, #28]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	20003624 	.word	0x20003624
 800ddb4:	20003638 	.word	0x20003638

0800ddb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddb8:	b480      	push	{r7}
 800ddba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddbc:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <vTaskMissedYield+0x14>)
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]
}
 800ddc2:	bf00      	nop
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	20003634 	.word	0x20003634

0800ddd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ddd8:	f000 f852 	bl	800de80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dddc:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <prvIdleTask+0x28>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d9f9      	bls.n	800ddd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dde4:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <prvIdleTask+0x2c>)
 800dde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddea:	601a      	str	r2, [r3, #0]
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ddf4:	e7f0      	b.n	800ddd8 <prvIdleTask+0x8>
 800ddf6:	bf00      	nop
 800ddf8:	20003524 	.word	0x20003524
 800ddfc:	e000ed04 	.word	0xe000ed04

0800de00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de06:	2300      	movs	r3, #0
 800de08:	607b      	str	r3, [r7, #4]
 800de0a:	e00c      	b.n	800de26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4a12      	ldr	r2, [pc, #72]	; (800de60 <prvInitialiseTaskLists+0x60>)
 800de18:	4413      	add	r3, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fc45 	bl	800c6aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3301      	adds	r3, #1
 800de24:	607b      	str	r3, [r7, #4]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b06      	cmp	r3, #6
 800de2a:	d9ef      	bls.n	800de0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de2c:	480d      	ldr	r0, [pc, #52]	; (800de64 <prvInitialiseTaskLists+0x64>)
 800de2e:	f7fe fc3c 	bl	800c6aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de32:	480d      	ldr	r0, [pc, #52]	; (800de68 <prvInitialiseTaskLists+0x68>)
 800de34:	f7fe fc39 	bl	800c6aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de38:	480c      	ldr	r0, [pc, #48]	; (800de6c <prvInitialiseTaskLists+0x6c>)
 800de3a:	f7fe fc36 	bl	800c6aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de3e:	480c      	ldr	r0, [pc, #48]	; (800de70 <prvInitialiseTaskLists+0x70>)
 800de40:	f7fe fc33 	bl	800c6aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de44:	480b      	ldr	r0, [pc, #44]	; (800de74 <prvInitialiseTaskLists+0x74>)
 800de46:	f7fe fc30 	bl	800c6aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de4a:	4b0b      	ldr	r3, [pc, #44]	; (800de78 <prvInitialiseTaskLists+0x78>)
 800de4c:	4a05      	ldr	r2, [pc, #20]	; (800de64 <prvInitialiseTaskLists+0x64>)
 800de4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de50:	4b0a      	ldr	r3, [pc, #40]	; (800de7c <prvInitialiseTaskLists+0x7c>)
 800de52:	4a05      	ldr	r2, [pc, #20]	; (800de68 <prvInitialiseTaskLists+0x68>)
 800de54:	601a      	str	r2, [r3, #0]
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20003524 	.word	0x20003524
 800de64:	200035b0 	.word	0x200035b0
 800de68:	200035c4 	.word	0x200035c4
 800de6c:	200035e0 	.word	0x200035e0
 800de70:	200035f4 	.word	0x200035f4
 800de74:	2000360c 	.word	0x2000360c
 800de78:	200035d8 	.word	0x200035d8
 800de7c:	200035dc 	.word	0x200035dc

0800de80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de86:	e019      	b.n	800debc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de88:	f000 fbcc 	bl	800e624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de8c:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <prvCheckTasksWaitingTermination+0x50>)
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3304      	adds	r3, #4
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fe fc90 	bl	800c7be <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de9e:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <prvCheckTasksWaitingTermination+0x54>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	4a0b      	ldr	r2, [pc, #44]	; (800ded4 <prvCheckTasksWaitingTermination+0x54>)
 800dea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dea8:	4b0b      	ldr	r3, [pc, #44]	; (800ded8 <prvCheckTasksWaitingTermination+0x58>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	3b01      	subs	r3, #1
 800deae:	4a0a      	ldr	r2, [pc, #40]	; (800ded8 <prvCheckTasksWaitingTermination+0x58>)
 800deb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800deb2:	f000 fbe7 	bl	800e684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f810 	bl	800dedc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <prvCheckTasksWaitingTermination+0x58>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1e1      	bne.n	800de88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200035f4 	.word	0x200035f4
 800ded4:	20003620 	.word	0x20003620
 800ded8:	20003608 	.word	0x20003608

0800dedc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	334c      	adds	r3, #76	; 0x4c
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 ff8b 	bl	800ee04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fd7f 	bl	800ea00 <vPortFree>
				vPortFree( pxTCB );
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fd7c 	bl	800ea00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df08:	e018      	b.n	800df3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800df10:	2b01      	cmp	r3, #1
 800df12:	d103      	bne.n	800df1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fd73 	bl	800ea00 <vPortFree>
	}
 800df1a:	e00f      	b.n	800df3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800df22:	2b02      	cmp	r3, #2
 800df24:	d00a      	beq.n	800df3c <prvDeleteTCB+0x60>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	60fb      	str	r3, [r7, #12]
}
 800df38:	bf00      	nop
 800df3a:	e7fe      	b.n	800df3a <prvDeleteTCB+0x5e>
	}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df4a:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <prvResetNextTaskUnblockTime+0x38>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d104      	bne.n	800df5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df54:	4b0a      	ldr	r3, [pc, #40]	; (800df80 <prvResetNextTaskUnblockTime+0x3c>)
 800df56:	f04f 32ff 	mov.w	r2, #4294967295
 800df5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df5c:	e008      	b.n	800df70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5e:	4b07      	ldr	r3, [pc, #28]	; (800df7c <prvResetNextTaskUnblockTime+0x38>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	4a04      	ldr	r2, [pc, #16]	; (800df80 <prvResetNextTaskUnblockTime+0x3c>)
 800df6e:	6013      	str	r3, [r2, #0]
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	200035d8 	.word	0x200035d8
 800df80:	20003640 	.word	0x20003640

0800df84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df8a:	4b0b      	ldr	r3, [pc, #44]	; (800dfb8 <xTaskGetSchedulerState+0x34>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d102      	bne.n	800df98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df92:	2301      	movs	r3, #1
 800df94:	607b      	str	r3, [r7, #4]
 800df96:	e008      	b.n	800dfaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df98:	4b08      	ldr	r3, [pc, #32]	; (800dfbc <xTaskGetSchedulerState+0x38>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	607b      	str	r3, [r7, #4]
 800dfa4:	e001      	b.n	800dfaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfaa:	687b      	ldr	r3, [r7, #4]
	}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	2000362c 	.word	0x2000362c
 800dfbc:	20003648 	.word	0x20003648

0800dfc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d05e      	beq.n	800e094 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfda:	4b31      	ldr	r3, [pc, #196]	; (800e0a0 <xTaskPriorityInherit+0xe0>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d24e      	bcs.n	800e082 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db06      	blt.n	800dffa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfec:	4b2c      	ldr	r3, [pc, #176]	; (800e0a0 <xTaskPriorityInherit+0xe0>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff2:	f1c3 0207 	rsb	r2, r3, #7
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6959      	ldr	r1, [r3, #20]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e002:	4613      	mov	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4a26      	ldr	r2, [pc, #152]	; (800e0a4 <xTaskPriorityInherit+0xe4>)
 800e00c:	4413      	add	r3, r2
 800e00e:	4299      	cmp	r1, r3
 800e010:	d12f      	bne.n	800e072 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	3304      	adds	r3, #4
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe fbd1 	bl	800c7be <uxListRemove>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10a      	bne.n	800e038 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e026:	2201      	movs	r2, #1
 800e028:	fa02 f303 	lsl.w	r3, r2, r3
 800e02c:	43da      	mvns	r2, r3
 800e02e:	4b1e      	ldr	r3, [pc, #120]	; (800e0a8 <xTaskPriorityInherit+0xe8>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4013      	ands	r3, r2
 800e034:	4a1c      	ldr	r2, [pc, #112]	; (800e0a8 <xTaskPriorityInherit+0xe8>)
 800e036:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e038:	4b19      	ldr	r3, [pc, #100]	; (800e0a0 <xTaskPriorityInherit+0xe0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e046:	2201      	movs	r2, #1
 800e048:	409a      	lsls	r2, r3
 800e04a:	4b17      	ldr	r3, [pc, #92]	; (800e0a8 <xTaskPriorityInherit+0xe8>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4313      	orrs	r3, r2
 800e050:	4a15      	ldr	r2, [pc, #84]	; (800e0a8 <xTaskPriorityInherit+0xe8>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4a10      	ldr	r2, [pc, #64]	; (800e0a4 <xTaskPriorityInherit+0xe4>)
 800e062:	441a      	add	r2, r3
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	3304      	adds	r3, #4
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7fe fb4a 	bl	800c704 <vListInsertEnd>
 800e070:	e004      	b.n	800e07c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e072:	4b0b      	ldr	r3, [pc, #44]	; (800e0a0 <xTaskPriorityInherit+0xe0>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e07c:	2301      	movs	r3, #1
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e008      	b.n	800e094 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e086:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <xTaskPriorityInherit+0xe0>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d201      	bcs.n	800e094 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e090:	2301      	movs	r3, #1
 800e092:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e094:	68fb      	ldr	r3, [r7, #12]
	}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20003520 	.word	0x20003520
 800e0a4:	20003524 	.word	0x20003524
 800e0a8:	20003628 	.word	0x20003628

0800e0ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d06e      	beq.n	800e1a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0c2:	4b3a      	ldr	r3, [pc, #232]	; (800e1ac <xTaskPriorityDisinherit+0x100>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d00a      	beq.n	800e0e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	60fb      	str	r3, [r7, #12]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10a      	bne.n	800e100 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	60bb      	str	r3, [r7, #8]
}
 800e0fc:	bf00      	nop
 800e0fe:	e7fe      	b.n	800e0fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e104:	1e5a      	subs	r2, r3, #1
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e112:	429a      	cmp	r2, r3
 800e114:	d044      	beq.n	800e1a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d140      	bne.n	800e1a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	3304      	adds	r3, #4
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fb4b 	bl	800c7be <uxListRemove>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d115      	bne.n	800e15a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e132:	491f      	ldr	r1, [pc, #124]	; (800e1b0 <xTaskPriorityDisinherit+0x104>)
 800e134:	4613      	mov	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	440b      	add	r3, r1
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10a      	bne.n	800e15a <xTaskPriorityDisinherit+0xae>
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e148:	2201      	movs	r2, #1
 800e14a:	fa02 f303 	lsl.w	r3, r2, r3
 800e14e:	43da      	mvns	r2, r3
 800e150:	4b18      	ldr	r3, [pc, #96]	; (800e1b4 <xTaskPriorityDisinherit+0x108>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4013      	ands	r3, r2
 800e156:	4a17      	ldr	r2, [pc, #92]	; (800e1b4 <xTaskPriorityDisinherit+0x108>)
 800e158:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e166:	f1c3 0207 	rsb	r2, r3, #7
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e172:	2201      	movs	r2, #1
 800e174:	409a      	lsls	r2, r3
 800e176:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <xTaskPriorityDisinherit+0x108>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	4a0d      	ldr	r2, [pc, #52]	; (800e1b4 <xTaskPriorityDisinherit+0x108>)
 800e17e:	6013      	str	r3, [r2, #0]
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e184:	4613      	mov	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4a08      	ldr	r2, [pc, #32]	; (800e1b0 <xTaskPriorityDisinherit+0x104>)
 800e18e:	441a      	add	r2, r3
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	3304      	adds	r3, #4
 800e194:	4619      	mov	r1, r3
 800e196:	4610      	mov	r0, r2
 800e198:	f7fe fab4 	bl	800c704 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1a0:	697b      	ldr	r3, [r7, #20]
	}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	20003520 	.word	0x20003520
 800e1b0:	20003524 	.word	0x20003524
 800e1b4:	20003628 	.word	0x20003628

0800e1b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d077      	beq.n	800e2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	60fb      	str	r3, [r7, #12]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d902      	bls.n	800e1fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	61fb      	str	r3, [r7, #28]
 800e1fc:	e002      	b.n	800e204 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e202:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e208:	69fa      	ldr	r2, [r7, #28]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d058      	beq.n	800e2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	429a      	cmp	r2, r3
 800e216:	d153      	bne.n	800e2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e218:	4b2b      	ldr	r3, [pc, #172]	; (800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d10a      	bne.n	800e238 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	60bb      	str	r3, [r7, #8]
}
 800e234:	bf00      	nop
 800e236:	e7fe      	b.n	800e236 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	69fa      	ldr	r2, [r7, #28]
 800e242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	db04      	blt.n	800e256 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f1c3 0207 	rsb	r2, r3, #7
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	6959      	ldr	r1, [r3, #20]
 800e25a:	693a      	ldr	r2, [r7, #16]
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4a19      	ldr	r2, [pc, #100]	; (800e2cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e266:	4413      	add	r3, r2
 800e268:	4299      	cmp	r1, r3
 800e26a:	d129      	bne.n	800e2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	3304      	adds	r3, #4
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe faa4 	bl	800c7be <uxListRemove>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	43da      	mvns	r2, r3
 800e288:	4b11      	ldr	r3, [pc, #68]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4013      	ands	r3, r2
 800e28e:	4a10      	ldr	r2, [pc, #64]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e290:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e296:	2201      	movs	r2, #1
 800e298:	409a      	lsls	r2, r3
 800e29a:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	4a0b      	ldr	r2, [pc, #44]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2a2:	6013      	str	r3, [r2, #0]
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4a06      	ldr	r2, [pc, #24]	; (800e2cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e2b2:	441a      	add	r2, r3
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f7fe fa22 	bl	800c704 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2c0:	bf00      	nop
 800e2c2:	3720      	adds	r7, #32
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	20003520 	.word	0x20003520
 800e2cc:	20003524 	.word	0x20003524
 800e2d0:	20003628 	.word	0x20003628

0800e2d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2d4:	b480      	push	{r7}
 800e2d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2d8:	4b07      	ldr	r3, [pc, #28]	; (800e2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d004      	beq.n	800e2ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2e0:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2e6:	3201      	adds	r2, #1
 800e2e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e2ea:	4b03      	ldr	r3, [pc, #12]	; (800e2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
	}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20003520 	.word	0x20003520

0800e2fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e306:	4b29      	ldr	r3, [pc, #164]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e30c:	4b28      	ldr	r3, [pc, #160]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3304      	adds	r3, #4
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe fa53 	bl	800c7be <uxListRemove>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10b      	bne.n	800e336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e31e:	4b24      	ldr	r3, [pc, #144]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e324:	2201      	movs	r2, #1
 800e326:	fa02 f303 	lsl.w	r3, r2, r3
 800e32a:	43da      	mvns	r2, r3
 800e32c:	4b21      	ldr	r3, [pc, #132]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4013      	ands	r3, r2
 800e332:	4a20      	ldr	r2, [pc, #128]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33c:	d10a      	bne.n	800e354 <prvAddCurrentTaskToDelayedList+0x58>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e344:	4b1a      	ldr	r3, [pc, #104]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3304      	adds	r3, #4
 800e34a:	4619      	mov	r1, r3
 800e34c:	481a      	ldr	r0, [pc, #104]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e34e:	f7fe f9d9 	bl	800c704 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e352:	e026      	b.n	800e3a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4413      	add	r3, r2
 800e35a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e35c:	4b14      	ldr	r3, [pc, #80]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d209      	bcs.n	800e380 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e36c:	4b13      	ldr	r3, [pc, #76]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4b0f      	ldr	r3, [pc, #60]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	3304      	adds	r3, #4
 800e376:	4619      	mov	r1, r3
 800e378:	4610      	mov	r0, r2
 800e37a:	f7fe f9e7 	bl	800c74c <vListInsert>
}
 800e37e:	e010      	b.n	800e3a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e380:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3304      	adds	r3, #4
 800e38a:	4619      	mov	r1, r3
 800e38c:	4610      	mov	r0, r2
 800e38e:	f7fe f9dd 	bl	800c74c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e392:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d202      	bcs.n	800e3a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e39c:	4a09      	ldr	r2, [pc, #36]	; (800e3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	6013      	str	r3, [r2, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20003624 	.word	0x20003624
 800e3b0:	20003520 	.word	0x20003520
 800e3b4:	20003628 	.word	0x20003628
 800e3b8:	2000360c 	.word	0x2000360c
 800e3bc:	200035dc 	.word	0x200035dc
 800e3c0:	200035d8 	.word	0x200035d8
 800e3c4:	20003640 	.word	0x20003640

0800e3c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	3b04      	subs	r3, #4
 800e3d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3b04      	subs	r3, #4
 800e3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	f023 0201 	bic.w	r2, r3, #1
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	3b04      	subs	r3, #4
 800e3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3f8:	4a0c      	ldr	r2, [pc, #48]	; (800e42c <pxPortInitialiseStack+0x64>)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3b14      	subs	r3, #20
 800e402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3b04      	subs	r3, #4
 800e40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f06f 0202 	mvn.w	r2, #2
 800e416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3b20      	subs	r3, #32
 800e41c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e41e:	68fb      	ldr	r3, [r7, #12]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	0800e431 	.word	0x0800e431

0800e430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e43a:	4b12      	ldr	r3, [pc, #72]	; (800e484 <prvTaskExitError+0x54>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e442:	d00a      	beq.n	800e45a <prvTaskExitError+0x2a>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	60fb      	str	r3, [r7, #12]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <prvTaskExitError+0x28>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	60bb      	str	r3, [r7, #8]
}
 800e46c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e46e:	bf00      	nop
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d0fc      	beq.n	800e470 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	200000a8 	.word	0x200000a8
	...

0800e490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <pxCurrentTCBConst2>)
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f380 8809 	msr	PSP, r0
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	f380 8811 	msr	BASEPRI, r0
 800e4aa:	4770      	bx	lr
 800e4ac:	f3af 8000 	nop.w

0800e4b0 <pxCurrentTCBConst2>:
 800e4b0:	20003520 	.word	0x20003520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4b8:	4808      	ldr	r0, [pc, #32]	; (800e4dc <prvPortStartFirstTask+0x24>)
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	f380 8808 	msr	MSP, r0
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	f380 8814 	msr	CONTROL, r0
 800e4ca:	b662      	cpsie	i
 800e4cc:	b661      	cpsie	f
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	df00      	svc	0
 800e4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4da:	bf00      	nop
 800e4dc:	e000ed08 	.word	0xe000ed08

0800e4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4e6:	4b46      	ldr	r3, [pc, #280]	; (800e600 <xPortStartScheduler+0x120>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a46      	ldr	r2, [pc, #280]	; (800e604 <xPortStartScheduler+0x124>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d10a      	bne.n	800e506 <xPortStartScheduler+0x26>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	613b      	str	r3, [r7, #16]
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e506:	4b3e      	ldr	r3, [pc, #248]	; (800e600 <xPortStartScheduler+0x120>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a3f      	ldr	r2, [pc, #252]	; (800e608 <xPortStartScheduler+0x128>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d10a      	bne.n	800e526 <xPortStartScheduler+0x46>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	60fb      	str	r3, [r7, #12]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e526:	4b39      	ldr	r3, [pc, #228]	; (800e60c <xPortStartScheduler+0x12c>)
 800e528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	22ff      	movs	r2, #255	; 0xff
 800e536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b31      	ldr	r3, [pc, #196]	; (800e610 <xPortStartScheduler+0x130>)
 800e54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e54e:	4b31      	ldr	r3, [pc, #196]	; (800e614 <xPortStartScheduler+0x134>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e554:	e009      	b.n	800e56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e556:	4b2f      	ldr	r3, [pc, #188]	; (800e614 <xPortStartScheduler+0x134>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	4a2d      	ldr	r2, [pc, #180]	; (800e614 <xPortStartScheduler+0x134>)
 800e55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e572:	2b80      	cmp	r3, #128	; 0x80
 800e574:	d0ef      	beq.n	800e556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e576:	4b27      	ldr	r3, [pc, #156]	; (800e614 <xPortStartScheduler+0x134>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f1c3 0307 	rsb	r3, r3, #7
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d00a      	beq.n	800e598 <xPortStartScheduler+0xb8>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	60bb      	str	r3, [r7, #8]
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e598:	4b1e      	ldr	r3, [pc, #120]	; (800e614 <xPortStartScheduler+0x134>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	021b      	lsls	r3, r3, #8
 800e59e:	4a1d      	ldr	r2, [pc, #116]	; (800e614 <xPortStartScheduler+0x134>)
 800e5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5a2:	4b1c      	ldr	r3, [pc, #112]	; (800e614 <xPortStartScheduler+0x134>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5aa:	4a1a      	ldr	r2, [pc, #104]	; (800e614 <xPortStartScheduler+0x134>)
 800e5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5b6:	4b18      	ldr	r3, [pc, #96]	; (800e618 <xPortStartScheduler+0x138>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a17      	ldr	r2, [pc, #92]	; (800e618 <xPortStartScheduler+0x138>)
 800e5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5c2:	4b15      	ldr	r3, [pc, #84]	; (800e618 <xPortStartScheduler+0x138>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a14      	ldr	r2, [pc, #80]	; (800e618 <xPortStartScheduler+0x138>)
 800e5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5ce:	f000 f8dd 	bl	800e78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5d2:	4b12      	ldr	r3, [pc, #72]	; (800e61c <xPortStartScheduler+0x13c>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5d8:	f000 f8fc 	bl	800e7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5dc:	4b10      	ldr	r3, [pc, #64]	; (800e620 <xPortStartScheduler+0x140>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a0f      	ldr	r2, [pc, #60]	; (800e620 <xPortStartScheduler+0x140>)
 800e5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5e8:	f7ff ff66 	bl	800e4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5ec:	f7ff fa84 	bl	800daf8 <vTaskSwitchContext>
	prvTaskExitError();
 800e5f0:	f7ff ff1e 	bl	800e430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	e000ed00 	.word	0xe000ed00
 800e604:	410fc271 	.word	0x410fc271
 800e608:	410fc270 	.word	0x410fc270
 800e60c:	e000e400 	.word	0xe000e400
 800e610:	2000364c 	.word	0x2000364c
 800e614:	20003650 	.word	0x20003650
 800e618:	e000ed20 	.word	0xe000ed20
 800e61c:	200000a8 	.word	0x200000a8
 800e620:	e000ef34 	.word	0xe000ef34

0800e624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	607b      	str	r3, [r7, #4]
}
 800e63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e63e:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <vPortEnterCritical+0x58>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <vPortEnterCritical+0x58>)
 800e646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <vPortEnterCritical+0x58>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d10f      	bne.n	800e670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e650:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <vPortEnterCritical+0x5c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <vPortEnterCritical+0x4c>
	__asm volatile
 800e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65e:	f383 8811 	msr	BASEPRI, r3
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	603b      	str	r3, [r7, #0]
}
 800e66c:	bf00      	nop
 800e66e:	e7fe      	b.n	800e66e <vPortEnterCritical+0x4a>
	}
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	200000a8 	.word	0x200000a8
 800e680:	e000ed04 	.word	0xe000ed04

0800e684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e68a:	4b12      	ldr	r3, [pc, #72]	; (800e6d4 <vPortExitCritical+0x50>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <vPortExitCritical+0x24>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	607b      	str	r3, [r7, #4]
}
 800e6a4:	bf00      	nop
 800e6a6:	e7fe      	b.n	800e6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	4a09      	ldr	r2, [pc, #36]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6b2:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <vPortExitCritical+0x42>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	f383 8811 	msr	BASEPRI, r3
}
 800e6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6c6:	bf00      	nop
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	200000a8 	.word	0x200000a8
	...

0800e6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6e0:	f3ef 8009 	mrs	r0, PSP
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4b15      	ldr	r3, [pc, #84]	; (800e740 <pxCurrentTCBConst>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	f01e 0f10 	tst.w	lr, #16
 800e6f0:	bf08      	it	eq
 800e6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	6010      	str	r0, [r2, #0]
 800e6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e704:	f380 8811 	msr	BASEPRI, r0
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f7ff f9f2 	bl	800daf8 <vTaskSwitchContext>
 800e714:	f04f 0000 	mov.w	r0, #0
 800e718:	f380 8811 	msr	BASEPRI, r0
 800e71c:	bc09      	pop	{r0, r3}
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	6808      	ldr	r0, [r1, #0]
 800e722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e726:	f01e 0f10 	tst.w	lr, #16
 800e72a:	bf08      	it	eq
 800e72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e730:	f380 8809 	msr	PSP, r0
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	f3af 8000 	nop.w

0800e740 <pxCurrentTCBConst>:
 800e740:	20003520 	.word	0x20003520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop

0800e748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e762:	f7ff f911 	bl	800d988 <xTaskIncrementTick>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e76c:	4b06      	ldr	r3, [pc, #24]	; (800e788 <SysTick_Handler+0x40>)
 800e76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	f383 8811 	msr	BASEPRI, r3
}
 800e77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e78c:	b480      	push	{r7}
 800e78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e790:	4b0b      	ldr	r3, [pc, #44]	; (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e796:	4b0b      	ldr	r3, [pc, #44]	; (800e7c4 <vPortSetupTimerInterrupt+0x38>)
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e79c:	4b0a      	ldr	r3, [pc, #40]	; (800e7c8 <vPortSetupTimerInterrupt+0x3c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a0a      	ldr	r2, [pc, #40]	; (800e7cc <vPortSetupTimerInterrupt+0x40>)
 800e7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a6:	099b      	lsrs	r3, r3, #6
 800e7a8:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <vPortSetupTimerInterrupt+0x44>)
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7ae:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e7b0:	2207      	movs	r2, #7
 800e7b2:	601a      	str	r2, [r3, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	e000e010 	.word	0xe000e010
 800e7c4:	e000e018 	.word	0xe000e018
 800e7c8:	20000088 	.word	0x20000088
 800e7cc:	10624dd3 	.word	0x10624dd3
 800e7d0:	e000e014 	.word	0xe000e014

0800e7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7e4 <vPortEnableVFP+0x10>
 800e7d8:	6801      	ldr	r1, [r0, #0]
 800e7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7de:	6001      	str	r1, [r0, #0]
 800e7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7e2:	bf00      	nop
 800e7e4:	e000ed88 	.word	0xe000ed88

0800e7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7ee:	f3ef 8305 	mrs	r3, IPSR
 800e7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d914      	bls.n	800e824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7fa:	4a17      	ldr	r2, [pc, #92]	; (800e858 <vPortValidateInterruptPriority+0x70>)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e804:	4b15      	ldr	r3, [pc, #84]	; (800e85c <vPortValidateInterruptPriority+0x74>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	7afa      	ldrb	r2, [r7, #11]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d20a      	bcs.n	800e824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	607b      	str	r3, [r7, #4]
}
 800e820:	bf00      	nop
 800e822:	e7fe      	b.n	800e822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e824:	4b0e      	ldr	r3, [pc, #56]	; (800e860 <vPortValidateInterruptPriority+0x78>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e82c:	4b0d      	ldr	r3, [pc, #52]	; (800e864 <vPortValidateInterruptPriority+0x7c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d90a      	bls.n	800e84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	603b      	str	r3, [r7, #0]
}
 800e846:	bf00      	nop
 800e848:	e7fe      	b.n	800e848 <vPortValidateInterruptPriority+0x60>
	}
 800e84a:	bf00      	nop
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	e000e3f0 	.word	0xe000e3f0
 800e85c:	2000364c 	.word	0x2000364c
 800e860:	e000ed0c 	.word	0xe000ed0c
 800e864:	20003650 	.word	0x20003650

0800e868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08a      	sub	sp, #40	; 0x28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e874:	f7fe ffde 	bl	800d834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e878:	4b5b      	ldr	r3, [pc, #364]	; (800e9e8 <pvPortMalloc+0x180>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e880:	f000 f920 	bl	800eac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e884:	4b59      	ldr	r3, [pc, #356]	; (800e9ec <pvPortMalloc+0x184>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f040 8093 	bne.w	800e9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01d      	beq.n	800e8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e898:	2208      	movs	r2, #8
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4413      	add	r3, r2
 800e89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f003 0307 	and.w	r3, r3, #7
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d014      	beq.n	800e8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f023 0307 	bic.w	r3, r3, #7
 800e8b0:	3308      	adds	r3, #8
 800e8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00a      	beq.n	800e8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	617b      	str	r3, [r7, #20]
}
 800e8d0:	bf00      	nop
 800e8d2:	e7fe      	b.n	800e8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d06e      	beq.n	800e9b8 <pvPortMalloc+0x150>
 800e8da:	4b45      	ldr	r3, [pc, #276]	; (800e9f0 <pvPortMalloc+0x188>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d869      	bhi.n	800e9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8e4:	4b43      	ldr	r3, [pc, #268]	; (800e9f4 <pvPortMalloc+0x18c>)
 800e8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8e8:	4b42      	ldr	r3, [pc, #264]	; (800e9f4 <pvPortMalloc+0x18c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ee:	e004      	b.n	800e8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d903      	bls.n	800e90c <pvPortMalloc+0xa4>
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1f1      	bne.n	800e8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e90c:	4b36      	ldr	r3, [pc, #216]	; (800e9e8 <pvPortMalloc+0x180>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e912:	429a      	cmp	r2, r3
 800e914:	d050      	beq.n	800e9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2208      	movs	r2, #8
 800e91c:	4413      	add	r3, r2
 800e91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	2308      	movs	r3, #8
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	429a      	cmp	r2, r3
 800e936:	d91f      	bls.n	800e978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4413      	add	r3, r2
 800e93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <pvPortMalloc+0xf8>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	613b      	str	r3, [r7, #16]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	685a      	ldr	r2, [r3, #4]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e972:	69b8      	ldr	r0, [r7, #24]
 800e974:	f000 f908 	bl	800eb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e978:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <pvPortMalloc+0x188>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <pvPortMalloc+0x188>)
 800e984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e986:	4b1a      	ldr	r3, [pc, #104]	; (800e9f0 <pvPortMalloc+0x188>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <pvPortMalloc+0x190>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d203      	bcs.n	800e99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e992:	4b17      	ldr	r3, [pc, #92]	; (800e9f0 <pvPortMalloc+0x188>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a18      	ldr	r2, [pc, #96]	; (800e9f8 <pvPortMalloc+0x190>)
 800e998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	4b13      	ldr	r3, [pc, #76]	; (800e9ec <pvPortMalloc+0x184>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	431a      	orrs	r2, r3
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <pvPortMalloc+0x194>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	4a11      	ldr	r2, [pc, #68]	; (800e9fc <pvPortMalloc+0x194>)
 800e9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9b8:	f7fe ff4a 	bl	800d850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	f003 0307 	and.w	r3, r3, #7
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <pvPortMalloc+0x174>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	60fb      	str	r3, [r7, #12]
}
 800e9d8:	bf00      	nop
 800e9da:	e7fe      	b.n	800e9da <pvPortMalloc+0x172>
	return pvReturn;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3728      	adds	r7, #40	; 0x28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	2000725c 	.word	0x2000725c
 800e9ec:	20007270 	.word	0x20007270
 800e9f0:	20007260 	.word	0x20007260
 800e9f4:	20007254 	.word	0x20007254
 800e9f8:	20007264 	.word	0x20007264
 800e9fc:	20007268 	.word	0x20007268

0800ea00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d04d      	beq.n	800eaae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea12:	2308      	movs	r3, #8
 800ea14:	425b      	negs	r3, r3
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4413      	add	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	4b24      	ldr	r3, [pc, #144]	; (800eab8 <vPortFree+0xb8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10a      	bne.n	800ea44 <vPortFree+0x44>
	__asm volatile
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	60fb      	str	r3, [r7, #12]
}
 800ea40:	bf00      	nop
 800ea42:	e7fe      	b.n	800ea42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <vPortFree+0x62>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	60bb      	str	r3, [r7, #8]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	4b14      	ldr	r3, [pc, #80]	; (800eab8 <vPortFree+0xb8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d01e      	beq.n	800eaae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d11a      	bne.n	800eaae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	685a      	ldr	r2, [r3, #4]
 800ea7c:	4b0e      	ldr	r3, [pc, #56]	; (800eab8 <vPortFree+0xb8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	43db      	mvns	r3, r3
 800ea82:	401a      	ands	r2, r3
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea88:	f7fe fed4 	bl	800d834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <vPortFree+0xbc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4413      	add	r3, r2
 800ea96:	4a09      	ldr	r2, [pc, #36]	; (800eabc <vPortFree+0xbc>)
 800ea98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea9a:	6938      	ldr	r0, [r7, #16]
 800ea9c:	f000 f874 	bl	800eb88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <vPortFree+0xc0>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <vPortFree+0xc0>)
 800eaa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eaaa:	f7fe fed1 	bl	800d850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaae:	bf00      	nop
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20007270 	.word	0x20007270
 800eabc:	20007260 	.word	0x20007260
 800eac0:	2000726c 	.word	0x2000726c

0800eac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eaca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ead0:	4b27      	ldr	r3, [pc, #156]	; (800eb70 <prvHeapInit+0xac>)
 800ead2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00c      	beq.n	800eaf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3307      	adds	r3, #7
 800eae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f023 0307 	bic.w	r3, r3, #7
 800eaea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	4a1f      	ldr	r2, [pc, #124]	; (800eb70 <prvHeapInit+0xac>)
 800eaf4:	4413      	add	r3, r2
 800eaf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eafc:	4a1d      	ldr	r2, [pc, #116]	; (800eb74 <prvHeapInit+0xb0>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb02:	4b1c      	ldr	r3, [pc, #112]	; (800eb74 <prvHeapInit+0xb0>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb10:	2208      	movs	r2, #8
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	1a9b      	subs	r3, r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f023 0307 	bic.w	r3, r3, #7
 800eb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4a15      	ldr	r2, [pc, #84]	; (800eb78 <prvHeapInit+0xb4>)
 800eb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb26:	4b14      	ldr	r3, [pc, #80]	; (800eb78 <prvHeapInit+0xb4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb2e:	4b12      	ldr	r3, [pc, #72]	; (800eb78 <prvHeapInit+0xb4>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <prvHeapInit+0xb4>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	4a0a      	ldr	r2, [pc, #40]	; (800eb7c <prvHeapInit+0xb8>)
 800eb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4a09      	ldr	r2, [pc, #36]	; (800eb80 <prvHeapInit+0xbc>)
 800eb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb5c:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <prvHeapInit+0xc0>)
 800eb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb62:	601a      	str	r2, [r3, #0]
}
 800eb64:	bf00      	nop
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	20003654 	.word	0x20003654
 800eb74:	20007254 	.word	0x20007254
 800eb78:	2000725c 	.word	0x2000725c
 800eb7c:	20007264 	.word	0x20007264
 800eb80:	20007260 	.word	0x20007260
 800eb84:	20007270 	.word	0x20007270

0800eb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb90:	4b28      	ldr	r3, [pc, #160]	; (800ec34 <prvInsertBlockIntoFreeList+0xac>)
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	e002      	b.n	800eb9c <prvInsertBlockIntoFreeList+0x14>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d8f7      	bhi.n	800eb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d108      	bne.n	800ebca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	441a      	add	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d118      	bne.n	800ec10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <prvInsertBlockIntoFreeList+0xb0>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d00d      	beq.n	800ec06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	441a      	add	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	e008      	b.n	800ec18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec06:	4b0c      	ldr	r3, [pc, #48]	; (800ec38 <prvInsertBlockIntoFreeList+0xb0>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	601a      	str	r2, [r3, #0]
 800ec0e:	e003      	b.n	800ec18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d002      	beq.n	800ec26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec26:	bf00      	nop
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	20007254 	.word	0x20007254
 800ec38:	2000725c 	.word	0x2000725c

0800ec3c <__errno>:
 800ec3c:	4b01      	ldr	r3, [pc, #4]	; (800ec44 <__errno+0x8>)
 800ec3e:	6818      	ldr	r0, [r3, #0]
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	200000ac 	.word	0x200000ac

0800ec48 <__libc_init_array>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	4d0d      	ldr	r5, [pc, #52]	; (800ec80 <__libc_init_array+0x38>)
 800ec4c:	4c0d      	ldr	r4, [pc, #52]	; (800ec84 <__libc_init_array+0x3c>)
 800ec4e:	1b64      	subs	r4, r4, r5
 800ec50:	10a4      	asrs	r4, r4, #2
 800ec52:	2600      	movs	r6, #0
 800ec54:	42a6      	cmp	r6, r4
 800ec56:	d109      	bne.n	800ec6c <__libc_init_array+0x24>
 800ec58:	4d0b      	ldr	r5, [pc, #44]	; (800ec88 <__libc_init_array+0x40>)
 800ec5a:	4c0c      	ldr	r4, [pc, #48]	; (800ec8c <__libc_init_array+0x44>)
 800ec5c:	f000 fcf8 	bl	800f650 <_init>
 800ec60:	1b64      	subs	r4, r4, r5
 800ec62:	10a4      	asrs	r4, r4, #2
 800ec64:	2600      	movs	r6, #0
 800ec66:	42a6      	cmp	r6, r4
 800ec68:	d105      	bne.n	800ec76 <__libc_init_array+0x2e>
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
 800ec6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec70:	4798      	blx	r3
 800ec72:	3601      	adds	r6, #1
 800ec74:	e7ee      	b.n	800ec54 <__libc_init_array+0xc>
 800ec76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec7a:	4798      	blx	r3
 800ec7c:	3601      	adds	r6, #1
 800ec7e:	e7f2      	b.n	800ec66 <__libc_init_array+0x1e>
 800ec80:	0800f91c 	.word	0x0800f91c
 800ec84:	0800f91c 	.word	0x0800f91c
 800ec88:	0800f91c 	.word	0x0800f91c
 800ec8c:	0800f920 	.word	0x0800f920

0800ec90 <__retarget_lock_acquire_recursive>:
 800ec90:	4770      	bx	lr

0800ec92 <__retarget_lock_release_recursive>:
 800ec92:	4770      	bx	lr

0800ec94 <memcpy>:
 800ec94:	440a      	add	r2, r1
 800ec96:	4291      	cmp	r1, r2
 800ec98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec9c:	d100      	bne.n	800eca0 <memcpy+0xc>
 800ec9e:	4770      	bx	lr
 800eca0:	b510      	push	{r4, lr}
 800eca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecaa:	4291      	cmp	r1, r2
 800ecac:	d1f9      	bne.n	800eca2 <memcpy+0xe>
 800ecae:	bd10      	pop	{r4, pc}

0800ecb0 <memset>:
 800ecb0:	4402      	add	r2, r0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d100      	bne.n	800ecba <memset+0xa>
 800ecb8:	4770      	bx	lr
 800ecba:	f803 1b01 	strb.w	r1, [r3], #1
 800ecbe:	e7f9      	b.n	800ecb4 <memset+0x4>

0800ecc0 <sbrk_aligned>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4e0e      	ldr	r6, [pc, #56]	; (800ecfc <sbrk_aligned+0x3c>)
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	6831      	ldr	r1, [r6, #0]
 800ecc8:	4605      	mov	r5, r0
 800ecca:	b911      	cbnz	r1, 800ecd2 <sbrk_aligned+0x12>
 800eccc:	f000 f8f6 	bl	800eebc <_sbrk_r>
 800ecd0:	6030      	str	r0, [r6, #0]
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f000 f8f1 	bl	800eebc <_sbrk_r>
 800ecda:	1c43      	adds	r3, r0, #1
 800ecdc:	d00a      	beq.n	800ecf4 <sbrk_aligned+0x34>
 800ecde:	1cc4      	adds	r4, r0, #3
 800ece0:	f024 0403 	bic.w	r4, r4, #3
 800ece4:	42a0      	cmp	r0, r4
 800ece6:	d007      	beq.n	800ecf8 <sbrk_aligned+0x38>
 800ece8:	1a21      	subs	r1, r4, r0
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 f8e6 	bl	800eebc <_sbrk_r>
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d101      	bne.n	800ecf8 <sbrk_aligned+0x38>
 800ecf4:	f04f 34ff 	mov.w	r4, #4294967295
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	2000727c 	.word	0x2000727c

0800ed00 <_malloc_r>:
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	1ccd      	adds	r5, r1, #3
 800ed06:	f025 0503 	bic.w	r5, r5, #3
 800ed0a:	3508      	adds	r5, #8
 800ed0c:	2d0c      	cmp	r5, #12
 800ed0e:	bf38      	it	cc
 800ed10:	250c      	movcc	r5, #12
 800ed12:	2d00      	cmp	r5, #0
 800ed14:	4607      	mov	r7, r0
 800ed16:	db01      	blt.n	800ed1c <_malloc_r+0x1c>
 800ed18:	42a9      	cmp	r1, r5
 800ed1a:	d905      	bls.n	800ed28 <_malloc_r+0x28>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	2600      	movs	r6, #0
 800ed22:	4630      	mov	r0, r6
 800ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed28:	4e2e      	ldr	r6, [pc, #184]	; (800ede4 <_malloc_r+0xe4>)
 800ed2a:	f000 f8f7 	bl	800ef1c <__malloc_lock>
 800ed2e:	6833      	ldr	r3, [r6, #0]
 800ed30:	461c      	mov	r4, r3
 800ed32:	bb34      	cbnz	r4, 800ed82 <_malloc_r+0x82>
 800ed34:	4629      	mov	r1, r5
 800ed36:	4638      	mov	r0, r7
 800ed38:	f7ff ffc2 	bl	800ecc0 <sbrk_aligned>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	4604      	mov	r4, r0
 800ed40:	d14d      	bne.n	800edde <_malloc_r+0xde>
 800ed42:	6834      	ldr	r4, [r6, #0]
 800ed44:	4626      	mov	r6, r4
 800ed46:	2e00      	cmp	r6, #0
 800ed48:	d140      	bne.n	800edcc <_malloc_r+0xcc>
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4638      	mov	r0, r7
 800ed50:	eb04 0803 	add.w	r8, r4, r3
 800ed54:	f000 f8b2 	bl	800eebc <_sbrk_r>
 800ed58:	4580      	cmp	r8, r0
 800ed5a:	d13a      	bne.n	800edd2 <_malloc_r+0xd2>
 800ed5c:	6821      	ldr	r1, [r4, #0]
 800ed5e:	3503      	adds	r5, #3
 800ed60:	1a6d      	subs	r5, r5, r1
 800ed62:	f025 0503 	bic.w	r5, r5, #3
 800ed66:	3508      	adds	r5, #8
 800ed68:	2d0c      	cmp	r5, #12
 800ed6a:	bf38      	it	cc
 800ed6c:	250c      	movcc	r5, #12
 800ed6e:	4629      	mov	r1, r5
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7ff ffa5 	bl	800ecc0 <sbrk_aligned>
 800ed76:	3001      	adds	r0, #1
 800ed78:	d02b      	beq.n	800edd2 <_malloc_r+0xd2>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	442b      	add	r3, r5
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	e00e      	b.n	800eda0 <_malloc_r+0xa0>
 800ed82:	6822      	ldr	r2, [r4, #0]
 800ed84:	1b52      	subs	r2, r2, r5
 800ed86:	d41e      	bmi.n	800edc6 <_malloc_r+0xc6>
 800ed88:	2a0b      	cmp	r2, #11
 800ed8a:	d916      	bls.n	800edba <_malloc_r+0xba>
 800ed8c:	1961      	adds	r1, r4, r5
 800ed8e:	42a3      	cmp	r3, r4
 800ed90:	6025      	str	r5, [r4, #0]
 800ed92:	bf18      	it	ne
 800ed94:	6059      	strne	r1, [r3, #4]
 800ed96:	6863      	ldr	r3, [r4, #4]
 800ed98:	bf08      	it	eq
 800ed9a:	6031      	streq	r1, [r6, #0]
 800ed9c:	5162      	str	r2, [r4, r5]
 800ed9e:	604b      	str	r3, [r1, #4]
 800eda0:	4638      	mov	r0, r7
 800eda2:	f104 060b 	add.w	r6, r4, #11
 800eda6:	f000 f8bf 	bl	800ef28 <__malloc_unlock>
 800edaa:	f026 0607 	bic.w	r6, r6, #7
 800edae:	1d23      	adds	r3, r4, #4
 800edb0:	1af2      	subs	r2, r6, r3
 800edb2:	d0b6      	beq.n	800ed22 <_malloc_r+0x22>
 800edb4:	1b9b      	subs	r3, r3, r6
 800edb6:	50a3      	str	r3, [r4, r2]
 800edb8:	e7b3      	b.n	800ed22 <_malloc_r+0x22>
 800edba:	6862      	ldr	r2, [r4, #4]
 800edbc:	42a3      	cmp	r3, r4
 800edbe:	bf0c      	ite	eq
 800edc0:	6032      	streq	r2, [r6, #0]
 800edc2:	605a      	strne	r2, [r3, #4]
 800edc4:	e7ec      	b.n	800eda0 <_malloc_r+0xa0>
 800edc6:	4623      	mov	r3, r4
 800edc8:	6864      	ldr	r4, [r4, #4]
 800edca:	e7b2      	b.n	800ed32 <_malloc_r+0x32>
 800edcc:	4634      	mov	r4, r6
 800edce:	6876      	ldr	r6, [r6, #4]
 800edd0:	e7b9      	b.n	800ed46 <_malloc_r+0x46>
 800edd2:	230c      	movs	r3, #12
 800edd4:	603b      	str	r3, [r7, #0]
 800edd6:	4638      	mov	r0, r7
 800edd8:	f000 f8a6 	bl	800ef28 <__malloc_unlock>
 800eddc:	e7a1      	b.n	800ed22 <_malloc_r+0x22>
 800edde:	6025      	str	r5, [r4, #0]
 800ede0:	e7de      	b.n	800eda0 <_malloc_r+0xa0>
 800ede2:	bf00      	nop
 800ede4:	20007278 	.word	0x20007278

0800ede8 <cleanup_glue>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	460c      	mov	r4, r1
 800edec:	6809      	ldr	r1, [r1, #0]
 800edee:	4605      	mov	r5, r0
 800edf0:	b109      	cbz	r1, 800edf6 <cleanup_glue+0xe>
 800edf2:	f7ff fff9 	bl	800ede8 <cleanup_glue>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4628      	mov	r0, r5
 800edfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edfe:	f000 b899 	b.w	800ef34 <_free_r>
	...

0800ee04 <_reclaim_reent>:
 800ee04:	4b2c      	ldr	r3, [pc, #176]	; (800eeb8 <_reclaim_reent+0xb4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4283      	cmp	r3, r0
 800ee0a:	b570      	push	{r4, r5, r6, lr}
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	d051      	beq.n	800eeb4 <_reclaim_reent+0xb0>
 800ee10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ee12:	b143      	cbz	r3, 800ee26 <_reclaim_reent+0x22>
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d14a      	bne.n	800eeb0 <_reclaim_reent+0xac>
 800ee1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	b111      	cbz	r1, 800ee26 <_reclaim_reent+0x22>
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 f887 	bl	800ef34 <_free_r>
 800ee26:	6961      	ldr	r1, [r4, #20]
 800ee28:	b111      	cbz	r1, 800ee30 <_reclaim_reent+0x2c>
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 f882 	bl	800ef34 <_free_r>
 800ee30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee32:	b111      	cbz	r1, 800ee3a <_reclaim_reent+0x36>
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 f87d 	bl	800ef34 <_free_r>
 800ee3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ee3c:	b111      	cbz	r1, 800ee44 <_reclaim_reent+0x40>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 f878 	bl	800ef34 <_free_r>
 800ee44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ee46:	b111      	cbz	r1, 800ee4e <_reclaim_reent+0x4a>
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 f873 	bl	800ef34 <_free_r>
 800ee4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ee50:	b111      	cbz	r1, 800ee58 <_reclaim_reent+0x54>
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 f86e 	bl	800ef34 <_free_r>
 800ee58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ee5a:	b111      	cbz	r1, 800ee62 <_reclaim_reent+0x5e>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f000 f869 	bl	800ef34 <_free_r>
 800ee62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ee64:	b111      	cbz	r1, 800ee6c <_reclaim_reent+0x68>
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f864 	bl	800ef34 <_free_r>
 800ee6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee6e:	b111      	cbz	r1, 800ee76 <_reclaim_reent+0x72>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 f85f 	bl	800ef34 <_free_r>
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	b1e3      	cbz	r3, 800eeb4 <_reclaim_reent+0xb0>
 800ee7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4798      	blx	r3
 800ee80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ee82:	b1b9      	cbz	r1, 800eeb4 <_reclaim_reent+0xb0>
 800ee84:	4620      	mov	r0, r4
 800ee86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee8a:	f7ff bfad 	b.w	800ede8 <cleanup_glue>
 800ee8e:	5949      	ldr	r1, [r1, r5]
 800ee90:	b941      	cbnz	r1, 800eea4 <_reclaim_reent+0xa0>
 800ee92:	3504      	adds	r5, #4
 800ee94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee96:	2d80      	cmp	r5, #128	; 0x80
 800ee98:	68d9      	ldr	r1, [r3, #12]
 800ee9a:	d1f8      	bne.n	800ee8e <_reclaim_reent+0x8a>
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 f849 	bl	800ef34 <_free_r>
 800eea2:	e7ba      	b.n	800ee1a <_reclaim_reent+0x16>
 800eea4:	680e      	ldr	r6, [r1, #0]
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 f844 	bl	800ef34 <_free_r>
 800eeac:	4631      	mov	r1, r6
 800eeae:	e7ef      	b.n	800ee90 <_reclaim_reent+0x8c>
 800eeb0:	2500      	movs	r5, #0
 800eeb2:	e7ef      	b.n	800ee94 <_reclaim_reent+0x90>
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
 800eeb6:	bf00      	nop
 800eeb8:	200000ac 	.word	0x200000ac

0800eebc <_sbrk_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d06      	ldr	r5, [pc, #24]	; (800eed8 <_sbrk_r+0x1c>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	f7f4 f944 	bl	8003154 <_sbrk>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_sbrk_r+0x1a>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_sbrk_r+0x1a>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	20007280 	.word	0x20007280

0800eedc <siprintf>:
 800eedc:	b40e      	push	{r1, r2, r3}
 800eede:	b500      	push	{lr}
 800eee0:	b09c      	sub	sp, #112	; 0x70
 800eee2:	ab1d      	add	r3, sp, #116	; 0x74
 800eee4:	9002      	str	r0, [sp, #8]
 800eee6:	9006      	str	r0, [sp, #24]
 800eee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eeec:	4809      	ldr	r0, [pc, #36]	; (800ef14 <siprintf+0x38>)
 800eeee:	9107      	str	r1, [sp, #28]
 800eef0:	9104      	str	r1, [sp, #16]
 800eef2:	4909      	ldr	r1, [pc, #36]	; (800ef18 <siprintf+0x3c>)
 800eef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef8:	9105      	str	r1, [sp, #20]
 800eefa:	6800      	ldr	r0, [r0, #0]
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	a902      	add	r1, sp, #8
 800ef00:	f000 f8c0 	bl	800f084 <_svfiprintf_r>
 800ef04:	9b02      	ldr	r3, [sp, #8]
 800ef06:	2200      	movs	r2, #0
 800ef08:	701a      	strb	r2, [r3, #0]
 800ef0a:	b01c      	add	sp, #112	; 0x70
 800ef0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef10:	b003      	add	sp, #12
 800ef12:	4770      	bx	lr
 800ef14:	200000ac 	.word	0x200000ac
 800ef18:	ffff0208 	.word	0xffff0208

0800ef1c <__malloc_lock>:
 800ef1c:	4801      	ldr	r0, [pc, #4]	; (800ef24 <__malloc_lock+0x8>)
 800ef1e:	f7ff beb7 	b.w	800ec90 <__retarget_lock_acquire_recursive>
 800ef22:	bf00      	nop
 800ef24:	20007274 	.word	0x20007274

0800ef28 <__malloc_unlock>:
 800ef28:	4801      	ldr	r0, [pc, #4]	; (800ef30 <__malloc_unlock+0x8>)
 800ef2a:	f7ff beb2 	b.w	800ec92 <__retarget_lock_release_recursive>
 800ef2e:	bf00      	nop
 800ef30:	20007274 	.word	0x20007274

0800ef34 <_free_r>:
 800ef34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d044      	beq.n	800efc4 <_free_r+0x90>
 800ef3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef3e:	9001      	str	r0, [sp, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f1a1 0404 	sub.w	r4, r1, #4
 800ef46:	bfb8      	it	lt
 800ef48:	18e4      	addlt	r4, r4, r3
 800ef4a:	f7ff ffe7 	bl	800ef1c <__malloc_lock>
 800ef4e:	4a1e      	ldr	r2, [pc, #120]	; (800efc8 <_free_r+0x94>)
 800ef50:	9801      	ldr	r0, [sp, #4]
 800ef52:	6813      	ldr	r3, [r2, #0]
 800ef54:	b933      	cbnz	r3, 800ef64 <_free_r+0x30>
 800ef56:	6063      	str	r3, [r4, #4]
 800ef58:	6014      	str	r4, [r2, #0]
 800ef5a:	b003      	add	sp, #12
 800ef5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef60:	f7ff bfe2 	b.w	800ef28 <__malloc_unlock>
 800ef64:	42a3      	cmp	r3, r4
 800ef66:	d908      	bls.n	800ef7a <_free_r+0x46>
 800ef68:	6825      	ldr	r5, [r4, #0]
 800ef6a:	1961      	adds	r1, r4, r5
 800ef6c:	428b      	cmp	r3, r1
 800ef6e:	bf01      	itttt	eq
 800ef70:	6819      	ldreq	r1, [r3, #0]
 800ef72:	685b      	ldreq	r3, [r3, #4]
 800ef74:	1949      	addeq	r1, r1, r5
 800ef76:	6021      	streq	r1, [r4, #0]
 800ef78:	e7ed      	b.n	800ef56 <_free_r+0x22>
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	b10b      	cbz	r3, 800ef84 <_free_r+0x50>
 800ef80:	42a3      	cmp	r3, r4
 800ef82:	d9fa      	bls.n	800ef7a <_free_r+0x46>
 800ef84:	6811      	ldr	r1, [r2, #0]
 800ef86:	1855      	adds	r5, r2, r1
 800ef88:	42a5      	cmp	r5, r4
 800ef8a:	d10b      	bne.n	800efa4 <_free_r+0x70>
 800ef8c:	6824      	ldr	r4, [r4, #0]
 800ef8e:	4421      	add	r1, r4
 800ef90:	1854      	adds	r4, r2, r1
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	6011      	str	r1, [r2, #0]
 800ef96:	d1e0      	bne.n	800ef5a <_free_r+0x26>
 800ef98:	681c      	ldr	r4, [r3, #0]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	6053      	str	r3, [r2, #4]
 800ef9e:	4421      	add	r1, r4
 800efa0:	6011      	str	r1, [r2, #0]
 800efa2:	e7da      	b.n	800ef5a <_free_r+0x26>
 800efa4:	d902      	bls.n	800efac <_free_r+0x78>
 800efa6:	230c      	movs	r3, #12
 800efa8:	6003      	str	r3, [r0, #0]
 800efaa:	e7d6      	b.n	800ef5a <_free_r+0x26>
 800efac:	6825      	ldr	r5, [r4, #0]
 800efae:	1961      	adds	r1, r4, r5
 800efb0:	428b      	cmp	r3, r1
 800efb2:	bf04      	itt	eq
 800efb4:	6819      	ldreq	r1, [r3, #0]
 800efb6:	685b      	ldreq	r3, [r3, #4]
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	bf04      	itt	eq
 800efbc:	1949      	addeq	r1, r1, r5
 800efbe:	6021      	streq	r1, [r4, #0]
 800efc0:	6054      	str	r4, [r2, #4]
 800efc2:	e7ca      	b.n	800ef5a <_free_r+0x26>
 800efc4:	b003      	add	sp, #12
 800efc6:	bd30      	pop	{r4, r5, pc}
 800efc8:	20007278 	.word	0x20007278

0800efcc <__ssputs_r>:
 800efcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	688e      	ldr	r6, [r1, #8]
 800efd2:	429e      	cmp	r6, r3
 800efd4:	4682      	mov	sl, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	4690      	mov	r8, r2
 800efda:	461f      	mov	r7, r3
 800efdc:	d838      	bhi.n	800f050 <__ssputs_r+0x84>
 800efde:	898a      	ldrh	r2, [r1, #12]
 800efe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efe4:	d032      	beq.n	800f04c <__ssputs_r+0x80>
 800efe6:	6825      	ldr	r5, [r4, #0]
 800efe8:	6909      	ldr	r1, [r1, #16]
 800efea:	eba5 0901 	sub.w	r9, r5, r1
 800efee:	6965      	ldr	r5, [r4, #20]
 800eff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eff8:	3301      	adds	r3, #1
 800effa:	444b      	add	r3, r9
 800effc:	106d      	asrs	r5, r5, #1
 800effe:	429d      	cmp	r5, r3
 800f000:	bf38      	it	cc
 800f002:	461d      	movcc	r5, r3
 800f004:	0553      	lsls	r3, r2, #21
 800f006:	d531      	bpl.n	800f06c <__ssputs_r+0xa0>
 800f008:	4629      	mov	r1, r5
 800f00a:	f7ff fe79 	bl	800ed00 <_malloc_r>
 800f00e:	4606      	mov	r6, r0
 800f010:	b950      	cbnz	r0, 800f028 <__ssputs_r+0x5c>
 800f012:	230c      	movs	r3, #12
 800f014:	f8ca 3000 	str.w	r3, [sl]
 800f018:	89a3      	ldrh	r3, [r4, #12]
 800f01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f01e:	81a3      	strh	r3, [r4, #12]
 800f020:	f04f 30ff 	mov.w	r0, #4294967295
 800f024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f028:	6921      	ldr	r1, [r4, #16]
 800f02a:	464a      	mov	r2, r9
 800f02c:	f7ff fe32 	bl	800ec94 <memcpy>
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f03a:	81a3      	strh	r3, [r4, #12]
 800f03c:	6126      	str	r6, [r4, #16]
 800f03e:	6165      	str	r5, [r4, #20]
 800f040:	444e      	add	r6, r9
 800f042:	eba5 0509 	sub.w	r5, r5, r9
 800f046:	6026      	str	r6, [r4, #0]
 800f048:	60a5      	str	r5, [r4, #8]
 800f04a:	463e      	mov	r6, r7
 800f04c:	42be      	cmp	r6, r7
 800f04e:	d900      	bls.n	800f052 <__ssputs_r+0x86>
 800f050:	463e      	mov	r6, r7
 800f052:	6820      	ldr	r0, [r4, #0]
 800f054:	4632      	mov	r2, r6
 800f056:	4641      	mov	r1, r8
 800f058:	f000 faa8 	bl	800f5ac <memmove>
 800f05c:	68a3      	ldr	r3, [r4, #8]
 800f05e:	1b9b      	subs	r3, r3, r6
 800f060:	60a3      	str	r3, [r4, #8]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	4433      	add	r3, r6
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	2000      	movs	r0, #0
 800f06a:	e7db      	b.n	800f024 <__ssputs_r+0x58>
 800f06c:	462a      	mov	r2, r5
 800f06e:	f000 fab7 	bl	800f5e0 <_realloc_r>
 800f072:	4606      	mov	r6, r0
 800f074:	2800      	cmp	r0, #0
 800f076:	d1e1      	bne.n	800f03c <__ssputs_r+0x70>
 800f078:	6921      	ldr	r1, [r4, #16]
 800f07a:	4650      	mov	r0, sl
 800f07c:	f7ff ff5a 	bl	800ef34 <_free_r>
 800f080:	e7c7      	b.n	800f012 <__ssputs_r+0x46>
	...

0800f084 <_svfiprintf_r>:
 800f084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f088:	4698      	mov	r8, r3
 800f08a:	898b      	ldrh	r3, [r1, #12]
 800f08c:	061b      	lsls	r3, r3, #24
 800f08e:	b09d      	sub	sp, #116	; 0x74
 800f090:	4607      	mov	r7, r0
 800f092:	460d      	mov	r5, r1
 800f094:	4614      	mov	r4, r2
 800f096:	d50e      	bpl.n	800f0b6 <_svfiprintf_r+0x32>
 800f098:	690b      	ldr	r3, [r1, #16]
 800f09a:	b963      	cbnz	r3, 800f0b6 <_svfiprintf_r+0x32>
 800f09c:	2140      	movs	r1, #64	; 0x40
 800f09e:	f7ff fe2f 	bl	800ed00 <_malloc_r>
 800f0a2:	6028      	str	r0, [r5, #0]
 800f0a4:	6128      	str	r0, [r5, #16]
 800f0a6:	b920      	cbnz	r0, 800f0b2 <_svfiprintf_r+0x2e>
 800f0a8:	230c      	movs	r3, #12
 800f0aa:	603b      	str	r3, [r7, #0]
 800f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b0:	e0d1      	b.n	800f256 <_svfiprintf_r+0x1d2>
 800f0b2:	2340      	movs	r3, #64	; 0x40
 800f0b4:	616b      	str	r3, [r5, #20]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f0ba:	2320      	movs	r3, #32
 800f0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0c4:	2330      	movs	r3, #48	; 0x30
 800f0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f270 <_svfiprintf_r+0x1ec>
 800f0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0ce:	f04f 0901 	mov.w	r9, #1
 800f0d2:	4623      	mov	r3, r4
 800f0d4:	469a      	mov	sl, r3
 800f0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0da:	b10a      	cbz	r2, 800f0e0 <_svfiprintf_r+0x5c>
 800f0dc:	2a25      	cmp	r2, #37	; 0x25
 800f0de:	d1f9      	bne.n	800f0d4 <_svfiprintf_r+0x50>
 800f0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e4:	d00b      	beq.n	800f0fe <_svfiprintf_r+0x7a>
 800f0e6:	465b      	mov	r3, fp
 800f0e8:	4622      	mov	r2, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	f7ff ff6d 	bl	800efcc <__ssputs_r>
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f000 80aa 	beq.w	800f24c <_svfiprintf_r+0x1c8>
 800f0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0fa:	445a      	add	r2, fp
 800f0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 80a2 	beq.w	800f24c <_svfiprintf_r+0x1c8>
 800f108:	2300      	movs	r3, #0
 800f10a:	f04f 32ff 	mov.w	r2, #4294967295
 800f10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f112:	f10a 0a01 	add.w	sl, sl, #1
 800f116:	9304      	str	r3, [sp, #16]
 800f118:	9307      	str	r3, [sp, #28]
 800f11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f11e:	931a      	str	r3, [sp, #104]	; 0x68
 800f120:	4654      	mov	r4, sl
 800f122:	2205      	movs	r2, #5
 800f124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f128:	4851      	ldr	r0, [pc, #324]	; (800f270 <_svfiprintf_r+0x1ec>)
 800f12a:	f7f1 f869 	bl	8000200 <memchr>
 800f12e:	9a04      	ldr	r2, [sp, #16]
 800f130:	b9d8      	cbnz	r0, 800f16a <_svfiprintf_r+0xe6>
 800f132:	06d0      	lsls	r0, r2, #27
 800f134:	bf44      	itt	mi
 800f136:	2320      	movmi	r3, #32
 800f138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f13c:	0711      	lsls	r1, r2, #28
 800f13e:	bf44      	itt	mi
 800f140:	232b      	movmi	r3, #43	; 0x2b
 800f142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f146:	f89a 3000 	ldrb.w	r3, [sl]
 800f14a:	2b2a      	cmp	r3, #42	; 0x2a
 800f14c:	d015      	beq.n	800f17a <_svfiprintf_r+0xf6>
 800f14e:	9a07      	ldr	r2, [sp, #28]
 800f150:	4654      	mov	r4, sl
 800f152:	2000      	movs	r0, #0
 800f154:	f04f 0c0a 	mov.w	ip, #10
 800f158:	4621      	mov	r1, r4
 800f15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f15e:	3b30      	subs	r3, #48	; 0x30
 800f160:	2b09      	cmp	r3, #9
 800f162:	d94e      	bls.n	800f202 <_svfiprintf_r+0x17e>
 800f164:	b1b0      	cbz	r0, 800f194 <_svfiprintf_r+0x110>
 800f166:	9207      	str	r2, [sp, #28]
 800f168:	e014      	b.n	800f194 <_svfiprintf_r+0x110>
 800f16a:	eba0 0308 	sub.w	r3, r0, r8
 800f16e:	fa09 f303 	lsl.w	r3, r9, r3
 800f172:	4313      	orrs	r3, r2
 800f174:	9304      	str	r3, [sp, #16]
 800f176:	46a2      	mov	sl, r4
 800f178:	e7d2      	b.n	800f120 <_svfiprintf_r+0x9c>
 800f17a:	9b03      	ldr	r3, [sp, #12]
 800f17c:	1d19      	adds	r1, r3, #4
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	9103      	str	r1, [sp, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	bfbb      	ittet	lt
 800f186:	425b      	neglt	r3, r3
 800f188:	f042 0202 	orrlt.w	r2, r2, #2
 800f18c:	9307      	strge	r3, [sp, #28]
 800f18e:	9307      	strlt	r3, [sp, #28]
 800f190:	bfb8      	it	lt
 800f192:	9204      	strlt	r2, [sp, #16]
 800f194:	7823      	ldrb	r3, [r4, #0]
 800f196:	2b2e      	cmp	r3, #46	; 0x2e
 800f198:	d10c      	bne.n	800f1b4 <_svfiprintf_r+0x130>
 800f19a:	7863      	ldrb	r3, [r4, #1]
 800f19c:	2b2a      	cmp	r3, #42	; 0x2a
 800f19e:	d135      	bne.n	800f20c <_svfiprintf_r+0x188>
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	1d1a      	adds	r2, r3, #4
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	9203      	str	r2, [sp, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bfb8      	it	lt
 800f1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1b0:	3402      	adds	r4, #2
 800f1b2:	9305      	str	r3, [sp, #20]
 800f1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f280 <_svfiprintf_r+0x1fc>
 800f1b8:	7821      	ldrb	r1, [r4, #0]
 800f1ba:	2203      	movs	r2, #3
 800f1bc:	4650      	mov	r0, sl
 800f1be:	f7f1 f81f 	bl	8000200 <memchr>
 800f1c2:	b140      	cbz	r0, 800f1d6 <_svfiprintf_r+0x152>
 800f1c4:	2340      	movs	r3, #64	; 0x40
 800f1c6:	eba0 000a 	sub.w	r0, r0, sl
 800f1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800f1ce:	9b04      	ldr	r3, [sp, #16]
 800f1d0:	4303      	orrs	r3, r0
 800f1d2:	3401      	adds	r4, #1
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	4826      	ldr	r0, [pc, #152]	; (800f274 <_svfiprintf_r+0x1f0>)
 800f1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1e0:	2206      	movs	r2, #6
 800f1e2:	f7f1 f80d 	bl	8000200 <memchr>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d038      	beq.n	800f25c <_svfiprintf_r+0x1d8>
 800f1ea:	4b23      	ldr	r3, [pc, #140]	; (800f278 <_svfiprintf_r+0x1f4>)
 800f1ec:	bb1b      	cbnz	r3, 800f236 <_svfiprintf_r+0x1b2>
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	3307      	adds	r3, #7
 800f1f2:	f023 0307 	bic.w	r3, r3, #7
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	9303      	str	r3, [sp, #12]
 800f1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fc:	4433      	add	r3, r6
 800f1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f200:	e767      	b.n	800f0d2 <_svfiprintf_r+0x4e>
 800f202:	fb0c 3202 	mla	r2, ip, r2, r3
 800f206:	460c      	mov	r4, r1
 800f208:	2001      	movs	r0, #1
 800f20a:	e7a5      	b.n	800f158 <_svfiprintf_r+0xd4>
 800f20c:	2300      	movs	r3, #0
 800f20e:	3401      	adds	r4, #1
 800f210:	9305      	str	r3, [sp, #20]
 800f212:	4619      	mov	r1, r3
 800f214:	f04f 0c0a 	mov.w	ip, #10
 800f218:	4620      	mov	r0, r4
 800f21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f21e:	3a30      	subs	r2, #48	; 0x30
 800f220:	2a09      	cmp	r2, #9
 800f222:	d903      	bls.n	800f22c <_svfiprintf_r+0x1a8>
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0c5      	beq.n	800f1b4 <_svfiprintf_r+0x130>
 800f228:	9105      	str	r1, [sp, #20]
 800f22a:	e7c3      	b.n	800f1b4 <_svfiprintf_r+0x130>
 800f22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f230:	4604      	mov	r4, r0
 800f232:	2301      	movs	r3, #1
 800f234:	e7f0      	b.n	800f218 <_svfiprintf_r+0x194>
 800f236:	ab03      	add	r3, sp, #12
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	462a      	mov	r2, r5
 800f23c:	4b0f      	ldr	r3, [pc, #60]	; (800f27c <_svfiprintf_r+0x1f8>)
 800f23e:	a904      	add	r1, sp, #16
 800f240:	4638      	mov	r0, r7
 800f242:	f3af 8000 	nop.w
 800f246:	1c42      	adds	r2, r0, #1
 800f248:	4606      	mov	r6, r0
 800f24a:	d1d6      	bne.n	800f1fa <_svfiprintf_r+0x176>
 800f24c:	89ab      	ldrh	r3, [r5, #12]
 800f24e:	065b      	lsls	r3, r3, #25
 800f250:	f53f af2c 	bmi.w	800f0ac <_svfiprintf_r+0x28>
 800f254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f256:	b01d      	add	sp, #116	; 0x74
 800f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25c:	ab03      	add	r3, sp, #12
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	462a      	mov	r2, r5
 800f262:	4b06      	ldr	r3, [pc, #24]	; (800f27c <_svfiprintf_r+0x1f8>)
 800f264:	a904      	add	r1, sp, #16
 800f266:	4638      	mov	r0, r7
 800f268:	f000 f87a 	bl	800f360 <_printf_i>
 800f26c:	e7eb      	b.n	800f246 <_svfiprintf_r+0x1c2>
 800f26e:	bf00      	nop
 800f270:	0800f8e0 	.word	0x0800f8e0
 800f274:	0800f8ea 	.word	0x0800f8ea
 800f278:	00000000 	.word	0x00000000
 800f27c:	0800efcd 	.word	0x0800efcd
 800f280:	0800f8e6 	.word	0x0800f8e6

0800f284 <_printf_common>:
 800f284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	4616      	mov	r6, r2
 800f28a:	4699      	mov	r9, r3
 800f28c:	688a      	ldr	r2, [r1, #8]
 800f28e:	690b      	ldr	r3, [r1, #16]
 800f290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f294:	4293      	cmp	r3, r2
 800f296:	bfb8      	it	lt
 800f298:	4613      	movlt	r3, r2
 800f29a:	6033      	str	r3, [r6, #0]
 800f29c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	b10a      	cbz	r2, 800f2aa <_printf_common+0x26>
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	6033      	str	r3, [r6, #0]
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	0699      	lsls	r1, r3, #26
 800f2ae:	bf42      	ittt	mi
 800f2b0:	6833      	ldrmi	r3, [r6, #0]
 800f2b2:	3302      	addmi	r3, #2
 800f2b4:	6033      	strmi	r3, [r6, #0]
 800f2b6:	6825      	ldr	r5, [r4, #0]
 800f2b8:	f015 0506 	ands.w	r5, r5, #6
 800f2bc:	d106      	bne.n	800f2cc <_printf_common+0x48>
 800f2be:	f104 0a19 	add.w	sl, r4, #25
 800f2c2:	68e3      	ldr	r3, [r4, #12]
 800f2c4:	6832      	ldr	r2, [r6, #0]
 800f2c6:	1a9b      	subs	r3, r3, r2
 800f2c8:	42ab      	cmp	r3, r5
 800f2ca:	dc26      	bgt.n	800f31a <_printf_common+0x96>
 800f2cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2d0:	1e13      	subs	r3, r2, #0
 800f2d2:	6822      	ldr	r2, [r4, #0]
 800f2d4:	bf18      	it	ne
 800f2d6:	2301      	movne	r3, #1
 800f2d8:	0692      	lsls	r2, r2, #26
 800f2da:	d42b      	bmi.n	800f334 <_printf_common+0xb0>
 800f2dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2e0:	4649      	mov	r1, r9
 800f2e2:	4638      	mov	r0, r7
 800f2e4:	47c0      	blx	r8
 800f2e6:	3001      	adds	r0, #1
 800f2e8:	d01e      	beq.n	800f328 <_printf_common+0xa4>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	68e5      	ldr	r5, [r4, #12]
 800f2ee:	6832      	ldr	r2, [r6, #0]
 800f2f0:	f003 0306 	and.w	r3, r3, #6
 800f2f4:	2b04      	cmp	r3, #4
 800f2f6:	bf08      	it	eq
 800f2f8:	1aad      	subeq	r5, r5, r2
 800f2fa:	68a3      	ldr	r3, [r4, #8]
 800f2fc:	6922      	ldr	r2, [r4, #16]
 800f2fe:	bf0c      	ite	eq
 800f300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f304:	2500      	movne	r5, #0
 800f306:	4293      	cmp	r3, r2
 800f308:	bfc4      	itt	gt
 800f30a:	1a9b      	subgt	r3, r3, r2
 800f30c:	18ed      	addgt	r5, r5, r3
 800f30e:	2600      	movs	r6, #0
 800f310:	341a      	adds	r4, #26
 800f312:	42b5      	cmp	r5, r6
 800f314:	d11a      	bne.n	800f34c <_printf_common+0xc8>
 800f316:	2000      	movs	r0, #0
 800f318:	e008      	b.n	800f32c <_printf_common+0xa8>
 800f31a:	2301      	movs	r3, #1
 800f31c:	4652      	mov	r2, sl
 800f31e:	4649      	mov	r1, r9
 800f320:	4638      	mov	r0, r7
 800f322:	47c0      	blx	r8
 800f324:	3001      	adds	r0, #1
 800f326:	d103      	bne.n	800f330 <_printf_common+0xac>
 800f328:	f04f 30ff 	mov.w	r0, #4294967295
 800f32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f330:	3501      	adds	r5, #1
 800f332:	e7c6      	b.n	800f2c2 <_printf_common+0x3e>
 800f334:	18e1      	adds	r1, r4, r3
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	2030      	movs	r0, #48	; 0x30
 800f33a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f33e:	4422      	add	r2, r4
 800f340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f348:	3302      	adds	r3, #2
 800f34a:	e7c7      	b.n	800f2dc <_printf_common+0x58>
 800f34c:	2301      	movs	r3, #1
 800f34e:	4622      	mov	r2, r4
 800f350:	4649      	mov	r1, r9
 800f352:	4638      	mov	r0, r7
 800f354:	47c0      	blx	r8
 800f356:	3001      	adds	r0, #1
 800f358:	d0e6      	beq.n	800f328 <_printf_common+0xa4>
 800f35a:	3601      	adds	r6, #1
 800f35c:	e7d9      	b.n	800f312 <_printf_common+0x8e>
	...

0800f360 <_printf_i>:
 800f360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f364:	7e0f      	ldrb	r7, [r1, #24]
 800f366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f368:	2f78      	cmp	r7, #120	; 0x78
 800f36a:	4691      	mov	r9, r2
 800f36c:	4680      	mov	r8, r0
 800f36e:	460c      	mov	r4, r1
 800f370:	469a      	mov	sl, r3
 800f372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f376:	d807      	bhi.n	800f388 <_printf_i+0x28>
 800f378:	2f62      	cmp	r7, #98	; 0x62
 800f37a:	d80a      	bhi.n	800f392 <_printf_i+0x32>
 800f37c:	2f00      	cmp	r7, #0
 800f37e:	f000 80d8 	beq.w	800f532 <_printf_i+0x1d2>
 800f382:	2f58      	cmp	r7, #88	; 0x58
 800f384:	f000 80a3 	beq.w	800f4ce <_printf_i+0x16e>
 800f388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f38c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f390:	e03a      	b.n	800f408 <_printf_i+0xa8>
 800f392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f396:	2b15      	cmp	r3, #21
 800f398:	d8f6      	bhi.n	800f388 <_printf_i+0x28>
 800f39a:	a101      	add	r1, pc, #4	; (adr r1, 800f3a0 <_printf_i+0x40>)
 800f39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3a0:	0800f3f9 	.word	0x0800f3f9
 800f3a4:	0800f40d 	.word	0x0800f40d
 800f3a8:	0800f389 	.word	0x0800f389
 800f3ac:	0800f389 	.word	0x0800f389
 800f3b0:	0800f389 	.word	0x0800f389
 800f3b4:	0800f389 	.word	0x0800f389
 800f3b8:	0800f40d 	.word	0x0800f40d
 800f3bc:	0800f389 	.word	0x0800f389
 800f3c0:	0800f389 	.word	0x0800f389
 800f3c4:	0800f389 	.word	0x0800f389
 800f3c8:	0800f389 	.word	0x0800f389
 800f3cc:	0800f519 	.word	0x0800f519
 800f3d0:	0800f43d 	.word	0x0800f43d
 800f3d4:	0800f4fb 	.word	0x0800f4fb
 800f3d8:	0800f389 	.word	0x0800f389
 800f3dc:	0800f389 	.word	0x0800f389
 800f3e0:	0800f53b 	.word	0x0800f53b
 800f3e4:	0800f389 	.word	0x0800f389
 800f3e8:	0800f43d 	.word	0x0800f43d
 800f3ec:	0800f389 	.word	0x0800f389
 800f3f0:	0800f389 	.word	0x0800f389
 800f3f4:	0800f503 	.word	0x0800f503
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	1d1a      	adds	r2, r3, #4
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	602a      	str	r2, [r5, #0]
 800f400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f408:	2301      	movs	r3, #1
 800f40a:	e0a3      	b.n	800f554 <_printf_i+0x1f4>
 800f40c:	6820      	ldr	r0, [r4, #0]
 800f40e:	6829      	ldr	r1, [r5, #0]
 800f410:	0606      	lsls	r6, r0, #24
 800f412:	f101 0304 	add.w	r3, r1, #4
 800f416:	d50a      	bpl.n	800f42e <_printf_i+0xce>
 800f418:	680e      	ldr	r6, [r1, #0]
 800f41a:	602b      	str	r3, [r5, #0]
 800f41c:	2e00      	cmp	r6, #0
 800f41e:	da03      	bge.n	800f428 <_printf_i+0xc8>
 800f420:	232d      	movs	r3, #45	; 0x2d
 800f422:	4276      	negs	r6, r6
 800f424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f428:	485e      	ldr	r0, [pc, #376]	; (800f5a4 <_printf_i+0x244>)
 800f42a:	230a      	movs	r3, #10
 800f42c:	e019      	b.n	800f462 <_printf_i+0x102>
 800f42e:	680e      	ldr	r6, [r1, #0]
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f436:	bf18      	it	ne
 800f438:	b236      	sxthne	r6, r6
 800f43a:	e7ef      	b.n	800f41c <_printf_i+0xbc>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	6820      	ldr	r0, [r4, #0]
 800f440:	1d19      	adds	r1, r3, #4
 800f442:	6029      	str	r1, [r5, #0]
 800f444:	0601      	lsls	r1, r0, #24
 800f446:	d501      	bpl.n	800f44c <_printf_i+0xec>
 800f448:	681e      	ldr	r6, [r3, #0]
 800f44a:	e002      	b.n	800f452 <_printf_i+0xf2>
 800f44c:	0646      	lsls	r6, r0, #25
 800f44e:	d5fb      	bpl.n	800f448 <_printf_i+0xe8>
 800f450:	881e      	ldrh	r6, [r3, #0]
 800f452:	4854      	ldr	r0, [pc, #336]	; (800f5a4 <_printf_i+0x244>)
 800f454:	2f6f      	cmp	r7, #111	; 0x6f
 800f456:	bf0c      	ite	eq
 800f458:	2308      	moveq	r3, #8
 800f45a:	230a      	movne	r3, #10
 800f45c:	2100      	movs	r1, #0
 800f45e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f462:	6865      	ldr	r5, [r4, #4]
 800f464:	60a5      	str	r5, [r4, #8]
 800f466:	2d00      	cmp	r5, #0
 800f468:	bfa2      	ittt	ge
 800f46a:	6821      	ldrge	r1, [r4, #0]
 800f46c:	f021 0104 	bicge.w	r1, r1, #4
 800f470:	6021      	strge	r1, [r4, #0]
 800f472:	b90e      	cbnz	r6, 800f478 <_printf_i+0x118>
 800f474:	2d00      	cmp	r5, #0
 800f476:	d04d      	beq.n	800f514 <_printf_i+0x1b4>
 800f478:	4615      	mov	r5, r2
 800f47a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f47e:	fb03 6711 	mls	r7, r3, r1, r6
 800f482:	5dc7      	ldrb	r7, [r0, r7]
 800f484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f488:	4637      	mov	r7, r6
 800f48a:	42bb      	cmp	r3, r7
 800f48c:	460e      	mov	r6, r1
 800f48e:	d9f4      	bls.n	800f47a <_printf_i+0x11a>
 800f490:	2b08      	cmp	r3, #8
 800f492:	d10b      	bne.n	800f4ac <_printf_i+0x14c>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	07de      	lsls	r6, r3, #31
 800f498:	d508      	bpl.n	800f4ac <_printf_i+0x14c>
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	6861      	ldr	r1, [r4, #4]
 800f49e:	4299      	cmp	r1, r3
 800f4a0:	bfde      	ittt	le
 800f4a2:	2330      	movle	r3, #48	; 0x30
 800f4a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f4ac:	1b52      	subs	r2, r2, r5
 800f4ae:	6122      	str	r2, [r4, #16]
 800f4b0:	f8cd a000 	str.w	sl, [sp]
 800f4b4:	464b      	mov	r3, r9
 800f4b6:	aa03      	add	r2, sp, #12
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	f7ff fee2 	bl	800f284 <_printf_common>
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d14c      	bne.n	800f55e <_printf_i+0x1fe>
 800f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c8:	b004      	add	sp, #16
 800f4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ce:	4835      	ldr	r0, [pc, #212]	; (800f5a4 <_printf_i+0x244>)
 800f4d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f4d4:	6829      	ldr	r1, [r5, #0]
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4dc:	6029      	str	r1, [r5, #0]
 800f4de:	061d      	lsls	r5, r3, #24
 800f4e0:	d514      	bpl.n	800f50c <_printf_i+0x1ac>
 800f4e2:	07df      	lsls	r7, r3, #31
 800f4e4:	bf44      	itt	mi
 800f4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f4ea:	6023      	strmi	r3, [r4, #0]
 800f4ec:	b91e      	cbnz	r6, 800f4f6 <_printf_i+0x196>
 800f4ee:	6823      	ldr	r3, [r4, #0]
 800f4f0:	f023 0320 	bic.w	r3, r3, #32
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	2310      	movs	r3, #16
 800f4f8:	e7b0      	b.n	800f45c <_printf_i+0xfc>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	f043 0320 	orr.w	r3, r3, #32
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	2378      	movs	r3, #120	; 0x78
 800f504:	4828      	ldr	r0, [pc, #160]	; (800f5a8 <_printf_i+0x248>)
 800f506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f50a:	e7e3      	b.n	800f4d4 <_printf_i+0x174>
 800f50c:	0659      	lsls	r1, r3, #25
 800f50e:	bf48      	it	mi
 800f510:	b2b6      	uxthmi	r6, r6
 800f512:	e7e6      	b.n	800f4e2 <_printf_i+0x182>
 800f514:	4615      	mov	r5, r2
 800f516:	e7bb      	b.n	800f490 <_printf_i+0x130>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	6826      	ldr	r6, [r4, #0]
 800f51c:	6961      	ldr	r1, [r4, #20]
 800f51e:	1d18      	adds	r0, r3, #4
 800f520:	6028      	str	r0, [r5, #0]
 800f522:	0635      	lsls	r5, r6, #24
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	d501      	bpl.n	800f52c <_printf_i+0x1cc>
 800f528:	6019      	str	r1, [r3, #0]
 800f52a:	e002      	b.n	800f532 <_printf_i+0x1d2>
 800f52c:	0670      	lsls	r0, r6, #25
 800f52e:	d5fb      	bpl.n	800f528 <_printf_i+0x1c8>
 800f530:	8019      	strh	r1, [r3, #0]
 800f532:	2300      	movs	r3, #0
 800f534:	6123      	str	r3, [r4, #16]
 800f536:	4615      	mov	r5, r2
 800f538:	e7ba      	b.n	800f4b0 <_printf_i+0x150>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	1d1a      	adds	r2, r3, #4
 800f53e:	602a      	str	r2, [r5, #0]
 800f540:	681d      	ldr	r5, [r3, #0]
 800f542:	6862      	ldr	r2, [r4, #4]
 800f544:	2100      	movs	r1, #0
 800f546:	4628      	mov	r0, r5
 800f548:	f7f0 fe5a 	bl	8000200 <memchr>
 800f54c:	b108      	cbz	r0, 800f552 <_printf_i+0x1f2>
 800f54e:	1b40      	subs	r0, r0, r5
 800f550:	6060      	str	r0, [r4, #4]
 800f552:	6863      	ldr	r3, [r4, #4]
 800f554:	6123      	str	r3, [r4, #16]
 800f556:	2300      	movs	r3, #0
 800f558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f55c:	e7a8      	b.n	800f4b0 <_printf_i+0x150>
 800f55e:	6923      	ldr	r3, [r4, #16]
 800f560:	462a      	mov	r2, r5
 800f562:	4649      	mov	r1, r9
 800f564:	4640      	mov	r0, r8
 800f566:	47d0      	blx	sl
 800f568:	3001      	adds	r0, #1
 800f56a:	d0ab      	beq.n	800f4c4 <_printf_i+0x164>
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	079b      	lsls	r3, r3, #30
 800f570:	d413      	bmi.n	800f59a <_printf_i+0x23a>
 800f572:	68e0      	ldr	r0, [r4, #12]
 800f574:	9b03      	ldr	r3, [sp, #12]
 800f576:	4298      	cmp	r0, r3
 800f578:	bfb8      	it	lt
 800f57a:	4618      	movlt	r0, r3
 800f57c:	e7a4      	b.n	800f4c8 <_printf_i+0x168>
 800f57e:	2301      	movs	r3, #1
 800f580:	4632      	mov	r2, r6
 800f582:	4649      	mov	r1, r9
 800f584:	4640      	mov	r0, r8
 800f586:	47d0      	blx	sl
 800f588:	3001      	adds	r0, #1
 800f58a:	d09b      	beq.n	800f4c4 <_printf_i+0x164>
 800f58c:	3501      	adds	r5, #1
 800f58e:	68e3      	ldr	r3, [r4, #12]
 800f590:	9903      	ldr	r1, [sp, #12]
 800f592:	1a5b      	subs	r3, r3, r1
 800f594:	42ab      	cmp	r3, r5
 800f596:	dcf2      	bgt.n	800f57e <_printf_i+0x21e>
 800f598:	e7eb      	b.n	800f572 <_printf_i+0x212>
 800f59a:	2500      	movs	r5, #0
 800f59c:	f104 0619 	add.w	r6, r4, #25
 800f5a0:	e7f5      	b.n	800f58e <_printf_i+0x22e>
 800f5a2:	bf00      	nop
 800f5a4:	0800f8f1 	.word	0x0800f8f1
 800f5a8:	0800f902 	.word	0x0800f902

0800f5ac <memmove>:
 800f5ac:	4288      	cmp	r0, r1
 800f5ae:	b510      	push	{r4, lr}
 800f5b0:	eb01 0402 	add.w	r4, r1, r2
 800f5b4:	d902      	bls.n	800f5bc <memmove+0x10>
 800f5b6:	4284      	cmp	r4, r0
 800f5b8:	4623      	mov	r3, r4
 800f5ba:	d807      	bhi.n	800f5cc <memmove+0x20>
 800f5bc:	1e43      	subs	r3, r0, #1
 800f5be:	42a1      	cmp	r1, r4
 800f5c0:	d008      	beq.n	800f5d4 <memmove+0x28>
 800f5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5ca:	e7f8      	b.n	800f5be <memmove+0x12>
 800f5cc:	4402      	add	r2, r0
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	428a      	cmp	r2, r1
 800f5d2:	d100      	bne.n	800f5d6 <memmove+0x2a>
 800f5d4:	bd10      	pop	{r4, pc}
 800f5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5de:	e7f7      	b.n	800f5d0 <memmove+0x24>

0800f5e0 <_realloc_r>:
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	4614      	mov	r4, r2
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	b921      	cbnz	r1, 800f5f6 <_realloc_r+0x16>
 800f5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	f7ff bb85 	b.w	800ed00 <_malloc_r>
 800f5f6:	b92a      	cbnz	r2, 800f604 <_realloc_r+0x24>
 800f5f8:	f7ff fc9c 	bl	800ef34 <_free_r>
 800f5fc:	4625      	mov	r5, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f604:	f000 f81b 	bl	800f63e <_malloc_usable_size_r>
 800f608:	4284      	cmp	r4, r0
 800f60a:	4607      	mov	r7, r0
 800f60c:	d802      	bhi.n	800f614 <_realloc_r+0x34>
 800f60e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f612:	d812      	bhi.n	800f63a <_realloc_r+0x5a>
 800f614:	4621      	mov	r1, r4
 800f616:	4640      	mov	r0, r8
 800f618:	f7ff fb72 	bl	800ed00 <_malloc_r>
 800f61c:	4605      	mov	r5, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0ed      	beq.n	800f5fe <_realloc_r+0x1e>
 800f622:	42bc      	cmp	r4, r7
 800f624:	4622      	mov	r2, r4
 800f626:	4631      	mov	r1, r6
 800f628:	bf28      	it	cs
 800f62a:	463a      	movcs	r2, r7
 800f62c:	f7ff fb32 	bl	800ec94 <memcpy>
 800f630:	4631      	mov	r1, r6
 800f632:	4640      	mov	r0, r8
 800f634:	f7ff fc7e 	bl	800ef34 <_free_r>
 800f638:	e7e1      	b.n	800f5fe <_realloc_r+0x1e>
 800f63a:	4635      	mov	r5, r6
 800f63c:	e7df      	b.n	800f5fe <_realloc_r+0x1e>

0800f63e <_malloc_usable_size_r>:
 800f63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f642:	1f18      	subs	r0, r3, #4
 800f644:	2b00      	cmp	r3, #0
 800f646:	bfbc      	itt	lt
 800f648:	580b      	ldrlt	r3, [r1, r0]
 800f64a:	18c0      	addlt	r0, r0, r3
 800f64c:	4770      	bx	lr
	...

0800f650 <_init>:
 800f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f652:	bf00      	nop
 800f654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f656:	bc08      	pop	{r3}
 800f658:	469e      	mov	lr, r3
 800f65a:	4770      	bx	lr

0800f65c <_fini>:
 800f65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65e:	bf00      	nop
 800f660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f662:	bc08      	pop	{r3}
 800f664:	469e      	mov	lr, r3
 800f666:	4770      	bx	lr
