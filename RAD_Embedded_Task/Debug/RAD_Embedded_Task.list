
RAD_Embedded_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008628  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00004a4c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd11  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a63  00000000  00000000  0003fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  000438a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001828  00000000  00000000  00045218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b47  00000000  00000000  00046a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb3b  00000000  00000000  0006d587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed8e3  00000000  00000000  0008a0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001779a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007288  00000000  00000000  001779f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080087c0 	.word	0x080087c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000100 	.word	0x20000100
 80001ec:	080087c0 	.word	0x080087c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000118 	.word	0x20000118
 80005d4:	200001cc 	.word	0x200001cc

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0a4      	sub	sp, #144	; 0x90
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f899 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f887 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa5d 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fa23 	bl	8000a34 <MX_DMA_Init>
  MX_ETH_Init();
 80005ee:	f000 f8eb 	bl	80007c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f9c7 	bl	8000984 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f9ef 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80005fa:	f000 f973 	bl	80008e4 <MX_TIM1_Init>
  MX_I2C2_Init();
 80005fe:	f000 f931 	bl	8000864 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000602:	4831      	ldr	r0, [pc, #196]	; (80006c8 <main+0xf0>)
 8000604:	f003 ffe0 	bl	80045c8 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RTC_Task */
  osThreadDef(RTC_Task, Start_RTC, osPriorityAboveNormal, 0, 256);
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <main+0xf4>)
 800060a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_TaskHandle = osThreadCreate(osThread(RTC_Task), NULL);
 800061c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f967 	bl	80068f6 <osThreadCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <main+0xf8>)
 800062c:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_LEDTask */
  osThreadDef(UART_LEDTask, Start_UART_LED, osPriorityNormal, 0, 256);
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <main+0xfc>)
 8000630:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_LEDTaskHandle = osThreadCreate(osThread(UART_LEDTask), NULL);
 8000642:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f006 f954 	bl	80068f6 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <main+0x100>)
 8000652:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataLogging_Tas */
  osThreadDef(DataLogging_Tas, Start_DataLogging, osPriorityNormal, 0, 256);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <main+0x104>)
 8000656:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataLogging_TasHandle = osThreadCreate(osThread(DataLogging_Tas), NULL);
 8000668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f941 	bl	80068f6 <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <main+0x108>)
 8000678:	6013      	str	r3, [r2, #0]

  /* definition and creation of FanControl_Task */
  osThreadDef(FanControl_Task, Start_FanControl, osPriorityBelowNormal, 0, 128);
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0x10c>)
 800067c:	f107 0420 	add.w	r4, r7, #32
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FanControl_TaskHandle = osThreadCreate(osThread(FanControl_Task), NULL);
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f006 f92e 	bl	80068f6 <osThreadCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <main+0x110>)
 800069e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempReading_Tas */
  osThreadDef(TempReading_Tas, Start_Temp, osPriorityAboveNormal, 0, 128);
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0x114>)
 80006a2:	1d3c      	adds	r4, r7, #4
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempReading_TasHandle = osThreadCreate(osThread(TempReading_Tas), NULL);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f91d 	bl	80068f6 <osThreadCreate>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <main+0x118>)
 80006c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c2:	f006 f911 	bl	80068e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0xee>
 80006c8:	20000708 	.word	0x20000708
 80006cc:	08008824 	.word	0x08008824
 80006d0:	20000d60 	.word	0x20000d60
 80006d4:	08008840 	.word	0x08008840
 80006d8:	20000d64 	.word	0x20000d64
 80006dc:	0800885c 	.word	0x0800885c
 80006e0:	20000d68 	.word	0x20000d68
 80006e4:	08008878 	.word	0x08008878
 80006e8:	20000d6c 	.word	0x20000d6c
 80006ec:	08008894 	.word	0x08008894
 80006f0:	20000d70 	.word	0x20000d70

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f007 fb8c 	bl	8007e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000768:	23a8      	movs	r3, #168	; 0xa8
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000770:	2307      	movs	r3, #7
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fa0b 	bl	8003b94 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 fbaf 	bl	8000ee6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2105      	movs	r1, #5
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fc6c 	bl	8004084 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 fb98 	bl	8000ee6 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ETH_Init+0x84>)
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <MX_ETH_Init+0x88>)
 80007d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_ETH_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ETH_Init+0x8c>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_ETH_Init+0x8c>)
 80007e0:	22e1      	movs	r2, #225	; 0xe1
 80007e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_ETH_Init+0x8c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ETH_Init+0x8c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_ETH_Init+0x8c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ETH_Init+0x84>)
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_ETH_Init+0x8c>)
 80007fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_ETH_Init+0x84>)
 80007fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000802:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ETH_Init+0x84>)
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <MX_ETH_Init+0x90>)
 8000808:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_ETH_Init+0x84>)
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_ETH_Init+0x94>)
 800080e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_ETH_Init+0x84>)
 8000812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000816:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x84>)
 800081a:	f001 fcd1 	bl	80021c0 <HAL_ETH_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 fb5f 	bl	8000ee6 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000828:	2238      	movs	r2, #56	; 0x38
 800082a:	2100      	movs	r1, #0
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x98>)
 800082e:	f007 faf7 	bl	8007e20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_ETH_Init+0x98>)
 8000834:	2221      	movs	r2, #33	; 0x21
 8000836:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_ETH_Init+0x98>)
 800083a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800083e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_ETH_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000544 	.word	0x20000544
 8000850:	40028000 	.word	0x40028000
 8000854:	20000d8c 	.word	0x20000d8c
 8000858:	200004a4 	.word	0x200004a4
 800085c:	20000404 	.word	0x20000404
 8000860:	200003cc 	.word	0x200003cc

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C2_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008a2:	f002 f995 	bl	8002bd0 <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 fb1b 	bl	8000ee6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008b4:	f002 ffd6 	bl	8003864 <HAL_I2CEx_ConfigAnalogFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008be:	f000 fb12 	bl	8000ee6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008c6:	f003 f809 	bl	80038dc <HAL_I2CEx_ConfigDigitalFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 fb09 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200005f4 	.word	0x200005f4
 80008dc:	40005800 	.word	0x40005800
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM1_Init+0x98>)
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_TIM1_Init+0x9c>)
 8000904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM1_Init+0x98>)
 8000908:	22a7      	movs	r2, #167	; 0xa7
 800090a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM1_Init+0x98>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_TIM1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_TIM1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_TIM1_Init+0x98>)
 800092e:	f003 fdfb 	bl	8004528 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 fad5 	bl	8000ee6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM1_Init+0x98>)
 800094a:	f004 f81d 	bl	8004988 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000954:	f000 fac7 	bl	8000ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM1_Init+0x98>)
 8000966:	f004 fa39 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000970:	f000 fab9 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000708 	.word	0x20000708
 8000980:	40010000 	.word	0x40010000

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART3_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009bc:	f004 fa9e 	bl	8004efc <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 fa8e 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000750 	.word	0x20000750
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	f002 ff9d 	bl	800395a <HAL_PCD_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 fa5e 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000854 	.word	0x20000854

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_DMA_Init+0x6c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <MX_DMA_Init+0x6c>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_DMA_Init+0x6c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	200c      	movs	r0, #12
 8000a5c:	f000 ff78 	bl	8001950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a60:	200c      	movs	r0, #12
 8000a62:	f000 ff91 	bl	8001988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	200d      	movs	r0, #13
 8000a6c:	f000 ff70 	bl	8001950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a70:	200d      	movs	r0, #13
 8000a72:	f000 ff89 	bl	8001988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 ff68 	bl	8001950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f000 ff81 	bl	8001988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2105      	movs	r1, #5
 8000a8a:	202f      	movs	r0, #47	; 0x2f
 8000a8c:	f000 ff60 	bl	8001950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a90:	202f      	movs	r0, #47	; 0x2f
 8000a92:	f000 ff79 	bl	8001988 <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	4b59      	ldr	r3, [pc, #356]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a58      	ldr	r2, [pc, #352]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b56      	ldr	r3, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a51      	ldr	r2, [pc, #324]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a4a      	ldr	r2, [pc, #296]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a35      	ldr	r2, [pc, #212]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_GPIO_Init+0x180>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b84:	4828      	ldr	r0, [pc, #160]	; (8000c28 <MX_GPIO_Init+0x184>)
 8000b86:	f001 ffef 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2140      	movs	r1, #64	; 0x40
 8000b8e:	4827      	ldr	r0, [pc, #156]	; (8000c2c <MX_GPIO_Init+0x188>)
 8000b90:	f001 ffea 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_GPIO_Init+0x18c>)
 8000bac:	f001 fe30 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481c      	ldr	r0, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x190>)
 8000bc4:	f001 fe24 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bc8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_GPIO_Init+0x184>)
 8000be2:	f001 fe15 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0x188>)
 8000bfe:	f001 fe07 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_GPIO_Init+0x188>)
 8000c16:	f001 fdfb 	bl	8002810 <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020000 	.word	0x40020000

08000c38 <bcdToDec>:
   return (uint8_t)( (val/10*16) + (val%10) );
 }

 // Convert binary coded decimal to normal decimal numbers
 int bcdToDec(uint8_t val)
 {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
   return (int)( (val/16*10) + (val%16) );
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	461a      	mov	r2, r3
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	4413      	add	r3, r2
 }
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <Get_Time>:
 	HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7, 1000);
// 	HAL_I2C_Mem_Write_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, set_time, 7);
 }

 void Get_Time (void)
 {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
 	uint8_t get_time[7];
// 	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7, 1000);
 	HAL_I2C_Mem_Read_DMA(&hi2c2, DS1307_ADDR, 0x00, 1, get_time, 7);
 8000c6e:	23d0      	movs	r3, #208	; 0xd0
 8000c70:	b299      	uxth	r1, r3
 8000c72:	2307      	movs	r3, #7
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	463b      	mov	r3, r7
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	481f      	ldr	r0, [pc, #124]	; (8000cfc <Get_Time+0x94>)
 8000c80:	f002 f8ea 	bl	8002e58 <HAL_I2C_Mem_Read_DMA>
 	time.seconds = bcdToDec(get_time[0]);
 8000c84:	783b      	ldrb	r3, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffd6 	bl	8000c38 <bcdToDec>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <Get_Time+0x98>)
 8000c92:	701a      	strb	r2, [r3, #0]
 	time.minutes = bcdToDec(get_time[1]);
 8000c94:	787b      	ldrb	r3, [r7, #1]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ffce 	bl	8000c38 <bcdToDec>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <Get_Time+0x98>)
 8000ca2:	705a      	strb	r2, [r3, #1]
 	time.hour = bcdToDec(get_time[2]);
 8000ca4:	78bb      	ldrb	r3, [r7, #2]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffc6 	bl	8000c38 <bcdToDec>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <Get_Time+0x98>)
 8000cb2:	709a      	strb	r2, [r3, #2]
 	time.dayofweek = bcdToDec(get_time[3]);
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffbe 	bl	8000c38 <bcdToDec>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <Get_Time+0x98>)
 8000cc2:	70da      	strb	r2, [r3, #3]
 	time.dayofmonth = bcdToDec(get_time[4]);
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffb6 	bl	8000c38 <bcdToDec>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <Get_Time+0x98>)
 8000cd2:	711a      	strb	r2, [r3, #4]
 	time.month = bcdToDec(get_time[5]);
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffae 	bl	8000c38 <bcdToDec>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <Get_Time+0x98>)
 8000ce2:	715a      	strb	r2, [r3, #5]
 	time.year = bcdToDec(get_time[6]);
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffa6 	bl	8000c38 <bcdToDec>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <Get_Time+0x98>)
 8000cf2:	719a      	strb	r2, [r3, #6]
 }
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200005f4 	.word	0x200005f4
 8000d00:	20000d78 	.word	0x20000d78

08000d04 <Start_RTC>:

 char buffer[10];
/* USER CODE END Header_Start_RTC */
void Start_RTC(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	Set_Time(00, 03, 14, 4, 15, 2, 24);
  /* Infinite loop */
  for(;;)
  {
	  Get_Time();
 8000d0c:	f7ff ffac 	bl	8000c68 <Get_Time>
	  sprintf(buffer, "%02d:%02d:%02d",time.hour,time.minutes,time.seconds);
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <Start_RTC+0x44>)
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <Start_RTC+0x44>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <Start_RTC+0x44>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	460b      	mov	r3, r1
 8000d24:	4909      	ldr	r1, [pc, #36]	; (8000d4c <Start_RTC+0x48>)
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <Start_RTC+0x4c>)
 8000d28:	f007 f990 	bl	800804c <siprintf>
//	  sprintf ((char*)uart_buffer,"LED Status %d\r",led_status);
	  send_uart_dma(buffer, strlen((char*)buffer));
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <Start_RTC+0x4c>)
 8000d2e:	f7ff fa5f 	bl	80001f0 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <Start_RTC+0x4c>)
 8000d38:	f000 f80c 	bl	8000d54 <send_uart_dma>
	  osDelay(1000);
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f005 fe25 	bl	800698e <osDelay>
  {
 8000d44:	e7e2      	b.n	8000d0c <Start_RTC+0x8>
 8000d46:	bf00      	nop
 8000d48:	20000d78 	.word	0x20000d78
 8000d4c:	080088b0 	.word	0x080088b0
 8000d50:	20000d80 	.word	0x20000d80

08000d54 <send_uart_dma>:
/**
* @brief Function implementing the UART_LEDTask thread.
* @param argument: Not used
* @retval None
*/
void send_uart_dma(uint8_t* ptr, uint16_t len){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
	while(!UART_SendFlag);
 8000d60:	bf00      	nop
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <send_uart_dma+0x30>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0fb      	beq.n	8000d62 <send_uart_dma+0xe>

	UART_SendFlag=0;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <send_uart_dma+0x30>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)ptr, len);
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	461a      	mov	r2, r3
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <send_uart_dma+0x34>)
 8000d78:	f004 f90e 	bl	8004f98 <HAL_UART_Transmit_DMA>

}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000750 	.word	0x20000750

08000d8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	if((uart_bfr!=0x0D)&&(uart_bfr!=0x0A)){
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_UART_RxCpltCallback+0x40>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b0d      	cmp	r3, #13
 8000d9a:	d007      	beq.n	8000dac <HAL_UART_RxCpltCallback+0x20>
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_UART_RxCpltCallback+0x40>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b0a      	cmp	r3, #10
 8000da2:	d003      	beq.n	8000dac <HAL_UART_RxCpltCallback+0x20>
		cmd=uart_bfr;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_UART_RxCpltCallback+0x40>)
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_UART_RxCpltCallback+0x44>)
 8000daa:	701a      	strb	r2, [r3, #0]
	}
	if(uart_bfr==0x0D){
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_UART_RxCpltCallback+0x40>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b0d      	cmp	r3, #13
 8000db2:	d102      	bne.n	8000dba <HAL_UART_RxCpltCallback+0x2e>
		cmdstate=1;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_UART_RxCpltCallback+0x48>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4903      	ldr	r1, [pc, #12]	; (8000dcc <HAL_UART_RxCpltCallback+0x40>)
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_UART_RxCpltCallback+0x4c>)
 8000dc0:	f004 f968 	bl	8005094 <HAL_UART_Receive_DMA>

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000d74 	.word	0x20000d74
 8000dd0:	20000d75 	.word	0x20000d75
 8000dd4:	20000d76 	.word	0x20000d76
 8000dd8:	20000750 	.word	0x20000750

08000ddc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	UART_SendFlag=1;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_UART_TxCpltCallback+0x1c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <Start_UART_LED>:
/* USER CODE END Header_Start_UART_LED */
void Start_UART_LED(void const * argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_LED */

	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <Start_UART_LED+0x84>)
 8000e06:	f7ff f9f3 	bl	80001f0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481b      	ldr	r0, [pc, #108]	; (8000e80 <Start_UART_LED+0x84>)
 8000e12:	f7ff ff9f 	bl	8000d54 <send_uart_dma>
	HAL_UART_Receive_DMA(&huart3,&uart_bfr, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	491a      	ldr	r1, [pc, #104]	; (8000e84 <Start_UART_LED+0x88>)
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <Start_UART_LED+0x8c>)
 8000e1c:	f004 f93a 	bl	8005094 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  if(cmdstate){
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <Start_UART_LED+0x90>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d026      	beq.n	8000e76 <Start_UART_LED+0x7a>
	      	cmdstate=0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <Start_UART_LED+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]

	      	//process command
	      	switch (cmd){
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <Start_UART_LED+0x94>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b33      	cmp	r3, #51	; 0x33
 8000e34:	d010      	beq.n	8000e58 <Start_UART_LED+0x5c>
 8000e36:	2b33      	cmp	r3, #51	; 0x33
 8000e38:	dc14      	bgt.n	8000e64 <Start_UART_LED+0x68>
 8000e3a:	2b31      	cmp	r3, #49	; 0x31
 8000e3c:	d002      	beq.n	8000e44 <Start_UART_LED+0x48>
 8000e3e:	2b32      	cmp	r3, #50	; 0x32
 8000e40:	d005      	beq.n	8000e4e <Start_UART_LED+0x52>
 8000e42:	e00f      	b.n	8000e64 <Start_UART_LED+0x68>
	      	case '1':
	      		HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 8000e44:	2101      	movs	r1, #1
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <Start_UART_LED+0x98>)
 8000e48:	f001 fea7 	bl	8002b9a <HAL_GPIO_TogglePin>
	      		break;
 8000e4c:	e00a      	b.n	8000e64 <Start_UART_LED+0x68>
	      	case '2':
	      		HAL_GPIO_TogglePin (GPIOB, LD2_Pin);
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <Start_UART_LED+0x98>)
 8000e52:	f001 fea2 	bl	8002b9a <HAL_GPIO_TogglePin>
	      		break;
 8000e56:	e005      	b.n	8000e64 <Start_UART_LED+0x68>
	      	case '3':
	      		HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8000e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <Start_UART_LED+0x98>)
 8000e5e:	f001 fe9c 	bl	8002b9a <HAL_GPIO_TogglePin>
	      		break;
 8000e62:	bf00      	nop
	      	}

	      	send_uart_dma(menu_cmd, strlen((char*)menu_cmd));
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <Start_UART_LED+0x84>)
 8000e66:	f7ff f9c3 	bl	80001f0 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <Start_UART_LED+0x84>)
 8000e72:	f7ff ff6f 	bl	8000d54 <send_uart_dma>

	      	}

    osDelay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f005 fd89 	bl	800698e <osDelay>
	  if(cmdstate){
 8000e7c:	e7d0      	b.n	8000e20 <Start_UART_LED+0x24>
 8000e7e:	bf00      	nop
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000d74 	.word	0x20000d74
 8000e88:	20000750 	.word	0x20000750
 8000e8c:	20000d76 	.word	0x20000d76
 8000e90:	20000d75 	.word	0x20000d75
 8000e94:	40020400 	.word	0x40020400

08000e98 <Start_DataLogging>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DataLogging */
void Start_DataLogging(void const * argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DataLogging */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f005 fd74 	bl	800698e <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <Start_DataLogging+0x8>

08000ea8 <Start_FanControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_FanControl */
void Start_FanControl(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_FanControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f005 fd6c 	bl	800698e <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <Start_FanControl+0x8>

08000eb8 <Start_Temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Temp */
void Start_Temp(void const * argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Temp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f005 fd64 	bl	800698e <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <Start_Temp+0x8>

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fc3d 	bl	8001758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eea:	b672      	cpsid	i
}
 8000eec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eee:	e7fe      	b.n	8000eee <Error_Handler+0x8>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_MspInit+0x54>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <HAL_MspInit+0x54>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_MspInit+0x54>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_MspInit+0x54>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_MspInit+0x54>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_MspInit+0x54>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210f      	movs	r1, #15
 8000f32:	f06f 0001 	mvn.w	r0, #1
 8000f36:	f000 fd0b 	bl	8001950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a55      	ldr	r2, [pc, #340]	; (80010bc <HAL_ETH_MspInit+0x174>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 80a4 	bne.w	80010b4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a44      	ldr	r2, [pc, #272]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a3d      	ldr	r2, [pc, #244]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 800101e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_ETH_MspInit+0x178>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001030:	2332      	movs	r3, #50	; 0x32
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001040:	230b      	movs	r3, #11
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <HAL_ETH_MspInit+0x17c>)
 800104c:	f001 fbe0 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001050:	2386      	movs	r3, #134	; 0x86
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4817      	ldr	r0, [pc, #92]	; (80010c8 <HAL_ETH_MspInit+0x180>)
 800106c:	f001 fbd0 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001082:	230b      	movs	r3, #11
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <HAL_ETH_MspInit+0x184>)
 800108e:	f001 fbbf 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001092:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a4:	230b      	movs	r3, #11
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 80010b0:	f001 fbae 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40028000 	.word	0x40028000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40021800 	.word	0x40021800

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a47      	ldr	r2, [pc, #284]	; (8001210 <HAL_I2C_MspInit+0x13c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 8088 	bne.w	8001208 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	4b45      	ldr	r3, [pc, #276]	; (8001214 <HAL_I2C_MspInit+0x140>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a44      	ldr	r2, [pc, #272]	; (8001214 <HAL_I2C_MspInit+0x140>)
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b42      	ldr	r3, [pc, #264]	; (8001214 <HAL_I2C_MspInit+0x140>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001114:	2303      	movs	r3, #3
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001124:	2304      	movs	r3, #4
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	483a      	ldr	r0, [pc, #232]	; (8001218 <HAL_I2C_MspInit+0x144>)
 8001130:	f001 fb6e 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_I2C_MspInit+0x140>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a35      	ldr	r2, [pc, #212]	; (8001214 <HAL_I2C_MspInit+0x140>)
 800113e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_I2C_MspInit+0x140>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001152:	4a33      	ldr	r2, [pc, #204]	; (8001220 <HAL_I2C_MspInit+0x14c>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001158:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800115c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_I2C_MspInit+0x148>)
 800116c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_I2C_MspInit+0x148>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_I2C_MspInit+0x148>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001190:	4822      	ldr	r0, [pc, #136]	; (800121c <HAL_I2C_MspInit+0x148>)
 8001192:	f000 fc07 	bl	80019a4 <HAL_DMA_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800119c:	f7ff fea3 	bl	8000ee6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_I2C_MspInit+0x148>)
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_I2C_MspInit+0x148>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_I2C_MspInit+0x154>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011b4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011bc:	2240      	movs	r2, #64	; 0x40
 80011be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_I2C_MspInit+0x150>)
 80011ee:	f000 fbd9 	bl	80019a4 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80011f8:	f7ff fe75 	bl	8000ee6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_I2C_MspInit+0x150>)
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_I2C_MspInit+0x150>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005800 	.word	0x40005800
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400
 800121c:	20000648 	.word	0x20000648
 8001220:	40026040 	.word	0x40026040
 8001224:	200006a8 	.word	0x200006a8
 8001228:	400260b8 	.word	0x400260b8

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_TIM_Base_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10d      	bne.n	800125a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <HAL_UART_MspInit+0x154>)
 800128e:	4293      	cmp	r3, r2
 8001290:	f040 8093 	bne.w	80013ba <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_UART_MspInit+0x158>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_UART_MspInit+0x158>)
 800129e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <HAL_UART_MspInit+0x158>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_UART_MspInit+0x158>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <HAL_UART_MspInit+0x158>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_UART_MspInit+0x158>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012de:	2307      	movs	r3, #7
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4838      	ldr	r0, [pc, #224]	; (80013cc <HAL_UART_MspInit+0x15c>)
 80012ea:	f001 fa91 	bl	8002810 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_UART_MspInit+0x160>)
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_UART_MspInit+0x164>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_UART_MspInit+0x160>)
 80012f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_UART_MspInit+0x160>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <HAL_UART_MspInit+0x160>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_UART_MspInit+0x160>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001328:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_UART_MspInit+0x160>)
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001330:	4827      	ldr	r0, [pc, #156]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001332:	f000 fb37 	bl	80019a4 <HAL_DMA_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800133c:	f7ff fdd3 	bl	8000ee6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_UART_MspInit+0x160>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_UART_MspInit+0x168>)
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_UART_MspInit+0x16c>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001354:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001358:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_UART_MspInit+0x168>)
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x168>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001386:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_UART_MspInit+0x168>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x168>)
 8001390:	f000 fb08 	bl	80019a4 <HAL_DMA_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800139a:	f7ff fda4 	bl	8000ee6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <HAL_UART_MspInit+0x168>)
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_UART_MspInit+0x168>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2105      	movs	r1, #5
 80013ae:	2027      	movs	r0, #39	; 0x27
 80013b0:	f000 face 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013b4:	2027      	movs	r0, #39	; 0x27
 80013b6:	f000 fae7 	bl	8001988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004800 	.word	0x40004800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	20000794 	.word	0x20000794
 80013d4:	40026028 	.word	0x40026028
 80013d8:	200007f4 	.word	0x200007f4
 80013dc:	40026070 	.word	0x40026070

080013e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001400:	d13f      	bne.n	8001482 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_PCD_MspInit+0xac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a20      	ldr	r2, [pc, #128]	; (800148c <HAL_PCD_MspInit+0xac>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_PCD_MspInit+0xac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800141e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001430:	230a      	movs	r3, #10
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <HAL_PCD_MspInit+0xb0>)
 800143c:	f001 f9e8 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	480e      	ldr	r0, [pc, #56]	; (8001490 <HAL_PCD_MspInit+0xb0>)
 8001456:	f001 f9db 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_PCD_MspInit+0xac>)
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_PCD_MspInit+0xac>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6353      	str	r3, [r2, #52]	; 0x34
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_PCD_MspInit+0xac>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_PCD_MspInit+0xac>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_PCD_MspInit+0xac>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_InitTick+0xe8>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_InitTick+0xe8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_InitTick+0xe8>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fffa 	bl	80044c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014da:	f002 ffcb 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 80014de:	6378      	str	r0, [r7, #52]	; 0x34
 80014e0:	e004      	b.n	80014ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014e2:	f002 ffc7 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 80014e6:	4603      	mov	r3, r0
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	4a24      	ldr	r2, [pc, #144]	; (8001580 <HAL_InitTick+0xec>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	3b01      	subs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_InitTick+0xf0>)
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_InitTick+0xf0>)
 8001504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001508:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_InitTick+0xf0>)
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_InitTick+0xf0>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_InitTick+0xf0>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_InitTick+0xf0>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001522:	4818      	ldr	r0, [pc, #96]	; (8001584 <HAL_InitTick+0xf0>)
 8001524:	f003 f800 	bl	8004528 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800152e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11b      	bne.n	800156e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <HAL_InitTick+0xf0>)
 8001538:	f003 f8ae 	bl	8004698 <HAL_TIM_Base_Start_IT>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001546:	2b00      	cmp	r3, #0
 8001548:	d111      	bne.n	800156e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800154a:	201c      	movs	r0, #28
 800154c:	f000 fa1c 	bl	8001988 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	d808      	bhi.n	8001568 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001556:	2200      	movs	r2, #0
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	201c      	movs	r0, #28
 800155c:	f000 f9f8 	bl	8001950 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001560:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_InitTick+0xf4>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e002      	b.n	800156e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800156e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001572:	4618      	mov	r0, r3
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	431bde83 	.word	0x431bde83
 8001584:	20000d94 	.word	0x20000d94
 8001588:	2000008c 	.word	0x2000008c

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA1_Stream1_IRQHandler+0x10>)
 80015be:	f000 fb89 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000794 	.word	0x20000794

080015cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <DMA1_Stream2_IRQHandler+0x10>)
 80015d2:	f000 fb7f 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000648 	.word	0x20000648

080015e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA1_Stream4_IRQHandler+0x10>)
 80015e6:	f000 fb75 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200007f4 	.word	0x200007f4

080015f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM2_IRQHandler+0x10>)
 80015fa:	f003 f8bd 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000d94 	.word	0x20000d94

08001608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART3_IRQHandler+0x10>)
 800160e:	f003 fd71 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000750 	.word	0x20000750

0800161c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA1_Stream7_IRQHandler+0x10>)
 8001622:	f000 fb57 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200006a8 	.word	0x200006a8

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f006 fba4 	bl	8007dac <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20030000 	.word	0x20030000
 8001690:	00000400 	.word	0x00000400
 8001694:	20000ddc 	.word	0x20000ddc
 8001698:	20004b48 	.word	0x20004b48

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ea:	f7ff ffd7 	bl	800169c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f006 fb63 	bl	8007db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7fe ff71 	bl	80005d8 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001704:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8001708:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800170c:	20004b48 	.word	0x20004b48

08001710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_Init+0x40>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_Init+0x40>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_Init+0x40>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f8fc 	bl	800193a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff fea6 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fbd2 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000090 	.word	0x20000090
 800177c:	20000de0 	.word	0x20000de0

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000de0 	.word	0x20000de0

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000090 	.word	0x20000090

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <__NVIC_EnableIRQ+0x38>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff4c 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001962:	f7ff ff61 	bl	8001828 <__NVIC_GetPriorityGrouping>
 8001966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	6978      	ldr	r0, [r7, #20]
 800196e:	f7ff ffb1 	bl	80018d4 <NVIC_EncodePriority>
 8001972:	4602      	mov	r2, r0
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff80 	bl	8001880 <__NVIC_SetPriority>
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff54 	bl	8001844 <__NVIC_EnableIRQ>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff fee6 	bl	8001780 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e099      	b.n	8001af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e0:	e00f      	b.n	8001a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e2:	f7ff fecd 	bl	8001780 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d908      	bls.n	8001a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e078      	b.n	8001af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e8      	bne.n	80019e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_DMA_Init+0x158>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0307 	bic.w	r3, r3, #7
 8001a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d117      	bne.n	8001ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb0d 	bl	80020c8 <DMA_CheckFifoParam>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fac4 	bl	800205c <DMA_CalcBaseAndBitshift>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	223f      	movs	r2, #63	; 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f010803f 	.word	0xf010803f

08001b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Start_IT+0x26>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e040      	b.n	8001ba8 <HAL_DMA_Start_IT+0xa8>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d12f      	bne.n	8001b9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fa56 	bl	8002000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	223f      	movs	r2, #63	; 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0216 	orr.w	r2, r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0208 	orr.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bbe:	f7ff fddf 	bl	8001780 <HAL_GetTick>
 8001bc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e052      	b.n	8001c88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0216 	bic.w	r2, r2, #22
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <HAL_DMA_Abort+0x62>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	e013      	b.n	8001c5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c34:	f7ff fda4 	bl	8001780 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d90c      	bls.n	8001c5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e015      	b.n	8001c88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e4      	bne.n	8001c34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	223f      	movs	r2, #63	; 0x3f
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d004      	beq.n	8001cae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00c      	b.n	8001cc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce0:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <HAL_DMA_IRQHandler+0x248>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a8e      	ldr	r2, [pc, #568]	; (8001f20 <HAL_DMA_IRQHandler+0x24c>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2208      	movs	r2, #8
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01a      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d012      	beq.n	8001d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2201      	movs	r2, #1
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2204      	movs	r2, #4
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f043 0204 	orr.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2210      	movs	r2, #16
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d043      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03c      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	2210      	movs	r2, #16
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d018      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d108      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
 8001e02:	e01f      	b.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e016      	b.n	8001e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0208 	bic.w	r2, r2, #8
 8001e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2220      	movs	r2, #32
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 808f 	beq.w	8001f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8087 	beq.w	8001f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d136      	bne.n	8001eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0216 	bic.w	r2, r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_DMA_IRQHandler+0x1da>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	223f      	movs	r2, #63	; 0x3f
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d07e      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
        }
        return;
 8001eea:	e079      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d031      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e02c      	b.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
 8001f1a:	bf00      	nop
 8001f1c:	20000088 	.word	0x20000088
 8001f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e01e      	b.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0210 	bic.w	r2, r2, #16
 8001f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d032      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d022      	beq.n	8001fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d307      	bcc.n	8001fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x2cc>
 8001fba:	e000      	b.n	8001fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	e000      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fe0:	bf00      	nop
    }
  }
}
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800201c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d108      	bne.n	8002040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203e:	e007      	b.n	8002050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b10      	subs	r3, #16
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <DMA_CalcBaseAndBitshift+0x64>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d909      	bls.n	800209e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	; 0x58
 800209c:	e007      	b.n	80020ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	aaaaaaab 	.word	0xaaaaaaab
 80020c4:	080088e0 	.word	0x080088e0

080020c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11f      	bne.n	8002122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d856      	bhi.n	8002196 <DMA_CheckFifoParam+0xce>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x28>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002113 	.word	0x08002113
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002197 	.word	0x08002197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d046      	beq.n	800219a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002110:	e043      	b.n	800219a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211a:	d140      	bne.n	800219e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e03d      	b.n	800219e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	d121      	bne.n	8002170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d837      	bhi.n	80021a2 <DMA_CheckFifoParam+0xda>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x70>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	0800214f 	.word	0x0800214f
 8002140:	08002149 	.word	0x08002149
 8002144:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e030      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d025      	beq.n	80021a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215e:	e022      	b.n	80021a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002168:	d11f      	bne.n	80021aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216e:	e01c      	b.n	80021aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d903      	bls.n	800217e <DMA_CheckFifoParam+0xb6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800217c:	e018      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      break;
 8002182:	e015      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e00b      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 8002196:	bf00      	nop
 8002198:	e00a      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e008      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e006      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e004      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e002      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021aa:	bf00      	nop
 80021ac:	e000      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
    }
  } 
  
  return status; 
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06c      	b.n	80022ac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d106      	bne.n	80021ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2223      	movs	r2, #35	; 0x23
 80021e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe feaf 	bl	8000f48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_ETH_Init+0xf4>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <HAL_ETH_Init+0xf4>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <HAL_ETH_Init+0xf4>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_ETH_Init+0xf8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_ETH_Init+0xf8>)
 800220c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002210:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_ETH_Init+0xf8>)
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_ETH_Init+0xf8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_ETH_Init+0xf8>)
 8002222:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223c:	f7ff faa0 	bl	8001780 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002242:	e011      	b.n	8002268 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002244:	f7ff fa9c 	bl	8001780 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002252:	d909      	bls.n	8002268 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	22e0      	movs	r2, #224	; 0xe0
 8002260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e021      	b.n	80022ac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e4      	bne.n	8002244 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f958 	bl	8002530 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9ff 	bl	8002684 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa55 	bl	8002736 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	461a      	mov	r2, r3
 8002292:	2100      	movs	r1, #0
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9bd 	bl	8002614 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2210      	movs	r2, #16
 80022a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40013800 	.word	0x40013800

080022bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4b51      	ldr	r3, [pc, #324]	; (8002418 <ETH_SetMACConfig+0x15c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7c1b      	ldrb	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <ETH_SetMACConfig+0x28>
 80022de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022e2:	e000      	b.n	80022e6 <ETH_SetMACConfig+0x2a>
 80022e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7c5b      	ldrb	r3, [r3, #17]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <ETH_SetMACConfig+0x38>
 80022ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f2:	e000      	b.n	80022f6 <ETH_SetMACConfig+0x3a>
 80022f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7fdb      	ldrb	r3, [r3, #31]
 8002302:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002304:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800230a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	7f92      	ldrb	r2, [r2, #30]
 8002310:	2a00      	cmp	r2, #0
 8002312:	d102      	bne.n	800231a <ETH_SetMACConfig+0x5e>
 8002314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002318:	e000      	b.n	800231c <ETH_SetMACConfig+0x60>
 800231a:	2200      	movs	r2, #0
                        macconf->Speed |
 800231c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7f1b      	ldrb	r3, [r3, #28]
 8002322:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002324:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800232a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	f892 2020 	ldrb.w	r2, [r2, #32]
 800233a:	2a00      	cmp	r2, #0
 800233c:	d102      	bne.n	8002344 <ETH_SetMACConfig+0x88>
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	e000      	b.n	8002346 <ETH_SetMACConfig+0x8a>
 8002344:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002346:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	7bdb      	ldrb	r3, [r3, #15]
 800234c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800234e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002354:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800235c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800235e:	4313      	orrs	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff fa0e 	bl	8001798 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023a2:	2a00      	cmp	r2, #0
 80023a4:	d101      	bne.n	80023aa <ETH_SetMACConfig+0xee>
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	e000      	b.n	80023ac <ETH_SetMACConfig+0xf0>
 80023aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023ba:	2a01      	cmp	r2, #1
 80023bc:	d101      	bne.n	80023c2 <ETH_SetMACConfig+0x106>
 80023be:	2208      	movs	r2, #8
 80023c0:	e000      	b.n	80023c4 <ETH_SetMACConfig+0x108>
 80023c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023cc:	2a01      	cmp	r2, #1
 80023ce:	d101      	bne.n	80023d4 <ETH_SetMACConfig+0x118>
 80023d0:	2204      	movs	r2, #4
 80023d2:	e000      	b.n	80023d6 <ETH_SetMACConfig+0x11a>
 80023d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023de:	2a01      	cmp	r2, #1
 80023e0:	d101      	bne.n	80023e6 <ETH_SetMACConfig+0x12a>
 80023e2:	2202      	movs	r2, #2
 80023e4:	e000      	b.n	80023e8 <ETH_SetMACConfig+0x12c>
 80023e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023e8:	4313      	orrs	r3, r2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff f9c9 	bl	8001798 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	ff20810f 	.word	0xff20810f

0800241c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <ETH_SetDMAConfig+0x110>)
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7b1b      	ldrb	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <ETH_SetDMAConfig+0x2c>
 8002442:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002446:	e000      	b.n	800244a <ETH_SetDMAConfig+0x2e>
 8002448:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7b5b      	ldrb	r3, [r3, #13]
 800244e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002450:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	7f52      	ldrb	r2, [r2, #29]
 8002456:	2a00      	cmp	r2, #0
 8002458:	d102      	bne.n	8002460 <ETH_SetDMAConfig+0x44>
 800245a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800245e:	e000      	b.n	8002462 <ETH_SetDMAConfig+0x46>
 8002460:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002462:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	7b9b      	ldrb	r3, [r3, #14]
 8002468:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800246a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002470:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	7f1b      	ldrb	r3, [r3, #28]
 8002476:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002478:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7f9b      	ldrb	r3, [r3, #30]
 800247e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002480:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002486:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002490:	4313      	orrs	r3, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff f970 	bl	8001798 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	461a      	mov	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	791b      	ldrb	r3, [r3, #4]
 80024ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002502:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff f941 	bl	8001798 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f8de3f23 	.word	0xf8de3f23

08002530 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b0a6      	sub	sp, #152	; 0x98
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002544:	2300      	movs	r3, #0
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800256c:	2300      	movs	r3, #0
 800256e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002576:	2300      	movs	r3, #0
 8002578:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fe86 	bl	80022bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025be:	2301      	movs	r3, #1
 80025c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025dc:	2301      	movs	r3, #1
 80025de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff08 	bl	800241c <ETH_SetDMAConfig>
}
 800260c:	bf00      	nop
 800260e:	3798      	adds	r7, #152	; 0x98
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3305      	adds	r3, #5
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	3204      	adds	r2, #4
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <ETH_MACAddressConfig+0x68>)
 8002636:	4413      	add	r3, r2
 8002638:	461a      	mov	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3303      	adds	r3, #3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	061a      	lsls	r2, r3, #24
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3302      	adds	r3, #2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3301      	adds	r3, #1
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	4313      	orrs	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <ETH_MACAddressConfig+0x6c>)
 8002666:	4413      	add	r3, r2
 8002668:	461a      	mov	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6013      	str	r3, [r2, #0]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40028040 	.word	0x40028040
 8002680:	40028044 	.word	0x40028044

08002684 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e03e      	b.n	8002710 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68d9      	ldr	r1, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	3206      	adds	r2, #6
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d80c      	bhi.n	80026f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e004      	b.n	80026fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d9bd      	bls.n	8002692 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	611a      	str	r2, [r3, #16]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e046      	b.n	80027d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6919      	ldr	r1, [r3, #16]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002780:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002788:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	3212      	adds	r2, #18
 800279e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d80c      	bhi.n	80027c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	e004      	b.n	80027cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d9b5      	bls.n	8002744 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002802:	60da      	str	r2, [r3, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e177      	b.n	8002b1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8166 	bne.w	8002b16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80c0 	beq.w	8002b16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <HAL_GPIO_Init+0x324>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a65      	ldr	r2, [pc, #404]	; (8002b34 <HAL_GPIO_Init+0x324>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_GPIO_Init+0x324>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a61      	ldr	r2, [pc, #388]	; (8002b38 <HAL_GPIO_Init+0x328>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_GPIO_Init+0x32c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d037      	beq.n	8002a4e <HAL_GPIO_Init+0x23e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_GPIO_Init+0x330>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d031      	beq.n	8002a4a <HAL_GPIO_Init+0x23a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_GPIO_Init+0x334>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02b      	beq.n	8002a46 <HAL_GPIO_Init+0x236>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_GPIO_Init+0x338>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x232>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x33c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x22e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a53      	ldr	r2, [pc, #332]	; (8002b50 <HAL_GPIO_Init+0x340>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x22a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_GPIO_Init+0x344>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <HAL_GPIO_Init+0x348>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x222>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_GPIO_Init+0x34c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x21e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x21a>
 8002a26:	2309      	movs	r3, #9
 8002a28:	e012      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	e010      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	e00e      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a32:	2307      	movs	r3, #7
 8002a34:	e00c      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e00a      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	e008      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a42:	2303      	movs	r3, #3
 8002a44:	e004      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x240>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f002 0203 	and.w	r2, r2, #3
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a60:	4935      	ldr	r1, [pc, #212]	; (8002b38 <HAL_GPIO_Init+0x328>)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a92:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002abc:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_GPIO_Init+0x354>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	f67f ae84 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020800 	.word	0x40020800
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40021400 	.word	0x40021400
 8002b54:	40021800 	.word	0x40021800
 8002b58:	40021c00 	.word	0x40021c00
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40022400 	.word	0x40022400
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	041a      	lsls	r2, r3, #16
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	400b      	ands	r3, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e12b      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fa6c 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c34:	f001 fc1e 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d807      	bhi.n	8002c54 <HAL_I2C_Init+0x84>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_I2C_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e006      	b.n	8002c62 <HAL_I2C_Init+0x92>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_I2C_Init+0x27c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bf94      	ite	ls
 8002c5c:	2301      	movls	r3, #1
 8002c5e:	2300      	movhi	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e7      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <HAL_I2C_Init+0x280>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_I2C_Init+0xd4>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	e009      	b.n	8002cb8 <HAL_I2C_Init+0xe8>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_I2C_Init+0x284>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	495c      	ldr	r1, [pc, #368]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d819      	bhi.n	8002d0c <HAL_I2C_Init+0x13c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e59      	subs	r1, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cec:	400b      	ands	r3, r1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_I2C_Init+0x138>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e59      	subs	r1, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d06:	e051      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e04f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_I2C_Init+0x168>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e012      	b.n	8002d5e <HAL_I2C_Init+0x18e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x196>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e022      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_I2C_Init+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e58      	subs	r0, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	0099      	lsls	r1, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6911      	ldr	r1, [r2, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	001e847f 	.word	0x001e847f
 8002e4c:	003d08ff 	.word	0x003d08ff
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7fe fc85 	bl	8001780 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	f040 8176 	bne.w	8003176 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e8a:	4b95      	ldr	r3, [pc, #596]	; (80030e0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	08db      	lsrs	r3, r3, #3
 8002e90:	4a94      	ldr	r2, [pc, #592]	; (80030e4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a1a      	lsrs	r2, r3, #8
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e14c      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d0db      	beq.n	8002ea4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2C_Mem_Read_DMA+0xa2>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e13e      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2222      	movs	r2, #34	; 0x22
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a62      	ldr	r2, [pc, #392]	; (80030e8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f62:	897a      	ldrh	r2, [r7, #10]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002f68:	893a      	ldrh	r2, [r7, #8]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80cc 	beq.w	800311c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02d      	beq.n	8002fe8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	4a56      	ldr	r2, [pc, #344]	; (80030ec <HAL_I2C_Mem_Read_DMA+0x294>)
 8002f92:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	4a55      	ldr	r2, [pc, #340]	; (80030f0 <HAL_I2C_Mem_Read_DMA+0x298>)
 8002f9a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	2200      	movs	r2, #0
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	f7fe fd95 	bl	8001b00 <HAL_DMA_Start_IT>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8087 	bne.w	80030f4 <HAL_I2C_Mem_Read_DMA+0x29c>
 8002fe6:	e013      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b3      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003010:	88f8      	ldrh	r0, [r7, #6]
 8003012:	893a      	ldrh	r2, [r7, #8]
 8003014:	8979      	ldrh	r1, [r7, #10]
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2323      	movs	r3, #35	; 0x23
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4603      	mov	r3, r0
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8df 	bl	80031e4 <I2C_RequestMemoryRead>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fe2d 	bl	8001c90 <HAL_DMA_Abort_IT>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2200      	movs	r2, #0
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003052:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e081      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b01      	cmp	r3, #1
 800307a:	d108      	bne.n	800308e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e007      	b.n	800309e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800309c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ca:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e049      	b.n	8003172 <HAL_I2C_Mem_Read_DMA+0x31a>
 80030de:	bf00      	nop
 80030e0:	20000088 	.word	0x20000088
 80030e4:	14f8b589 	.word	0x14f8b589
 80030e8:	ffff0000 	.word	0xffff0000
 80030ec:	080033b5 	.word	0x080033b5
 80030f0:	0800355f 	.word	0x0800355f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e02d      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800311c:	88f8      	ldrh	r0, [r7, #6]
 800311e:	893a      	ldrh	r2, [r7, #8]
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2323      	movs	r3, #35	; 0x23
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4603      	mov	r3, r0
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f859 	bl	80031e4 <I2C_RequestMemoryRead>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01d      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	460b      	mov	r3, r1
 80031f8:	813b      	strh	r3, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2200      	movs	r2, #0
 8003226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f9d4 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d103      	bne.n	800324e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0aa      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	4952      	ldr	r1, [pc, #328]	; (80033b0 <I2C_RequestMemoryRead+0x1cc>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa0c 	bl	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e097      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa76 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e076      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e021      	b.n	8003310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa50 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e050      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fa35 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e035      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2200      	movs	r2, #0
 8003354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f93d 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d103      	bne.n	800337c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e013      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003380:	897b      	ldrh	r3, [r7, #10]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	4906      	ldr	r1, [pc, #24]	; (80033b0 <I2C_RequestMemoryRead+0x1cc>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f975 	bl	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00010002 	.word	0x00010002

080033b4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033e6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	2200      	movs	r2, #0
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800340e:	2b21      	cmp	r3, #33	; 0x21
 8003410:	d007      	beq.n	8003422 <I2C_DMAXferCplt+0x6e>
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003418:	2b22      	cmp	r3, #34	; 0x22
 800341a:	d131      	bne.n	8003480 <I2C_DMAXferCplt+0xcc>
 800341c:	7cbb      	ldrb	r3, [r7, #18]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d12e      	bne.n	8003480 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b29      	cmp	r3, #41	; 0x29
 800343c:	d10a      	bne.n	8003454 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2221      	movs	r2, #33	; 0x21
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2228      	movs	r2, #40	; 0x28
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f7ff fea1 	bl	8003194 <HAL_I2C_SlaveTxCpltCallback>
 8003452:	e00c      	b.n	800346e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b2a      	cmp	r3, #42	; 0x2a
 8003458:	d109      	bne.n	800346e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2222      	movs	r2, #34	; 0x22
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2228      	movs	r2, #40	; 0x28
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003468:	6978      	ldr	r0, [r7, #20]
 800346a:	f7ff fe9d 	bl	80031a8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800347c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800347e:	e06a      	b.n	8003556 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d064      	beq.n	8003556 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034bc:	d009      	beq.n	80034d2 <I2C_DMAXferCplt+0x11e>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d006      	beq.n	80034d2 <I2C_DMAXferCplt+0x11e>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034ca:	d002      	beq.n	80034d2 <I2C_DMAXferCplt+0x11e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d107      	bne.n	80034e2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003500:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff fe5d 	bl	80031d0 <HAL_I2C_ErrorCallback>
}
 8003516:	e01e      	b.n	8003556 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d10a      	bne.n	8003542 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff fe3e 	bl	80031bc <HAL_I2C_MemRxCpltCallback>
}
 8003540:	e009      	b.n	8003556 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2212      	movs	r2, #18
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003550:	6978      	ldr	r0, [r7, #20]
 8003552:	f7ff fe15 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	2200      	movs	r2, #0
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	2200      	movs	r2, #0
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fe fd2b 	bl	8001fe8 <HAL_DMA_GetError>
 8003592:	4603      	mov	r3, r0
 8003594:	2b02      	cmp	r3, #2
 8003596:	d01b      	beq.n	80035d0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0210 	orr.w	r2, r3, #16
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff fe00 	bl	80031d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	e025      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d021      	beq.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe f8c5 	bl	8001780 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e023      	b.n	800367e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10d      	bne.n	800365c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	e00c      	b.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	429a      	cmp	r2, r3
 800367a:	d0b6      	beq.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003694:	e051      	b.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d123      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e046      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d021      	beq.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe f843 	bl	8001780 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e020      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e00b      	b.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d18d      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003790:	e02d      	b.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f837 	bl	8003806 <I2C_IsAcknowledgeFailed>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e02d      	b.n	80037fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d021      	beq.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7fd ffe9 	bl	8001780 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e007      	b.n	80037fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d1ca      	bne.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d11b      	bne.n	8003856 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003826:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	d129      	bne.n	80038ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2224      	movs	r2, #36	; 0x24
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d12a      	bne.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	f023 030f 	bic.w	r3, r3, #15
 800391c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b29a      	uxth	r2, r3
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	4313      	orrs	r3, r2
 8003926:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	89fa      	ldrh	r2, [r7, #14]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800395a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395c:	b08f      	sub	sp, #60	; 0x3c
 800395e:	af0a      	add	r7, sp, #40	; 0x28
 8003960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e10f      	b.n	8003b8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fd2a 	bl	80013e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2203      	movs	r2, #3
 8003990:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 fce3 	bl	8006376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	687e      	ldr	r6, [r7, #4]
 80039b8:	466d      	mov	r5, sp
 80039ba:	f106 0410 	add.w	r4, r6, #16
 80039be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ce:	1d33      	adds	r3, r6, #4
 80039d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039d2:	6838      	ldr	r0, [r7, #0]
 80039d4:	f002 fc6e 	bl	80062b4 <USB_CoreInit>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0d0      	b.n	8003b8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fcd1 	bl	8006398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e04a      	b.n	8003a92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333d      	adds	r3, #61	; 0x3d
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333c      	adds	r3, #60	; 0x3c
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	b298      	uxth	r0, r3
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3344      	adds	r3, #68	; 0x44
 8003a38:	4602      	mov	r2, r0
 8003a3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3340      	adds	r3, #64	; 0x40
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3348      	adds	r3, #72	; 0x48
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334c      	adds	r3, #76	; 0x4c
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d3af      	bcc.n	80039fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e044      	b.n	8003b2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d3b5      	bcc.n	8003aa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	687e      	ldr	r6, [r7, #4]
 8003b3e:	466d      	mov	r5, sp
 8003b40:	f106 0410 	add.w	r4, r6, #16
 8003b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b54:	1d33      	adds	r3, r6, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f002 fc69 	bl	8006430 <USB_DevInit>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00d      	b.n	8003b8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fe34 	bl	80067f2 <USB_DevDisconnect>

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e267      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e242      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6f      	ldr	r2, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6c      	ldr	r2, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fd98 	bl	8001780 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fd94 	bl	8001780 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e207      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fd84 	bl	8001780 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fd80 	bl	8001780 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1f3      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1c7      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fd39 	bl	8001780 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fd35 	bl	8001780 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1a8      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fd18 	bl	8001780 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fd14 	bl	8001780 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e187      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fcf8 	bl	8001780 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fcf4 	bl	8001780 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e167      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e01b      	b.n	8003dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd fce1 	bl	8001780 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fcdd 	bl	8001780 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d907      	bls.n	8003de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e150      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	42470000 	.word	0x42470000
 8003ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ea      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b77      	ldr	r3, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b74      	ldr	r3, [pc, #464]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a73      	ldr	r2, [pc, #460]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fc9d 	bl	8001780 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fc99 	bl	8001780 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e10c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2ea>
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a63      	ldr	r2, [pc, #396]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x30c>
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a5e      	ldr	r2, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a5b      	ldr	r2, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fc5e 	bl	8001780 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fc5a 	bl	8001780 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0cb      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	4b49      	ldr	r3, [pc, #292]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x334>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eec:	f7fd fc48 	bl	8001780 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fc44 	bl	8001780 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0b5      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a38      	ldr	r2, [pc, #224]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a1 	beq.w	8004074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f32:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d05c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d141      	bne.n	8003fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fc18 	bl	8001780 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fc14 	bl	8001780 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e087      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	491b      	ldr	r1, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fbed 	bl	8001780 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fbe9 	bl	8001780 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e05c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x416>
 8003fc8:	e054      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fbd6 	bl	8001780 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fbd2 	bl	8001780 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e045      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
 8003ff6:	e03d      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e038      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8004004:	40023800 	.word	0x40023800
 8004008:	40007000 	.word	0x40007000
 800400c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d028      	beq.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d121      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d11a      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fd fb04 	bl	8001780 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fb00 	bl	8001780 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f821 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd f932 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	080088c8 	.word	0x080088c8
 8004248:	20000088 	.word	0x20000088
 800424c:	2000008c 	.word	0x2000008c

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b094      	sub	sp, #80	; 0x50
 8004256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	647b      	str	r3, [r7, #68]	; 0x44
 800425c:	2300      	movs	r3, #0
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	2300      	movs	r3, #0
 8004262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4b79      	ldr	r3, [pc, #484]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d00d      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f200 80e1 	bhi.w	800443c <HAL_RCC_GetSysClockFreq+0x1ec>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x3a>
 8004282:	e0db      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_GetSysClockFreq+0x204>)
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004288:	e0db      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b73      	ldr	r3, [pc, #460]	; (8004458 <HAL_RCC_GetSysClockFreq+0x208>)
 800428c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428e:	e0d8      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b6d      	ldr	r3, [pc, #436]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d063      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	2300      	movs	r3, #0
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	0159      	lsls	r1, r3, #5
 80042d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d4:	0150      	lsls	r0, r2, #5
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4621      	mov	r1, r4
 80042dc:	1a51      	subs	r1, r2, r1
 80042de:	6139      	str	r1, [r7, #16]
 80042e0:	4629      	mov	r1, r5
 80042e2:	eb63 0301 	sbc.w	r3, r3, r1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f4:	4659      	mov	r1, fp
 80042f6:	018b      	lsls	r3, r1, #6
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fe:	4651      	mov	r1, sl
 8004300:	018a      	lsls	r2, r1, #6
 8004302:	4651      	mov	r1, sl
 8004304:	ebb2 0801 	subs.w	r8, r2, r1
 8004308:	4659      	mov	r1, fp
 800430a:	eb63 0901 	sbc.w	r9, r3, r1
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004322:	4690      	mov	r8, r2
 8004324:	4699      	mov	r9, r3
 8004326:	4623      	mov	r3, r4
 8004328:	eb18 0303 	adds.w	r3, r8, r3
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	462b      	mov	r3, r5
 8004330:	eb49 0303 	adc.w	r3, r9, r3
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004342:	4629      	mov	r1, r5
 8004344:	024b      	lsls	r3, r1, #9
 8004346:	4621      	mov	r1, r4
 8004348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800434c:	4621      	mov	r1, r4
 800434e:	024a      	lsls	r2, r1, #9
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
 800435a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800435c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004360:	f7fb ff9e 	bl	80002a0 <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4613      	mov	r3, r2
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	e058      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	099b      	lsrs	r3, r3, #6
 8004374:	2200      	movs	r2, #0
 8004376:	4618      	mov	r0, r3
 8004378:	4611      	mov	r1, r2
 800437a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0159      	lsls	r1, r3, #5
 8004396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439a:	0150      	lsls	r0, r2, #5
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4641      	mov	r1, r8
 80043a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a6:	4649      	mov	r1, r9
 80043a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043c0:	ebb2 040a 	subs.w	r4, r2, sl
 80043c4:	eb63 050b 	sbc.w	r5, r3, fp
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	00eb      	lsls	r3, r5, #3
 80043d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d6:	00e2      	lsls	r2, r4, #3
 80043d8:	4614      	mov	r4, r2
 80043da:	461d      	mov	r5, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	18e3      	adds	r3, r4, r3
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	464b      	mov	r3, r9
 80043e4:	eb45 0303 	adc.w	r3, r5, r3
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f6:	4629      	mov	r1, r5
 80043f8:	028b      	lsls	r3, r1, #10
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004400:	4621      	mov	r1, r4
 8004402:	028a      	lsls	r2, r1, #10
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440a:	2200      	movs	r2, #0
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	61fa      	str	r2, [r7, #28]
 8004410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004414:	f7fb ff44 	bl	80002a0 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_GetSysClockFreq+0x200>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetSysClockFreq+0x204>)
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004444:	4618      	mov	r0, r3
 8004446:	3750      	adds	r7, #80	; 0x50
 8004448:	46bd      	mov	sp, r7
 800444a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	00f42400 	.word	0x00f42400
 8004458:	007a1200 	.word	0x007a1200

0800445c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000088 	.word	0x20000088

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	080088d8 	.word	0x080088d8

0800449c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a0:	f7ff ffdc 	bl	800445c <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0b5b      	lsrs	r3, r3, #13
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	080088d8 	.word	0x080088d8

080044c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	220f      	movs	r2, #15
 80044d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_RCC_GetClockConfig+0x5c>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_RCC_GetClockConfig+0x5c>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_RCC_GetClockConfig+0x5c>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_RCC_GetClockConfig+0x5c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCC_GetClockConfig+0x60>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	40023c00 	.word	0x40023c00

08004528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fe6c 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fafe 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d001      	beq.n	80045e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e046      	b.n	800466e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a23      	ldr	r2, [pc, #140]	; (800467c <HAL_TIM_Base_Start+0xb4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d022      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d01d      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_TIM_Base_Start+0xb8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_TIM_Base_Start+0xbc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_TIM_Base_Start+0xc0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <HAL_TIM_Base_Start+0xc4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_TIM_Base_Start+0xc8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_TIM_Base_Start+0x70>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_TIM_Base_Start+0xcc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d111      	bne.n	800465c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b06      	cmp	r3, #6
 8004648:	d010      	beq.n	800466c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	e007      	b.n	800466c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e04e      	b.n	800474e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a23      	ldr	r2, [pc, #140]	; (800475c <HAL_TIM_Base_Start_IT+0xc4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d01d      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_TIM_Base_Start_IT+0xc8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_TIM_Base_Start_IT+0xcc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_TIM_Base_Start_IT+0xd0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_TIM_Base_Start_IT+0xd4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_TIM_Base_Start_IT+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x80>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_TIM_Base_Start_IT+0xdc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d111      	bne.n	800473c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d010      	beq.n	800474c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473a:	e007      	b.n	800474c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40010400 	.word	0x40010400
 8004770:	40014000 	.word	0x40014000
 8004774:	40001800 	.word	0x40001800

08004778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0202 	mvn.w	r2, #2
 80047a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9b5 	bl	8004b2a <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9a7 	bl	8004b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9b8 	bl	8004b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0204 	mvn.w	r2, #4
 80047f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f98b 	bl	8004b2a <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f97d 	bl	8004b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f98e 	bl	8004b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0208 	mvn.w	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f961 	bl	8004b2a <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f953 	bl	8004b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f964 	bl	8004b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0210 	mvn.w	r2, #16
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2208      	movs	r2, #8
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f937 	bl	8004b2a <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f929 	bl	8004b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f93a 	bl	8004b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10e      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0201 	mvn.w	r2, #1
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fae6 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d107      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fae0 	bl	8004ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8ff 	bl	8004b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0220 	mvn.w	r2, #32
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 faaa 	bl	8004ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_TIM_ConfigClockSource+0x1c>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0b4      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x186>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049dc:	d03e      	beq.n	8004a5c <HAL_TIM_ConfigClockSource+0xd4>
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e2:	f200 8087 	bhi.w	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	f000 8086 	beq.w	8004afa <HAL_TIM_ConfigClockSource+0x172>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d87f      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b70      	cmp	r3, #112	; 0x70
 80049f6:	d01a      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0xa6>
 80049f8:	2b70      	cmp	r3, #112	; 0x70
 80049fa:	d87b      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b60      	cmp	r3, #96	; 0x60
 80049fe:	d050      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a00:	2b60      	cmp	r3, #96	; 0x60
 8004a02:	d877      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b50      	cmp	r3, #80	; 0x50
 8004a06:	d03c      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0xfa>
 8004a08:	2b50      	cmp	r3, #80	; 0x50
 8004a0a:	d873      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d058      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d86f      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b30      	cmp	r3, #48	; 0x30
 8004a16:	d064      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	2b30      	cmp	r3, #48	; 0x30
 8004a1a:	d86b      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d060      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d867      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d05c      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d05a      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	e062      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6899      	ldr	r1, [r3, #8]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f000 f9ad 	bl	8004d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
      break;
 8004a5a:	e04f      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f000 f996 	bl	8004d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a7e:	609a      	str	r2, [r3, #8]
      break;
 8004a80:	e03c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 f90a 	bl	8004ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2150      	movs	r1, #80	; 0x50
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f963 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e02c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 f929 	bl	8004d06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2160      	movs	r1, #96	; 0x60
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f953 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e01c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 f8ea 	bl	8004ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2140      	movs	r1, #64	; 0x40
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f943 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e00c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f000 f93a 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004af2:	e003      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e000      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a40      	ldr	r2, [pc, #256]	; (8004c7c <TIM_Base_SetConfig+0x114>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3d      	ldr	r2, [pc, #244]	; (8004c80 <TIM_Base_SetConfig+0x118>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3c      	ldr	r2, [pc, #240]	; (8004c84 <TIM_Base_SetConfig+0x11c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3b      	ldr	r2, [pc, #236]	; (8004c88 <TIM_Base_SetConfig+0x120>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3a      	ldr	r2, [pc, #232]	; (8004c8c <TIM_Base_SetConfig+0x124>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <TIM_Base_SetConfig+0x114>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d027      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <TIM_Base_SetConfig+0x118>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d023      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <TIM_Base_SetConfig+0x11c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01f      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <TIM_Base_SetConfig+0x120>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <TIM_Base_SetConfig+0x124>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d017      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <TIM_Base_SetConfig+0x128>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <TIM_Base_SetConfig+0x12c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <TIM_Base_SetConfig+0x130>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <TIM_Base_SetConfig+0x134>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <TIM_Base_SetConfig+0x138>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <TIM_Base_SetConfig+0x13c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <TIM_Base_SetConfig+0x114>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0xf8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <TIM_Base_SetConfig+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40001800 	.word	0x40001800
 8004ca0:	40001c00 	.word	0x40001c00
 8004ca4:	40002000 	.word	0x40002000

08004ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 030a 	bic.w	r3, r3, #10
 8004ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b087      	sub	sp, #28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0210 	bic.w	r2, r3, #16
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e05a      	b.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d01d      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10c      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40001800 	.word	0x40001800

08004ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e03f      	b.n	8004f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f9a4 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 ff43 	bl	8005dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d165      	bne.n	800507e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_UART_Transmit_DMA+0x26>
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e05e      	b.n	8005080 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_UART_Transmit_DMA+0x38>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e057      	b.n	8005080 <HAL_UART_Transmit_DMA+0xe8>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	88fa      	ldrh	r2, [r7, #6]
 8004fe2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2221      	movs	r2, #33	; 0x21
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_UART_Transmit_DMA+0xf0>)
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_UART_Transmit_DMA+0xf4>)
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	4a20      	ldr	r2, [pc, #128]	; (8005090 <HAL_UART_Transmit_DMA+0xf8>)
 800500e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2200      	movs	r2, #0
 8005016:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	461a      	mov	r2, r3
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	f7fc fd66 	bl	8001b00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3314      	adds	r3, #20
 800504c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	617b      	str	r3, [r7, #20]
   return(result);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005066:	627a      	str	r2, [r7, #36]	; 0x24
 8005068:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	61fb      	str	r3, [r7, #28]
   return(result);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	; 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08005665 	.word	0x08005665
 800508c:	080056ff 	.word	0x080056ff
 8005090:	08005877 	.word	0x08005877

08005094 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d11d      	bne.n	80050ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_Receive_DMA+0x26>
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e016      	b.n	80050ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_UART_Receive_DMA+0x38>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e00f      	b.n	80050ec <HAL_UART_Receive_DMA+0x58>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	461a      	mov	r2, r3
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fc13 	bl	800590c <UART_Start_Receive_DMA>
 80050e6:	4603      	mov	r3, r0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b0ba      	sub	sp, #232	; 0xe8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_UART_IRQHandler+0x66>
 8005146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fd7f 	bl	8005c56 <UART_Receive_IT>
      return;
 8005158:	e256      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800515a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80de 	beq.w	8005320 <HAL_UART_IRQHandler+0x22c>
 8005164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80d1 	beq.w	8005320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_UART_IRQHandler+0xae>
 800518a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0201 	orr.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_UART_IRQHandler+0xd2>
 80051ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0202 	orr.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_UART_IRQHandler+0xf6>
 80051d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d011      	beq.n	800521a <HAL_UART_IRQHandler+0x126>
 80051f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0208 	orr.w	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 81ed 	beq.w	80055fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_UART_IRQHandler+0x14e>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fd0a 	bl	8005c56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_UART_IRQHandler+0x17a>
 8005266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04f      	beq.n	800530e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fc12 	bl	8005a98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d141      	bne.n	8005306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800529c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1d9      	bne.n	8005282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d013      	beq.n	80052fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	4a7d      	ldr	r2, [pc, #500]	; (80054d0 <HAL_UART_IRQHandler+0x3dc>)
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fcd4 	bl	8001c90 <HAL_DMA_Abort_IT>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	e00e      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f99a 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e00a      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f996 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e006      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f992 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800531a:	e170      	b.n	80055fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	bf00      	nop
    return;
 800531e:	e16e      	b.n	80055fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 814a 	bne.w	80055be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8143 	beq.w	80055be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 813c 	beq.w	80055be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	f040 80b4 	bne.w	80054d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8140 	beq.w	8005602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800538a:	429a      	cmp	r2, r3
 800538c:	f080 8139 	bcs.w	8005602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	f000 8088 	beq.w	80054b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1d9      	bne.n	80053a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800541a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800541e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e1      	bne.n	80053f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800543e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005498:	65ba      	str	r2, [r7, #88]	; 0x58
 800549a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800549e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fc fb7d 	bl	8001bb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8c0 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054cc:	e099      	b.n	8005602 <HAL_UART_IRQHandler+0x50e>
 80054ce:	bf00      	nop
 80054d0:	08005b5f 	.word	0x08005b5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 808b 	beq.w	8005606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8086 	beq.w	8005606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800551e:	647a      	str	r2, [r7, #68]	; 0x44
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e3      	bne.n	80054fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	623b      	str	r3, [r7, #32]
   return(result);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3314      	adds	r3, #20
 8005552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005556:	633a      	str	r2, [r7, #48]	; 0x30
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e3      	bne.n	8005578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f848 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055bc:	e023      	b.n	8005606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_UART_IRQHandler+0x4ea>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fad5 	bl	8005b86 <UART_Transmit_IT>
    return;
 80055dc:	e014      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <HAL_UART_IRQHandler+0x514>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb15 	bl	8005c26 <UART_EndTransmit_IT>
    return;
 80055fc:	e004      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
    return;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
      return;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
      return;
 8005606:	bf00      	nop
  }
}
 8005608:	37e8      	adds	r7, #232	; 0xe8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop

08005610 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b090      	sub	sp, #64	; 0x40
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d137      	bne.n	80056f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	2200      	movs	r2, #0
 8005684:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	623b      	str	r3, [r7, #32]
   return(result);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a6:	633a      	str	r2, [r7, #48]	; 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056da:	61fa      	str	r2, [r7, #28]
 80056dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69b9      	ldr	r1, [r7, #24]
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	617b      	str	r3, [r7, #20]
   return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056ee:	e002      	b.n	80056f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80056f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056f2:	f7fb fb73 	bl	8000ddc <HAL_UART_TxCpltCallback>
}
 80056f6:	bf00      	nop
 80056f8:	3740      	adds	r7, #64	; 0x40
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff ff7f 	bl	8005610 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b09c      	sub	sp, #112	; 0x70
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d172      	bne.n	800581c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	2200      	movs	r2, #0
 800573a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005752:	66bb      	str	r3, [r7, #104]	; 0x68
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800575c:	65ba      	str	r2, [r7, #88]	; 0x58
 800575e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	667b      	str	r3, [r7, #100]	; 0x64
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005790:	647a      	str	r2, [r7, #68]	; 0x44
 8005792:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3314      	adds	r3, #20
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	623b      	str	r3, [r7, #32]
   return(result);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	663b      	str	r3, [r7, #96]	; 0x60
 80057bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c4:	633a      	str	r2, [r7, #48]	; 0x30
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d119      	bne.n	800581c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0310 	bic.w	r3, r3, #16
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	617b      	str	r3, [r7, #20]
   return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	2b01      	cmp	r3, #1
 8005822:	d106      	bne.n	8005832 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005828:	4619      	mov	r1, r3
 800582a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800582c:	f7ff ff0e 	bl	800564c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005830:	e002      	b.n	8005838 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005832:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005834:	f7fb faaa 	bl	8000d8c <HAL_UART_RxCpltCallback>
}
 8005838:	bf00      	nop
 800583a:	3770      	adds	r7, #112	; 0x70
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	2b01      	cmp	r3, #1
 8005854:	d108      	bne.n	8005868 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	b29b      	uxth	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fef3 	bl	800564c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005866:	e002      	b.n	800586e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff fedb 	bl	8005624 <HAL_UART_RxHalfCpltCallback>
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	bf0c      	ite	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	2300      	movne	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b21      	cmp	r3, #33	; 0x21
 80058a8:	d108      	bne.n	80058bc <UART_DMAError+0x46>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058b6:	68b8      	ldr	r0, [r7, #8]
 80058b8:	f000 f8c6 	bl	8005a48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b22      	cmp	r3, #34	; 0x22
 80058dc:	d108      	bne.n	80058f0 <UART_DMAError+0x7a>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058ea:	68b8      	ldr	r0, [r7, #8]
 80058ec:	f000 f8d4 	bl	8005a98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0210 	orr.w	r2, r3, #16
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058fc:	68b8      	ldr	r0, [r7, #8]
 80058fe:	f7ff fe9b 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b098      	sub	sp, #96	; 0x60
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2222      	movs	r2, #34	; 0x22
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	4a40      	ldr	r2, [pc, #256]	; (8005a3c <UART_Start_Receive_DMA+0x130>)
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	4a3f      	ldr	r2, [pc, #252]	; (8005a40 <UART_Start_Receive_DMA+0x134>)
 8005942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	4a3e      	ldr	r2, [pc, #248]	; (8005a44 <UART_Start_Receive_DMA+0x138>)
 800594a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	2200      	movs	r2, #0
 8005952:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005954:	f107 0308 	add.w	r3, r7, #8
 8005958:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	f7fc f8c8 	bl	8001b00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d019      	beq.n	80059ca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80059b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80059bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	657b      	str	r3, [r7, #84]	; 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3314      	adds	r3, #20
 8005a04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a14:	653b      	str	r3, [r7, #80]	; 0x50
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6a39      	ldr	r1, [r7, #32]
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e5      	bne.n	80059fe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3760      	adds	r7, #96	; 0x60
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	0800571b 	.word	0x0800571b
 8005a40:	08005841 	.word	0x08005841
 8005a44:	08005877 	.word	0x08005877

08005a48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005a8c:	bf00      	nop
 8005a8e:	3724      	adds	r7, #36	; 0x24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b095      	sub	sp, #84	; 0x54
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ac0:	643a      	str	r2, [r7, #64]	; 0x40
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d119      	bne.n	8005b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f023 0310 	bic.w	r3, r3, #16
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b30:	61ba      	str	r2, [r7, #24]
 8005b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b52:	bf00      	nop
 8005b54:	3754      	adds	r7, #84	; 0x54
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fd5d 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b21      	cmp	r3, #33	; 0x21
 8005b98:	d13e      	bne.n	8005c18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d114      	bne.n	8005bce <UART_Transmit_IT+0x48>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d110      	bne.n	8005bce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]
 8005bcc:	e008      	b.n	8005be0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	1c59      	adds	r1, r3, #1
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6211      	str	r1, [r2, #32]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4619      	mov	r1, r3
 8005bee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10f      	bne.n	8005c14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fb f8c8 	bl	8000ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b08c      	sub	sp, #48	; 0x30
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b22      	cmp	r3, #34	; 0x22
 8005c68:	f040 80ab 	bne.w	8005dc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d117      	bne.n	8005ca6 <UART_Receive_IT+0x50>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d113      	bne.n	8005ca6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	1c9a      	adds	r2, r3, #2
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ca4:	e026      	b.n	8005cf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb8:	d007      	beq.n	8005cca <UART_Receive_IT+0x74>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <UART_Receive_IT+0x82>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e008      	b.n	8005cea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4619      	mov	r1, r3
 8005d02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d15a      	bne.n	8005dbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0220 	bic.w	r2, r2, #32
 8005d16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d135      	bne.n	8005db4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	330c      	adds	r3, #12
 8005d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	623a      	str	r2, [r7, #32]
 8005d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	69f9      	ldr	r1, [r7, #28]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e5      	bne.n	8005d4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d10a      	bne.n	8005da6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff fc4d 	bl	800564c <HAL_UARTEx_RxEventCallback>
 8005db2:	e002      	b.n	8005dba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fa ffe9 	bl	8000d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e002      	b.n	8005dc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3730      	adds	r7, #48	; 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd0:	b0c0      	sub	sp, #256	; 0x100
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	68d9      	ldr	r1, [r3, #12]
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	ea40 0301 	orr.w	r3, r0, r1
 8005df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e24:	f021 010c 	bic.w	r1, r1, #12
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e32:	430b      	orrs	r3, r1
 8005e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	6999      	ldr	r1, [r3, #24]
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	ea40 0301 	orr.w	r3, r0, r1
 8005e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b8f      	ldr	r3, [pc, #572]	; (8006098 <UART_SetConfig+0x2cc>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d005      	beq.n	8005e6c <UART_SetConfig+0xa0>
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b8d      	ldr	r3, [pc, #564]	; (800609c <UART_SetConfig+0x2d0>)
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d104      	bne.n	8005e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fe fb16 	bl	800449c <HAL_RCC_GetPCLK2Freq>
 8005e70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e74:	e003      	b.n	8005e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e76:	f7fe fafd 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8005e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	f040 810c 	bne.w	80060a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	1891      	adds	r1, r2, r2
 8005ea4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ea6:	415b      	adcs	r3, r3
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eae:	4621      	mov	r1, r4
 8005eb0:	eb12 0801 	adds.w	r8, r2, r1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	eb43 0901 	adc.w	r9, r3, r1
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ece:	4690      	mov	r8, r2
 8005ed0:	4699      	mov	r9, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	eb18 0303 	adds.w	r3, r8, r3
 8005ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005edc:	462b      	mov	r3, r5
 8005ede:	eb49 0303 	adc.w	r3, r9, r3
 8005ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005efa:	460b      	mov	r3, r1
 8005efc:	18db      	adds	r3, r3, r3
 8005efe:	653b      	str	r3, [r7, #80]	; 0x50
 8005f00:	4613      	mov	r3, r2
 8005f02:	eb42 0303 	adc.w	r3, r2, r3
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
 8005f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f10:	f7fa f9c6 	bl	80002a0 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	011c      	lsls	r4, r3, #4
 8005f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	1891      	adds	r1, r2, r2
 8005f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f44:	4641      	mov	r1, r8
 8005f46:	eb12 0a01 	adds.w	sl, r2, r1
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f64:	4692      	mov	sl, r2
 8005f66:	469b      	mov	fp, r3
 8005f68:	4643      	mov	r3, r8
 8005f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f72:	464b      	mov	r3, r9
 8005f74:	eb4b 0303 	adc.w	r3, fp, r3
 8005f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f90:	460b      	mov	r3, r1
 8005f92:	18db      	adds	r3, r3, r3
 8005f94:	643b      	str	r3, [r7, #64]	; 0x40
 8005f96:	4613      	mov	r3, r2
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fa6:	f7fa f97b 	bl	80002a0 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	2264      	movs	r2, #100	; 0x64
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	1acb      	subs	r3, r1, r3
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fc6:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fd4:	441c      	add	r4, r3
 8005fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	1851      	adds	r1, r2, r1
 8005ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8005ffe:	4649      	mov	r1, r9
 8006000:	414b      	adcs	r3, r1
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006010:	4659      	mov	r1, fp
 8006012:	00cb      	lsls	r3, r1, #3
 8006014:	4651      	mov	r1, sl
 8006016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800601a:	4651      	mov	r1, sl
 800601c:	00ca      	lsls	r2, r1, #3
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	4603      	mov	r3, r0
 8006024:	4642      	mov	r2, r8
 8006026:	189b      	adds	r3, r3, r2
 8006028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800602c:	464b      	mov	r3, r9
 800602e:	460a      	mov	r2, r1
 8006030:	eb42 0303 	adc.w	r3, r2, r3
 8006034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800604c:	460b      	mov	r3, r1
 800604e:	18db      	adds	r3, r3, r3
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	4613      	mov	r3, r2
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006062:	f7fa f91d 	bl	80002a0 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <UART_SetConfig+0x2d4>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <UART_SetConfig+0x2d4>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0207 	and.w	r2, r3, #7
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4422      	add	r2, r4
 8006092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006094:	e105      	b.n	80062a2 <UART_SetConfig+0x4d6>
 8006096:	bf00      	nop
 8006098:	40011000 	.word	0x40011000
 800609c:	40011400 	.word	0x40011400
 80060a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060b6:	4642      	mov	r2, r8
 80060b8:	464b      	mov	r3, r9
 80060ba:	1891      	adds	r1, r2, r2
 80060bc:	6239      	str	r1, [r7, #32]
 80060be:	415b      	adcs	r3, r3
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060c6:	4641      	mov	r1, r8
 80060c8:	1854      	adds	r4, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb43 0501 	adc.w	r5, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	00eb      	lsls	r3, r5, #3
 80060da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060de:	00e2      	lsls	r2, r4, #3
 80060e0:	4614      	mov	r4, r2
 80060e2:	461d      	mov	r5, r3
 80060e4:	4643      	mov	r3, r8
 80060e6:	18e3      	adds	r3, r4, r3
 80060e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ec:	464b      	mov	r3, r9
 80060ee:	eb45 0303 	adc.w	r3, r5, r3
 80060f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006112:	4629      	mov	r1, r5
 8006114:	008b      	lsls	r3, r1, #2
 8006116:	4621      	mov	r1, r4
 8006118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611c:	4621      	mov	r1, r4
 800611e:	008a      	lsls	r2, r1, #2
 8006120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006124:	f7fa f8bc 	bl	80002a0 <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4b60      	ldr	r3, [pc, #384]	; (80062b0 <UART_SetConfig+0x4e4>)
 800612e:	fba3 2302 	umull	r2, r3, r3, r2
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	011c      	lsls	r4, r3, #4
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613a:	2200      	movs	r2, #0
 800613c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	1891      	adds	r1, r2, r2
 800614e:	61b9      	str	r1, [r7, #24]
 8006150:	415b      	adcs	r3, r3
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006158:	4641      	mov	r1, r8
 800615a:	1851      	adds	r1, r2, r1
 800615c:	6139      	str	r1, [r7, #16]
 800615e:	4649      	mov	r1, r9
 8006160:	414b      	adcs	r3, r1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006170:	4659      	mov	r1, fp
 8006172:	00cb      	lsls	r3, r1, #3
 8006174:	4651      	mov	r1, sl
 8006176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800617a:	4651      	mov	r1, sl
 800617c:	00ca      	lsls	r2, r1, #3
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	4603      	mov	r3, r0
 8006184:	4642      	mov	r2, r8
 8006186:	189b      	adds	r3, r3, r2
 8006188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618c:	464b      	mov	r3, r9
 800618e:	460a      	mov	r2, r1
 8006190:	eb42 0303 	adc.w	r3, r2, r3
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061b0:	4649      	mov	r1, r9
 80061b2:	008b      	lsls	r3, r1, #2
 80061b4:	4641      	mov	r1, r8
 80061b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ba:	4641      	mov	r1, r8
 80061bc:	008a      	lsls	r2, r1, #2
 80061be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061c2:	f7fa f86d 	bl	80002a0 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <UART_SetConfig+0x4e4>)
 80061cc:	fba3 1302 	umull	r1, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	2164      	movs	r1, #100	; 0x64
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	3332      	adds	r3, #50	; 0x32
 80061de:	4a34      	ldr	r2, [pc, #208]	; (80062b0 <UART_SetConfig+0x4e4>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ea:	441c      	add	r4, r3
 80061ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f0:	2200      	movs	r2, #0
 80061f2:	673b      	str	r3, [r7, #112]	; 0x70
 80061f4:	677a      	str	r2, [r7, #116]	; 0x74
 80061f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061fa:	4642      	mov	r2, r8
 80061fc:	464b      	mov	r3, r9
 80061fe:	1891      	adds	r1, r2, r2
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	415b      	adcs	r3, r3
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800620a:	4641      	mov	r1, r8
 800620c:	1851      	adds	r1, r2, r1
 800620e:	6039      	str	r1, [r7, #0]
 8006210:	4649      	mov	r1, r9
 8006212:	414b      	adcs	r3, r1
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006222:	4659      	mov	r1, fp
 8006224:	00cb      	lsls	r3, r1, #3
 8006226:	4651      	mov	r1, sl
 8006228:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622c:	4651      	mov	r1, sl
 800622e:	00ca      	lsls	r2, r1, #3
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	4603      	mov	r3, r0
 8006236:	4642      	mov	r2, r8
 8006238:	189b      	adds	r3, r3, r2
 800623a:	66bb      	str	r3, [r7, #104]	; 0x68
 800623c:	464b      	mov	r3, r9
 800623e:	460a      	mov	r2, r1
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	663b      	str	r3, [r7, #96]	; 0x60
 8006250:	667a      	str	r2, [r7, #100]	; 0x64
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800625e:	4649      	mov	r1, r9
 8006260:	008b      	lsls	r3, r1, #2
 8006262:	4641      	mov	r1, r8
 8006264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006268:	4641      	mov	r1, r8
 800626a:	008a      	lsls	r2, r1, #2
 800626c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006270:	f7fa f816 	bl	80002a0 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <UART_SetConfig+0x4e4>)
 800627a:	fba3 1302 	umull	r1, r3, r3, r2
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2164      	movs	r1, #100	; 0x64
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	3332      	adds	r3, #50	; 0x32
 800628c:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <UART_SetConfig+0x4e4>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4422      	add	r2, r4
 80062a0:	609a      	str	r2, [r3, #8]
}
 80062a2:	bf00      	nop
 80062a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ae:	bf00      	nop
 80062b0:	51eb851f 	.word	0x51eb851f

080062b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062b4:	b084      	sub	sp, #16
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	f107 001c 	add.w	r0, r7, #28
 80062c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d122      	bne.n	8006312 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d105      	bne.n	8006306 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 faa2 	bl	8006850 <USB_CoreReset>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]
 8006310:	e01a      	b.n	8006348 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa96 	bl	8006850 <USB_CoreReset>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
 800633a:	e005      	b.n	8006348 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10b      	bne.n	8006366 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f043 0206 	orr.w	r2, r3, #6
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006372:	b004      	add	sp, #16
 8006374:	4770      	bx	lr

08006376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d115      	bne.n	80063e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063c6:	2001      	movs	r0, #1
 80063c8:	f7fb f9e6 	bl	8001798 <HAL_Delay>
      ms++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa2e 	bl	8006834 <USB_GetMode>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d01e      	beq.n	800641c <USB_SetCurrentMode+0x84>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b31      	cmp	r3, #49	; 0x31
 80063e2:	d9f0      	bls.n	80063c6 <USB_SetCurrentMode+0x2e>
 80063e4:	e01a      	b.n	800641c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d115      	bne.n	8006418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063f8:	2001      	movs	r0, #1
 80063fa:	f7fb f9cd 	bl	8001798 <HAL_Delay>
      ms++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa15 	bl	8006834 <USB_GetMode>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <USB_SetCurrentMode+0x84>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b31      	cmp	r3, #49	; 0x31
 8006414:	d9f0      	bls.n	80063f8 <USB_SetCurrentMode+0x60>
 8006416:	e001      	b.n	800641c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e005      	b.n	8006428 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b32      	cmp	r3, #50	; 0x32
 8006420:	d101      	bne.n	8006426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006430:	b084      	sub	sp, #16
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800643e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e009      	b.n	8006464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3340      	adds	r3, #64	; 0x40
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	2200      	movs	r2, #0
 800645c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0e      	cmp	r3, #14
 8006468:	d9f2      	bls.n	8006450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11c      	bne.n	80064aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
 80064a8:	e00b      	b.n	80064c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064c8:	461a      	mov	r2, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	4619      	mov	r1, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	461a      	mov	r2, r3
 80064de:	680b      	ldr	r3, [r1, #0]
 80064e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10c      	bne.n	8006502 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f965 	bl	80067c0 <USB_SetDevSpeed>
 80064f6:	e008      	b.n	800650a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064f8:	2101      	movs	r1, #1
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f960 	bl	80067c0 <USB_SetDevSpeed>
 8006500:	e003      	b.n	800650a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006502:	2103      	movs	r1, #3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f95b 	bl	80067c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800650a:	2110      	movs	r1, #16
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8f3 	bl	80066f8 <USB_FlushTxFifo>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f91f 	bl	8006760 <USB_FlushRxFifo>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	e043      	b.n	80065de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656c:	d118      	bne.n	80065a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	461a      	mov	r2, r3
 8006582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e013      	b.n	80065b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	461a      	mov	r2, r3
 8006598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e008      	b.n	80065b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	461a      	mov	r2, r3
 80065d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3301      	adds	r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3b7      	bcc.n	8006556 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	e043      	b.n	8006674 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006602:	d118      	bne.n	8006636 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e013      	b.n	8006648 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e008      	b.n	8006648 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	2300      	movs	r3, #0
 8006646:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800666c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3b7      	bcc.n	80065ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800668e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800669c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 0210 	orr.w	r2, r3, #16
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <USB_DevInit+0x2c4>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f043 0208 	orr.w	r2, r3, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	f043 0304 	orr.w	r3, r3, #4
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f0:	b004      	add	sp, #16
 80066f2:	4770      	bx	lr
 80066f4:	803c3800 	.word	0x803c3800

080066f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <USB_FlushTxFifo+0x64>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e01b      	b.n	8006750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	daf2      	bge.n	8006706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	019b      	lsls	r3, r3, #6
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a08      	ldr	r2, [pc, #32]	; (800675c <USB_FlushTxFifo+0x64>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e006      	b.n	8006750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d0f0      	beq.n	8006730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	00030d40 	.word	0x00030d40

08006760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <USB_FlushRxFifo+0x5c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e018      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	daf2      	bge.n	800676c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2210      	movs	r2, #16
 800678e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a08      	ldr	r2, [pc, #32]	; (80067bc <USB_FlushRxFifo+0x5c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e006      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d0f0      	beq.n	8006790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	00030d40 	.word	0x00030d40

080067c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e0:	4313      	orrs	r3, r2
 80067e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0301 	and.w	r3, r3, #1
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <USB_CoreReset+0x64>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e01b      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	daf2      	bge.n	800685c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <USB_CoreReset+0x64>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d0f0      	beq.n	8006886 <USB_CoreReset+0x36>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	00030d40 	.word	0x00030d40

080068b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80068c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ca:	2b84      	cmp	r3, #132	; 0x84
 80068cc:	d005      	beq.n	80068da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80068ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	3303      	adds	r3, #3
 80068d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068ec:	f000 faf6 	bl	8006edc <vTaskStartScheduler>
  
  return osOK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f8:	b089      	sub	sp, #36	; 0x24
 80068fa:	af04      	add	r7, sp, #16
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d020      	beq.n	800694a <osThreadCreate+0x54>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01c      	beq.n	800694a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685c      	ldr	r4, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681d      	ldr	r5, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691e      	ldr	r6, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff ffc8 	bl	80068b8 <makeFreeRtosPriority>
 8006928:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	9100      	str	r1, [sp, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4632      	mov	r2, r6
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f8ed 	bl	8006b1e <xTaskCreateStatic>
 8006944:	4603      	mov	r3, r0
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e01c      	b.n	8006984 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685c      	ldr	r4, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006956:	b29e      	uxth	r6, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff ffaa 	bl	80068b8 <makeFreeRtosPriority>
 8006964:	4602      	mov	r2, r0
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	9200      	str	r2, [sp, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4632      	mov	r2, r6
 8006972:	4629      	mov	r1, r5
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f92f 	bl	8006bd8 <xTaskCreate>
 800697a:	4603      	mov	r3, r0
 800697c:	2b01      	cmp	r3, #1
 800697e:	d001      	beq.n	8006984 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006984:	68fb      	ldr	r3, [r7, #12]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800698e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <osDelay+0x16>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	e000      	b.n	80069a6 <osDelay+0x18>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fa64 	bl	8006e74 <vTaskDelay>
  
  return osOK;
 80069ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f103 0208 	add.w	r2, r3, #8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f103 0208 	add.w	r2, r3, #8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 0208 	add.w	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e00c      	b.n	8006a92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e002      	b.n	8006a86 <vListInsert+0x2e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d2f6      	bcs.n	8006a80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6892      	ldr	r2, [r2, #8]
 8006ae0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6852      	ldr	r2, [r2, #4]
 8006aea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d103      	bne.n	8006afe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	1e5a      	subs	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b08e      	sub	sp, #56	; 0x38
 8006b22:	af04      	add	r7, sp, #16
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
 8006b2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61fb      	str	r3, [r7, #28]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b64:	23b4      	movs	r3, #180	; 0xb4
 8006b66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2bb4      	cmp	r3, #180	; 0xb4
 8006b6c:	d00a      	beq.n	8006b84 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61bb      	str	r3, [r7, #24]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01e      	beq.n	8006bca <xTaskCreateStatic+0xac>
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01b      	beq.n	8006bca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	9302      	str	r3, [sp, #8]
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f851 	bl	8006c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bc4:	f000 f8ec 	bl	8006da0 <prvAddNewTaskToReadyList>
 8006bc8:	e001      	b.n	8006bce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bce:	697b      	ldr	r3, [r7, #20]
	}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3728      	adds	r7, #40	; 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08c      	sub	sp, #48	; 0x30
 8006bdc:	af04      	add	r7, sp, #16
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fef3 	bl	80079d8 <pvPortMalloc>
 8006bf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bfa:	20b4      	movs	r0, #180	; 0xb4
 8006bfc:	f000 feec 	bl	80079d8 <pvPortMalloc>
 8006c00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c0e:	e005      	b.n	8006c1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	f000 ffad 	bl	8007b70 <vPortFree>
 8006c16:	e001      	b.n	8006c1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d017      	beq.n	8006c52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f80f 	bl	8006c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c46:	69f8      	ldr	r0, [r7, #28]
 8006c48:	f000 f8aa 	bl	8006da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e002      	b.n	8006c58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c58:	69bb      	ldr	r3, [r7, #24]
	}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617b      	str	r3, [r7, #20]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	; 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x54>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x84>
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf0:	e003      	b.n	8006cfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2b06      	cmp	r3, #6
 8006cfe:	d901      	bls.n	8006d04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d00:	2306      	movs	r3, #6
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fe6b 	bl	80069f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fe66 	bl	80069f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f1c3 0207 	rsb	r2, r3, #7
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	334c      	adds	r3, #76	; 0x4c
 8006d54:	2260      	movs	r2, #96	; 0x60
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 f861 	bl	8007e20 <memset>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <prvInitialiseNewTask+0x130>)
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	4a0c      	ldr	r2, [pc, #48]	; (8006d98 <prvInitialiseNewTask+0x134>)
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <prvInitialiseNewTask+0x138>)
 8006d6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	69b8      	ldr	r0, [r7, #24]
 8006d76:	f000 fc1f 	bl	80075b8 <pxPortInitialiseStack>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d8c:	bf00      	nop
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	08008908 	.word	0x08008908
 8006d98:	08008928 	.word	0x08008928
 8006d9c:	080088e8 	.word	0x080088e8

08006da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da8:	f000 fd34 	bl	8007814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <prvAddNewTaskToReadyList+0xb8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <prvAddNewTaskToReadyList+0xb8>)
 8006db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <prvAddNewTaskToReadyList+0xbc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dbe:	4a27      	ldr	r2, [pc, #156]	; (8006e5c <prvAddNewTaskToReadyList+0xbc>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dc4:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <prvAddNewTaskToReadyList+0xb8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d110      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dcc:	f000 facc 	bl	8007368 <prvInitialiseTaskLists>
 8006dd0:	e00d      	b.n	8006dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <prvAddNewTaskToReadyList+0xc0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dda:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <prvAddNewTaskToReadyList+0xbc>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d802      	bhi.n	8006dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de8:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <prvAddNewTaskToReadyList+0xbc>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dee:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <prvAddNewTaskToReadyList+0xcc>)
 8006e18:	441a      	add	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7ff fdf5 	bl	8006a10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e26:	f000 fd25 	bl	8007874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <prvAddNewTaskToReadyList+0xc0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <prvAddNewTaskToReadyList+0xbc>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d207      	bcs.n	8006e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000ee4 	.word	0x20000ee4
 8006e5c:	20000de4 	.word	0x20000de4
 8006e60:	20000ef0 	.word	0x20000ef0
 8006e64:	20000f00 	.word	0x20000f00
 8006e68:	20000eec 	.word	0x20000eec
 8006e6c:	20000de8 	.word	0x20000de8
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <vTaskDelay+0x60>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <vTaskDelay+0x30>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ea4:	f000 f884 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb1e 	bl	80074ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eb0:	f000 f88c 	bl	8006fcc <xTaskResumeAll>
 8006eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <vTaskDelay+0x64>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000f0c 	.word	0x20000f0c
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eea:	463a      	mov	r2, r7
 8006eec:	1d39      	adds	r1, r7, #4
 8006eee:	f107 0308 	add.w	r3, r7, #8
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fb56 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	9202      	str	r2, [sp, #8]
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	2300      	movs	r3, #0
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2300      	movs	r3, #0
 8006f08:	460a      	mov	r2, r1
 8006f0a:	4921      	ldr	r1, [pc, #132]	; (8006f90 <vTaskStartScheduler+0xb4>)
 8006f0c:	4821      	ldr	r0, [pc, #132]	; (8006f94 <vTaskStartScheduler+0xb8>)
 8006f0e:	f7ff fe06 	bl	8006b1e <xTaskCreateStatic>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <vTaskStartScheduler+0xbc>)
 8006f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f18:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <vTaskStartScheduler+0xbc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f20:	2301      	movs	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e001      	b.n	8006f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d11b      	bne.n	8006f68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
}
 8006f42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f44:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <vTaskStartScheduler+0xc0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	334c      	adds	r3, #76	; 0x4c
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <vTaskStartScheduler+0xc4>)
 8006f4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <vTaskStartScheduler+0xc8>)
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295
 8006f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <vTaskStartScheduler+0xcc>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <vTaskStartScheduler+0xd0>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f62:	f000 fbb5 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f66:	e00e      	b.n	8006f86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6e:	d10a      	bne.n	8006f86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vTaskStartScheduler+0xa8>
}
 8006f86:	bf00      	nop
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	080088c0 	.word	0x080088c0
 8006f94:	08007339 	.word	0x08007339
 8006f98:	20000f08 	.word	0x20000f08
 8006f9c:	20000de4 	.word	0x20000de4
 8006fa0:	20000098 	.word	0x20000098
 8006fa4:	20000f04 	.word	0x20000f04
 8006fa8:	20000ef0 	.word	0x20000ef0
 8006fac:	20000ee8 	.word	0x20000ee8

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20000f0c 	.word	0x20000f0c

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <xTaskResumeAll+0x114>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	603b      	str	r3, [r7, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff8:	f000 fc0c 	bl	8007814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffc:	4b38      	ldr	r3, [pc, #224]	; (80070e0 <xTaskResumeAll+0x114>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3b01      	subs	r3, #1
 8007002:	4a37      	ldr	r2, [pc, #220]	; (80070e0 <xTaskResumeAll+0x114>)
 8007004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007006:	4b36      	ldr	r3, [pc, #216]	; (80070e0 <xTaskResumeAll+0x114>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d161      	bne.n	80070d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800700e:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <xTaskResumeAll+0x118>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d05d      	beq.n	80070d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007016:	e02e      	b.n	8007076 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <xTaskResumeAll+0x11c>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fd50 	bl	8006aca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fd4b 	bl	8006aca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	409a      	lsls	r2, r3
 800703c:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <xTaskResumeAll+0x120>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <xTaskResumeAll+0x120>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <xTaskResumeAll+0x124>)
 8007054:	441a      	add	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7ff fcd7 	bl	8006a10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <xTaskResumeAll+0x128>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007070:	4b21      	ldr	r3, [pc, #132]	; (80070f8 <xTaskResumeAll+0x12c>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1cc      	bne.n	8007018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007084:	f000 fa12 	bl	80074ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007088:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <xTaskResumeAll+0x130>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007094:	f000 f836 	bl	8007104 <xTaskIncrementTick>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800709e:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <xTaskResumeAll+0x12c>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f1      	bne.n	8007094 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <xTaskResumeAll+0x130>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <xTaskResumeAll+0x12c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <xTaskResumeAll+0x134>)
 80070c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d2:	f000 fbcf 	bl	8007874 <vPortExitCritical>

	return xAlreadyYielded;
 80070d6:	68bb      	ldr	r3, [r7, #8]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000f0c 	.word	0x20000f0c
 80070e4:	20000ee4 	.word	0x20000ee4
 80070e8:	20000ea4 	.word	0x20000ea4
 80070ec:	20000eec 	.word	0x20000eec
 80070f0:	20000de8 	.word	0x20000de8
 80070f4:	20000de4 	.word	0x20000de4
 80070f8:	20000ef8 	.word	0x20000ef8
 80070fc:	20000ef4 	.word	0x20000ef4
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800710e:	4b4e      	ldr	r3, [pc, #312]	; (8007248 <xTaskIncrementTick+0x144>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 808e 	bne.w	8007234 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007118:	4b4c      	ldr	r3, [pc, #304]	; (800724c <xTaskIncrementTick+0x148>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007120:	4a4a      	ldr	r2, [pc, #296]	; (800724c <xTaskIncrementTick+0x148>)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d120      	bne.n	800716e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800712c:	4b48      	ldr	r3, [pc, #288]	; (8007250 <xTaskIncrementTick+0x14c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <xTaskIncrementTick+0x48>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <xTaskIncrementTick+0x46>
 800714c:	4b40      	ldr	r3, [pc, #256]	; (8007250 <xTaskIncrementTick+0x14c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	4b40      	ldr	r3, [pc, #256]	; (8007254 <xTaskIncrementTick+0x150>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3e      	ldr	r2, [pc, #248]	; (8007250 <xTaskIncrementTick+0x14c>)
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4a3e      	ldr	r2, [pc, #248]	; (8007254 <xTaskIncrementTick+0x150>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <xTaskIncrementTick+0x154>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	4a3c      	ldr	r2, [pc, #240]	; (8007258 <xTaskIncrementTick+0x154>)
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	f000 f99f 	bl	80074ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800716e:	4b3b      	ldr	r3, [pc, #236]	; (800725c <xTaskIncrementTick+0x158>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	429a      	cmp	r2, r3
 8007176:	d348      	bcc.n	800720a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007178:	4b35      	ldr	r3, [pc, #212]	; (8007250 <xTaskIncrementTick+0x14c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007182:	4b36      	ldr	r3, [pc, #216]	; (800725c <xTaskIncrementTick+0x158>)
 8007184:	f04f 32ff 	mov.w	r2, #4294967295
 8007188:	601a      	str	r2, [r3, #0]
					break;
 800718a:	e03e      	b.n	800720a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718c:	4b30      	ldr	r3, [pc, #192]	; (8007250 <xTaskIncrementTick+0x14c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d203      	bcs.n	80071ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071a4:	4a2d      	ldr	r2, [pc, #180]	; (800725c <xTaskIncrementTick+0x158>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071aa:	e02e      	b.n	800720a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fc8a 	bl	8006aca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d004      	beq.n	80071c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3318      	adds	r3, #24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fc81 	bl	8006aca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	4b23      	ldr	r3, [pc, #140]	; (8007260 <xTaskIncrementTick+0x15c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	4a22      	ldr	r2, [pc, #136]	; (8007260 <xTaskIncrementTick+0x15c>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <xTaskIncrementTick+0x160>)
 80071e8:	441a      	add	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7ff fc0d 	bl	8006a10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <xTaskIncrementTick+0x164>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	429a      	cmp	r2, r3
 8007202:	d3b9      	bcc.n	8007178 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007208:	e7b6      	b.n	8007178 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800720a:	4b17      	ldr	r3, [pc, #92]	; (8007268 <xTaskIncrementTick+0x164>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	4914      	ldr	r1, [pc, #80]	; (8007264 <xTaskIncrementTick+0x160>)
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d901      	bls.n	8007226 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007226:	4b11      	ldr	r3, [pc, #68]	; (800726c <xTaskIncrementTick+0x168>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e004      	b.n	800723e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <xTaskIncrementTick+0x16c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	4a0d      	ldr	r2, [pc, #52]	; (8007270 <xTaskIncrementTick+0x16c>)
 800723c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800723e:	697b      	ldr	r3, [r7, #20]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20000f0c 	.word	0x20000f0c
 800724c:	20000ee8 	.word	0x20000ee8
 8007250:	20000e9c 	.word	0x20000e9c
 8007254:	20000ea0 	.word	0x20000ea0
 8007258:	20000efc 	.word	0x20000efc
 800725c:	20000f04 	.word	0x20000f04
 8007260:	20000eec 	.word	0x20000eec
 8007264:	20000de8 	.word	0x20000de8
 8007268:	20000de4 	.word	0x20000de4
 800726c:	20000ef8 	.word	0x20000ef8
 8007270:	20000ef4 	.word	0x20000ef4

08007274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800727a:	4b29      	ldr	r3, [pc, #164]	; (8007320 <vTaskSwitchContext+0xac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007282:	4b28      	ldr	r3, [pc, #160]	; (8007324 <vTaskSwitchContext+0xb0>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007288:	e044      	b.n	8007314 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <vTaskSwitchContext+0xb0>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <vTaskSwitchContext+0xb4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	fab3 f383 	clz	r3, r3
 800729c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	f1c3 031f 	rsb	r3, r3, #31
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	4921      	ldr	r1, [pc, #132]	; (800732c <vTaskSwitchContext+0xb8>)
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vTaskSwitchContext+0x5a>
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4a14      	ldr	r2, [pc, #80]	; (800732c <vTaskSwitchContext+0xb8>)
 80072dc:	4413      	add	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3308      	adds	r3, #8
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d104      	bne.n	8007300 <vTaskSwitchContext+0x8c>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4a0a      	ldr	r2, [pc, #40]	; (8007330 <vTaskSwitchContext+0xbc>)
 8007308:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <vTaskSwitchContext+0xbc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	334c      	adds	r3, #76	; 0x4c
 8007310:	4a08      	ldr	r2, [pc, #32]	; (8007334 <vTaskSwitchContext+0xc0>)
 8007312:	6013      	str	r3, [r2, #0]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000f0c 	.word	0x20000f0c
 8007324:	20000ef8 	.word	0x20000ef8
 8007328:	20000eec 	.word	0x20000eec
 800732c:	20000de8 	.word	0x20000de8
 8007330:	20000de4 	.word	0x20000de4
 8007334:	20000098 	.word	0x20000098

08007338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007340:	f000 f852 	bl	80073e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <prvIdleTask+0x28>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d9f9      	bls.n	8007340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <prvIdleTask+0x2c>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800735c:	e7f0      	b.n	8007340 <prvIdleTask+0x8>
 800735e:	bf00      	nop
 8007360:	20000de8 	.word	0x20000de8
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	e00c      	b.n	800738e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <prvInitialiseTaskLists+0x60>)
 8007380:	4413      	add	r3, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fb17 	bl	80069b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3301      	adds	r3, #1
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b06      	cmp	r3, #6
 8007392:	d9ef      	bls.n	8007374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007394:	480d      	ldr	r0, [pc, #52]	; (80073cc <prvInitialiseTaskLists+0x64>)
 8007396:	f7ff fb0e 	bl	80069b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800739a:	480d      	ldr	r0, [pc, #52]	; (80073d0 <prvInitialiseTaskLists+0x68>)
 800739c:	f7ff fb0b 	bl	80069b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073a0:	480c      	ldr	r0, [pc, #48]	; (80073d4 <prvInitialiseTaskLists+0x6c>)
 80073a2:	f7ff fb08 	bl	80069b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073a6:	480c      	ldr	r0, [pc, #48]	; (80073d8 <prvInitialiseTaskLists+0x70>)
 80073a8:	f7ff fb05 	bl	80069b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073ac:	480b      	ldr	r0, [pc, #44]	; (80073dc <prvInitialiseTaskLists+0x74>)
 80073ae:	f7ff fb02 	bl	80069b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <prvInitialiseTaskLists+0x78>)
 80073b4:	4a05      	ldr	r2, [pc, #20]	; (80073cc <prvInitialiseTaskLists+0x64>)
 80073b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <prvInitialiseTaskLists+0x7c>)
 80073ba:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <prvInitialiseTaskLists+0x68>)
 80073bc:	601a      	str	r2, [r3, #0]
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000de8 	.word	0x20000de8
 80073cc:	20000e74 	.word	0x20000e74
 80073d0:	20000e88 	.word	0x20000e88
 80073d4:	20000ea4 	.word	0x20000ea4
 80073d8:	20000eb8 	.word	0x20000eb8
 80073dc:	20000ed0 	.word	0x20000ed0
 80073e0:	20000e9c 	.word	0x20000e9c
 80073e4:	20000ea0 	.word	0x20000ea0

080073e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ee:	e019      	b.n	8007424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073f0:	f000 fa10 	bl	8007814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f4:	4b10      	ldr	r3, [pc, #64]	; (8007438 <prvCheckTasksWaitingTermination+0x50>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fb62 	bl	8006aca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <prvCheckTasksWaitingTermination+0x54>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	4a0b      	ldr	r2, [pc, #44]	; (800743c <prvCheckTasksWaitingTermination+0x54>)
 800740e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800741a:	f000 fa2b 	bl	8007874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f810 	bl	8007444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e1      	bne.n	80073f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000eb8 	.word	0x20000eb8
 800743c:	20000ee4 	.word	0x20000ee4
 8007440:	20000ecc 	.word	0x20000ecc

08007444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	334c      	adds	r3, #76	; 0x4c
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fd8f 	bl	8007f74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d108      	bne.n	8007472 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fb83 	bl	8007b70 <vPortFree>
				vPortFree( pxTCB );
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fb80 	bl	8007b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007470:	e018      	b.n	80074a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d103      	bne.n	8007484 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb77 	bl	8007b70 <vPortFree>
	}
 8007482:	e00f      	b.n	80074a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800748a:	2b02      	cmp	r3, #2
 800748c:	d00a      	beq.n	80074a4 <prvDeleteTCB+0x60>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <prvDeleteTCB+0x5e>
	}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <prvResetNextTaskUnblockTime+0x38>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvResetNextTaskUnblockTime+0x3c>)
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074c4:	e008      	b.n	80074d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <prvResetNextTaskUnblockTime+0x38>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <prvResetNextTaskUnblockTime+0x3c>)
 80074d6:	6013      	str	r3, [r2, #0]
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	20000e9c 	.word	0x20000e9c
 80074e8:	20000f04 	.word	0x20000f04

080074ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074f6:	4b29      	ldr	r3, [pc, #164]	; (800759c <prvAddCurrentTaskToDelayedList+0xb0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074fc:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3304      	adds	r3, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fae1 	bl	8006aca <uxListRemove>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	2201      	movs	r2, #1
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43da      	mvns	r2, r3
 800751c:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007524:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d10a      	bne.n	8007544 <prvAddCurrentTaskToDelayedList+0x58>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007534:	4b1a      	ldr	r3, [pc, #104]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3304      	adds	r3, #4
 800753a:	4619      	mov	r1, r3
 800753c:	481a      	ldr	r0, [pc, #104]	; (80075a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800753e:	f7ff fa67 	bl	8006a10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007542:	e026      	b.n	8007592 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	429a      	cmp	r2, r3
 800755a:	d209      	bcs.n	8007570 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800755c:	4b13      	ldr	r3, [pc, #76]	; (80075ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3304      	adds	r3, #4
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f7ff fa75 	bl	8006a58 <vListInsert>
}
 800756e:	e010      	b.n	8007592 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007570:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f7ff fa6b 	bl	8006a58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007582:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d202      	bcs.n	8007592 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6013      	str	r3, [r2, #0]
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000ee8 	.word	0x20000ee8
 80075a0:	20000de4 	.word	0x20000de4
 80075a4:	20000eec 	.word	0x20000eec
 80075a8:	20000ed0 	.word	0x20000ed0
 80075ac:	20000ea0 	.word	0x20000ea0
 80075b0:	20000e9c 	.word	0x20000e9c
 80075b4:	20000f04 	.word	0x20000f04

080075b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3b04      	subs	r3, #4
 80075c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 0201 	bic.w	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075e8:	4a0c      	ldr	r2, [pc, #48]	; (800761c <pxPortInitialiseStack+0x64>)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b14      	subs	r3, #20
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f06f 0202 	mvn.w	r2, #2
 8007606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3b20      	subs	r3, #32
 800760c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	08007621 	.word	0x08007621

08007620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <prvTaskExitError+0x54>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d00a      	beq.n	800764a <prvTaskExitError+0x2a>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvTaskExitError+0x28>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	60bb      	str	r3, [r7, #8]
}
 800765c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800765e:	bf00      	nop
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0fc      	beq.n	8007660 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000094 	.word	0x20000094
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20000de4 	.word	0x20000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076d6:	4b46      	ldr	r3, [pc, #280]	; (80077f0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <xPortStartScheduler+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x26>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076f6:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <xPortStartScheduler+0x120>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a3f      	ldr	r2, [pc, #252]	; (80077f8 <xPortStartScheduler+0x128>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10a      	bne.n	8007716 <xPortStartScheduler+0x46>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007716:	4b39      	ldr	r3, [pc, #228]	; (80077fc <xPortStartScheduler+0x12c>)
 8007718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b31      	ldr	r3, [pc, #196]	; (8007800 <xPortStartScheduler+0x130>)
 800773c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <xPortStartScheduler+0x134>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007744:	e009      	b.n	800775a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <xPortStartScheduler+0x134>)
 800774e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d0ef      	beq.n	8007746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007766:	4b27      	ldr	r3, [pc, #156]	; (8007804 <xPortStartScheduler+0x134>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1c3 0307 	rsb	r3, r3, #7
 800776e:	2b04      	cmp	r3, #4
 8007770:	d00a      	beq.n	8007788 <xPortStartScheduler+0xb8>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007788:	4b1e      	ldr	r3, [pc, #120]	; (8007804 <xPortStartScheduler+0x134>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <xPortStartScheduler+0x134>)
 8007790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007792:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <xPortStartScheduler+0x134>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779a:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <xPortStartScheduler+0x134>)
 800779c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <xPortStartScheduler+0x138>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <xPortStartScheduler+0x138>)
 80077ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <xPortStartScheduler+0x138>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a14      	ldr	r2, [pc, #80]	; (8007808 <xPortStartScheduler+0x138>)
 80077b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077be:	f000 f8dd 	bl	800797c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <xPortStartScheduler+0x13c>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077c8:	f000 f8fc 	bl	80079c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <xPortStartScheduler+0x140>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <xPortStartScheduler+0x140>)
 80077d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077d8:	f7ff ff66 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077dc:	f7ff fd4a 	bl	8007274 <vTaskSwitchContext>
	prvTaskExitError();
 80077e0:	f7ff ff1e 	bl	8007620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00
 80077f4:	410fc271 	.word	0x410fc271
 80077f8:	410fc270 	.word	0x410fc270
 80077fc:	e000e400 	.word	0xe000e400
 8007800:	20000f10 	.word	0x20000f10
 8007804:	20000f14 	.word	0x20000f14
 8007808:	e000ed20 	.word	0xe000ed20
 800780c:	20000094 	.word	0x20000094
 8007810:	e000ef34 	.word	0xe000ef34

08007814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <vPortEnterCritical+0x58>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	4a0d      	ldr	r2, [pc, #52]	; (800786c <vPortEnterCritical+0x58>)
 8007836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007838:	4b0c      	ldr	r3, [pc, #48]	; (800786c <vPortEnterCritical+0x58>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10f      	bne.n	8007860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortEnterCritical+0x5c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <vPortEnterCritical+0x4c>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	603b      	str	r3, [r7, #0]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <vPortEnterCritical+0x4a>
	}
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	20000094 	.word	0x20000094
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <vPortExitCritical+0x50>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <vPortExitCritical+0x24>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	607b      	str	r3, [r7, #4]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <vPortExitCritical+0x50>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <vPortExitCritical+0x50>)
 80078a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <vPortExitCritical+0x50>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <vPortExitCritical+0x42>
 80078aa:	2300      	movs	r3, #0
 80078ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000094 	.word	0x20000094
	...

080078d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078d0:	f3ef 8009 	mrs	r0, PSP
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <pxCurrentTCBConst>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	f01e 0f10 	tst.w	lr, #16
 80078e0:	bf08      	it	eq
 80078e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078f4:	f380 8811 	msr	BASEPRI, r0
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f7ff fcb8 	bl	8007274 <vTaskSwitchContext>
 8007904:	f04f 0000 	mov.w	r0, #0
 8007908:	f380 8811 	msr	BASEPRI, r0
 800790c:	bc09      	pop	{r0, r3}
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	6808      	ldr	r0, [r1, #0]
 8007912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007916:	f01e 0f10 	tst.w	lr, #16
 800791a:	bf08      	it	eq
 800791c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007920:	f380 8809 	msr	PSP, r0
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst>:
 8007930:	20000de4 	.word	0x20000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
}
 8007950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007952:	f7ff fbd7 	bl	8007104 <xTaskIncrementTick>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <SysTick_Handler+0x40>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f383 8811 	msr	BASEPRI, r3
}
 800796e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <vPortSetupTimerInterrupt+0x38>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortSetupTimerInterrupt+0x3c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x40>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <vPortSetupTimerInterrupt+0x44>)
 800799a:	3b01      	subs	r3, #1
 800799c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	e000e010 	.word	0xe000e010
 80079b4:	e000e018 	.word	0xe000e018
 80079b8:	20000088 	.word	0x20000088
 80079bc:	10624dd3 	.word	0x10624dd3
 80079c0:	e000e014 	.word	0xe000e014

080079c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079d4 <vPortEnableVFP+0x10>
 80079c8:	6801      	ldr	r1, [r0, #0]
 80079ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ce:	6001      	str	r1, [r0, #0]
 80079d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079d2:	bf00      	nop
 80079d4:	e000ed88 	.word	0xe000ed88

080079d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079e4:	f7ff fae4 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079e8:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <pvPortMalloc+0x180>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079f0:	f000 f920 	bl	8007c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079f4:	4b59      	ldr	r3, [pc, #356]	; (8007b5c <pvPortMalloc+0x184>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8093 	bne.w	8007b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01d      	beq.n	8007a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a08:	2208      	movs	r2, #8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f023 0307 	bic.w	r3, r3, #7
 8007a20:	3308      	adds	r3, #8
 8007a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <pvPortMalloc+0x6c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	617b      	str	r3, [r7, #20]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d06e      	beq.n	8007b28 <pvPortMalloc+0x150>
 8007a4a:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <pvPortMalloc+0x188>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d869      	bhi.n	8007b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a54:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <pvPortMalloc+0x18c>)
 8007a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a58:	4b42      	ldr	r3, [pc, #264]	; (8007b64 <pvPortMalloc+0x18c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a5e:	e004      	b.n	8007a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d903      	bls.n	8007a7c <pvPortMalloc+0xa4>
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f1      	bne.n	8007a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a7c:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <pvPortMalloc+0x180>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d050      	beq.n	8007b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d91f      	bls.n	8007ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	613b      	str	r3, [r7, #16]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ae2:	69b8      	ldr	r0, [r7, #24]
 8007ae4:	f000 f908 	bl	8007cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <pvPortMalloc+0x188>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <pvPortMalloc+0x188>)
 8007af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <pvPortMalloc+0x188>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <pvPortMalloc+0x190>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d203      	bcs.n	8007b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <pvPortMalloc+0x188>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <pvPortMalloc+0x190>)
 8007b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <pvPortMalloc+0x184>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <pvPortMalloc+0x194>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <pvPortMalloc+0x194>)
 8007b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b28:	f7ff fa50 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <pvPortMalloc+0x174>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <pvPortMalloc+0x172>
	return pvReturn;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3728      	adds	r7, #40	; 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20004b20 	.word	0x20004b20
 8007b5c:	20004b34 	.word	0x20004b34
 8007b60:	20004b24 	.word	0x20004b24
 8007b64:	20004b18 	.word	0x20004b18
 8007b68:	20004b28 	.word	0x20004b28
 8007b6c:	20004b2c 	.word	0x20004b2c

08007b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04d      	beq.n	8007c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b82:	2308      	movs	r3, #8
 8007b84:	425b      	negs	r3, r3
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <vPortFree+0xb8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <vPortFree+0x44>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <vPortFree+0x62>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60bb      	str	r3, [r7, #8]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <vPortFree+0xb8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01e      	beq.n	8007c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11a      	bne.n	8007c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <vPortFree+0xb8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bf8:	f7ff f9da 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <vPortFree+0xbc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <vPortFree+0xbc>)
 8007c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c0a:	6938      	ldr	r0, [r7, #16]
 8007c0c:	f000 f874 	bl	8007cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <vPortFree+0xc0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a06      	ldr	r2, [pc, #24]	; (8007c30 <vPortFree+0xc0>)
 8007c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c1a:	f7ff f9d7 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c1e:	bf00      	nop
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20004b34 	.word	0x20004b34
 8007c2c:	20004b24 	.word	0x20004b24
 8007c30:	20004b30 	.word	0x20004b30

08007c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c40:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <prvHeapInit+0xac>)
 8007c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3307      	adds	r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	4a1f      	ldr	r2, [pc, #124]	; (8007ce0 <prvHeapInit+0xac>)
 8007c64:	4413      	add	r3, r2
 8007c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <prvHeapInit+0xb0>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <prvHeapInit+0xb0>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c80:	2208      	movs	r2, #8
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0307 	bic.w	r3, r3, #7
 8007c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <prvHeapInit+0xb4>)
 8007c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <prvHeapInit+0xb4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <prvHeapInit+0xb4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <prvHeapInit+0xb4>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <prvHeapInit+0xb8>)
 8007cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <prvHeapInit+0xbc>)
 8007cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <prvHeapInit+0xc0>)
 8007cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20000f18 	.word	0x20000f18
 8007ce4:	20004b18 	.word	0x20004b18
 8007ce8:	20004b20 	.word	0x20004b20
 8007cec:	20004b28 	.word	0x20004b28
 8007cf0:	20004b24 	.word	0x20004b24
 8007cf4:	20004b34 	.word	0x20004b34

08007cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d00:	4b28      	ldr	r3, [pc, #160]	; (8007da4 <prvInsertBlockIntoFreeList+0xac>)
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e002      	b.n	8007d0c <prvInsertBlockIntoFreeList+0x14>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d8f7      	bhi.n	8007d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d108      	bne.n	8007d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	441a      	add	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d118      	bne.n	8007d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d00d      	beq.n	8007d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	441a      	add	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e008      	b.n	8007d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e003      	b.n	8007d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d002      	beq.n	8007d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20004b18 	.word	0x20004b18
 8007da8:	20004b20 	.word	0x20004b20

08007dac <__errno>:
 8007dac:	4b01      	ldr	r3, [pc, #4]	; (8007db4 <__errno+0x8>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000098 	.word	0x20000098

08007db8 <__libc_init_array>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4d0d      	ldr	r5, [pc, #52]	; (8007df0 <__libc_init_array+0x38>)
 8007dbc:	4c0d      	ldr	r4, [pc, #52]	; (8007df4 <__libc_init_array+0x3c>)
 8007dbe:	1b64      	subs	r4, r4, r5
 8007dc0:	10a4      	asrs	r4, r4, #2
 8007dc2:	2600      	movs	r6, #0
 8007dc4:	42a6      	cmp	r6, r4
 8007dc6:	d109      	bne.n	8007ddc <__libc_init_array+0x24>
 8007dc8:	4d0b      	ldr	r5, [pc, #44]	; (8007df8 <__libc_init_array+0x40>)
 8007dca:	4c0c      	ldr	r4, [pc, #48]	; (8007dfc <__libc_init_array+0x44>)
 8007dcc:	f000 fcf8 	bl	80087c0 <_init>
 8007dd0:	1b64      	subs	r4, r4, r5
 8007dd2:	10a4      	asrs	r4, r4, #2
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	42a6      	cmp	r6, r4
 8007dd8:	d105      	bne.n	8007de6 <__libc_init_array+0x2e>
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de0:	4798      	blx	r3
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7ee      	b.n	8007dc4 <__libc_init_array+0xc>
 8007de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dea:	4798      	blx	r3
 8007dec:	3601      	adds	r6, #1
 8007dee:	e7f2      	b.n	8007dd6 <__libc_init_array+0x1e>
 8007df0:	08008984 	.word	0x08008984
 8007df4:	08008984 	.word	0x08008984
 8007df8:	08008984 	.word	0x08008984
 8007dfc:	08008988 	.word	0x08008988

08007e00 <__retarget_lock_acquire_recursive>:
 8007e00:	4770      	bx	lr

08007e02 <__retarget_lock_release_recursive>:
 8007e02:	4770      	bx	lr

08007e04 <memcpy>:
 8007e04:	440a      	add	r2, r1
 8007e06:	4291      	cmp	r1, r2
 8007e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e0c:	d100      	bne.n	8007e10 <memcpy+0xc>
 8007e0e:	4770      	bx	lr
 8007e10:	b510      	push	{r4, lr}
 8007e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	d1f9      	bne.n	8007e12 <memcpy+0xe>
 8007e1e:	bd10      	pop	{r4, pc}

08007e20 <memset>:
 8007e20:	4402      	add	r2, r0
 8007e22:	4603      	mov	r3, r0
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d100      	bne.n	8007e2a <memset+0xa>
 8007e28:	4770      	bx	lr
 8007e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2e:	e7f9      	b.n	8007e24 <memset+0x4>

08007e30 <sbrk_aligned>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4e0e      	ldr	r6, [pc, #56]	; (8007e6c <sbrk_aligned+0x3c>)
 8007e34:	460c      	mov	r4, r1
 8007e36:	6831      	ldr	r1, [r6, #0]
 8007e38:	4605      	mov	r5, r0
 8007e3a:	b911      	cbnz	r1, 8007e42 <sbrk_aligned+0x12>
 8007e3c:	f000 f8f6 	bl	800802c <_sbrk_r>
 8007e40:	6030      	str	r0, [r6, #0]
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f8f1 	bl	800802c <_sbrk_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	d00a      	beq.n	8007e64 <sbrk_aligned+0x34>
 8007e4e:	1cc4      	adds	r4, r0, #3
 8007e50:	f024 0403 	bic.w	r4, r4, #3
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d007      	beq.n	8007e68 <sbrk_aligned+0x38>
 8007e58:	1a21      	subs	r1, r4, r0
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f8e6 	bl	800802c <_sbrk_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d101      	bne.n	8007e68 <sbrk_aligned+0x38>
 8007e64:	f04f 34ff 	mov.w	r4, #4294967295
 8007e68:	4620      	mov	r0, r4
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	20004b40 	.word	0x20004b40

08007e70 <_malloc_r>:
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e74:	1ccd      	adds	r5, r1, #3
 8007e76:	f025 0503 	bic.w	r5, r5, #3
 8007e7a:	3508      	adds	r5, #8
 8007e7c:	2d0c      	cmp	r5, #12
 8007e7e:	bf38      	it	cc
 8007e80:	250c      	movcc	r5, #12
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	4607      	mov	r7, r0
 8007e86:	db01      	blt.n	8007e8c <_malloc_r+0x1c>
 8007e88:	42a9      	cmp	r1, r5
 8007e8a:	d905      	bls.n	8007e98 <_malloc_r+0x28>
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	2600      	movs	r6, #0
 8007e92:	4630      	mov	r0, r6
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	4e2e      	ldr	r6, [pc, #184]	; (8007f54 <_malloc_r+0xe4>)
 8007e9a:	f000 f8f7 	bl	800808c <__malloc_lock>
 8007e9e:	6833      	ldr	r3, [r6, #0]
 8007ea0:	461c      	mov	r4, r3
 8007ea2:	bb34      	cbnz	r4, 8007ef2 <_malloc_r+0x82>
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	f7ff ffc2 	bl	8007e30 <sbrk_aligned>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	4604      	mov	r4, r0
 8007eb0:	d14d      	bne.n	8007f4e <_malloc_r+0xde>
 8007eb2:	6834      	ldr	r4, [r6, #0]
 8007eb4:	4626      	mov	r6, r4
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	d140      	bne.n	8007f3c <_malloc_r+0xcc>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	eb04 0803 	add.w	r8, r4, r3
 8007ec4:	f000 f8b2 	bl	800802c <_sbrk_r>
 8007ec8:	4580      	cmp	r8, r0
 8007eca:	d13a      	bne.n	8007f42 <_malloc_r+0xd2>
 8007ecc:	6821      	ldr	r1, [r4, #0]
 8007ece:	3503      	adds	r5, #3
 8007ed0:	1a6d      	subs	r5, r5, r1
 8007ed2:	f025 0503 	bic.w	r5, r5, #3
 8007ed6:	3508      	adds	r5, #8
 8007ed8:	2d0c      	cmp	r5, #12
 8007eda:	bf38      	it	cc
 8007edc:	250c      	movcc	r5, #12
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ffa5 	bl	8007e30 <sbrk_aligned>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d02b      	beq.n	8007f42 <_malloc_r+0xd2>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	442b      	add	r3, r5
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	e00e      	b.n	8007f10 <_malloc_r+0xa0>
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	1b52      	subs	r2, r2, r5
 8007ef6:	d41e      	bmi.n	8007f36 <_malloc_r+0xc6>
 8007ef8:	2a0b      	cmp	r2, #11
 8007efa:	d916      	bls.n	8007f2a <_malloc_r+0xba>
 8007efc:	1961      	adds	r1, r4, r5
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6025      	str	r5, [r4, #0]
 8007f02:	bf18      	it	ne
 8007f04:	6059      	strne	r1, [r3, #4]
 8007f06:	6863      	ldr	r3, [r4, #4]
 8007f08:	bf08      	it	eq
 8007f0a:	6031      	streq	r1, [r6, #0]
 8007f0c:	5162      	str	r2, [r4, r5]
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	4638      	mov	r0, r7
 8007f12:	f104 060b 	add.w	r6, r4, #11
 8007f16:	f000 f8bf 	bl	8008098 <__malloc_unlock>
 8007f1a:	f026 0607 	bic.w	r6, r6, #7
 8007f1e:	1d23      	adds	r3, r4, #4
 8007f20:	1af2      	subs	r2, r6, r3
 8007f22:	d0b6      	beq.n	8007e92 <_malloc_r+0x22>
 8007f24:	1b9b      	subs	r3, r3, r6
 8007f26:	50a3      	str	r3, [r4, r2]
 8007f28:	e7b3      	b.n	8007e92 <_malloc_r+0x22>
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	bf0c      	ite	eq
 8007f30:	6032      	streq	r2, [r6, #0]
 8007f32:	605a      	strne	r2, [r3, #4]
 8007f34:	e7ec      	b.n	8007f10 <_malloc_r+0xa0>
 8007f36:	4623      	mov	r3, r4
 8007f38:	6864      	ldr	r4, [r4, #4]
 8007f3a:	e7b2      	b.n	8007ea2 <_malloc_r+0x32>
 8007f3c:	4634      	mov	r4, r6
 8007f3e:	6876      	ldr	r6, [r6, #4]
 8007f40:	e7b9      	b.n	8007eb6 <_malloc_r+0x46>
 8007f42:	230c      	movs	r3, #12
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4638      	mov	r0, r7
 8007f48:	f000 f8a6 	bl	8008098 <__malloc_unlock>
 8007f4c:	e7a1      	b.n	8007e92 <_malloc_r+0x22>
 8007f4e:	6025      	str	r5, [r4, #0]
 8007f50:	e7de      	b.n	8007f10 <_malloc_r+0xa0>
 8007f52:	bf00      	nop
 8007f54:	20004b3c 	.word	0x20004b3c

08007f58 <cleanup_glue>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	6809      	ldr	r1, [r1, #0]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	b109      	cbz	r1, 8007f66 <cleanup_glue+0xe>
 8007f62:	f7ff fff9 	bl	8007f58 <cleanup_glue>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6e:	f000 b899 	b.w	80080a4 <_free_r>
	...

08007f74 <_reclaim_reent>:
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <_reclaim_reent+0xb4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4283      	cmp	r3, r0
 8007f7a:	b570      	push	{r4, r5, r6, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	d051      	beq.n	8008024 <_reclaim_reent+0xb0>
 8007f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f82:	b143      	cbz	r3, 8007f96 <_reclaim_reent+0x22>
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d14a      	bne.n	8008020 <_reclaim_reent+0xac>
 8007f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8c:	6819      	ldr	r1, [r3, #0]
 8007f8e:	b111      	cbz	r1, 8007f96 <_reclaim_reent+0x22>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 f887 	bl	80080a4 <_free_r>
 8007f96:	6961      	ldr	r1, [r4, #20]
 8007f98:	b111      	cbz	r1, 8007fa0 <_reclaim_reent+0x2c>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f882 	bl	80080a4 <_free_r>
 8007fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fa2:	b111      	cbz	r1, 8007faa <_reclaim_reent+0x36>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 f87d 	bl	80080a4 <_free_r>
 8007faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fac:	b111      	cbz	r1, 8007fb4 <_reclaim_reent+0x40>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f878 	bl	80080a4 <_free_r>
 8007fb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007fb6:	b111      	cbz	r1, 8007fbe <_reclaim_reent+0x4a>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 f873 	bl	80080a4 <_free_r>
 8007fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fc0:	b111      	cbz	r1, 8007fc8 <_reclaim_reent+0x54>
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 f86e 	bl	80080a4 <_free_r>
 8007fc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007fca:	b111      	cbz	r1, 8007fd2 <_reclaim_reent+0x5e>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 f869 	bl	80080a4 <_free_r>
 8007fd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007fd4:	b111      	cbz	r1, 8007fdc <_reclaim_reent+0x68>
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f864 	bl	80080a4 <_free_r>
 8007fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fde:	b111      	cbz	r1, 8007fe6 <_reclaim_reent+0x72>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 f85f 	bl	80080a4 <_free_r>
 8007fe6:	69a3      	ldr	r3, [r4, #24]
 8007fe8:	b1e3      	cbz	r3, 8008024 <_reclaim_reent+0xb0>
 8007fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fec:	4620      	mov	r0, r4
 8007fee:	4798      	blx	r3
 8007ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ff2:	b1b9      	cbz	r1, 8008024 <_reclaim_reent+0xb0>
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ffa:	f7ff bfad 	b.w	8007f58 <cleanup_glue>
 8007ffe:	5949      	ldr	r1, [r1, r5]
 8008000:	b941      	cbnz	r1, 8008014 <_reclaim_reent+0xa0>
 8008002:	3504      	adds	r5, #4
 8008004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008006:	2d80      	cmp	r5, #128	; 0x80
 8008008:	68d9      	ldr	r1, [r3, #12]
 800800a:	d1f8      	bne.n	8007ffe <_reclaim_reent+0x8a>
 800800c:	4620      	mov	r0, r4
 800800e:	f000 f849 	bl	80080a4 <_free_r>
 8008012:	e7ba      	b.n	8007f8a <_reclaim_reent+0x16>
 8008014:	680e      	ldr	r6, [r1, #0]
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f844 	bl	80080a4 <_free_r>
 800801c:	4631      	mov	r1, r6
 800801e:	e7ef      	b.n	8008000 <_reclaim_reent+0x8c>
 8008020:	2500      	movs	r5, #0
 8008022:	e7ef      	b.n	8008004 <_reclaim_reent+0x90>
 8008024:	bd70      	pop	{r4, r5, r6, pc}
 8008026:	bf00      	nop
 8008028:	20000098 	.word	0x20000098

0800802c <_sbrk_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d06      	ldr	r5, [pc, #24]	; (8008048 <_sbrk_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	f7f9 fafa 	bl	8001630 <_sbrk>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_sbrk_r+0x1a>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_sbrk_r+0x1a>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20004b44 	.word	0x20004b44

0800804c <siprintf>:
 800804c:	b40e      	push	{r1, r2, r3}
 800804e:	b500      	push	{lr}
 8008050:	b09c      	sub	sp, #112	; 0x70
 8008052:	ab1d      	add	r3, sp, #116	; 0x74
 8008054:	9002      	str	r0, [sp, #8]
 8008056:	9006      	str	r0, [sp, #24]
 8008058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800805c:	4809      	ldr	r0, [pc, #36]	; (8008084 <siprintf+0x38>)
 800805e:	9107      	str	r1, [sp, #28]
 8008060:	9104      	str	r1, [sp, #16]
 8008062:	4909      	ldr	r1, [pc, #36]	; (8008088 <siprintf+0x3c>)
 8008064:	f853 2b04 	ldr.w	r2, [r3], #4
 8008068:	9105      	str	r1, [sp, #20]
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	a902      	add	r1, sp, #8
 8008070:	f000 f8c0 	bl	80081f4 <_svfiprintf_r>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	b01c      	add	sp, #112	; 0x70
 800807c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008080:	b003      	add	sp, #12
 8008082:	4770      	bx	lr
 8008084:	20000098 	.word	0x20000098
 8008088:	ffff0208 	.word	0xffff0208

0800808c <__malloc_lock>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__malloc_lock+0x8>)
 800808e:	f7ff beb7 	b.w	8007e00 <__retarget_lock_acquire_recursive>
 8008092:	bf00      	nop
 8008094:	20004b38 	.word	0x20004b38

08008098 <__malloc_unlock>:
 8008098:	4801      	ldr	r0, [pc, #4]	; (80080a0 <__malloc_unlock+0x8>)
 800809a:	f7ff beb2 	b.w	8007e02 <__retarget_lock_release_recursive>
 800809e:	bf00      	nop
 80080a0:	20004b38 	.word	0x20004b38

080080a4 <_free_r>:
 80080a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d044      	beq.n	8008134 <_free_r+0x90>
 80080aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ae:	9001      	str	r0, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f1a1 0404 	sub.w	r4, r1, #4
 80080b6:	bfb8      	it	lt
 80080b8:	18e4      	addlt	r4, r4, r3
 80080ba:	f7ff ffe7 	bl	800808c <__malloc_lock>
 80080be:	4a1e      	ldr	r2, [pc, #120]	; (8008138 <_free_r+0x94>)
 80080c0:	9801      	ldr	r0, [sp, #4]
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	b933      	cbnz	r3, 80080d4 <_free_r+0x30>
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	6014      	str	r4, [r2, #0]
 80080ca:	b003      	add	sp, #12
 80080cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d0:	f7ff bfe2 	b.w	8008098 <__malloc_unlock>
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	d908      	bls.n	80080ea <_free_r+0x46>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf01      	itttt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	1949      	addeq	r1, r1, r5
 80080e6:	6021      	streq	r1, [r4, #0]
 80080e8:	e7ed      	b.n	80080c6 <_free_r+0x22>
 80080ea:	461a      	mov	r2, r3
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b10b      	cbz	r3, 80080f4 <_free_r+0x50>
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d9fa      	bls.n	80080ea <_free_r+0x46>
 80080f4:	6811      	ldr	r1, [r2, #0]
 80080f6:	1855      	adds	r5, r2, r1
 80080f8:	42a5      	cmp	r5, r4
 80080fa:	d10b      	bne.n	8008114 <_free_r+0x70>
 80080fc:	6824      	ldr	r4, [r4, #0]
 80080fe:	4421      	add	r1, r4
 8008100:	1854      	adds	r4, r2, r1
 8008102:	42a3      	cmp	r3, r4
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	d1e0      	bne.n	80080ca <_free_r+0x26>
 8008108:	681c      	ldr	r4, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	6053      	str	r3, [r2, #4]
 800810e:	4421      	add	r1, r4
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	e7da      	b.n	80080ca <_free_r+0x26>
 8008114:	d902      	bls.n	800811c <_free_r+0x78>
 8008116:	230c      	movs	r3, #12
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	e7d6      	b.n	80080ca <_free_r+0x26>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf04      	itt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	bf04      	itt	eq
 800812c:	1949      	addeq	r1, r1, r5
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	6054      	str	r4, [r2, #4]
 8008132:	e7ca      	b.n	80080ca <_free_r+0x26>
 8008134:	b003      	add	sp, #12
 8008136:	bd30      	pop	{r4, r5, pc}
 8008138:	20004b3c 	.word	0x20004b3c

0800813c <__ssputs_r>:
 800813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	688e      	ldr	r6, [r1, #8]
 8008142:	429e      	cmp	r6, r3
 8008144:	4682      	mov	sl, r0
 8008146:	460c      	mov	r4, r1
 8008148:	4690      	mov	r8, r2
 800814a:	461f      	mov	r7, r3
 800814c:	d838      	bhi.n	80081c0 <__ssputs_r+0x84>
 800814e:	898a      	ldrh	r2, [r1, #12]
 8008150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008154:	d032      	beq.n	80081bc <__ssputs_r+0x80>
 8008156:	6825      	ldr	r5, [r4, #0]
 8008158:	6909      	ldr	r1, [r1, #16]
 800815a:	eba5 0901 	sub.w	r9, r5, r1
 800815e:	6965      	ldr	r5, [r4, #20]
 8008160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008168:	3301      	adds	r3, #1
 800816a:	444b      	add	r3, r9
 800816c:	106d      	asrs	r5, r5, #1
 800816e:	429d      	cmp	r5, r3
 8008170:	bf38      	it	cc
 8008172:	461d      	movcc	r5, r3
 8008174:	0553      	lsls	r3, r2, #21
 8008176:	d531      	bpl.n	80081dc <__ssputs_r+0xa0>
 8008178:	4629      	mov	r1, r5
 800817a:	f7ff fe79 	bl	8007e70 <_malloc_r>
 800817e:	4606      	mov	r6, r0
 8008180:	b950      	cbnz	r0, 8008198 <__ssputs_r+0x5c>
 8008182:	230c      	movs	r3, #12
 8008184:	f8ca 3000 	str.w	r3, [sl]
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818e:	81a3      	strh	r3, [r4, #12]
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	6921      	ldr	r1, [r4, #16]
 800819a:	464a      	mov	r2, r9
 800819c:	f7ff fe32 	bl	8007e04 <memcpy>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	6126      	str	r6, [r4, #16]
 80081ae:	6165      	str	r5, [r4, #20]
 80081b0:	444e      	add	r6, r9
 80081b2:	eba5 0509 	sub.w	r5, r5, r9
 80081b6:	6026      	str	r6, [r4, #0]
 80081b8:	60a5      	str	r5, [r4, #8]
 80081ba:	463e      	mov	r6, r7
 80081bc:	42be      	cmp	r6, r7
 80081be:	d900      	bls.n	80081c2 <__ssputs_r+0x86>
 80081c0:	463e      	mov	r6, r7
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	4632      	mov	r2, r6
 80081c6:	4641      	mov	r1, r8
 80081c8:	f000 faa8 	bl	800871c <memmove>
 80081cc:	68a3      	ldr	r3, [r4, #8]
 80081ce:	1b9b      	subs	r3, r3, r6
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	4433      	add	r3, r6
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	2000      	movs	r0, #0
 80081da:	e7db      	b.n	8008194 <__ssputs_r+0x58>
 80081dc:	462a      	mov	r2, r5
 80081de:	f000 fab7 	bl	8008750 <_realloc_r>
 80081e2:	4606      	mov	r6, r0
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d1e1      	bne.n	80081ac <__ssputs_r+0x70>
 80081e8:	6921      	ldr	r1, [r4, #16]
 80081ea:	4650      	mov	r0, sl
 80081ec:	f7ff ff5a 	bl	80080a4 <_free_r>
 80081f0:	e7c7      	b.n	8008182 <__ssputs_r+0x46>
	...

080081f4 <_svfiprintf_r>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4698      	mov	r8, r3
 80081fa:	898b      	ldrh	r3, [r1, #12]
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	b09d      	sub	sp, #116	; 0x74
 8008200:	4607      	mov	r7, r0
 8008202:	460d      	mov	r5, r1
 8008204:	4614      	mov	r4, r2
 8008206:	d50e      	bpl.n	8008226 <_svfiprintf_r+0x32>
 8008208:	690b      	ldr	r3, [r1, #16]
 800820a:	b963      	cbnz	r3, 8008226 <_svfiprintf_r+0x32>
 800820c:	2140      	movs	r1, #64	; 0x40
 800820e:	f7ff fe2f 	bl	8007e70 <_malloc_r>
 8008212:	6028      	str	r0, [r5, #0]
 8008214:	6128      	str	r0, [r5, #16]
 8008216:	b920      	cbnz	r0, 8008222 <_svfiprintf_r+0x2e>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e0d1      	b.n	80083c6 <_svfiprintf_r+0x1d2>
 8008222:	2340      	movs	r3, #64	; 0x40
 8008224:	616b      	str	r3, [r5, #20]
 8008226:	2300      	movs	r3, #0
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	2320      	movs	r3, #32
 800822c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008230:	f8cd 800c 	str.w	r8, [sp, #12]
 8008234:	2330      	movs	r3, #48	; 0x30
 8008236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083e0 <_svfiprintf_r+0x1ec>
 800823a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823e:	f04f 0901 	mov.w	r9, #1
 8008242:	4623      	mov	r3, r4
 8008244:	469a      	mov	sl, r3
 8008246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800824a:	b10a      	cbz	r2, 8008250 <_svfiprintf_r+0x5c>
 800824c:	2a25      	cmp	r2, #37	; 0x25
 800824e:	d1f9      	bne.n	8008244 <_svfiprintf_r+0x50>
 8008250:	ebba 0b04 	subs.w	fp, sl, r4
 8008254:	d00b      	beq.n	800826e <_svfiprintf_r+0x7a>
 8008256:	465b      	mov	r3, fp
 8008258:	4622      	mov	r2, r4
 800825a:	4629      	mov	r1, r5
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ff6d 	bl	800813c <__ssputs_r>
 8008262:	3001      	adds	r0, #1
 8008264:	f000 80aa 	beq.w	80083bc <_svfiprintf_r+0x1c8>
 8008268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826a:	445a      	add	r2, fp
 800826c:	9209      	str	r2, [sp, #36]	; 0x24
 800826e:	f89a 3000 	ldrb.w	r3, [sl]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80a2 	beq.w	80083bc <_svfiprintf_r+0x1c8>
 8008278:	2300      	movs	r3, #0
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008282:	f10a 0a01 	add.w	sl, sl, #1
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800828e:	931a      	str	r3, [sp, #104]	; 0x68
 8008290:	4654      	mov	r4, sl
 8008292:	2205      	movs	r2, #5
 8008294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008298:	4851      	ldr	r0, [pc, #324]	; (80083e0 <_svfiprintf_r+0x1ec>)
 800829a:	f7f7 ffb1 	bl	8000200 <memchr>
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	b9d8      	cbnz	r0, 80082da <_svfiprintf_r+0xe6>
 80082a2:	06d0      	lsls	r0, r2, #27
 80082a4:	bf44      	itt	mi
 80082a6:	2320      	movmi	r3, #32
 80082a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ac:	0711      	lsls	r1, r2, #28
 80082ae:	bf44      	itt	mi
 80082b0:	232b      	movmi	r3, #43	; 0x2b
 80082b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ba:	2b2a      	cmp	r3, #42	; 0x2a
 80082bc:	d015      	beq.n	80082ea <_svfiprintf_r+0xf6>
 80082be:	9a07      	ldr	r2, [sp, #28]
 80082c0:	4654      	mov	r4, sl
 80082c2:	2000      	movs	r0, #0
 80082c4:	f04f 0c0a 	mov.w	ip, #10
 80082c8:	4621      	mov	r1, r4
 80082ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ce:	3b30      	subs	r3, #48	; 0x30
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d94e      	bls.n	8008372 <_svfiprintf_r+0x17e>
 80082d4:	b1b0      	cbz	r0, 8008304 <_svfiprintf_r+0x110>
 80082d6:	9207      	str	r2, [sp, #28]
 80082d8:	e014      	b.n	8008304 <_svfiprintf_r+0x110>
 80082da:	eba0 0308 	sub.w	r3, r0, r8
 80082de:	fa09 f303 	lsl.w	r3, r9, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	46a2      	mov	sl, r4
 80082e8:	e7d2      	b.n	8008290 <_svfiprintf_r+0x9c>
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	1d19      	adds	r1, r3, #4
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	9103      	str	r1, [sp, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfbb      	ittet	lt
 80082f6:	425b      	neglt	r3, r3
 80082f8:	f042 0202 	orrlt.w	r2, r2, #2
 80082fc:	9307      	strge	r3, [sp, #28]
 80082fe:	9307      	strlt	r3, [sp, #28]
 8008300:	bfb8      	it	lt
 8008302:	9204      	strlt	r2, [sp, #16]
 8008304:	7823      	ldrb	r3, [r4, #0]
 8008306:	2b2e      	cmp	r3, #46	; 0x2e
 8008308:	d10c      	bne.n	8008324 <_svfiprintf_r+0x130>
 800830a:	7863      	ldrb	r3, [r4, #1]
 800830c:	2b2a      	cmp	r3, #42	; 0x2a
 800830e:	d135      	bne.n	800837c <_svfiprintf_r+0x188>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	9203      	str	r2, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfb8      	it	lt
 800831c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008320:	3402      	adds	r4, #2
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083f0 <_svfiprintf_r+0x1fc>
 8008328:	7821      	ldrb	r1, [r4, #0]
 800832a:	2203      	movs	r2, #3
 800832c:	4650      	mov	r0, sl
 800832e:	f7f7 ff67 	bl	8000200 <memchr>
 8008332:	b140      	cbz	r0, 8008346 <_svfiprintf_r+0x152>
 8008334:	2340      	movs	r3, #64	; 0x40
 8008336:	eba0 000a 	sub.w	r0, r0, sl
 800833a:	fa03 f000 	lsl.w	r0, r3, r0
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	4303      	orrs	r3, r0
 8008342:	3401      	adds	r4, #1
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834a:	4826      	ldr	r0, [pc, #152]	; (80083e4 <_svfiprintf_r+0x1f0>)
 800834c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008350:	2206      	movs	r2, #6
 8008352:	f7f7 ff55 	bl	8000200 <memchr>
 8008356:	2800      	cmp	r0, #0
 8008358:	d038      	beq.n	80083cc <_svfiprintf_r+0x1d8>
 800835a:	4b23      	ldr	r3, [pc, #140]	; (80083e8 <_svfiprintf_r+0x1f4>)
 800835c:	bb1b      	cbnz	r3, 80083a6 <_svfiprintf_r+0x1b2>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	3307      	adds	r3, #7
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	3308      	adds	r3, #8
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	4433      	add	r3, r6
 800836e:	9309      	str	r3, [sp, #36]	; 0x24
 8008370:	e767      	b.n	8008242 <_svfiprintf_r+0x4e>
 8008372:	fb0c 3202 	mla	r2, ip, r2, r3
 8008376:	460c      	mov	r4, r1
 8008378:	2001      	movs	r0, #1
 800837a:	e7a5      	b.n	80082c8 <_svfiprintf_r+0xd4>
 800837c:	2300      	movs	r3, #0
 800837e:	3401      	adds	r4, #1
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	4619      	mov	r1, r3
 8008384:	f04f 0c0a 	mov.w	ip, #10
 8008388:	4620      	mov	r0, r4
 800838a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800838e:	3a30      	subs	r2, #48	; 0x30
 8008390:	2a09      	cmp	r2, #9
 8008392:	d903      	bls.n	800839c <_svfiprintf_r+0x1a8>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0c5      	beq.n	8008324 <_svfiprintf_r+0x130>
 8008398:	9105      	str	r1, [sp, #20]
 800839a:	e7c3      	b.n	8008324 <_svfiprintf_r+0x130>
 800839c:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a0:	4604      	mov	r4, r0
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7f0      	b.n	8008388 <_svfiprintf_r+0x194>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <_svfiprintf_r+0x1f8>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	4638      	mov	r0, r7
 80083b2:	f3af 8000 	nop.w
 80083b6:	1c42      	adds	r2, r0, #1
 80083b8:	4606      	mov	r6, r0
 80083ba:	d1d6      	bne.n	800836a <_svfiprintf_r+0x176>
 80083bc:	89ab      	ldrh	r3, [r5, #12]
 80083be:	065b      	lsls	r3, r3, #25
 80083c0:	f53f af2c 	bmi.w	800821c <_svfiprintf_r+0x28>
 80083c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c6:	b01d      	add	sp, #116	; 0x74
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	ab03      	add	r3, sp, #12
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	462a      	mov	r2, r5
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <_svfiprintf_r+0x1f8>)
 80083d4:	a904      	add	r1, sp, #16
 80083d6:	4638      	mov	r0, r7
 80083d8:	f000 f87a 	bl	80084d0 <_printf_i>
 80083dc:	e7eb      	b.n	80083b6 <_svfiprintf_r+0x1c2>
 80083de:	bf00      	nop
 80083e0:	08008948 	.word	0x08008948
 80083e4:	08008952 	.word	0x08008952
 80083e8:	00000000 	.word	0x00000000
 80083ec:	0800813d 	.word	0x0800813d
 80083f0:	0800894e 	.word	0x0800894e

080083f4 <_printf_common>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	4616      	mov	r6, r2
 80083fa:	4699      	mov	r9, r3
 80083fc:	688a      	ldr	r2, [r1, #8]
 80083fe:	690b      	ldr	r3, [r1, #16]
 8008400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008404:	4293      	cmp	r3, r2
 8008406:	bfb8      	it	lt
 8008408:	4613      	movlt	r3, r2
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008410:	4607      	mov	r7, r0
 8008412:	460c      	mov	r4, r1
 8008414:	b10a      	cbz	r2, 800841a <_printf_common+0x26>
 8008416:	3301      	adds	r3, #1
 8008418:	6033      	str	r3, [r6, #0]
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	0699      	lsls	r1, r3, #26
 800841e:	bf42      	ittt	mi
 8008420:	6833      	ldrmi	r3, [r6, #0]
 8008422:	3302      	addmi	r3, #2
 8008424:	6033      	strmi	r3, [r6, #0]
 8008426:	6825      	ldr	r5, [r4, #0]
 8008428:	f015 0506 	ands.w	r5, r5, #6
 800842c:	d106      	bne.n	800843c <_printf_common+0x48>
 800842e:	f104 0a19 	add.w	sl, r4, #25
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	6832      	ldr	r2, [r6, #0]
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	42ab      	cmp	r3, r5
 800843a:	dc26      	bgt.n	800848a <_printf_common+0x96>
 800843c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008440:	1e13      	subs	r3, r2, #0
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	2301      	movne	r3, #1
 8008448:	0692      	lsls	r2, r2, #26
 800844a:	d42b      	bmi.n	80084a4 <_printf_common+0xb0>
 800844c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008450:	4649      	mov	r1, r9
 8008452:	4638      	mov	r0, r7
 8008454:	47c0      	blx	r8
 8008456:	3001      	adds	r0, #1
 8008458:	d01e      	beq.n	8008498 <_printf_common+0xa4>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	68e5      	ldr	r5, [r4, #12]
 800845e:	6832      	ldr	r2, [r6, #0]
 8008460:	f003 0306 	and.w	r3, r3, #6
 8008464:	2b04      	cmp	r3, #4
 8008466:	bf08      	it	eq
 8008468:	1aad      	subeq	r5, r5, r2
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	bf0c      	ite	eq
 8008470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008474:	2500      	movne	r5, #0
 8008476:	4293      	cmp	r3, r2
 8008478:	bfc4      	itt	gt
 800847a:	1a9b      	subgt	r3, r3, r2
 800847c:	18ed      	addgt	r5, r5, r3
 800847e:	2600      	movs	r6, #0
 8008480:	341a      	adds	r4, #26
 8008482:	42b5      	cmp	r5, r6
 8008484:	d11a      	bne.n	80084bc <_printf_common+0xc8>
 8008486:	2000      	movs	r0, #0
 8008488:	e008      	b.n	800849c <_printf_common+0xa8>
 800848a:	2301      	movs	r3, #1
 800848c:	4652      	mov	r2, sl
 800848e:	4649      	mov	r1, r9
 8008490:	4638      	mov	r0, r7
 8008492:	47c0      	blx	r8
 8008494:	3001      	adds	r0, #1
 8008496:	d103      	bne.n	80084a0 <_printf_common+0xac>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	3501      	adds	r5, #1
 80084a2:	e7c6      	b.n	8008432 <_printf_common+0x3e>
 80084a4:	18e1      	adds	r1, r4, r3
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	2030      	movs	r0, #48	; 0x30
 80084aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ae:	4422      	add	r2, r4
 80084b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b8:	3302      	adds	r3, #2
 80084ba:	e7c7      	b.n	800844c <_printf_common+0x58>
 80084bc:	2301      	movs	r3, #1
 80084be:	4622      	mov	r2, r4
 80084c0:	4649      	mov	r1, r9
 80084c2:	4638      	mov	r0, r7
 80084c4:	47c0      	blx	r8
 80084c6:	3001      	adds	r0, #1
 80084c8:	d0e6      	beq.n	8008498 <_printf_common+0xa4>
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7d9      	b.n	8008482 <_printf_common+0x8e>
	...

080084d0 <_printf_i>:
 80084d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	7e0f      	ldrb	r7, [r1, #24]
 80084d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d8:	2f78      	cmp	r7, #120	; 0x78
 80084da:	4691      	mov	r9, r2
 80084dc:	4680      	mov	r8, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	469a      	mov	sl, r3
 80084e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084e6:	d807      	bhi.n	80084f8 <_printf_i+0x28>
 80084e8:	2f62      	cmp	r7, #98	; 0x62
 80084ea:	d80a      	bhi.n	8008502 <_printf_i+0x32>
 80084ec:	2f00      	cmp	r7, #0
 80084ee:	f000 80d8 	beq.w	80086a2 <_printf_i+0x1d2>
 80084f2:	2f58      	cmp	r7, #88	; 0x58
 80084f4:	f000 80a3 	beq.w	800863e <_printf_i+0x16e>
 80084f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008500:	e03a      	b.n	8008578 <_printf_i+0xa8>
 8008502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008506:	2b15      	cmp	r3, #21
 8008508:	d8f6      	bhi.n	80084f8 <_printf_i+0x28>
 800850a:	a101      	add	r1, pc, #4	; (adr r1, 8008510 <_printf_i+0x40>)
 800850c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008510:	08008569 	.word	0x08008569
 8008514:	0800857d 	.word	0x0800857d
 8008518:	080084f9 	.word	0x080084f9
 800851c:	080084f9 	.word	0x080084f9
 8008520:	080084f9 	.word	0x080084f9
 8008524:	080084f9 	.word	0x080084f9
 8008528:	0800857d 	.word	0x0800857d
 800852c:	080084f9 	.word	0x080084f9
 8008530:	080084f9 	.word	0x080084f9
 8008534:	080084f9 	.word	0x080084f9
 8008538:	080084f9 	.word	0x080084f9
 800853c:	08008689 	.word	0x08008689
 8008540:	080085ad 	.word	0x080085ad
 8008544:	0800866b 	.word	0x0800866b
 8008548:	080084f9 	.word	0x080084f9
 800854c:	080084f9 	.word	0x080084f9
 8008550:	080086ab 	.word	0x080086ab
 8008554:	080084f9 	.word	0x080084f9
 8008558:	080085ad 	.word	0x080085ad
 800855c:	080084f9 	.word	0x080084f9
 8008560:	080084f9 	.word	0x080084f9
 8008564:	08008673 	.word	0x08008673
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	602a      	str	r2, [r5, #0]
 8008570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008578:	2301      	movs	r3, #1
 800857a:	e0a3      	b.n	80086c4 <_printf_i+0x1f4>
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	6829      	ldr	r1, [r5, #0]
 8008580:	0606      	lsls	r6, r0, #24
 8008582:	f101 0304 	add.w	r3, r1, #4
 8008586:	d50a      	bpl.n	800859e <_printf_i+0xce>
 8008588:	680e      	ldr	r6, [r1, #0]
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	2e00      	cmp	r6, #0
 800858e:	da03      	bge.n	8008598 <_printf_i+0xc8>
 8008590:	232d      	movs	r3, #45	; 0x2d
 8008592:	4276      	negs	r6, r6
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008598:	485e      	ldr	r0, [pc, #376]	; (8008714 <_printf_i+0x244>)
 800859a:	230a      	movs	r3, #10
 800859c:	e019      	b.n	80085d2 <_printf_i+0x102>
 800859e:	680e      	ldr	r6, [r1, #0]
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085a6:	bf18      	it	ne
 80085a8:	b236      	sxthne	r6, r6
 80085aa:	e7ef      	b.n	800858c <_printf_i+0xbc>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1d19      	adds	r1, r3, #4
 80085b2:	6029      	str	r1, [r5, #0]
 80085b4:	0601      	lsls	r1, r0, #24
 80085b6:	d501      	bpl.n	80085bc <_printf_i+0xec>
 80085b8:	681e      	ldr	r6, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <_printf_i+0xf2>
 80085bc:	0646      	lsls	r6, r0, #25
 80085be:	d5fb      	bpl.n	80085b8 <_printf_i+0xe8>
 80085c0:	881e      	ldrh	r6, [r3, #0]
 80085c2:	4854      	ldr	r0, [pc, #336]	; (8008714 <_printf_i+0x244>)
 80085c4:	2f6f      	cmp	r7, #111	; 0x6f
 80085c6:	bf0c      	ite	eq
 80085c8:	2308      	moveq	r3, #8
 80085ca:	230a      	movne	r3, #10
 80085cc:	2100      	movs	r1, #0
 80085ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085d2:	6865      	ldr	r5, [r4, #4]
 80085d4:	60a5      	str	r5, [r4, #8]
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	bfa2      	ittt	ge
 80085da:	6821      	ldrge	r1, [r4, #0]
 80085dc:	f021 0104 	bicge.w	r1, r1, #4
 80085e0:	6021      	strge	r1, [r4, #0]
 80085e2:	b90e      	cbnz	r6, 80085e8 <_printf_i+0x118>
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d04d      	beq.n	8008684 <_printf_i+0x1b4>
 80085e8:	4615      	mov	r5, r2
 80085ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80085ee:	fb03 6711 	mls	r7, r3, r1, r6
 80085f2:	5dc7      	ldrb	r7, [r0, r7]
 80085f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085f8:	4637      	mov	r7, r6
 80085fa:	42bb      	cmp	r3, r7
 80085fc:	460e      	mov	r6, r1
 80085fe:	d9f4      	bls.n	80085ea <_printf_i+0x11a>
 8008600:	2b08      	cmp	r3, #8
 8008602:	d10b      	bne.n	800861c <_printf_i+0x14c>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	07de      	lsls	r6, r3, #31
 8008608:	d508      	bpl.n	800861c <_printf_i+0x14c>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	6861      	ldr	r1, [r4, #4]
 800860e:	4299      	cmp	r1, r3
 8008610:	bfde      	ittt	le
 8008612:	2330      	movle	r3, #48	; 0x30
 8008614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800861c:	1b52      	subs	r2, r2, r5
 800861e:	6122      	str	r2, [r4, #16]
 8008620:	f8cd a000 	str.w	sl, [sp]
 8008624:	464b      	mov	r3, r9
 8008626:	aa03      	add	r2, sp, #12
 8008628:	4621      	mov	r1, r4
 800862a:	4640      	mov	r0, r8
 800862c:	f7ff fee2 	bl	80083f4 <_printf_common>
 8008630:	3001      	adds	r0, #1
 8008632:	d14c      	bne.n	80086ce <_printf_i+0x1fe>
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	b004      	add	sp, #16
 800863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863e:	4835      	ldr	r0, [pc, #212]	; (8008714 <_printf_i+0x244>)
 8008640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f851 6b04 	ldr.w	r6, [r1], #4
 800864c:	6029      	str	r1, [r5, #0]
 800864e:	061d      	lsls	r5, r3, #24
 8008650:	d514      	bpl.n	800867c <_printf_i+0x1ac>
 8008652:	07df      	lsls	r7, r3, #31
 8008654:	bf44      	itt	mi
 8008656:	f043 0320 	orrmi.w	r3, r3, #32
 800865a:	6023      	strmi	r3, [r4, #0]
 800865c:	b91e      	cbnz	r6, 8008666 <_printf_i+0x196>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	f023 0320 	bic.w	r3, r3, #32
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	2310      	movs	r3, #16
 8008668:	e7b0      	b.n	80085cc <_printf_i+0xfc>
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	f043 0320 	orr.w	r3, r3, #32
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	2378      	movs	r3, #120	; 0x78
 8008674:	4828      	ldr	r0, [pc, #160]	; (8008718 <_printf_i+0x248>)
 8008676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800867a:	e7e3      	b.n	8008644 <_printf_i+0x174>
 800867c:	0659      	lsls	r1, r3, #25
 800867e:	bf48      	it	mi
 8008680:	b2b6      	uxthmi	r6, r6
 8008682:	e7e6      	b.n	8008652 <_printf_i+0x182>
 8008684:	4615      	mov	r5, r2
 8008686:	e7bb      	b.n	8008600 <_printf_i+0x130>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	6826      	ldr	r6, [r4, #0]
 800868c:	6961      	ldr	r1, [r4, #20]
 800868e:	1d18      	adds	r0, r3, #4
 8008690:	6028      	str	r0, [r5, #0]
 8008692:	0635      	lsls	r5, r6, #24
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	d501      	bpl.n	800869c <_printf_i+0x1cc>
 8008698:	6019      	str	r1, [r3, #0]
 800869a:	e002      	b.n	80086a2 <_printf_i+0x1d2>
 800869c:	0670      	lsls	r0, r6, #25
 800869e:	d5fb      	bpl.n	8008698 <_printf_i+0x1c8>
 80086a0:	8019      	strh	r1, [r3, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	6123      	str	r3, [r4, #16]
 80086a6:	4615      	mov	r5, r2
 80086a8:	e7ba      	b.n	8008620 <_printf_i+0x150>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	1d1a      	adds	r2, r3, #4
 80086ae:	602a      	str	r2, [r5, #0]
 80086b0:	681d      	ldr	r5, [r3, #0]
 80086b2:	6862      	ldr	r2, [r4, #4]
 80086b4:	2100      	movs	r1, #0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7f7 fda2 	bl	8000200 <memchr>
 80086bc:	b108      	cbz	r0, 80086c2 <_printf_i+0x1f2>
 80086be:	1b40      	subs	r0, r0, r5
 80086c0:	6060      	str	r0, [r4, #4]
 80086c2:	6863      	ldr	r3, [r4, #4]
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	2300      	movs	r3, #0
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086cc:	e7a8      	b.n	8008620 <_printf_i+0x150>
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	462a      	mov	r2, r5
 80086d2:	4649      	mov	r1, r9
 80086d4:	4640      	mov	r0, r8
 80086d6:	47d0      	blx	sl
 80086d8:	3001      	adds	r0, #1
 80086da:	d0ab      	beq.n	8008634 <_printf_i+0x164>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	079b      	lsls	r3, r3, #30
 80086e0:	d413      	bmi.n	800870a <_printf_i+0x23a>
 80086e2:	68e0      	ldr	r0, [r4, #12]
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	4298      	cmp	r0, r3
 80086e8:	bfb8      	it	lt
 80086ea:	4618      	movlt	r0, r3
 80086ec:	e7a4      	b.n	8008638 <_printf_i+0x168>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4632      	mov	r2, r6
 80086f2:	4649      	mov	r1, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	47d0      	blx	sl
 80086f8:	3001      	adds	r0, #1
 80086fa:	d09b      	beq.n	8008634 <_printf_i+0x164>
 80086fc:	3501      	adds	r5, #1
 80086fe:	68e3      	ldr	r3, [r4, #12]
 8008700:	9903      	ldr	r1, [sp, #12]
 8008702:	1a5b      	subs	r3, r3, r1
 8008704:	42ab      	cmp	r3, r5
 8008706:	dcf2      	bgt.n	80086ee <_printf_i+0x21e>
 8008708:	e7eb      	b.n	80086e2 <_printf_i+0x212>
 800870a:	2500      	movs	r5, #0
 800870c:	f104 0619 	add.w	r6, r4, #25
 8008710:	e7f5      	b.n	80086fe <_printf_i+0x22e>
 8008712:	bf00      	nop
 8008714:	08008959 	.word	0x08008959
 8008718:	0800896a 	.word	0x0800896a

0800871c <memmove>:
 800871c:	4288      	cmp	r0, r1
 800871e:	b510      	push	{r4, lr}
 8008720:	eb01 0402 	add.w	r4, r1, r2
 8008724:	d902      	bls.n	800872c <memmove+0x10>
 8008726:	4284      	cmp	r4, r0
 8008728:	4623      	mov	r3, r4
 800872a:	d807      	bhi.n	800873c <memmove+0x20>
 800872c:	1e43      	subs	r3, r0, #1
 800872e:	42a1      	cmp	r1, r4
 8008730:	d008      	beq.n	8008744 <memmove+0x28>
 8008732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800873a:	e7f8      	b.n	800872e <memmove+0x12>
 800873c:	4402      	add	r2, r0
 800873e:	4601      	mov	r1, r0
 8008740:	428a      	cmp	r2, r1
 8008742:	d100      	bne.n	8008746 <memmove+0x2a>
 8008744:	bd10      	pop	{r4, pc}
 8008746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800874a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800874e:	e7f7      	b.n	8008740 <memmove+0x24>

08008750 <_realloc_r>:
 8008750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	4680      	mov	r8, r0
 8008756:	4614      	mov	r4, r2
 8008758:	460e      	mov	r6, r1
 800875a:	b921      	cbnz	r1, 8008766 <_realloc_r+0x16>
 800875c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	4611      	mov	r1, r2
 8008762:	f7ff bb85 	b.w	8007e70 <_malloc_r>
 8008766:	b92a      	cbnz	r2, 8008774 <_realloc_r+0x24>
 8008768:	f7ff fc9c 	bl	80080a4 <_free_r>
 800876c:	4625      	mov	r5, r4
 800876e:	4628      	mov	r0, r5
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	f000 f81b 	bl	80087ae <_malloc_usable_size_r>
 8008778:	4284      	cmp	r4, r0
 800877a:	4607      	mov	r7, r0
 800877c:	d802      	bhi.n	8008784 <_realloc_r+0x34>
 800877e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008782:	d812      	bhi.n	80087aa <_realloc_r+0x5a>
 8008784:	4621      	mov	r1, r4
 8008786:	4640      	mov	r0, r8
 8008788:	f7ff fb72 	bl	8007e70 <_malloc_r>
 800878c:	4605      	mov	r5, r0
 800878e:	2800      	cmp	r0, #0
 8008790:	d0ed      	beq.n	800876e <_realloc_r+0x1e>
 8008792:	42bc      	cmp	r4, r7
 8008794:	4622      	mov	r2, r4
 8008796:	4631      	mov	r1, r6
 8008798:	bf28      	it	cs
 800879a:	463a      	movcs	r2, r7
 800879c:	f7ff fb32 	bl	8007e04 <memcpy>
 80087a0:	4631      	mov	r1, r6
 80087a2:	4640      	mov	r0, r8
 80087a4:	f7ff fc7e 	bl	80080a4 <_free_r>
 80087a8:	e7e1      	b.n	800876e <_realloc_r+0x1e>
 80087aa:	4635      	mov	r5, r6
 80087ac:	e7df      	b.n	800876e <_realloc_r+0x1e>

080087ae <_malloc_usable_size_r>:
 80087ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b2:	1f18      	subs	r0, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfbc      	itt	lt
 80087b8:	580b      	ldrlt	r3, [r1, r0]
 80087ba:	18c0      	addlt	r0, r0, r3
 80087bc:	4770      	bx	lr
	...

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
